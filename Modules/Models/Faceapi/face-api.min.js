/*
  Face-API
  homepage: <https://github.com/vladmandic/face-api>
  author: <https://github.com/vladmandic>'
*/

"use strict"; var faceapi = (() => {
    var px = Object.defineProperty; var NR = Object.getOwnPropertyDescriptor; var TR = Object.getOwnPropertyNames; var CR = Object.prototype.hasOwnProperty; var ER = (e => typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, { get: (t, n) => (typeof require != "undefined" ? require : t)[n] }) : e)(function (e) { if (typeof require != "undefined") return require.apply(this, arguments); throw Error('Dynamic require of "' + e + '" is not supported') }); var $h = (e, t) => { for (var n in t) px(e, n, { get: t[n], enumerable: !0 }) }, _R = (e, t, n, a) => { if (t && typeof t == "object" || typeof t == "function") for (let r of TR(t)) !CR.call(e, r) && r !== n && px(e, r, { get: () => t[r], enumerable: !(a = NR(t, r)) || a.enumerable }); return e }; var AR = e => _R(px({}, "__esModule", { value: !0 }), e); var Xge = {}; $h(Xge, { AgeGenderNet: () => Kd, BoundingBox: () => il, Box: () => on, ComposableTask: () => Sa, ComputeAllFaceDescriptorsTask: () => Hr, ComputeFaceDescriptorsTaskBase: () => Jd, ComputeSingleFaceDescriptorTask: () => qr, DetectAllFaceLandmarksTask: () => eh, DetectAllFacesTask: () => Hp, DetectFaceLandmarksTaskBase: () => Qd, DetectFacesTaskBase: () => nh, DetectSingleFaceLandmarksTask: () => th, DetectSingleFaceTask: () => ah, Dimensions: () => Un, FACE_EXPRESSION_LABELS: () => Hk, FaceDetection: () => Tt, FaceDetectionNet: () => Jk, FaceExpressionNet: () => jd, FaceExpressions: () => Vr, FaceLandmark68Net: () => bl, FaceLandmark68TinyNet: () => Xd, FaceLandmarkNet: () => Xk, FaceLandmarks: () => sa, FaceLandmarks5: () => Fk, FaceLandmarks68: () => ul, FaceMatch: () => Ap, FaceMatcher: () => tI, FaceRecognitionNet: () => yl, Gender: () => vg, LabeledBox: () => Fp, LabeledFaceDescriptors: () => Ls, NetInput: () => xr, NeuralNetwork: () => un, ObjectDetection: () => ol, Point: () => Ue, PredictedBox: () => $k, Rect: () => ll, SsdMobilenetv1: () => zs, SsdMobilenetv1Options: () => Ia, TinyFaceDetector: () => kl, TinyFaceDetectorOptions: () => Zd, TinyYolov2: () => vl, TinyYolov2Options: () => Ja, allFaces: () => qge, allFacesSsdMobilenetv1: () => GD, allFacesTinyYolov2: () => Hge, awaitMediaLoaded: () => zk, bufferToImage: () => Wk, computeFaceDescriptor: () => Fge, createCanvas: () => ml, createCanvasFromMedia: () => Ud, createFaceDetectionNet: () => Sge, createFaceRecognitionNet: () => hge, createSsdMobilenetv1: () => _D, createTinyFaceDetector: () => jge, createTinyYolov2: () => Cge, detectAllFaces: () => Ag, detectFaceLandmarks: () => VD, detectFaceLandmarksTiny: () => Age, detectLandmarks: () => Uge, detectSingleFace: () => Gge, draw: () => jk, env: () => tt, euclideanDistance: () => eI, extendWithAge: () => Sg, extendWithFaceDescriptor: () => Ig, extendWithFaceDetection: () => pl, extendWithFaceExpressions: () => gg, extendWithFaceLandmarks: () => Wp, extendWithGender: () => Ng, extractFaceTensors: () => Rp, extractFaces: () => Dp, fetchImage: () => Qfe, fetchJson: () => Uk, fetchNetWeights: () => ege, fetchOrThrow: () => Br, fetchVideo: () => tge, getContext2dOrThrow: () => Gn, getMediaDimensions: () => hl, imageTensorToCanvas: () => Bk, imageToSquare: () => Vk, inverseSigmoid: () => qfe, iou: () => Ck, isMediaElement: () => lg, isMediaLoaded: () => Vd, isWithAge: () => mge, isWithFaceDetection: () => yr, isWithFaceExpressions: () => qk, isWithFaceLandmarks: () => gl, isWithGender: () => fge, loadAgeGenderModel: () => Wge, loadFaceDetectionModel: () => Bge, loadFaceExpressionModel: () => zge, loadFaceLandmarkModel: () => Oge, loadFaceLandmarkTinyModel: () => Pge, loadFaceRecognitionModel: () => Lge, loadSsdMobilenetv1Model: () => UD, loadTinyFaceDetectorModel: () => Rge, loadTinyYolov2Model: () => Mge, loadWeightMap: () => Gk, locateFaces: () => Vge, matchDimensions: () => nge, minBbox: () => Ek, nets: () => nt, nonMaxSuppression: () => _k, normalize: () => Ya, padToSquare: () => Ak, predictAgeAndGender: () => Dge, recognizeFaceExpressions: () => $ge, resizeResults: () => HD, resolveInput: () => cl, shuffleArray: () => Hfe, sigmoid: () => zd, ssdMobilenetv1: () => BD, tf: () => Oe, tinyFaceDetector: () => Ege, tinyYolov2: () => _ge, toNetInput: () => vt, utils: () => Tk, validateConfig: () => Qk, version: () => Kge }); var Oe = {}; $h(Oe, { Abs: () => uu, Acos: () => Ci, Acosh: () => Ei, AdadeltaOptimizer: () => Yw, AdagradOptimizer: () => Zw, AdamOptimizer: () => Jw, AdamaxOptimizer: () => Qw, Add: () => Is, AddN: () => _i, All: () => pu, Any: () => cu, ArgMax: () => du, ArgMin: () => hu, Asin: () => Ai, Asinh: () => Fi, Atan: () => $i, Atan2: () => Ri, Atanh: () => Di, AvgPool: () => Mi, AvgPool3D: () => mu, AvgPool3DGrad: () => Wc, AvgPoolGrad: () => zc, BackendWasm: () => rD, BatchMatMul: () => Oi, BatchToSpaceND: () => fu, Bincount: () => gu, BitwiseAnd: () => bu, BroadcastArgs: () => Bc, BroadcastTo: () => hN, Callback: () => aE, CallbackList: () => J2, Cast: () => Pi, Ceil: () => Li, ClipByValue: () => Ss, Complex: () => Mm, ComplexAbs: () => Vc, Concat: () => yu, Conv2D: () => zi, Conv2DBackpropFilter: () => Om, Conv2DBackpropInput: () => Wi, Conv3D: () => Bi, Conv3DBackpropFilterV2: () => xu, Conv3DBackpropInputV2: () => vu, Cos: () => Vi, Cosh: () => Ui, CropAndResize: () => ku, Cumprod: () => wu, Cumsum: () => Gi, CustomCallback: () => eC, DataStorage: () => $m, DenseBincount: () => Uc, DepthToSpace: () => Iu, DepthwiseConv2dNative: () => Hi, DepthwiseConv2dNativeBackpropFilter: () => Pm, DepthwiseConv2dNativeBackpropInput: () => Lm, Diag: () => Gc, Dilation2D: () => qi, Dilation2DBackpropFilter: () => jl, Dilation2DBackpropInput: () => ql, Draw: () => zm, ENV: () => Dv, EarlyStopping: () => rE, Einsum: () => Wm, Elu: () => Ki, EluGrad: () => Su, Environment: () => cN, Equal: () => Nu, Erf: () => Xi, Exp: () => Yi, ExpandDims: () => Tu, Expm1: () => Zi, FFT: () => Bm, Fill: () => Hc, FlipLeftRight: () => Cu, Floor: () => Ji, FloorDiv: () => Qi, FromPixels: () => sm, FusedBatchNorm: () => eo, FusedConv2D: () => li, FusedDepthwiseConv2D: () => ui, GPGPUContext: () => em, GatherNd: () => _u, GatherV2: () => Eu, GraphModel: () => z1, Greater: () => Au, GreaterEqual: () => to, History: () => Q2, IFFT: () => Vm, Identity: () => no, Imag: () => Um, InputSpec: () => zt, IsFinite: () => ao, IsInf: () => ro, IsNan: () => so, KernelBackend: () => Pc, LRN: () => uo, LRNGrad: () => Pu, LayerVariable: () => G2, LayersModel: () => _r, LeakyRelu: () => io, Less: () => Fu, LessEqual: () => $u, LinSpace: () => Du, Log: () => oo, Log1p: () => lo, LogSoftmax: () => fN, LogicalAnd: () => Ru, LogicalNot: () => Mu, LogicalOr: () => Ou, LogicalXor: () => mN, LowerBound: () => wM, MathBackendCPU: () => V1, MathBackendWebGL: () => gk, MatrixBandPart: () => kM, Max: () => po, MaxPool: () => ho, MaxPool3D: () => Lu, MaxPool3DGrad: () => jc, MaxPoolGrad: () => qc, MaxPoolWithArgmax: () => Kc, Maximum: () => co, Mean: () => mo, Min: () => fo, Minimum: () => go, MirrorPad: () => bo, Mod: () => yo, MomentumOptimizer: () => e0, Multinomial: () => zu, Multiply: () => xo, Neg: () => Wu, NonMaxSuppressionV3: () => Vu, NonMaxSuppressionV4: () => Uu, NonMaxSuppressionV5: () => Gu, NotEqual: () => Bu, OP_SCOPE_SUFFIX: () => Lv, OneHot: () => vo, OnesLike: () => Hu, Optimizer: () => Or, OptimizerConstructors: () => I2, Pack: () => qu, PadV2: () => wo, Pool: () => IM, Pow: () => ko, Prelu: () => Io, Prod: () => So, RMSPropOptimizer: () => t0, RNN: () => Pr, RaggedGather: () => Gm, RaggedRange: () => Hm, RaggedTensorToTensor: () => qm, Range: () => Xc, Rank: () => _x, Real: () => jm, RealDiv: () => ji, Reciprocal: () => No, Reduction: () => wn, Relu: () => To, Relu6: () => _o, Reshape: () => ju, ResizeBilinear: () => Eo, ResizeBilinearGrad: () => Xu, ResizeNearestNeighbor: () => Co, ResizeNearestNeighborGrad: () => Ku, Reverse: () => Ao, RotateWithOffset: () => pp, Round: () => Fo, Rsqrt: () => $o, SGDOptimizer: () => Ef, ScatterNd: () => Yu, SearchSorted: () => Ju, Select: () => Qu, Selu: () => Do, Sequential: () => Bf, Sigmoid: () => Po, Sign: () => Oo, Sin: () => Ro, Sinh: () => Mo, Slice: () => ep, Softmax: () => Bo, Softplus: () => Lo, SpaceToBatchND: () => tp, SparseFillEmptyRows: () => Yc, SparseReshape: () => ap, SparseSegmentMean: () => Zc, SparseSegmentSum: () => Jc, SparseToDense: () => rp, SplitV: () => np, Sqrt: () => zo, Square: () => Qc, SquaredDifference: () => Vo, StaticRegexReplace: () => ed, Step: () => Ts, StridedSlice: () => sp, StringNGrams: () => td, StringSplit: () => nd, StringToHashBucketFast: () => ad, Sub: () => Uo, Sum: () => Wo, SymbolicTensor: () => Ha, Tan: () => Go, Tanh: () => Ho, Tensor: () => Ce, TensorBuffer: () => Wt, TensorScatterUpdate: () => Zu, Tile: () => Ns, TopK: () => ip, Transform: () => op, Transpose: () => Er, Unique: () => rd, Unpack: () => lp, UnsortedSegmentSum: () => sd, UpperBound: () => SM, Variable: () => cs, ZerosLike: () => up, _FusedMatMul: () => oi, abs: () => Lt, acos: () => Gv, acosh: () => Hv, add: () => X, addN: () => VN, all: () => Jm, any: () => Sc, argMax: () => hi, argMin: () => qv, asin: () => jv, asinh: () => Kv, atan: () => Xv, atan2: () => Yv, atanh: () => Zv, avgPool: () => xa, avgPool3d: () => Qv, backend: () => Wv, backend_util: () => T, basicLSTMCell: () => qN, batchNorm: () => Es, batchNorm2d: () => ew, batchNorm3d: () => tw, batchNorm4d: () => nw, batchToSpaceND: () => dd, bincount: () => aw, bitwiseAnd: () => jN, booleanMaskAsync: () => OT, broadcastArgs: () => KN, broadcastTo: () => ri, broadcast_util: () => cp, browser: () => Xo, buffer: () => Pe, callbacks: () => xj, cast: () => re, ceil: () => rw, clipByValue: () => an, clone: () => or, complex: () => Ar, concat: () => et, concat1d: () => sw, concat2d: () => iw, concat3d: () => ow, concat4d: () => lw, constraints: () => K2, conv1d: () => Qm, conv2d: () => $t, conv2dTranspose: () => ef, conv3d: () => pw, conv3dTranspose: () => cw, copyRegisteredKernels: () => EM, cos: () => hd, cosh: () => tf, cosineWindow: () => If, cumprod: () => Cc, cumsum: () => nf, customGrad: () => cr, data: () => EE, denseBincount: () => um, deprecationWarn: () => zv, depthToSpace: () => dw, depthwiseConv2d: () => _s, deregisterOp: () => kj, device_util: () => ud, diag: () => YN, dilation2d: () => hw, disableDeprecationWarnings: () => iO, dispose: () => Ee, disposeVariables: () => oO, div: () => he, divNoNan: () => mw, dot: () => fw, dropout: () => Hw, einsum: () => Js, elu: () => dp, enableDebugMode: () => sO, enableProdMode: () => rO, enclosingPowerOfTwo: () => qw, engine: () => Ea, ensureShape: () => JN, env: () => G, equal: () => ea, erf: () => gw, euclideanNorm: () => xw, exp: () => mn, expandDims: () => Gt, expm1: () => vw, eye: () => af, fft: () => Id, fill: () => yn, findBackend: () => hO, findBackendFactory: () => mO, floor: () => mp, floorDiv: () => Zm, forceHalfFloat: () => JA, fused: () => tu, gather: () => fp, gatherND: () => WT, gather_util: () => r0, getBackend: () => _N, getGradient: () => Cx, getKernel: () => wc, getKernelsForBackend: () => im, getThreadsCount: () => Ofe, gpgpu_util: () => _A, grad: () => q3, grads: () => j3, greater: () => Tn, greaterEqual: () => Rr, ifft: () => eu, imag: () => md, image: () => Qn, inTopKAsync: () => BT, initializers: () => X2, input: () => mC, io: () => qt, irfft: () => bf, isFinite: () => ww, isInf: () => kw, isNaN: () => Iw, keep: () => Ht, kernel_impls: () => fr, layers: () => Y2, leakyRelu: () => fd, less: () => Yl, lessEqual: () => As, linalg: () => Xw, linspace: () => aT, loadGraphModel: () => E5, loadGraphModelSync: () => _5, loadLayersModel: () => f6, localResponseNormalization: () => Sw, log: () => ta, log1p: () => gd, logSigmoid: () => Nw, logSoftmax: () => sf, logSumExp: () => bd, logicalAnd: () => Fa, logicalNot: () => yd, logicalOr: () => of, logicalXor: () => Tw, losses: () => QT, lowerBound: () => sT, matMul: () => $e, math: () => p2, max: () => fa, maxPool: () => Dt, maxPool3d: () => Cw, maxPoolWithArgmax: () => iT, maximum: () => mr, mean: () => Et, memory: () => lm, meshgrid: () => oT, metrics: () => eE, min: () => Xl, minimum: () => fs, mirrorPad: () => Ew, mod: () => _w, model: () => y6, models: () => tE, moments: () => xd, movingAverage: () => PT, mul: () => z, multiRNNCell: () => lT, multinomial: () => uT, neg: () => yt, nextFrame: () => s0, norm: () => hp, notEqual: () => bi, oneHot: () => Zl, ones: () => On, onesLike: () => na, op: () => L, outerProduct: () => pT, pad: () => va, pad1d: () => cT, pad2d: () => dT, pad3d: () => hT, pad4d: () => mT, pool: () => Aw, pow: () => Fr, prelu: () => wd, print: () => Uv, prod: () => Fw, profile: () => lO, raggedGather: () => fT, raggedRange: () => gT, raggedTensorToTensor: () => bT, rand: () => yT, randomGamma: () => kT, randomNormal: () => uf, randomStandardNormal: () => IT, randomUniform: () => Fs, randomUniformInt: () => ST, range: () => yi, ready: () => cO, real: () => Jl, reciprocal: () => Ow, registerBackend: () => Ym, registerCallbackConstructor: () => v6, registerGradient: () => gN, registerKernel: () => id, registerOp: () => wj, regularizers: () => nE, relu: () => Ke, relu6: () => pf, removeBackend: () => dO, reshape: () => W, reverse: () => ya, reverse1d: () => NT, reverse2d: () => TT, reverse3d: () => CT, reverse4d: () => ET, rfft: () => Sd, round: () => cf, rsqrt: () => df, scalar: () => ve, scatterND: () => LT, scatter_util: () => xf, searchSorted: () => lf, selu: () => hf, separableConv2d: () => $s, sequential: () => x6, serialization: () => ne, setBackend: () => pO, setPlatform: () => fO, setThreadsCount: () => Mfe, setWasmPath: () => Dfe, setWasmPaths: () => Rfe, setWebGLContext: () => Q_, setdiff1dAsync: () => _T, shared: () => U1, sigmoid: () => ma, sign: () => Pw, signal: () => JT, sin: () => mf, sinh: () => ff, slice: () => Ve, slice1d: () => kd, slice2d: () => gf, slice3d: () => jo, slice4d: () => Ql, slice_util: () => Kt, softmax: () => ja, softplus: () => qo, spaceToBatchND: () => vd, sparse: () => e2, sparseToDense: () => zT, spectral: () => ZT, split: () => Pn, sqrt: () => hn, square: () => pt, squaredDifference: () => yf, squeeze: () => Ds, stack: () => Ft, step: () => Ko, stridedSlice: () => Lw, string: () => t2, sub: () => pe, sum: () => fe, sumOutType: () => Xm, tan: () => zw, tanh: () => fi, tensor: () => bn, tensor1d: () => qe, tensor2d: () => Aa, tensor3d: () => Nd, tensor4d: () => Da, tensor5d: () => AT, tensor6d: () => FT, tensorScatterUpdate: () => DT, tensor_util: () => Wa, test_util: () => xT, tidy: () => O, tile: () => Mn, time: () => uO, topk: () => Bw, train: () => Ys, transpose: () => De, truncatedNormal: () => wf, unique: () => Vw, unregisterGradient: () => CM, unregisterKernel: () => TM, unsortedSegmentSum: () => kf, unstack: () => dt, upcastType: () => ga, upperBound: () => RT, util: () => w, valueAndGrad: () => K3, valueAndGrads: () => X3, variable: () => Uw, variableGrads: () => rT, version: () => Ufe, version_converter: () => F5, version_core: () => x4, version_cpu: () => $8, version_layers: () => E0, version_wasm: () => Pfe, version_webgl: () => wee, webgl: () => kee, webgl_util: () => J_, where: () => nn, whereAsync: () => Gw, zeros: () => It, zerosLike: () => je }); var FR = Object.create, _v = Object.defineProperty, $R = Object.getOwnPropertyDescriptor, DR = Object.getOwnPropertyNames, RR = Object.getPrototypeOf, MR = Object.prototype.hasOwnProperty, Vt = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports), _e = (e, t) => { for (var n in t) _v(e, n, { get: t[n], enumerable: !0 }) }, OR = (e, t, n, a) => { if (t && typeof t == "object" || typeof t == "function") for (let r of DR(t)) !MR.call(e, r) && r !== n && _v(e, r, { get: () => t[r], enumerable: !(a = $R(t, r)) || a.enumerable }); return e }, ks = (e, t, n) => (n = e != null ? FR(RR(e)) : {}, OR(t || !e || !e.__esModule ? _v(n, "default", { value: e, enumerable: !0 }) : n, e)), PR = Vt((e, t) => { t.exports = a; var n = null; try { n = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports } catch (S) { } function a(S, M, B) { this.low = S | 0, this.high = M | 0, this.unsigned = !!B } a.prototype.__isLong__, Object.defineProperty(a.prototype, "__isLong__", { value: !0 }); function r(S) { return (S && S.__isLong__) === !0 } a.isLong = r; var s = {}, i = {}; function o(S, M) { var B, U, H; return M ? (S >>>= 0, (H = 0 <= S && S < 256) && (U = i[S], U) ? U : (B = u(S, (S | 0) < 0 ? -1 : 0, !0), H && (i[S] = B), B)) : (S |= 0, (H = -128 <= S && S < 128) && (U = s[S], U) ? U : (B = u(S, S < 0 ? -1 : 0, !1), H && (s[S] = B), B)) } a.fromInt = o; function l(S, M) { if (isNaN(S)) return M ? v : x; if (M) { if (S < 0) return v; if (S >= g) return F } else { if (S <= -b) return D; if (S + 1 >= b) return _ } return S < 0 ? l(-S, M).neg() : u(S % f | 0, S / f | 0, M) } a.fromNumber = l; function u(S, M, B) { return new a(S, M, B) } a.fromBits = u; var p = Math.pow; function d(S, M, B) { if (S.length === 0) throw Error("empty string"); if (S === "NaN" || S === "Infinity" || S === "+Infinity" || S === "-Infinity") return x; if (typeof M == "number" ? (B = M, M = !1) : M = !!M, B = B || 10, B < 2 || 36 < B) throw RangeError("radix"); var U; if ((U = S.indexOf("-")) > 0) throw Error("interior hyphen"); if (U === 0) return d(S.substring(1), M, B).neg(); for (var H = l(p(B, 8)), j = x, K = 0; K < S.length; K += 8) { var Z = Math.min(8, S.length - K), J = parseInt(S.substring(K, K + Z), B); if (Z < 8) { var ee = l(p(B, Z)); j = j.mul(ee).add(l(J)) } else j = j.mul(H), j = j.add(l(J)) } return j.unsigned = M, j } a.fromString = d; function c(S, M) { return typeof S == "number" ? l(S, M) : typeof S == "string" ? d(S, M) : u(S.low, S.high, typeof M == "boolean" ? M : S.unsigned) } a.fromValue = c; var h = 65536, m = 1 << 24, f = h * h, g = f * f, b = g / 2, y = o(m), x = o(0); a.ZERO = x; var v = o(0, !0); a.UZERO = v; var I = o(1); a.ONE = I; var N = o(1, !0); a.UONE = N; var C = o(-1); a.NEG_ONE = C; var _ = u(-1, 2147483647, !1); a.MAX_VALUE = _; var F = u(-1, -1, !0); a.MAX_UNSIGNED_VALUE = F; var D = u(0, -2147483648, !1); a.MIN_VALUE = D; var $ = a.prototype; $.toInt = function () { return this.unsigned ? this.low >>> 0 : this.low }, $.toNumber = function () { return this.unsigned ? (this.high >>> 0) * f + (this.low >>> 0) : this.high * f + (this.low >>> 0) }, $.toString = function (S) { if (S = S || 10, S < 2 || 36 < S) throw RangeError("radix"); if (this.isZero()) return "0"; if (this.isNegative()) if (this.eq(D)) { var M = l(S), B = this.div(M), U = B.mul(M).sub(this); return B.toString(S) + U.toInt().toString(S) } else return "-" + this.neg().toString(S); for (var H = l(p(S, 6), this.unsigned), j = this, K = ""; ;) { var Z = j.div(H), J = j.sub(Z.mul(H)).toInt() >>> 0, ee = J.toString(S); if (j = Z, j.isZero()) return ee + K; for (; ee.length < 6;)ee = "0" + ee; K = "" + ee + K } }, $.getHighBits = function () { return this.high }, $.getHighBitsUnsigned = function () { return this.high >>> 0 }, $.getLowBits = function () { return this.low }, $.getLowBitsUnsigned = function () { return this.low >>> 0 }, $.getNumBitsAbs = function () { if (this.isNegative()) return this.eq(D) ? 64 : this.neg().getNumBitsAbs(); for (var S = this.high != 0 ? this.high : this.low, M = 31; M > 0 && !(S & 1 << M); M--); return this.high != 0 ? M + 33 : M + 1 }, $.isZero = function () { return this.high === 0 && this.low === 0 }, $.eqz = $.isZero, $.isNegative = function () { return !this.unsigned && this.high < 0 }, $.isPositive = function () { return this.unsigned || this.high >= 0 }, $.isOdd = function () { return (this.low & 1) === 1 }, $.isEven = function () { return (this.low & 1) === 0 }, $.equals = function (S) { return r(S) || (S = c(S)), this.unsigned !== S.unsigned && this.high >>> 31 === 1 && S.high >>> 31 === 1 ? !1 : this.high === S.high && this.low === S.low }, $.eq = $.equals, $.notEquals = function (S) { return !this.eq(S) }, $.neq = $.notEquals, $.ne = $.notEquals, $.lessThan = function (S) { return this.comp(S) < 0 }, $.lt = $.lessThan, $.lessThanOrEqual = function (S) { return this.comp(S) <= 0 }, $.lte = $.lessThanOrEqual, $.le = $.lessThanOrEqual, $.greaterThan = function (S) { return this.comp(S) > 0 }, $.gt = $.greaterThan, $.greaterThanOrEqual = function (S) { return this.comp(S) >= 0 }, $.gte = $.greaterThanOrEqual, $.ge = $.greaterThanOrEqual, $.compare = function (S) { if (r(S) || (S = c(S)), this.eq(S)) return 0; var M = this.isNegative(), B = S.isNegative(); return M && !B ? -1 : !M && B ? 1 : this.unsigned ? S.high >>> 0 > this.high >>> 0 || S.high === this.high && S.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(S).isNegative() ? -1 : 1 }, $.comp = $.compare, $.negate = function () { return !this.unsigned && this.eq(D) ? D : this.not().add(I) }, $.neg = $.negate, $.add = function (S) { r(S) || (S = c(S)); var M = this.high >>> 16, B = this.high & 65535, U = this.low >>> 16, H = this.low & 65535, j = S.high >>> 16, K = S.high & 65535, Z = S.low >>> 16, J = S.low & 65535, ee = 0, ae = 0, te = 0, se = 0; return se += H + J, te += se >>> 16, se &= 65535, te += U + Z, ae += te >>> 16, te &= 65535, ae += B + K, ee += ae >>> 16, ae &= 65535, ee += M + j, ee &= 65535, u(te << 16 | se, ee << 16 | ae, this.unsigned) }, $.subtract = function (S) { return r(S) || (S = c(S)), this.add(S.neg()) }, $.sub = $.subtract, $.multiply = function (S) { if (this.isZero()) return x; if (r(S) || (S = c(S)), n) { var M = n.mul(this.low, this.high, S.low, S.high); return u(M, n.get_high(), this.unsigned) } if (S.isZero()) return x; if (this.eq(D)) return S.isOdd() ? D : x; if (S.eq(D)) return this.isOdd() ? D : x; if (this.isNegative()) return S.isNegative() ? this.neg().mul(S.neg()) : this.neg().mul(S).neg(); if (S.isNegative()) return this.mul(S.neg()).neg(); if (this.lt(y) && S.lt(y)) return l(this.toNumber() * S.toNumber(), this.unsigned); var B = this.high >>> 16, U = this.high & 65535, H = this.low >>> 16, j = this.low & 65535, K = S.high >>> 16, Z = S.high & 65535, J = S.low >>> 16, ee = S.low & 65535, ae = 0, te = 0, se = 0, ie = 0; return ie += j * ee, se += ie >>> 16, ie &= 65535, se += H * ee, te += se >>> 16, se &= 65535, se += j * J, te += se >>> 16, se &= 65535, te += U * ee, ae += te >>> 16, te &= 65535, te += H * J, ae += te >>> 16, te &= 65535, te += j * Z, ae += te >>> 16, te &= 65535, ae += B * ee + U * J + H * Z + j * K, ae &= 65535, u(se << 16 | ie, ae << 16 | te, this.unsigned) }, $.mul = $.multiply, $.divide = function (S) { if (r(S) || (S = c(S)), S.isZero()) throw Error("division by zero"); if (n) { if (!this.unsigned && this.high === -2147483648 && S.low === -1 && S.high === -1) return this; var M = (this.unsigned ? n.div_u : n.div_s)(this.low, this.high, S.low, S.high); return u(M, n.get_high(), this.unsigned) } if (this.isZero()) return this.unsigned ? v : x; var B, U, H; if (this.unsigned) { if (S.unsigned || (S = S.toUnsigned()), S.gt(this)) return v; if (S.gt(this.shru(1))) return N; H = v } else { if (this.eq(D)) { if (S.eq(I) || S.eq(C)) return D; if (S.eq(D)) return I; var j = this.shr(1); return B = j.div(S).shl(1), B.eq(x) ? S.isNegative() ? I : C : (U = this.sub(S.mul(B)), H = B.add(U.div(S)), H) } else if (S.eq(D)) return this.unsigned ? v : x; if (this.isNegative()) return S.isNegative() ? this.neg().div(S.neg()) : this.neg().div(S).neg(); if (S.isNegative()) return this.div(S.neg()).neg(); H = x } for (U = this; U.gte(S);) { B = Math.max(1, Math.floor(U.toNumber() / S.toNumber())); for (var K = Math.ceil(Math.log(B) / Math.LN2), Z = K <= 48 ? 1 : p(2, K - 48), J = l(B), ee = J.mul(S); ee.isNegative() || ee.gt(U);)B -= Z, J = l(B, this.unsigned), ee = J.mul(S); J.isZero() && (J = I), H = H.add(J), U = U.sub(ee) } return H }, $.div = $.divide, $.modulo = function (S) { if (r(S) || (S = c(S)), n) { var M = (this.unsigned ? n.rem_u : n.rem_s)(this.low, this.high, S.low, S.high); return u(M, n.get_high(), this.unsigned) } return this.sub(this.div(S).mul(S)) }, $.mod = $.modulo, $.rem = $.modulo, $.not = function () { return u(~this.low, ~this.high, this.unsigned) }, $.and = function (S) { return r(S) || (S = c(S)), u(this.low & S.low, this.high & S.high, this.unsigned) }, $.or = function (S) { return r(S) || (S = c(S)), u(this.low | S.low, this.high | S.high, this.unsigned) }, $.xor = function (S) { return r(S) || (S = c(S)), u(this.low ^ S.low, this.high ^ S.high, this.unsigned) }, $.shiftLeft = function (S) { return r(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? u(this.low << S, this.high << S | this.low >>> 32 - S, this.unsigned) : u(0, this.low << S - 32, this.unsigned) }, $.shl = $.shiftLeft, $.shiftRight = function (S) { return r(S) && (S = S.toInt()), (S &= 63) === 0 ? this : S < 32 ? u(this.low >>> S | this.high << 32 - S, this.high >> S, this.unsigned) : u(this.high >> S - 32, this.high >= 0 ? 0 : -1, this.unsigned) }, $.shr = $.shiftRight, $.shiftRightUnsigned = function (S) { if (r(S) && (S = S.toInt()), S &= 63, S === 0) return this; var M = this.high; if (S < 32) { var B = this.low; return u(B >>> S | M << 32 - S, M >>> S, this.unsigned) } else return S === 32 ? u(M, 0, this.unsigned) : u(M >>> S - 32, 0, this.unsigned) }, $.shru = $.shiftRightUnsigned, $.shr_u = $.shiftRightUnsigned, $.toSigned = function () { return this.unsigned ? u(this.low, this.high, !1) : this }, $.toUnsigned = function () { return this.unsigned ? this : u(this.low, this.high, !0) }, $.toBytes = function (S) { return S ? this.toBytesLE() : this.toBytesBE() }, $.toBytesLE = function () { var S = this.high, M = this.low; return [M & 255, M >>> 8 & 255, M >>> 16 & 255, M >>> 24, S & 255, S >>> 8 & 255, S >>> 16 & 255, S >>> 24] }, $.toBytesBE = function () { var S = this.high, M = this.low; return [S >>> 24, S >>> 16 & 255, S >>> 8 & 255, S & 255, M >>> 24, M >>> 16 & 255, M >>> 8 & 255, M & 255] }, a.fromBytes = function (S, M, B) { return B ? a.fromBytesLE(S, M) : a.fromBytesBE(S, M) }, a.fromBytesLE = function (S, M) { return new a(S[0] | S[1] << 8 | S[2] << 16 | S[3] << 24, S[4] | S[5] << 8 | S[6] << 16 | S[7] << 24, M) }, a.fromBytesBE = function (S, M) { return new a(S[4] << 24 | S[5] << 16 | S[6] << 8 | S[7], S[0] << 24 | S[1] << 16 | S[2] << 8 | S[3], M) } }), LR = Vt(() => { }), zR = Vt(() => { }), WR = Vt((e, t) => { (function (n, a, r) { function s(u) { var p = this, d = l(); p.next = function () { var c = 2091639 * p.s0 + p.c * 23283064365386963e-26; return p.s0 = p.s1, p.s1 = p.s2, p.s2 = c - (p.c = c | 0) }, p.c = 1, p.s0 = d(" "), p.s1 = d(" "), p.s2 = d(" "), p.s0 -= d(u), p.s0 < 0 && (p.s0 += 1), p.s1 -= d(u), p.s1 < 0 && (p.s1 += 1), p.s2 -= d(u), p.s2 < 0 && (p.s2 += 1), d = null } function i(u, p) { return p.c = u.c, p.s0 = u.s0, p.s1 = u.s1, p.s2 = u.s2, p } function o(u, p) { var d = new s(u), c = p && p.state, h = d.next; return h.int32 = function () { return d.next() * 4294967296 | 0 }, h.double = function () { return h() + (h() * 2097152 | 0) * 11102230246251565e-32 }, h.quick = h, c && (typeof c == "object" && i(c, d), h.state = function () { return i(d, {}) }), h } function l() { var u = 4022871197, p = function (d) { d = String(d); for (var c = 0; c < d.length; c++) { u += d.charCodeAt(c); var h = .02519603282416938 * u; u = h >>> 0, h -= u, h *= u, u = h >>> 0, h -= u, u += h * 4294967296 } return (u >>> 0) * 23283064365386963e-26 }; return p } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.alea = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), BR = Vt((e, t) => { (function (n, a, r) { function s(l) { var u = this, p = ""; u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.next = function () { var c = u.x ^ u.x << 11; return u.x = u.y, u.y = u.z, u.z = u.w, u.w ^= u.w >>> 19 ^ c ^ c >>> 8 }, l === (l | 0) ? u.x = l : p += l; for (var d = 0; d < p.length + 64; d++)u.x ^= p.charCodeAt(d) | 0, u.next() } function i(l, u) { return u.x = l.x, u.y = l.y, u.z = l.z, u.w = l.w, u } function o(l, u) { var p = new s(l), d = u && u.state, c = function () { return (p.next() >>> 0) / 4294967296 }; return c.double = function () { do var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21); while (f === 0); return f }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function () { return i(p, {}) }), c } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.xor128 = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), VR = Vt((e, t) => { (function (n, a, r) { function s(l) { var u = this, p = ""; u.next = function () { var c = u.x ^ u.x >>> 2; return u.x = u.y, u.y = u.z, u.z = u.w, u.w = u.v, (u.d = u.d + 362437 | 0) + (u.v = u.v ^ u.v << 4 ^ (c ^ c << 1)) | 0 }, u.x = 0, u.y = 0, u.z = 0, u.w = 0, u.v = 0, l === (l | 0) ? u.x = l : p += l; for (var d = 0; d < p.length + 64; d++)u.x ^= p.charCodeAt(d) | 0, d == p.length && (u.d = u.x << 10 ^ u.x >>> 4), u.next() } function i(l, u) { return u.x = l.x, u.y = l.y, u.z = l.z, u.w = l.w, u.v = l.v, u.d = l.d, u } function o(l, u) { var p = new s(l), d = u && u.state, c = function () { return (p.next() >>> 0) / 4294967296 }; return c.double = function () { do var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21); while (f === 0); return f }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function () { return i(p, {}) }), c } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.xorwow = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), UR = Vt((e, t) => { (function (n, a, r) { function s(l) { var u = this; u.next = function () { var d = u.x, c = u.i, h, m, f; return h = d[c], h ^= h >>> 7, m = h ^ h << 24, h = d[c + 1 & 7], m ^= h ^ h >>> 10, h = d[c + 3 & 7], m ^= h ^ h >>> 3, h = d[c + 4 & 7], m ^= h ^ h << 7, h = d[c + 7 & 7], h = h ^ h << 13, m ^= h ^ h << 9, d[c] = m, u.i = c + 1 & 7, m }; function p(d, c) { var h, m, f = []; if (c === (c | 0)) m = f[0] = c; else for (c = "" + c, h = 0; h < c.length; ++h)f[h & 7] = f[h & 7] << 15 ^ c.charCodeAt(h) + f[h + 1 & 7] << 13; for (; f.length < 8;)f.push(0); for (h = 0; h < 8 && f[h] === 0; ++h); for (h == 8 ? m = f[7] = -1 : m = f[h], d.x = f, d.i = 0, h = 256; h > 0; --h)d.next() } p(u, l) } function i(l, u) { return u.x = l.x.slice(), u.i = l.i, u } function o(l, u) { l == null && (l = +new Date); var p = new s(l), d = u && u.state, c = function () { return (p.next() >>> 0) / 4294967296 }; return c.double = function () { do var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21); while (f === 0); return f }, c.int32 = p.next, c.quick = c, d && (d.x && i(d, p), c.state = function () { return i(p, {}) }), c } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.xorshift7 = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), GR = Vt((e, t) => { (function (n, a, r) { function s(l) { var u = this; u.next = function () { var d = u.w, c = u.X, h = u.i, m, f; return u.w = d = d + 1640531527 | 0, f = c[h + 34 & 127], m = c[h = h + 1 & 127], f ^= f << 13, m ^= m << 17, f ^= f >>> 15, m ^= m >>> 12, f = c[h] = f ^ m, u.i = h, f + (d ^ d >>> 16) | 0 }; function p(d, c) { var h, m, f, g, b, y = [], x = 128; for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, x = Math.max(x, c.length)), f = 0, g = -32; g < x; ++g)c && (m ^= c.charCodeAt((g + 32) % c.length)), g === 0 && (b = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, g >= 0 && (b = b + 1640531527 | 0, h = y[g & 127] ^= m + b, f = h == 0 ? f + 1 : 0); for (f >= 128 && (y[(c && c.length || 0) & 127] = -1), f = 127, g = 4 * 128; g > 0; --g)m = y[f + 34 & 127], h = y[f = f + 1 & 127], m ^= m << 13, h ^= h << 17, m ^= m >>> 15, h ^= h >>> 12, y[f] = m ^ h; d.w = b, d.X = y, d.i = f } p(u, l) } function i(l, u) { return u.i = l.i, u.w = l.w, u.X = l.X.slice(), u } function o(l, u) { l == null && (l = +new Date); var p = new s(l), d = u && u.state, c = function () { return (p.next() >>> 0) / 4294967296 }; return c.double = function () { do var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21); while (f === 0); return f }, c.int32 = p.next, c.quick = c, d && (d.X && i(d, p), c.state = function () { return i(p, {}) }), c } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.xor4096 = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), HR = Vt((e, t) => { (function (n, a, r) { function s(l) { var u = this, p = ""; u.next = function () { var c = u.b, h = u.c, m = u.d, f = u.a; return c = c << 25 ^ c >>> 7 ^ h, h = h - m | 0, m = m << 24 ^ m >>> 8 ^ f, f = f - c | 0, u.b = c = c << 20 ^ c >>> 12 ^ h, u.c = h = h - m | 0, u.d = m << 16 ^ h >>> 16 ^ f, u.a = f - c | 0 }, u.a = 0, u.b = 0, u.c = -1640531527, u.d = 1367130551, l === Math.floor(l) ? (u.a = l / 4294967296 | 0, u.b = l | 0) : p += l; for (var d = 0; d < p.length + 20; d++)u.b ^= p.charCodeAt(d) | 0, u.next() } function i(l, u) { return u.a = l.a, u.b = l.b, u.c = l.c, u.d = l.d, u } function o(l, u) { var p = new s(l), d = u && u.state, c = function () { return (p.next() >>> 0) / 4294967296 }; return c.double = function () { do var h = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, f = (h + m) / (1 << 21); while (f === 0); return f }, c.int32 = p.next, c.quick = c, d && (typeof d == "object" && i(d, p), c.state = function () { return i(p, {}) }), c } a && a.exports ? a.exports = o : r && r.amd ? r(function () { return o }) : this.tychei = o })(e, typeof t == "object" && t, typeof define == "function" && define) }), qR = Vt(() => { }), jR = Vt((e, t) => { (function (n, a, r) { var s = 256, i = 6, o = 52, l = "random", u = r.pow(s, i), p = r.pow(2, o), d = p * 2, c = s - 1, h; function m(I, N, C) { var _ = []; N = N == !0 ? { entropy: !0 } : N || {}; var F = y(b(N.entropy ? [I, v(a)] : I == null ? x() : I, 3), _), D = new f(_), $ = function () { for (var S = D.g(i), M = u, B = 0; S < p;)S = (S + B) * s, M *= s, B = D.g(1); for (; S >= d;)S /= 2, M /= 2, B >>>= 1; return (S + B) / M }; return $.int32 = function () { return D.g(4) | 0 }, $.quick = function () { return D.g(4) / 4294967296 }, $.double = $, y(v(D.S), a), (N.pass || C || function (S, M, B, U) { return U && (U.S && g(U, D), S.state = function () { return g(D, {}) }), B ? (r[l] = S, M) : S })($, F, "global" in N ? N.global : this == r, N.state) } function f(I) { var N, C = I.length, _ = this, F = 0, D = _.i = _.j = 0, $ = _.S = []; for (C || (I = [C++]); F < s;)$[F] = F++; for (F = 0; F < s; F++)$[F] = $[D = c & D + I[F % C] + (N = $[F])], $[D] = N; (_.g = function (S) { for (var M, B = 0, U = _.i, H = _.j, j = _.S; S--;)M = j[U = c & U + 1], B = B * s + j[c & (j[U] = j[H = c & H + M]) + (j[H] = M)]; return _.i = U, _.j = H, B })(s) } function g(I, N) { return N.i = I.i, N.j = I.j, N.S = I.S.slice(), N } function b(I, N) { var C = [], _ = typeof I, F; if (N && _ == "object") for (F in I) try { C.push(b(I[F], N - 1)) } catch (D) { } return C.length ? C : _ == "string" ? I : I + "\0" } function y(I, N) { for (var C = I + "", _, F = 0; F < C.length;)N[c & F] = c & (_ ^= N[c & F] * 19) + C.charCodeAt(F++); return v(N) } function x() { try { var I; return h && (I = h.randomBytes) ? I = I(s) : (I = new Uint8Array(s), (n.crypto || n.msCrypto).getRandomValues(I)), v(I) } catch (_) { var N = n.navigator, C = N && N.plugins; return [+new Date, n, C, n.screen, v(a)] } } function v(I) { return String.fromCharCode.apply(0, I) } if (y(r.random(), a), typeof t == "object" && t.exports) { t.exports = m; try { h = qR() } catch (I) { } } else typeof define == "function" && define.amd ? define(function () { return m }) : r["seed" + l] = m })(typeof self != "undefined" ? self : e, [], Math) }), Fm = Vt((e, t) => { var n = WR(), a = BR(), r = VR(), s = UR(), i = GR(), o = HR(), l = jR(); l.alea = n, l.xor128 = a, l.xorwow = r, l.xorshift7 = s, l.xor4096 = i, l.tychei = o, t.exports = l }), QS = Vt(() => { }), Av = Vt(() => { }), eN = Vt(() => { }), KR = Vt(() => { }), XR = Vt(() => { }), YR = Vt(() => { }), ZR = Vt((e, t) => {
        var n = (() => {
            var a = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0; return typeof __filename != "undefined" && (a = a || __filename), function (r) {
                r = r || {}; function s() { return ue.buffer != Re && ut(ue.buffer), gt } function i() { return ue.buffer != Re && ut(ue.buffer), qn } function o() { return ue.buffer != Re && ut(ue.buffer), Ot } function l() { return ue.buffer != Re && ut(ue.buffer), pn } function u() { return ue.buffer != Re && ut(ue.buffer), An } function p() { return ue.buffer != Re && ut(ue.buffer), la } function d() { return ue.buffer != Re && ut(ue.buffer), Fn } var c = typeof r != "undefined" ? r : {}, h, m; c.ready = new Promise(function (R, q) { h = R, m = q }); var f; typeof process != "undefined" && process.listeners && (f = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") }); var g = Object.assign({}, c), b = [], y = "./this.program", x = (R, q) => { throw q }, v = typeof window == "object", I = typeof importScripts == "function", N = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", C = c.ENVIRONMENT_IS_PTHREAD || !1, _ = ""; function F(R) { return c.locateFile ? c.locateFile(R, _) : _ + R } var D, $, S, M; function B(R) { R instanceof Hs || J("exiting due to exception: " + R) } if (N) { var U = Av(), H = eN(); I ? _ = H.dirname(_) + "/" : _ = __dirname + "/", D = (q, le) => (q = _l(q) ? new URL(q) : H.normalize(q), U.readFileSync(q, le ? void 0 : "utf8")), S = q => { var le = D(q, !0); return le.buffer || (le = new Uint8Array(le)), le }, $ = (q, le, Ne) => { q = _l(q) ? new URL(q) : H.normalize(q), U.readFile(q, function (Me, Fe) { Me ? Ne(Me) : le(Fe.buffer) }) }, process.argv.length > 1 && (y = process.argv[1].replace(/\\/g, "/")), b = process.argv.slice(2), process.on("uncaughtException", function (q) { if (!(q instanceof Hs)) throw q }), process.on("unhandledRejection", function (q) { throw q }), x = (q, le) => { if (Na()) throw process.exitCode = q, le; B(le), process.exit(q) }, c.inspect = function () { return "[Emscripten Module object]" }; let R; try { R = KR() } catch (q) { throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), q } global.Worker = R.Worker } else (v || I) && (I ? _ = self.location.href : typeof document != "undefined" && document.currentScript && (_ = document.currentScript.src), typeof a != "undefined" && a && (_ = a), _.indexOf("blob:") !== 0 ? _ = _.substr(0, _.replace(/[?#].*/, "").lastIndexOf("/") + 1) : _ = "", N || (D = R => { var q = new XMLHttpRequest; return q.open("GET", R, !1), q.send(null), q.responseText }, I && (S = R => { var q = new XMLHttpRequest; return q.open("GET", R, !1), q.responseType = "arraybuffer", q.send(null), new Uint8Array(q.response) }), $ = (R, q, le) => { var Ne = new XMLHttpRequest; Ne.open("GET", R, !0), Ne.responseType = "arraybuffer", Ne.onload = () => { if (Ne.status == 200 || Ne.status == 0 && Ne.response) { q(Ne.response); return } le() }, Ne.onerror = le, Ne.send(null) }), M = R => document.title = R); N && typeof performance == "undefined" && (global.performance = XR().performance); var j = console.log.bind(console), K = console.warn.bind(console); N && (j = R => U.writeSync(1, R + `
`), K = R => U.writeSync(2, R + `
`)); var Z = c.print || j, J = c.printErr || K; Object.assign(c, g), g = null, c.arguments && (b = c.arguments), c.thisProgram && (y = c.thisProgram), c.quit && (x = c.quit); var ee = 4, ae = Atomics.load, te = Atomics.store, se = Atomics.compareExchange, ie; c.wasmBinary && (ie = c.wasmBinary); var xe = c.noExitRuntime || !0; typeof WebAssembly != "object" && Gs("no native wasm support detected"); var ue, ye, ke = !1, Se; function Le(R, q) { R || Gs(q) } var Ge = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0; function mt(R, q, le) { q >>>= 0; for (var Ne = q + le, Me = q; R[Me] && !(Me >= Ne);)++Me; if (Me - q > 16 && R.buffer && Ge) return Ge.decode(R.buffer instanceof SharedArrayBuffer ? R.slice(q, Me) : R.subarray(q, Me)); for (var Fe = ""; q < Me;) { var me = R[q++]; if (!(me & 128)) { Fe += String.fromCharCode(me); continue } var we = R[q++] & 63; if ((me & 224) == 192) { Fe += String.fromCharCode((me & 31) << 6 | we); continue } var Ct = R[q++] & 63; if ((me & 240) == 224 ? me = (me & 15) << 12 | we << 6 | Ct : me = (me & 7) << 18 | we << 12 | Ct << 6 | R[q++] & 63, me < 65536) Fe += String.fromCharCode(me); else { var pa = me - 65536; Fe += String.fromCharCode(55296 | pa >> 10, 56320 | pa & 1023) } } return Fe } function st(R, q) { return R >>>= 0, R ? mt(i(), R, q) : "" } function at(R, q, le, Ne) { if (le >>>= 0, !(Ne > 0)) return 0; for (var Me = le, Fe = le + Ne - 1, me = 0; me < R.length; ++me) { var we = R.charCodeAt(me); if (we >= 55296 && we <= 57343) { var Ct = R.charCodeAt(++me); we = 65536 + ((we & 1023) << 10) | Ct & 1023 } if (we <= 127) { if (le >= Fe) break; q[le++ >>> 0] = we } else if (we <= 2047) { if (le + 1 >= Fe) break; q[le++ >>> 0] = 192 | we >> 6, q[le++ >>> 0] = 128 | we & 63 } else if (we <= 65535) { if (le + 2 >= Fe) break; q[le++ >>> 0] = 224 | we >> 12, q[le++ >>> 0] = 128 | we >> 6 & 63, q[le++ >>> 0] = 128 | we & 63 } else { if (le + 3 >= Fe) break; q[le++ >>> 0] = 240 | we >> 18, q[le++ >>> 0] = 128 | we >> 12 & 63, q[le++ >>> 0] = 128 | we >> 6 & 63, q[le++ >>> 0] = 128 | we & 63 } } return q[le >>> 0] = 0, le - Me } function rt(R, q, le) { return at(R, i(), q, le) } var Re, gt, qn, Ot, oa, pn, An, la, Fn; C && (Re = c.buffer); function ut(R) { Re = R, c.HEAP8 = gt = new Int8Array(R), c.HEAP16 = Ot = new Int16Array(R), c.HEAP32 = pn = new Int32Array(R), c.HEAPU8 = qn = new Uint8Array(R), c.HEAPU16 = oa = new Uint16Array(R), c.HEAPU32 = An = new Uint32Array(R), c.HEAPF32 = la = new Float32Array(R), c.HEAPF64 = Fn = new Float64Array(R) } var $n = c.INITIAL_MEMORY || 16777216; if (C) ue = c.wasmMemory, Re = c.buffer; else if (c.wasmMemory) ue = c.wasmMemory; else if (ue = new WebAssembly.Memory({ initial: $n / 65536, maximum: 65536, shared: !0 }), !(ue.buffer instanceof SharedArrayBuffer)) throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), N && J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory"); ue && (Re = ue.buffer), $n = Re.byteLength, ut(Re); var jn, vr = [], Cl = [], Qa = [], qp = !1; function Na() { return xe } function jr() { if (c.preRun) for (typeof c.preRun == "function" && (c.preRun = [c.preRun]); c.preRun.length;)Fg(c.preRun.shift()); Kp(vr) } function Jt() { qp = !0, !C && Kp(Cl) } function rh() { if (!C) { if (c.postRun) for (typeof c.postRun == "function" && (c.postRun = [c.postRun]); c.postRun.length;)nI(c.postRun.shift()); Kp(Qa) } } function Fg(R) { vr.unshift(R) } function $g(R) { Cl.unshift(R) } function nI(R) { Qa.unshift(R) } var Kr = 0, El = null, wr = null; function Dg(R) { Kr++, c.monitorRunDependencies && c.monitorRunDependencies(Kr) } function sh(R) { if (Kr--, c.monitorRunDependencies && c.monitorRunDependencies(Kr), Kr == 0 && (El !== null && (clearInterval(El), El = null), wr)) { var q = wr; wr = null, q() } } function Gs(R) { c.onAbort && c.onAbort(R), R = "Aborted(" + R + ")", J(R), ke = !0, Se = 1, R += ". Build with -sASSERTIONS for more info."; var q = new WebAssembly.RuntimeError(R); throw m(q), q } var Rg = "data:application/octet-stream;base64,"; function ih(R) { return R.startsWith(Rg) } function _l(R) { return R.startsWith("file://") } var gn; gn = "tfjs-backend-wasm-threaded-simd.wasm", ih(gn) || (gn = F(gn)); function oh(R) { try { if (R == gn && ie) return new Uint8Array(ie); if (S) return S(R); throw "both async and sync fetching of the wasm failed" } catch (q) { Gs(q) } } function Mg() { if (!ie && (v || I)) { if (typeof fetch == "function" && !_l(gn)) return fetch(gn, { credentials: "same-origin" }).then(function (R) { if (!R.ok) throw "failed to load wasm binary file at '" + gn + "'"; return R.arrayBuffer() }).catch(function () { return oh(gn) }); if ($) return new Promise(function (R, q) { $(gn, function (le) { R(new Uint8Array(le)) }, q) }) } return Promise.resolve().then(function () { return oh(gn) }) } function Og() { var R = { env: vh, wasi_snapshot_preview1: vh }; function q(me, we) { var Ct = me.exports; if (c.asm = Ct, Hg(c.asm._emscripten_tls_init), jn = c.asm.__indirect_function_table, $g(c.asm.__wasm_call_ctors), ye = we, !C) { var pa = Ae.unusedWorkers.length; Ae.unusedWorkers.forEach(function (Ir) { Ae.loadWasmModuleToWorker(Ir, function () { --pa || sh("wasm-instantiate") }) }) } } C || Dg("wasm-instantiate"); function le(me) { q(me.instance, me.module) } function Ne(me) { return Mg().then(function (we) { return WebAssembly.instantiate(we, R) }).then(function (we) { return we }).then(me, function (we) { J("failed to asynchronously prepare wasm: " + we), Gs(we) }) } function Me() { return !ie && typeof WebAssembly.instantiateStreaming == "function" && !ih(gn) && !_l(gn) && !N && typeof fetch == "function" ? fetch(gn, { credentials: "same-origin" }).then(function (me) { var we = WebAssembly.instantiateStreaming(me, R); return we.then(le, function (Ct) { return J("wasm streaming compile failed: " + Ct), J("falling back to ArrayBuffer instantiation"), Ne(le) }) }) : Ne(le) } if (c.instantiateWasm) try { var Fe = c.instantiateWasm(R, q); return Fe } catch (me) { J("Module.instantiateWasm callback failed with error: " + me), m(me) } return Me().catch(m), {} } var aI, rI, lh = {}; function Hs(R) { this.name = "ExitStatus", this.message = "Program terminated with exit(" + R + ")", this.status = R } function Pg(R) { var q = Ae.pthreads[R]; delete Ae.pthreads[R], q.terminate(), ox(R), Ae.runningWorkers.splice(Ae.runningWorkers.indexOf(q), 1), q.pthread_ptr = 0 } function Lg(R) { var q = Ae.pthreads[R]; q.postMessage({ cmd: "cancel" }) } function jp(R) { var q = Ae.pthreads[R]; Le(q), Ae.returnWorkerToPool(q) } function zg(R) { var q = Ae.getNewWorker(); if (!q) return 6; Ae.runningWorkers.push(q), Ae.pthreads[R.pthread_ptr] = q, q.pthread_ptr = R.pthread_ptr; var le = { cmd: "run", start_routine: R.startRoutine, arg: R.arg, pthread_ptr: R.pthread_ptr }; return q.runPthread = () => { N && q.ref(), q.postMessage(le, R.transferList), delete q.runPthread }, q.loaded && q.runPthread(), 0 } var uh = { varargs: void 0, get: function () { uh.varargs += 4; var R = l()[uh.varargs - 4 >>> 2]; return R }, getStr: function (R) { var q = st(R); return q } }; function ph(R) { if (C) return Xr(1, 1, R); Se = R, Na() || (Ae.terminateAllThreads(), c.onExit && c.onExit(R), ke = !0), x(R, new Hs(R)) } function Wg(R, q) { if (Se = R, !q && C) throw dh(R), "unwind"; ph(R) } var ch = Wg; function Bg(R) { if (R instanceof Hs || R == "unwind") return Se; x(1, R) } var Ae = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], pthreads: {}, init: function () { C ? Ae.initWorker() : Ae.initMainThread() }, initMainThread: function () { for (var R = 8; R--;)Ae.allocateUnusedWorker() }, initWorker: function () { xe = !1 }, setExitStatus: function (R) { Se = R }, terminateAllThreads: function () { for (var R of Object.values(Ae.pthreads)) Ae.returnWorkerToPool(R); for (var R of Ae.unusedWorkers) R.terminate(); Ae.unusedWorkers = [] }, returnWorkerToPool: function (R) { var q = R.pthread_ptr; delete Ae.pthreads[q], Ae.unusedWorkers.push(R), Ae.runningWorkers.splice(Ae.runningWorkers.indexOf(R), 1), R.pthread_ptr = 0, N && R.unref(), ox(q) }, receiveObjectTransfer: function (R) { }, threadInitTLS: function () { Ae.tlsInitFunctions.forEach(R => R()) }, loadWasmModuleToWorker: function (R, q) { R.onmessage = Fe => { var me = Fe.data, we = me.cmd; if (R.pthread_ptr && (Ae.currentProxiedOperationCallerThread = R.pthread_ptr), me.targetThread && me.targetThread != Th()) { var Ct = Ae.pthreads[me.targetThread]; Ct ? Ct.postMessage(me, me.transferList) : J('Internal error! Worker sent a message "' + we + '" to target pthread ' + me.targetThread + ", but that thread no longer exists!"), Ae.currentProxiedOperationCallerThread = void 0; return } we === "processProxyingQueue" ? Xp(me.queue) : we === "spawnThread" ? zg(me) : we === "cleanupThread" ? jp(me.thread) : we === "killThread" ? Pg(me.thread) : we === "cancelThread" ? Lg(me.thread) : we === "loaded" ? (R.loaded = !0, N && R.unref(), q && q(R), R.runPthread && R.runPthread()) : we === "print" ? Z("Thread " + me.threadId + ": " + me.text) : we === "printErr" ? J("Thread " + me.threadId + ": " + me.text) : we === "alert" ? alert("Thread " + me.threadId + ": " + me.text) : me.target === "setimmediate" ? R.postMessage(me) : we === "callHandler" ? c[me.handler](...me.args) : we && J("worker sent an unknown command " + we), Ae.currentProxiedOperationCallerThread = void 0 }, R.onerror = Fe => { var me = "worker sent an error!"; throw J(me + " " + Fe.filename + ":" + Fe.lineno + ": " + Fe.message), Fe }, N && (R.on("message", function (Fe) { R.onmessage({ data: Fe }) }), R.on("error", function (Fe) { R.onerror(Fe) }), R.on("detachedExit", function () { })); var le = [], Ne = ["onExit", "onAbort", "print", "printErr"]; for (var Me of Ne) c.hasOwnProperty(Me) && le.push(Me); R.postMessage({ cmd: "load", handlers: le, urlOrBlob: c.mainScriptUrlOrBlob || a, wasmMemory: ue, wasmModule: ye }) }, allocateUnusedWorker: function () { var R, q = F("tfjs-backend-wasm-threaded-simd.worker.js"); R = new Worker(q), Ae.unusedWorkers.push(R) }, getNewWorker: function () { return Ae.unusedWorkers.length == 0 && (Ae.allocateUnusedWorker(), Ae.loadWasmModuleToWorker(Ae.unusedWorkers[0])), Ae.unusedWorkers.pop() } }; c.PThread = Ae; function Kp(R) { for (; R.length > 0;)R.shift()(c) } function Vg() { var R = Th(), q = l()[R + 52 >>> 2], le = l()[R + 56 >>> 2], Ne = q - le; pI(q, Ne), Ch(q) } c.establishStackSpace = Vg; function dh(R) { if (C) return Xr(2, 0, R); try { ch(R) } catch (q) { Bg(q) } } var Al = []; function Ug(R) { var q = Al[R]; return q || (R >= Al.length && (Al.length = R + 1), Al[R] = q = jn.get(R)), q } function Gg(R, q) { var le = Ug(R)(q); Na() ? Ae.setExitStatus(le) : uI(le) } c.invokeEntryPoint = Gg; function Hg(R) { Ae.tlsInitFunctions.push(R) } function qg(R) { iI(R, !I, 1, !v), Ae.threadInitTLS() } function jg(R) { C ? postMessage({ cmd: "cleanupThread", thread: R }) : jp(R) } function hh(R, q, le, Ne) { return C ? Xr(3, 1, R, q, le, Ne) : mh(R, q, le, Ne) } function mh(R, q, le, Ne) { if (typeof SharedArrayBuffer == "undefined") return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6; var Me = [], Fe = 0; if (C && (Me.length === 0 || Fe)) return hh(R, q, le, Ne); if (Fe) return Fe; var me = { startRoutine: le, pthread_ptr: R, arg: Ne, transferList: Me }; return C ? (me.cmd = "spawnThread", postMessage(me, Me), 0) : zg(me) } function Kg() { return 65536 } var Xg = !0; function Yg() { return Xg } function Xp(R) { Atomics.store(l(), R >> 2, 1), Th() && lI(R), Atomics.compareExchange(l(), R >> 2, 1, 0) } c.executeNotifiedProxyingQueue = Xp; function Zg(R, q, le, Ne) { if (R == q) setTimeout(() => Xp(Ne)); else if (C) postMessage({ targetThread: R, cmd: "processProxyingQueue", queue: Ne }); else { var Me = Ae.pthreads[R]; if (!Me) return; Me.postMessage({ cmd: "processProxyingQueue", queue: Ne }) } return 1 } function Jg(R, q, le) { return -1 } function Qg() { Gs("") } function qs(R) { qs.shown || (qs.shown = {}), qs.shown[R] || (qs.shown[R] = 1, N && (R = "warning: " + R), J(R)) } function eb() { N || I || qs("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread") } function tb() { return Date.now() } function fh() { return 4294901760 } function nb() { return fh() } var Yp; N ? Yp = () => { var R = process.hrtime(); return R[0] * 1e3 + R[1] / 1e6 } : Yp = () => performance.timeOrigin + performance.now(); function ab(R, q, le) { i().copyWithin(R >>> 0, q >>> 0, q + le >>> 0) } function rb() { return N ? YR().cpus().length : navigator.hardwareConcurrency } function sb(R) { var q = lx(), le = R(); return Ch(q), le } function Xr(R, q) { var le = arguments.length - 2, Ne = arguments; return sb(() => { for (var Me = le, Fe = Eh(Me * 8), me = Fe >> 3, we = 0; we < le; we++) { var Ct = Ne[2 + we]; d()[me + we >>> 0] = Ct } return oI(R, Me, Fe, q) }) } var Zp = []; function ib(R, q, le) { Zp.length = q; for (var Ne = le >> 3, Me = 0; Me < q; Me++)Zp[Me] = d()[Ne + Me >>> 0]; var Fe = R < 0, me = Fe ? lh[-R - 1] : fb[R]; return me.apply(null, Zp) } function ob(R) { try { return ue.grow(R - Re.byteLength + 65535 >>> 16), ut(ue.buffer), 1 } catch (q) { } } function lb(R) { var q = i().length; if (R = R >>> 0, R <= q) return !1; var le = fh(); if (R > le) return !1; let Ne = (Ct, pa) => Ct + (pa - Ct % pa) % pa; for (var Me = 1; Me <= 4; Me *= 2) { var Fe = q * (1 + .2 / Me); Fe = Math.min(Fe, R + 100663296); var me = Math.min(le, Ne(Math.max(R, Fe), 65536)), we = ob(me); if (we) return !0 } return !1 } function ub() { throw "unwind" } function gh(R) { return C ? Xr(4, 1, R) : 52 } function bh(R, q, le, Ne, Me) { return C ? Xr(5, 1, R, q, le, Ne, Me) : 70 } var pb = [null, [], []]; function cb(R, q) { var le = pb[R]; q === 0 || q === 10 ? ((R === 1 ? Z : J)(mt(le, 0)), le.length = 0) : le.push(q) } function yh(R, q, le, Ne) { if (C) return Xr(6, 1, R, q, le, Ne); for (var Me = 0, Fe = 0; Fe < le; Fe++) { var me = u()[q >>> 2], we = u()[q + 4 >>> 2]; q += 8; for (var Ct = 0; Ct < we; Ct++)cb(R, i()[me + Ct >>> 0]); Me += we } return u()[Ne >>> 2] = Me, 0 } function xh(R) { var q = c["_" + R]; return q } function db(R, q) { s().set(R, q >>> 0) } function hb(R, q, le, Ne, Me) { var Fe = { string: ca => { var Rl = 0; if (ca != null && ca !== 0) { var hI = (ca.length << 2) + 1; Rl = Eh(hI), rt(ca, Rl, hI) } return Rl }, array: ca => { var Rl = Eh(ca.length); return db(ca, Rl), Rl } }; function me(ca) { return q === "string" ? st(ca) : q === "boolean" ? !!ca : ca } var we = xh(R), Ct = [], pa = 0; if (Ne) for (var Ir = 0; Ir < Ne.length; Ir++) { var dI = Fe[le[Ir]]; dI ? (pa === 0 && (pa = lx()), Ct[Ir] = dI(Ne[Ir])) : Ct[Ir] = Ne[Ir] } var ux = we.apply(null, Ct); function SR(ca) { return pa !== 0 && Ch(pa), me(ca) } return ux = SR(ux), ux } function mb(R, q, le, Ne) { le = le || []; var Me = le.every(me => me === "number" || me === "boolean"), Fe = q !== "string"; return Fe && Me && !Ne ? xh(R) : function () { return hb(R, q, le, arguments, Ne) } } Ae.init(); var fb = [null, ph, dh, hh, gh, bh, yh], vh = { __emscripten_init_main_thread_js: qg, __emscripten_thread_cleanup: jg, __pthread_create_js: mh, _emscripten_default_pthread_stack_size: Kg, _emscripten_get_now_is_monotonic: Yg, _emscripten_notify_task_queue: Zg, _emscripten_set_offscreencanvas_size: Jg, abort: Qg, emscripten_check_blocking_allowed: eb, emscripten_date_now: tb, emscripten_get_heap_max: nb, emscripten_get_now: Yp, emscripten_memcpy_big: ab, emscripten_num_logical_cores: rb, emscripten_receive_on_main_thread_js: ib, emscripten_resize_heap: lb, emscripten_unwind_to_js_event_loop: ub, exit: ch, fd_close: gh, fd_seek: bh, fd_write: yh, memory: ue || c.wasmMemory }, sI = Og(), gb = c.___wasm_call_ctors = function () { return (gb = c.___wasm_call_ctors = c.asm.__wasm_call_ctors).apply(null, arguments) }, bb = c._init = function () { return (bb = c._init = c.asm.init).apply(null, arguments) }, yb = c._init_with_threads_count = function () { return (yb = c._init_with_threads_count = c.asm.init_with_threads_count).apply(null, arguments) }, xb = c._get_threads_count = function () { return (xb = c._get_threads_count = c.asm.get_threads_count).apply(null, arguments) }, vb = c._register_tensor = function () { return (vb = c._register_tensor = c.asm.register_tensor).apply(null, arguments) }, wb = c._dispose_data = function () { return (wb = c._dispose_data = c.asm.dispose_data).apply(null, arguments) }, kb = c._dispose = function () { return (kb = c._dispose = c.asm.dispose).apply(null, arguments) }, Ib = c._Abs = function () { return (Ib = c._Abs = c.asm.Abs).apply(null, arguments) }, Sb = c._Acos = function () { return (Sb = c._Acos = c.asm.Acos).apply(null, arguments) }, Nb = c._Acosh = function () { return (Nb = c._Acosh = c.asm.Acosh).apply(null, arguments) }, Tb = c._Add = function () { return (Tb = c._Add = c.asm.Add).apply(null, arguments) }, Cb = c._AddN = function () { return (Cb = c._AddN = c.asm.AddN).apply(null, arguments) }, Eb = c._All = function () { return (Eb = c._All = c.asm.All).apply(null, arguments) }, _b = c._Any = function () { return (_b = c._Any = c.asm.Any).apply(null, arguments) }, Ab = c._ArgMax = function () { return (Ab = c._ArgMax = c.asm.ArgMax).apply(null, arguments) }, Fb = c._ArgMin = function () { return (Fb = c._ArgMin = c.asm.ArgMin).apply(null, arguments) }, $b = c._Asin = function () { return ($b = c._Asin = c.asm.Asin).apply(null, arguments) }, Db = c._Asinh = function () { return (Db = c._Asinh = c.asm.Asinh).apply(null, arguments) }, Rb = c._Atan = function () { return (Rb = c._Atan = c.asm.Atan).apply(null, arguments) }, Mb = c._Atan2 = function () { return (Mb = c._Atan2 = c.asm.Atan2).apply(null, arguments) }, Ob = c._Atanh = function () { return (Ob = c._Atanh = c.asm.Atanh).apply(null, arguments) }, Pb = c._AvgPool = function () { return (Pb = c._AvgPool = c.asm.AvgPool).apply(null, arguments) }, Lb = c._AvgPool3D = function () { return (Lb = c._AvgPool3D = c.asm.AvgPool3D).apply(null, arguments) }, zb = c._AvgPool3DGrad = function () { return (zb = c._AvgPool3DGrad = c.asm.AvgPool3DGrad).apply(null, arguments) }, Wb = c._AvgPoolGrad = function () { return (Wb = c._AvgPoolGrad = c.asm.AvgPoolGrad).apply(null, arguments) }, Bb = c._BatchMatMul = function () { return (Bb = c._BatchMatMul = c.asm.BatchMatMul).apply(null, arguments) }, Vb = c._Bincount = function () { return (Vb = c._Bincount = c.asm.Bincount).apply(null, arguments) }, Ub = c._BitwiseAnd = function () { return (Ub = c._BitwiseAnd = c.asm.BitwiseAnd).apply(null, arguments) }, Gb = c._Ceil = function () { return (Gb = c._Ceil = c.asm.Ceil).apply(null, arguments) }, Hb = c._ClipByValue = function () { return (Hb = c._ClipByValue = c.asm.ClipByValue).apply(null, arguments) }, qb = c._Conv2D = function () { return (qb = c._Conv2D = c.asm.Conv2D).apply(null, arguments) }, jb = c._Conv2DBackpropInput = function () { return (jb = c._Conv2DBackpropInput = c.asm.Conv2DBackpropInput).apply(null, arguments) }, Kb = c._Conv3D = function () { return (Kb = c._Conv3D = c.asm.Conv3D).apply(null, arguments) }, Xb = c._Conv3DBackpropFilterV2 = function () { return (Xb = c._Conv3DBackpropFilterV2 = c.asm.Conv3DBackpropFilterV2).apply(null, arguments) }, Yb = c._Conv3DBackpropInputV2 = function () { return (Yb = c._Conv3DBackpropInputV2 = c.asm.Conv3DBackpropInputV2).apply(null, arguments) }, Zb = c._Cos = function () { return (Zb = c._Cos = c.asm.Cos).apply(null, arguments) }, Jb = c._Cosh = function () { return (Jb = c._Cosh = c.asm.Cosh).apply(null, arguments) }, Qb = c._CropAndResize = function () { return (Qb = c._CropAndResize = c.asm.CropAndResize).apply(null, arguments) }, ey = c._Cumprod = function () { return (ey = c._Cumprod = c.asm.Cumprod).apply(null, arguments) }, ty = c._Cumsum = function () { return (ty = c._Cumsum = c.asm.Cumsum).apply(null, arguments) }, ny = c._DenseBincount = function () { return (ny = c._DenseBincount = c.asm.DenseBincount).apply(null, arguments) }, ay = c._DepthToSpace = function () { return (ay = c._DepthToSpace = c.asm.DepthToSpace).apply(null, arguments) }, ry = c._DepthwiseConv2dNative = function () { return (ry = c._DepthwiseConv2dNative = c.asm.DepthwiseConv2dNative).apply(null, arguments) }, sy = c._Diag = function () { return (sy = c._Diag = c.asm.Diag).apply(null, arguments) }, iy = c._Dilation2D = function () { return (iy = c._Dilation2D = c.asm.Dilation2D).apply(null, arguments) }, oy = c._Dilation2DBackpropFilter = function () { return (oy = c._Dilation2DBackpropFilter = c.asm.Dilation2DBackpropFilter).apply(null, arguments) }, ly = c._Dilation2DBackpropInput = function () { return (ly = c._Dilation2DBackpropInput = c.asm.Dilation2DBackpropInput).apply(null, arguments) }, uy = c._Elu = function () { return (uy = c._Elu = c.asm.Elu).apply(null, arguments) }, py = c._EluGrad = function () { return (py = c._EluGrad = c.asm.EluGrad).apply(null, arguments) }, cy = c._Equal = function () { return (cy = c._Equal = c.asm.Equal).apply(null, arguments) }, dy = c._Erf = function () { return (dy = c._Erf = c.asm.Erf).apply(null, arguments) }, hy = c._Exp = function () { return (hy = c._Exp = c.asm.Exp).apply(null, arguments) }, my = c._Expm1 = function () { return (my = c._Expm1 = c.asm.Expm1).apply(null, arguments) }, fy = c._FlipLeftRight = function () { return (fy = c._FlipLeftRight = c.asm.FlipLeftRight).apply(null, arguments) }, gy = c._Floor = function () { return (gy = c._Floor = c.asm.Floor).apply(null, arguments) }, by = c._FloorDiv = function () { return (by = c._FloorDiv = c.asm.FloorDiv).apply(null, arguments) }, yy = c._FusedBatchNorm = function () { return (yy = c._FusedBatchNorm = c.asm.FusedBatchNorm).apply(null, arguments) }, xy = c._FusedConv2D = function () { return (xy = c._FusedConv2D = c.asm.FusedConv2D).apply(null, arguments) }, vy = c._FusedDepthwiseConv2D = function () { return (vy = c._FusedDepthwiseConv2D = c.asm.FusedDepthwiseConv2D).apply(null, arguments) }, wy = c._Gather = function () { return (wy = c._Gather = c.asm.Gather).apply(null, arguments) }, ky = c._GatherNd = function () { return (ky = c._GatherNd = c.asm.GatherNd).apply(null, arguments) }, Iy = c._Greater = function () { return (Iy = c._Greater = c.asm.Greater).apply(null, arguments) }, Sy = c._GreaterEqual = function () { return (Sy = c._GreaterEqual = c.asm.GreaterEqual).apply(null, arguments) }, Ny = c._IsFinite = function () { return (Ny = c._IsFinite = c.asm.IsFinite).apply(null, arguments) }, Ty = c._IsInf = function () { return (Ty = c._IsInf = c.asm.IsInf).apply(null, arguments) }, Cy = c._IsNan = function () { return (Cy = c._IsNan = c.asm.IsNan).apply(null, arguments) }, Ey = c._LRN = function () { return (Ey = c._LRN = c.asm.LRN).apply(null, arguments) }, _y = c._LRNGrad = function () { return (_y = c._LRNGrad = c.asm.LRNGrad).apply(null, arguments) }, Ay = c._LeakyRelu = function () { return (Ay = c._LeakyRelu = c.asm.LeakyRelu).apply(null, arguments) }, Fy = c._Less = function () { return (Fy = c._Less = c.asm.Less).apply(null, arguments) }, $y = c._LessEqual = function () { return ($y = c._LessEqual = c.asm.LessEqual).apply(null, arguments) }, Dy = c._LinSpace = function () { return (Dy = c._LinSpace = c.asm.LinSpace).apply(null, arguments) }, Ry = c._Log = function () { return (Ry = c._Log = c.asm.Log).apply(null, arguments) }, My = c._Log1p = function () { return (My = c._Log1p = c.asm.Log1p).apply(null, arguments) }, Oy = c._LogicalAnd = function () { return (Oy = c._LogicalAnd = c.asm.LogicalAnd).apply(null, arguments) }, Py = c._LogicalNot = function () { return (Py = c._LogicalNot = c.asm.LogicalNot).apply(null, arguments) }, Ly = c._LogicalOr = function () { return (Ly = c._LogicalOr = c.asm.LogicalOr).apply(null, arguments) }, zy = c._LogicalXor = function () { return (zy = c._LogicalXor = c.asm.LogicalXor).apply(null, arguments) }, Wy = c._Max = function () { return (Wy = c._Max = c.asm.Max).apply(null, arguments) }, By = c._MaxPool = function () { return (By = c._MaxPool = c.asm.MaxPool).apply(null, arguments) }, Vy = c._MaxPool3D = function () { return (Vy = c._MaxPool3D = c.asm.MaxPool3D).apply(null, arguments) }, Uy = c._MaxPool3DGrad = function () { return (Uy = c._MaxPool3DGrad = c.asm.MaxPool3DGrad).apply(null, arguments) }, Gy = c._MaxPoolGrad = function () { return (Gy = c._MaxPoolGrad = c.asm.MaxPoolGrad).apply(null, arguments) }, Hy = c._MaxPoolWithArgmax = function () { return (Hy = c._MaxPoolWithArgmax = c.asm.MaxPoolWithArgmax).apply(null, arguments) }, qy = c._Maximum = function () { return (qy = c._Maximum = c.asm.Maximum).apply(null, arguments) }, jy = c._Mean = function () { return (jy = c._Mean = c.asm.Mean).apply(null, arguments) }, Ky = c._Min = function () { return (Ky = c._Min = c.asm.Min).apply(null, arguments) }, Xy = c._Minimum = function () { return (Xy = c._Minimum = c.asm.Minimum).apply(null, arguments) }, Yy = c._MirrorPad = function () { return (Yy = c._MirrorPad = c.asm.MirrorPad).apply(null, arguments) }, Zy = c._Mod = function () { return (Zy = c._Mod = c.asm.Mod).apply(null, arguments) }, Jy = c._Multinomial = function () { return (Jy = c._Multinomial = c.asm.Multinomial).apply(null, arguments) }, Qy = c._Multiply = function () { return (Qy = c._Multiply = c.asm.Multiply).apply(null, arguments) }, ex = c._Neg = function () { return (ex = c._Neg = c.asm.Neg).apply(null, arguments) }, tx = c._NonMaxSuppressionV3 = function () { return (tx = c._NonMaxSuppressionV3 = c.asm.NonMaxSuppressionV3).apply(null, arguments) }, nx = c._NonMaxSuppressionV4 = function () { return (nx = c._NonMaxSuppressionV4 = c.asm.NonMaxSuppressionV4).apply(null, arguments) }, wh = c._NonMaxSuppressionV5 = function () { return (wh = c._NonMaxSuppressionV5 = c.asm.NonMaxSuppressionV5).apply(null, arguments) }, kh = c._NotEqual = function () { return (kh = c._NotEqual = c.asm.NotEqual).apply(null, arguments) }, Jp = c._OneHot = function () { return (Jp = c._OneHot = c.asm.OneHot).apply(null, arguments) }, ax = c._PadV2 = function () { return (ax = c._PadV2 = c.asm.PadV2).apply(null, arguments) }, rx = c._Pow = function () { return (rx = c._Pow = c.asm.Pow).apply(null, arguments) }, Fl = c._Prelu = function () { return (Fl = c._Prelu = c.asm.Prelu).apply(null, arguments) }, Ih = c._Prod = function () { return (Ih = c._Prod = c.asm.Prod).apply(null, arguments) }, $l = c._RealDiv = function () { return ($l = c._RealDiv = c.asm.RealDiv).apply(null, arguments) }, Dl = c._Reciprocal = function () { return (Dl = c._Reciprocal = c.asm.Reciprocal).apply(null, arguments) }, sx = c._Relu = function () { return (sx = c._Relu = c.asm.Relu).apply(null, arguments) }, Y = c._Relu6 = function () { return (Y = c._Relu6 = c.asm.Relu6).apply(null, arguments) }, oe = c._ResizeBilinear = function () { return (oe = c._ResizeBilinear = c.asm.ResizeBilinear).apply(null, arguments) }, Ie = c._ResizeBilinearGrad = function () { return (Ie = c._ResizeBilinearGrad = c.asm.ResizeBilinearGrad).apply(null, arguments) }, Ye = c._ResizeNearestNeighbor = function () { return (Ye = c._ResizeNearestNeighbor = c.asm.ResizeNearestNeighbor).apply(null, arguments) }, wt = c._ResizeNearestNeighborGrad = function () { return (wt = c._ResizeNearestNeighborGrad = c.asm.ResizeNearestNeighborGrad).apply(null, arguments) }, kt = c._Reverse = function () { return (kt = c._Reverse = c.asm.Reverse).apply(null, arguments) }, He = c._RotateWithOffset = function () { return (He = c._RotateWithOffset = c.asm.RotateWithOffset).apply(null, arguments) }, Be = c._Round = function () { return (Be = c._Round = c.asm.Round).apply(null, arguments) }, Pt = c._Rsqrt = function () { return (Pt = c._Rsqrt = c.asm.Rsqrt).apply(null, arguments) }, ua = c._ScatterNd = function () { return (ua = c._ScatterNd = c.asm.ScatterNd).apply(null, arguments) }, kr = c._SearchSorted = function () { return (kr = c._SearchSorted = c.asm.SearchSorted).apply(null, arguments) }, Sh = c._SelectV2 = function () { return (Sh = c._SelectV2 = c.asm.SelectV2).apply(null, arguments) }, Qp = c._Selu = function () { return (Qp = c._Selu = c.asm.Selu).apply(null, arguments) }, ix = c._Sigmoid = function () { return (ix = c._Sigmoid = c.asm.Sigmoid).apply(null, arguments) }, Dn = c._Sign = function () { return (Dn = c._Sign = c.asm.Sign).apply(null, arguments) }, Yr = c._Sin = function () { return (Yr = c._Sin = c.asm.Sin).apply(null, arguments) }, Nh = c._Sinh = function () { return (Nh = c._Sinh = c.asm.Sinh).apply(null, arguments) }, qD = c._Softmax = function () { return (qD = c._Softmax = c.asm.Softmax).apply(null, arguments) }, jD = c._Softplus = function () { return (jD = c._Softplus = c.asm.Softplus).apply(null, arguments) }, KD = c._SparseFillEmptyRows = function () { return (KD = c._SparseFillEmptyRows = c.asm.SparseFillEmptyRows).apply(null, arguments) }, XD = c._SparseReshape = function () { return (XD = c._SparseReshape = c.asm.SparseReshape).apply(null, arguments) }, YD = c._SparseSegmentReduction = function () { return (YD = c._SparseSegmentReduction = c.asm.SparseSegmentReduction).apply(null, arguments) }, ZD = c._SparseToDense = function () { return (ZD = c._SparseToDense = c.asm.SparseToDense).apply(null, arguments) }, JD = c._Sqrt = function () { return (JD = c._Sqrt = c.asm.Sqrt).apply(null, arguments) }, QD = c._Square = function () { return (QD = c._Square = c.asm.Square).apply(null, arguments) }, eR = c._SquaredDifference = function () { return (eR = c._SquaredDifference = c.asm.SquaredDifference).apply(null, arguments) }, tR = c._Step = function () { return (tR = c._Step = c.asm.Step).apply(null, arguments) }, nR = c._StridedSlice = function () { return (nR = c._StridedSlice = c.asm.StridedSlice).apply(null, arguments) }, aR = c._Sub = function () { return (aR = c._Sub = c.asm.Sub).apply(null, arguments) }, rR = c._Sum = function () { return (rR = c._Sum = c.asm.Sum).apply(null, arguments) }, sR = c._Tan = function () { return (sR = c._Tan = c.asm.Tan).apply(null, arguments) }, iR = c._Tanh = function () { return (iR = c._Tanh = c.asm.Tanh).apply(null, arguments) }, oR = c._TensorScatterUpdate = function () { return (oR = c._TensorScatterUpdate = c.asm.TensorScatterUpdate).apply(null, arguments) }, lR = c._Tile = function () { return (lR = c._Tile = c.asm.Tile).apply(null, arguments) }, uR = c._TopK = function () { return (uR = c._TopK = c.asm.TopK).apply(null, arguments) }, pR = c._Transform = function () { return (pR = c._Transform = c.asm.Transform).apply(null, arguments) }, cR = c._Transpose = function () { return (cR = c._Transpose = c.asm.Transpose).apply(null, arguments) }, dR = c.__FusedMatMul = function () { return (dR = c.__FusedMatMul = c.asm._FusedMatMul).apply(null, arguments) }, hR = c._malloc = function () { return (hR = c._malloc = c.asm.malloc).apply(null, arguments) }, mR = c._free = function () { return (mR = c._free = c.asm.free).apply(null, arguments) }, fR = c.__emscripten_tls_init = function () { return (fR = c.__emscripten_tls_init = c.asm._emscripten_tls_init).apply(null, arguments) }, Th = c._pthread_self = function () { return (Th = c._pthread_self = c.asm.pthread_self).apply(null, arguments) }, gR = c.___errno_location = function () { return (gR = c.___errno_location = c.asm.__errno_location).apply(null, arguments) }, iI = c.__emscripten_thread_init = function () { return (iI = c.__emscripten_thread_init = c.asm._emscripten_thread_init).apply(null, arguments) }, bR = c.__emscripten_thread_crashed = function () { return (bR = c.__emscripten_thread_crashed = c.asm._emscripten_thread_crashed).apply(null, arguments) }, yR = c._emscripten_main_thread_process_queued_calls = function () { return (yR = c._emscripten_main_thread_process_queued_calls = c.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments) }, xR = c._emscripten_main_browser_thread_id = function () { return (xR = c._emscripten_main_browser_thread_id = c.asm.emscripten_main_browser_thread_id).apply(null, arguments) }, oI = c._emscripten_run_in_main_runtime_thread_js = function () { return (oI = c._emscripten_run_in_main_runtime_thread_js = c.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments) }, vR = c._emscripten_dispatch_to_thread_ = function () { return (vR = c._emscripten_dispatch_to_thread_ = c.asm.emscripten_dispatch_to_thread_).apply(null, arguments) }, lI = c.__emscripten_proxy_execute_task_queue = function () { return (lI = c.__emscripten_proxy_execute_task_queue = c.asm._emscripten_proxy_execute_task_queue).apply(null, arguments) }, ox = c.__emscripten_thread_free_data = function () { return (ox = c.__emscripten_thread_free_data = c.asm._emscripten_thread_free_data).apply(null, arguments) }, uI = c.__emscripten_thread_exit = function () { return (uI = c.__emscripten_thread_exit = c.asm._emscripten_thread_exit).apply(null, arguments) }, pI = c._emscripten_stack_set_limits = function () { return (pI = c._emscripten_stack_set_limits = c.asm.emscripten_stack_set_limits).apply(null, arguments) }, lx = c.stackSave = function () { return (lx = c.stackSave = c.asm.stackSave).apply(null, arguments) }, Ch = c.stackRestore = function () { return (Ch = c.stackRestore = c.asm.stackRestore).apply(null, arguments) }, Eh = c.stackAlloc = function () { return (Eh = c.stackAlloc = c.asm.stackAlloc).apply(null, arguments) }, wR = c.dynCall_iijjiiii = function () { return (wR = c.dynCall_iijjiiii = c.asm.dynCall_iijjiiii).apply(null, arguments) }, kR = c.dynCall_jiji = function () { return (kR = c.dynCall_jiji = c.asm.dynCall_jiji).apply(null, arguments) }; c.keepRuntimeAlive = Na, c.wasmMemory = ue, c.cwrap = mb, c.ExitStatus = Hs, c.PThread = Ae; var _h; wr = function R() { _h || cI(), _h || (wr = R) }; function cI(R) { if (R = R || b, Kr > 0) return; if (C) { h(c), Jt(), startWorker(c); return } if (jr(), Kr > 0) return; function q() { _h || (_h = !0, c.calledRun = !0, !ke && (Jt(), h(c), c.onRuntimeInitialized && c.onRuntimeInitialized(), rh())) } c.setStatus ? (c.setStatus("Running..."), setTimeout(function () { setTimeout(function () { c.setStatus("") }, 1), q() }, 1)) : q() } if (c.preInit) for (typeof c.preInit == "function" && (c.preInit = [c.preInit]); c.preInit.length > 0;)c.preInit.pop()(); cI(); var Ah; f && (Ah = { uncaughtException: process.listeners("uncaughtException").filter(function (R) { return !f.uncaughtException.indexOf(R) > -1 }), unhandledRejection: process.listeners("unhandledRejection").filter(function (R) { return !f.unhandledRejection.indexOf(R) > -1 }) }); var Fh; if (typeof WasmBackendModule != "undefined") Fh = WasmBackendModule; else if (typeof r != "undefined") Fh = r; else throw new Error("Could not find wasm module in post.js"); if (Ah) { var IR = Fh._dispose; Fh._dispose = function () { IR(), Ah.uncaughtException.forEach(function (R) { process.removeListener("uncaughtException", R) }), Ah.unhandledRejection.forEach(function (R) { process.removeListener("unhandledRejection", R) }) } } return r.ready
            }
        })(); typeof e == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function () { return n }) : typeof e == "object" && (e.WasmBackendModuleThreadedSimd = n)
    }), JR = Vt((e, t) => {
        t.exports.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`}), QR = Vt((e, t) => { var n = (() => { var a = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0; return typeof __filename != "undefined" && (a = a || __filename), function (r) { r = r || {}; var s = typeof r != "undefined" ? r : {}, i, o; s.ready = new Promise(function (Y, oe) { i = Y, o = oe }); var l; typeof process != "undefined" && process.listeners && (l = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") }); var u = Object.assign({}, s), p = [], d = "./this.program", c = (Y, oe) => { throw oe }, h = typeof window == "object", m = typeof importScripts == "function", f = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", g = ""; function b(Y) { return s.locateFile ? s.locateFile(Y, g) : g + Y } var y, x, v, I; function N(Y) { Y instanceof El || D("exiting due to exception: " + Y) } if (f) { var C = Av(), _ = eN(); m ? g = _.dirname(g) + "/" : g = __dirname + "/", y = (Y, oe) => (Y = jr(Y) ? new URL(Y) : _.normalize(Y), C.readFileSync(Y, oe ? void 0 : "utf8")), v = Y => { var oe = y(Y, !0); return oe.buffer || (oe = new Uint8Array(oe)), oe }, x = (Y, oe, Ie) => { Y = jr(Y) ? new URL(Y) : _.normalize(Y), C.readFile(Y, function (Ye, wt) { Ye ? Ie(Ye) : oe(wt.buffer) }) }, process.argv.length > 1 && (d = process.argv[1].replace(/\\/g, "/")), p = process.argv.slice(2), process.on("uncaughtException", function (Y) { if (!(Y instanceof El)) throw Y }), process.on("unhandledRejection", function (Y) { throw Y }), c = (Y, oe) => { if (qn()) throw process.exitCode = Y, oe; N(oe), process.exit(Y) }, s.inspect = function () { return "[Emscripten Module object]" } } else (h || m) && (m ? g = self.location.href : typeof document != "undefined" && document.currentScript && (g = document.currentScript.src), a && (g = a), g.indexOf("blob:") !== 0 ? g = g.substr(0, g.replace(/[?#].*/, "").lastIndexOf("/") + 1) : g = "", y = Y => { var oe = new XMLHttpRequest; return oe.open("GET", Y, !1), oe.send(null), oe.responseText }, m && (v = Y => { var oe = new XMLHttpRequest; return oe.open("GET", Y, !1), oe.responseType = "arraybuffer", oe.send(null), new Uint8Array(oe.response) }), x = (Y, oe, Ie) => { var Ye = new XMLHttpRequest; Ye.open("GET", Y, !0), Ye.responseType = "arraybuffer", Ye.onload = () => { if (Ye.status == 200 || Ye.status == 0 && Ye.response) { oe(Ye.response); return } Ie() }, Ye.onerror = Ie, Ye.send(null) }, I = Y => document.title = Y); var F = s.print || console.log.bind(console), D = s.printErr || console.warn.bind(console); Object.assign(s, u), u = null, s.arguments && (p = s.arguments), s.thisProgram && (d = s.thisProgram), s.quit && (c = s.quit); var $ = 4, S; s.wasmBinary && (S = s.wasmBinary); var M = s.noExitRuntime || !0; typeof WebAssembly != "object" && Qa("no native wasm support detected"); var B, U = !1, H; function j(Y, oe) { Y || Qa(oe) } var K = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0; function Z(Y, oe, Ie) { oe >>>= 0; for (var Ye = oe + Ie, wt = oe; Y[wt] && !(wt >= Ye);)++wt; if (wt - oe > 16 && Y.buffer && K) return K.decode(Y.subarray(oe, wt)); for (var kt = ""; oe < wt;) { var He = Y[oe++]; if (!(He & 128)) { kt += String.fromCharCode(He); continue } var Be = Y[oe++] & 63; if ((He & 224) == 192) { kt += String.fromCharCode((He & 31) << 6 | Be); continue } var Pt = Y[oe++] & 63; if ((He & 240) == 224 ? He = (He & 15) << 12 | Be << 6 | Pt : He = (He & 7) << 18 | Be << 12 | Pt << 6 | Y[oe++] & 63, He < 65536) kt += String.fromCharCode(He); else { var ua = He - 65536; kt += String.fromCharCode(55296 | ua >> 10, 56320 | ua & 1023) } } return kt } function J(Y, oe) { return Y >>>= 0, Y ? Z(ie, Y, oe) : "" } function ee(Y, oe, Ie, Ye) { if (Ie >>>= 0, !(Ye > 0)) return 0; for (var wt = Ie, kt = Ie + Ye - 1, He = 0; He < Y.length; ++He) { var Be = Y.charCodeAt(He); if (Be >= 55296 && Be <= 57343) { var Pt = Y.charCodeAt(++He); Be = 65536 + ((Be & 1023) << 10) | Pt & 1023 } if (Be <= 127) { if (Ie >= kt) break; oe[Ie++ >>> 0] = Be } else if (Be <= 2047) { if (Ie + 1 >= kt) break; oe[Ie++ >>> 0] = 192 | Be >> 6, oe[Ie++ >>> 0] = 128 | Be & 63 } else if (Be <= 65535) { if (Ie + 2 >= kt) break; oe[Ie++ >>> 0] = 224 | Be >> 12, oe[Ie++ >>> 0] = 128 | Be >> 6 & 63, oe[Ie++ >>> 0] = 128 | Be & 63 } else { if (Ie + 3 >= kt) break; oe[Ie++ >>> 0] = 240 | Be >> 18, oe[Ie++ >>> 0] = 128 | Be >> 12 & 63, oe[Ie++ >>> 0] = 128 | Be >> 6 & 63, oe[Ie++ >>> 0] = 128 | Be & 63 } } return oe[Ie >>> 0] = 0, Ie - wt } function ae(Y, oe, Ie) { return ee(Y, ie, oe, Ie) } var te, se, ie, xe, ue, ye, ke, Se, Le; function Ge(Y) { te = Y, s.HEAP8 = se = new Int8Array(Y), s.HEAP16 = xe = new Int16Array(Y), s.HEAP32 = ye = new Int32Array(Y), s.HEAPU8 = ie = new Uint8Array(Y), s.HEAPU16 = ue = new Uint16Array(Y), s.HEAPU32 = ke = new Uint32Array(Y), s.HEAPF32 = Se = new Float32Array(Y), s.HEAPF64 = Le = new Float64Array(Y) } var mt = s.INITIAL_MEMORY || 16777216, st, at = [], rt = [], Re = [], gt = !1; function qn() { return M } function Ot() { if (s.preRun) for (typeof s.preRun == "function" && (s.preRun = [s.preRun]); s.preRun.length;)An(s.preRun.shift()); wr(at) } function oa() { gt = !0, wr(rt) } function pn() { if (s.postRun) for (typeof s.postRun == "function" && (s.postRun = [s.postRun]); s.postRun.length;)Fn(s.postRun.shift()); wr(Re) } function An(Y) { at.unshift(Y) } function la(Y) { rt.unshift(Y) } function Fn(Y) { Re.unshift(Y) } var ut = 0, $n = null, jn = null; function vr(Y) { ut++, s.monitorRunDependencies && s.monitorRunDependencies(ut) } function Cl(Y) { if (ut--, s.monitorRunDependencies && s.monitorRunDependencies(ut), ut == 0 && ($n !== null && (clearInterval($n), $n = null), jn)) { var oe = jn; jn = null, oe() } } function Qa(Y) { s.onAbort && s.onAbort(Y), Y = "Aborted(" + Y + ")", D(Y), U = !0, H = 1, Y += ". Build with -sASSERTIONS for more info."; var oe = new WebAssembly.RuntimeError(Y); throw o(oe), oe } var qp = "data:application/octet-stream;base64,"; function Na(Y) { return Y.startsWith(qp) } function jr(Y) { return Y.startsWith("file://") } var Jt; Jt = "tfjs-backend-wasm.wasm", Na(Jt) || (Jt = b(Jt)); function rh(Y) { try { if (Y == Jt && S) return new Uint8Array(S); if (v) return v(Y); throw "both async and sync fetching of the wasm failed" } catch (oe) { Qa(oe) } } function Fg() { if (!S && (h || m)) { if (typeof fetch == "function" && !jr(Jt)) return fetch(Jt, { credentials: "same-origin" }).then(function (Y) { if (!Y.ok) throw "failed to load wasm binary file at '" + Jt + "'"; return Y.arrayBuffer() }).catch(function () { return rh(Jt) }); if (x) return new Promise(function (Y, oe) { x(Jt, function (Ie) { Y(new Uint8Array(Ie)) }, oe) }) } return Promise.resolve().then(function () { return rh(Jt) }) } function $g() { var Y = { env: jp, wasi_snapshot_preview1: jp }; function oe(He, Be) { var Pt = He.exports; s.asm = Pt, B = s.asm.memory, Ge(B.buffer), st = s.asm.__indirect_function_table, la(s.asm.__wasm_call_ctors), Cl("wasm-instantiate") } vr("wasm-instantiate"); function Ie(He) { oe(He.instance) } function Ye(He) { return Fg().then(function (Be) { return WebAssembly.instantiate(Be, Y) }).then(function (Be) { return Be }).then(He, function (Be) { D("failed to asynchronously prepare wasm: " + Be), Qa(Be) }) } function wt() { return !S && typeof WebAssembly.instantiateStreaming == "function" && !Na(Jt) && !jr(Jt) && !f && typeof fetch == "function" ? fetch(Jt, { credentials: "same-origin" }).then(function (He) { var Be = WebAssembly.instantiateStreaming(He, Y); return Be.then(Ie, function (Pt) { return D("wasm streaming compile failed: " + Pt), D("falling back to ArrayBuffer instantiation"), Ye(Ie) }) }) : Ye(Ie) } if (s.instantiateWasm) try { var kt = s.instantiateWasm(Y, oe); return kt } catch (He) { D("Module.instantiateWasm callback failed with error: " + He), o(He) } return wt().catch(o), {} } var nI, Kr; function El(Y) { this.name = "ExitStatus", this.message = "Program terminated with exit(" + Y + ")", this.status = Y } function wr(Y) { for (; Y.length > 0;)Y.shift()(s) } function Dg() { Qa("") } function sh() { return 4294901760 } function Gs() { return sh() } function Rg(Y, oe, Ie) { ie.copyWithin(Y >>> 0, oe >>> 0, oe + Ie >>> 0) } function ih(Y) { try { return B.grow(Y - te.byteLength + 65535 >>> 16), Ge(B.buffer), 1 } catch (oe) { } } function _l(Y) { var oe = ie.length; Y = Y >>> 0; var Ie = sh(); if (Y > Ie) return !1; let Ye = (Pt, ua) => Pt + (ua - Pt % ua) % ua; for (var wt = 1; wt <= 4; wt *= 2) { var kt = oe * (1 + .2 / wt); kt = Math.min(kt, Y + 100663296); var He = Math.min(Ie, Ye(Math.max(Y, kt), 65536)), Be = ih(He); if (Be) return !0 } return !1 } var gn = { varargs: void 0, get: function () { gn.varargs += 4; var Y = ye[gn.varargs - 4 >>> 2]; return Y }, getStr: function (Y) { var oe = J(Y); return oe } }; function oh(Y) { return 52 } function Mg(Y, oe, Ie, Ye, wt) { return 70 } var Og = [null, [], []]; function aI(Y, oe) { var Ie = Og[Y]; oe === 0 || oe === 10 ? ((Y === 1 ? F : D)(Z(Ie, 0)), Ie.length = 0) : Ie.push(oe) } function rI(Y, oe, Ie, Ye) { for (var wt = 0, kt = 0; kt < Ie; kt++) { var He = ke[oe >>> 2], Be = ke[oe + 4 >>> 2]; oe += 8; for (var Pt = 0; Pt < Be; Pt++)aI(Y, ie[He + Pt >>> 0]); wt += Be } return ke[Ye >>> 2] = wt, 0 } function lh(Y) { var oe = s["_" + Y]; return oe } function Hs(Y, oe) { se.set(Y, oe >>> 0) } function Pg(Y, oe, Ie, Ye, wt) { var kt = { string: Dn => { var Yr = 0; if (Dn != null && Dn !== 0) { var Nh = (Dn.length << 2) + 1; Yr = Jp(Nh), ae(Dn, Yr, Nh) } return Yr }, array: Dn => { var Yr = Jp(Dn.length); return Hs(Dn, Yr), Yr } }; function He(Dn) { return oe === "string" ? J(Dn) : oe === "boolean" ? !!Dn : Dn } var Be = lh(Y), Pt = [], ua = 0; if (Ye) for (var kr = 0; kr < Ye.length; kr++) { var Sh = kt[Ie[kr]]; Sh ? (ua === 0 && (ua = wh()), Pt[kr] = Sh(Ye[kr])) : Pt[kr] = Ye[kr] } var Qp = Be.apply(null, Pt); function ix(Dn) { return ua !== 0 && kh(ua), He(Dn) } return Qp = ix(Qp), Qp } function Lg(Y, oe, Ie, Ye) { Ie = Ie || []; var wt = Ie.every(He => He === "number" || He === "boolean"), kt = oe !== "string"; return kt && wt && !Ye ? lh(Y) : function () { return Pg(Y, oe, Ie, arguments, Ye) } } var jp = { abort: Dg, emscripten_get_heap_max: Gs, emscripten_memcpy_big: Rg, emscripten_resize_heap: _l, fd_close: oh, fd_seek: Mg, fd_write: rI }, zg = $g(), uh = s.___wasm_call_ctors = function () { return (uh = s.___wasm_call_ctors = s.asm.__wasm_call_ctors).apply(null, arguments) }, ph = s._init = function () { return (ph = s._init = s.asm.init).apply(null, arguments) }, Wg = s._init_with_threads_count = function () { return (Wg = s._init_with_threads_count = s.asm.init_with_threads_count).apply(null, arguments) }, ch = s._get_threads_count = function () { return (ch = s._get_threads_count = s.asm.get_threads_count).apply(null, arguments) }, Bg = s._register_tensor = function () { return (Bg = s._register_tensor = s.asm.register_tensor).apply(null, arguments) }, Ae = s._dispose_data = function () { return (Ae = s._dispose_data = s.asm.dispose_data).apply(null, arguments) }, Kp = s._dispose = function () { return (Kp = s._dispose = s.asm.dispose).apply(null, arguments) }, Vg = s._Abs = function () { return (Vg = s._Abs = s.asm.Abs).apply(null, arguments) }, dh = s._Acos = function () { return (dh = s._Acos = s.asm.Acos).apply(null, arguments) }, Al = s._Acosh = function () { return (Al = s._Acosh = s.asm.Acosh).apply(null, arguments) }, Ug = s._Add = function () { return (Ug = s._Add = s.asm.Add).apply(null, arguments) }, Gg = s._AddN = function () { return (Gg = s._AddN = s.asm.AddN).apply(null, arguments) }, Hg = s._All = function () { return (Hg = s._All = s.asm.All).apply(null, arguments) }, qg = s._Any = function () { return (qg = s._Any = s.asm.Any).apply(null, arguments) }, jg = s._ArgMax = function () { return (jg = s._ArgMax = s.asm.ArgMax).apply(null, arguments) }, hh = s._ArgMin = function () { return (hh = s._ArgMin = s.asm.ArgMin).apply(null, arguments) }, mh = s._Asin = function () { return (mh = s._Asin = s.asm.Asin).apply(null, arguments) }, Kg = s._Asinh = function () { return (Kg = s._Asinh = s.asm.Asinh).apply(null, arguments) }, Xg = s._Atan = function () { return (Xg = s._Atan = s.asm.Atan).apply(null, arguments) }, Yg = s._Atan2 = function () { return (Yg = s._Atan2 = s.asm.Atan2).apply(null, arguments) }, Xp = s._Atanh = function () { return (Xp = s._Atanh = s.asm.Atanh).apply(null, arguments) }, Zg = s._AvgPool = function () { return (Zg = s._AvgPool = s.asm.AvgPool).apply(null, arguments) }, Jg = s._AvgPool3D = function () { return (Jg = s._AvgPool3D = s.asm.AvgPool3D).apply(null, arguments) }, Qg = s._AvgPool3DGrad = function () { return (Qg = s._AvgPool3DGrad = s.asm.AvgPool3DGrad).apply(null, arguments) }, qs = s._AvgPoolGrad = function () { return (qs = s._AvgPoolGrad = s.asm.AvgPoolGrad).apply(null, arguments) }, eb = s._BatchMatMul = function () { return (eb = s._BatchMatMul = s.asm.BatchMatMul).apply(null, arguments) }, tb = s._Bincount = function () { return (tb = s._Bincount = s.asm.Bincount).apply(null, arguments) }, fh = s._BitwiseAnd = function () { return (fh = s._BitwiseAnd = s.asm.BitwiseAnd).apply(null, arguments) }, nb = s._Ceil = function () { return (nb = s._Ceil = s.asm.Ceil).apply(null, arguments) }, Yp = s._ClipByValue = function () { return (Yp = s._ClipByValue = s.asm.ClipByValue).apply(null, arguments) }, ab = s._Conv2D = function () { return (ab = s._Conv2D = s.asm.Conv2D).apply(null, arguments) }, rb = s._Conv2DBackpropInput = function () { return (rb = s._Conv2DBackpropInput = s.asm.Conv2DBackpropInput).apply(null, arguments) }, sb = s._Conv3D = function () { return (sb = s._Conv3D = s.asm.Conv3D).apply(null, arguments) }, Xr = s._Conv3DBackpropFilterV2 = function () { return (Xr = s._Conv3DBackpropFilterV2 = s.asm.Conv3DBackpropFilterV2).apply(null, arguments) }, Zp = s._Conv3DBackpropInputV2 = function () { return (Zp = s._Conv3DBackpropInputV2 = s.asm.Conv3DBackpropInputV2).apply(null, arguments) }, ib = s._Cos = function () { return (ib = s._Cos = s.asm.Cos).apply(null, arguments) }, ob = s._Cosh = function () { return (ob = s._Cosh = s.asm.Cosh).apply(null, arguments) }, lb = s._CropAndResize = function () { return (lb = s._CropAndResize = s.asm.CropAndResize).apply(null, arguments) }, ub = s._Cumprod = function () { return (ub = s._Cumprod = s.asm.Cumprod).apply(null, arguments) }, gh = s._Cumsum = function () { return (gh = s._Cumsum = s.asm.Cumsum).apply(null, arguments) }, bh = s._DenseBincount = function () { return (bh = s._DenseBincount = s.asm.DenseBincount).apply(null, arguments) }, pb = s._DepthToSpace = function () { return (pb = s._DepthToSpace = s.asm.DepthToSpace).apply(null, arguments) }, cb = s._DepthwiseConv2dNative = function () { return (cb = s._DepthwiseConv2dNative = s.asm.DepthwiseConv2dNative).apply(null, arguments) }, yh = s._Diag = function () { return (yh = s._Diag = s.asm.Diag).apply(null, arguments) }, xh = s._Dilation2D = function () { return (xh = s._Dilation2D = s.asm.Dilation2D).apply(null, arguments) }, db = s._Dilation2DBackpropFilter = function () { return (db = s._Dilation2DBackpropFilter = s.asm.Dilation2DBackpropFilter).apply(null, arguments) }, hb = s._Dilation2DBackpropInput = function () { return (hb = s._Dilation2DBackpropInput = s.asm.Dilation2DBackpropInput).apply(null, arguments) }, mb = s._Elu = function () { return (mb = s._Elu = s.asm.Elu).apply(null, arguments) }, fb = s._EluGrad = function () { return (fb = s._EluGrad = s.asm.EluGrad).apply(null, arguments) }, vh = s._Equal = function () { return (vh = s._Equal = s.asm.Equal).apply(null, arguments) }, sI = s._Erf = function () { return (sI = s._Erf = s.asm.Erf).apply(null, arguments) }, gb = s._Exp = function () { return (gb = s._Exp = s.asm.Exp).apply(null, arguments) }, bb = s._Expm1 = function () { return (bb = s._Expm1 = s.asm.Expm1).apply(null, arguments) }, yb = s._FlipLeftRight = function () { return (yb = s._FlipLeftRight = s.asm.FlipLeftRight).apply(null, arguments) }, xb = s._Floor = function () { return (xb = s._Floor = s.asm.Floor).apply(null, arguments) }, vb = s._FloorDiv = function () { return (vb = s._FloorDiv = s.asm.FloorDiv).apply(null, arguments) }, wb = s._FusedBatchNorm = function () { return (wb = s._FusedBatchNorm = s.asm.FusedBatchNorm).apply(null, arguments) }, kb = s._FusedConv2D = function () { return (kb = s._FusedConv2D = s.asm.FusedConv2D).apply(null, arguments) }, Ib = s._FusedDepthwiseConv2D = function () { return (Ib = s._FusedDepthwiseConv2D = s.asm.FusedDepthwiseConv2D).apply(null, arguments) }, Sb = s._Gather = function () { return (Sb = s._Gather = s.asm.Gather).apply(null, arguments) }, Nb = s._GatherNd = function () { return (Nb = s._GatherNd = s.asm.GatherNd).apply(null, arguments) }, Tb = s._Greater = function () { return (Tb = s._Greater = s.asm.Greater).apply(null, arguments) }, Cb = s._GreaterEqual = function () { return (Cb = s._GreaterEqual = s.asm.GreaterEqual).apply(null, arguments) }, Eb = s._IsFinite = function () { return (Eb = s._IsFinite = s.asm.IsFinite).apply(null, arguments) }, _b = s._IsInf = function () { return (_b = s._IsInf = s.asm.IsInf).apply(null, arguments) }, Ab = s._IsNan = function () { return (Ab = s._IsNan = s.asm.IsNan).apply(null, arguments) }, Fb = s._LRN = function () { return (Fb = s._LRN = s.asm.LRN).apply(null, arguments) }, $b = s._LRNGrad = function () { return ($b = s._LRNGrad = s.asm.LRNGrad).apply(null, arguments) }, Db = s._LeakyRelu = function () { return (Db = s._LeakyRelu = s.asm.LeakyRelu).apply(null, arguments) }, Rb = s._Less = function () { return (Rb = s._Less = s.asm.Less).apply(null, arguments) }, Mb = s._LessEqual = function () { return (Mb = s._LessEqual = s.asm.LessEqual).apply(null, arguments) }, Ob = s._LinSpace = function () { return (Ob = s._LinSpace = s.asm.LinSpace).apply(null, arguments) }, Pb = s._Log = function () { return (Pb = s._Log = s.asm.Log).apply(null, arguments) }, Lb = s._Log1p = function () { return (Lb = s._Log1p = s.asm.Log1p).apply(null, arguments) }, zb = s._LogicalAnd = function () { return (zb = s._LogicalAnd = s.asm.LogicalAnd).apply(null, arguments) }, Wb = s._LogicalNot = function () { return (Wb = s._LogicalNot = s.asm.LogicalNot).apply(null, arguments) }, Bb = s._LogicalOr = function () { return (Bb = s._LogicalOr = s.asm.LogicalOr).apply(null, arguments) }, Vb = s._LogicalXor = function () { return (Vb = s._LogicalXor = s.asm.LogicalXor).apply(null, arguments) }, Ub = s._Max = function () { return (Ub = s._Max = s.asm.Max).apply(null, arguments) }, Gb = s._MaxPool = function () { return (Gb = s._MaxPool = s.asm.MaxPool).apply(null, arguments) }, Hb = s._MaxPool3D = function () { return (Hb = s._MaxPool3D = s.asm.MaxPool3D).apply(null, arguments) }, qb = s._MaxPool3DGrad = function () { return (qb = s._MaxPool3DGrad = s.asm.MaxPool3DGrad).apply(null, arguments) }, jb = s._MaxPoolGrad = function () { return (jb = s._MaxPoolGrad = s.asm.MaxPoolGrad).apply(null, arguments) }, Kb = s._MaxPoolWithArgmax = function () { return (Kb = s._MaxPoolWithArgmax = s.asm.MaxPoolWithArgmax).apply(null, arguments) }, Xb = s._Maximum = function () { return (Xb = s._Maximum = s.asm.Maximum).apply(null, arguments) }, Yb = s._Mean = function () { return (Yb = s._Mean = s.asm.Mean).apply(null, arguments) }, Zb = s._Min = function () { return (Zb = s._Min = s.asm.Min).apply(null, arguments) }, Jb = s._Minimum = function () { return (Jb = s._Minimum = s.asm.Minimum).apply(null, arguments) }, Qb = s._MirrorPad = function () { return (Qb = s._MirrorPad = s.asm.MirrorPad).apply(null, arguments) }, ey = s._Mod = function () { return (ey = s._Mod = s.asm.Mod).apply(null, arguments) }, ty = s._Multinomial = function () { return (ty = s._Multinomial = s.asm.Multinomial).apply(null, arguments) }, ny = s._Multiply = function () { return (ny = s._Multiply = s.asm.Multiply).apply(null, arguments) }, ay = s._Neg = function () { return (ay = s._Neg = s.asm.Neg).apply(null, arguments) }, ry = s._NonMaxSuppressionV3 = function () { return (ry = s._NonMaxSuppressionV3 = s.asm.NonMaxSuppressionV3).apply(null, arguments) }, sy = s._NonMaxSuppressionV4 = function () { return (sy = s._NonMaxSuppressionV4 = s.asm.NonMaxSuppressionV4).apply(null, arguments) }, iy = s._NonMaxSuppressionV5 = function () { return (iy = s._NonMaxSuppressionV5 = s.asm.NonMaxSuppressionV5).apply(null, arguments) }, oy = s._NotEqual = function () { return (oy = s._NotEqual = s.asm.NotEqual).apply(null, arguments) }, ly = s._OneHot = function () { return (ly = s._OneHot = s.asm.OneHot).apply(null, arguments) }, uy = s._PadV2 = function () { return (uy = s._PadV2 = s.asm.PadV2).apply(null, arguments) }, py = s._Pow = function () { return (py = s._Pow = s.asm.Pow).apply(null, arguments) }, cy = s._Prelu = function () { return (cy = s._Prelu = s.asm.Prelu).apply(null, arguments) }, dy = s._Prod = function () { return (dy = s._Prod = s.asm.Prod).apply(null, arguments) }, hy = s._RealDiv = function () { return (hy = s._RealDiv = s.asm.RealDiv).apply(null, arguments) }, my = s._Reciprocal = function () { return (my = s._Reciprocal = s.asm.Reciprocal).apply(null, arguments) }, fy = s._Relu = function () { return (fy = s._Relu = s.asm.Relu).apply(null, arguments) }, gy = s._Relu6 = function () { return (gy = s._Relu6 = s.asm.Relu6).apply(null, arguments) }, by = s._ResizeBilinear = function () { return (by = s._ResizeBilinear = s.asm.ResizeBilinear).apply(null, arguments) }, yy = s._ResizeBilinearGrad = function () { return (yy = s._ResizeBilinearGrad = s.asm.ResizeBilinearGrad).apply(null, arguments) }, xy = s._ResizeNearestNeighbor = function () { return (xy = s._ResizeNearestNeighbor = s.asm.ResizeNearestNeighbor).apply(null, arguments) }, vy = s._ResizeNearestNeighborGrad = function () { return (vy = s._ResizeNearestNeighborGrad = s.asm.ResizeNearestNeighborGrad).apply(null, arguments) }, wy = s._Reverse = function () { return (wy = s._Reverse = s.asm.Reverse).apply(null, arguments) }, ky = s._RotateWithOffset = function () { return (ky = s._RotateWithOffset = s.asm.RotateWithOffset).apply(null, arguments) }, Iy = s._Round = function () { return (Iy = s._Round = s.asm.Round).apply(null, arguments) }, Sy = s._Rsqrt = function () { return (Sy = s._Rsqrt = s.asm.Rsqrt).apply(null, arguments) }, Ny = s._ScatterNd = function () { return (Ny = s._ScatterNd = s.asm.ScatterNd).apply(null, arguments) }, Ty = s._SearchSorted = function () { return (Ty = s._SearchSorted = s.asm.SearchSorted).apply(null, arguments) }, Cy = s._SelectV2 = function () { return (Cy = s._SelectV2 = s.asm.SelectV2).apply(null, arguments) }, Ey = s._Selu = function () { return (Ey = s._Selu = s.asm.Selu).apply(null, arguments) }, _y = s._Sigmoid = function () { return (_y = s._Sigmoid = s.asm.Sigmoid).apply(null, arguments) }, Ay = s._Sign = function () { return (Ay = s._Sign = s.asm.Sign).apply(null, arguments) }, Fy = s._Sin = function () { return (Fy = s._Sin = s.asm.Sin).apply(null, arguments) }, $y = s._Sinh = function () { return ($y = s._Sinh = s.asm.Sinh).apply(null, arguments) }, Dy = s._Softmax = function () { return (Dy = s._Softmax = s.asm.Softmax).apply(null, arguments) }, Ry = s._Softplus = function () { return (Ry = s._Softplus = s.asm.Softplus).apply(null, arguments) }, My = s._SparseFillEmptyRows = function () { return (My = s._SparseFillEmptyRows = s.asm.SparseFillEmptyRows).apply(null, arguments) }, Oy = s._SparseReshape = function () { return (Oy = s._SparseReshape = s.asm.SparseReshape).apply(null, arguments) }, Py = s._SparseSegmentReduction = function () { return (Py = s._SparseSegmentReduction = s.asm.SparseSegmentReduction).apply(null, arguments) }, Ly = s._SparseToDense = function () { return (Ly = s._SparseToDense = s.asm.SparseToDense).apply(null, arguments) }, zy = s._Sqrt = function () { return (zy = s._Sqrt = s.asm.Sqrt).apply(null, arguments) }, Wy = s._Square = function () { return (Wy = s._Square = s.asm.Square).apply(null, arguments) }, By = s._SquaredDifference = function () { return (By = s._SquaredDifference = s.asm.SquaredDifference).apply(null, arguments) }, Vy = s._Step = function () { return (Vy = s._Step = s.asm.Step).apply(null, arguments) }, Uy = s._StridedSlice = function () { return (Uy = s._StridedSlice = s.asm.StridedSlice).apply(null, arguments) }, Gy = s._Sub = function () { return (Gy = s._Sub = s.asm.Sub).apply(null, arguments) }, Hy = s._Sum = function () { return (Hy = s._Sum = s.asm.Sum).apply(null, arguments) }, qy = s._Tan = function () { return (qy = s._Tan = s.asm.Tan).apply(null, arguments) }, jy = s._Tanh = function () { return (jy = s._Tanh = s.asm.Tanh).apply(null, arguments) }, Ky = s._TensorScatterUpdate = function () { return (Ky = s._TensorScatterUpdate = s.asm.TensorScatterUpdate).apply(null, arguments) }, Xy = s._Tile = function () { return (Xy = s._Tile = s.asm.Tile).apply(null, arguments) }, Yy = s._TopK = function () { return (Yy = s._TopK = s.asm.TopK).apply(null, arguments) }, Zy = s._Transform = function () { return (Zy = s._Transform = s.asm.Transform).apply(null, arguments) }, Jy = s._Transpose = function () { return (Jy = s._Transpose = s.asm.Transpose).apply(null, arguments) }, Qy = s.__FusedMatMul = function () { return (Qy = s.__FusedMatMul = s.asm._FusedMatMul).apply(null, arguments) }, ex = s._malloc = function () { return (ex = s._malloc = s.asm.malloc).apply(null, arguments) }, tx = s._free = function () { return (tx = s._free = s.asm.free).apply(null, arguments) }, nx = s.___errno_location = function () { return (nx = s.___errno_location = s.asm.__errno_location).apply(null, arguments) }, wh = s.stackSave = function () { return (wh = s.stackSave = s.asm.stackSave).apply(null, arguments) }, kh = s.stackRestore = function () { return (kh = s.stackRestore = s.asm.stackRestore).apply(null, arguments) }, Jp = s.stackAlloc = function () { return (Jp = s.stackAlloc = s.asm.stackAlloc).apply(null, arguments) }, ax = s.dynCall_iijjiiii = function () { return (ax = s.dynCall_iijjiiii = s.asm.dynCall_iijjiiii).apply(null, arguments) }, rx = s.dynCall_jiji = function () { return (rx = s.dynCall_jiji = s.asm.dynCall_jiji).apply(null, arguments) }; s.cwrap = Lg; var Fl; jn = function Y() { Fl || Ih(), Fl || (jn = Y) }; function Ih(Y) { if (Y = Y || p, ut > 0 || (Ot(), ut > 0)) return; function oe() { Fl || (Fl = !0, s.calledRun = !0, !U && (oa(), i(s), s.onRuntimeInitialized && s.onRuntimeInitialized(), pn())) } s.setStatus ? (s.setStatus("Running..."), setTimeout(function () { setTimeout(function () { s.setStatus("") }, 1), oe() }, 1)) : oe() } if (s.preInit) for (typeof s.preInit == "function" && (s.preInit = [s.preInit]); s.preInit.length > 0;)s.preInit.pop()(); Ih(); var $l; l && ($l = { uncaughtException: process.listeners("uncaughtException").filter(function (Y) { return !l.uncaughtException.indexOf(Y) > -1 }), unhandledRejection: process.listeners("unhandledRejection").filter(function (Y) { return !l.unhandledRejection.indexOf(Y) > -1 }) }); var Dl; if (typeof r != "undefined") Dl = r; else if (typeof WasmBackendModuleThreadedSimd != "undefined") Dl = WasmBackendModuleThreadedSimd; else throw new Error("Could not find wasm module in post.js"); if ($l) { var sx = Dl._dispose; Dl._dispose = function () { sx(), $l.uncaughtException.forEach(function (Y) { process.removeListener("uncaughtException", Y) }), $l.unhandledRejection.forEach(function (Y) { process.removeListener("unhandledRejection", Y) }) } } return r.ready } })(); typeof e == "object" && typeof t == "object" ? t.exports = n : typeof define == "function" && define.amd ? define([], function () { return n }) : typeof e == "object" && (e.WasmBackendModule = n) }), $m = class { constructor(e, t) { this.backend = e, this.dataMover = t, this.data = new WeakMap, this.dataIdsCount = 0 } get(e) { return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e) } set(e, t) { this.dataIdsCount++, this.data.set(e, t) } has(e) { return this.data.has(e) } delete(e) { return this.dataIdsCount--, this.data.delete(e) } numDataIds() { return this.dataIdsCount } }, Pc = class { refCount(e) { return Kn("refCount") } incRef(e) { return Kn("incRef") } timerAvailable() { return !0 } time(e) { return Kn("time") } read(e) { return Kn("read") } readSync(e) { return Kn("readSync") } readToGPU(e, t) { return Kn("readToGPU") } numDataIds() { return Kn("numDataIds") } disposeData(e, t) { return Kn("disposeData") } write(e, t, n) { return Kn("write") } move(e, t, n, a, r) { return Kn("move") } createTensorFromGPUData(e, t, n) { return Kn("createTensorFromGPUData") } memory() { return Kn("memory") } floatPrecision() { return Kn("floatPrecision") } epsilon() { return this.floatPrecision() === 32 ? 1e-7 : 1e-4 } dispose() { return Kn("dispose") } }; function Kn(e) { throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`) } function tN(e) { let t = e.length, n = 0; for (; t > 0;)n = Math.random() * t | 0, t--, nm(e, t, n) } function eM(e, t) { if (e.length !== t.length) throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`); let n = e.length, a = 0; for (; n > 0;)a = Math.random() * n | 0, n--, nm(e, n, a), nm(t, n, a) } function xc(e, t, n) { return Math.max(e, Math.min(t, n)) } function tM(e) { return e % 2 === 0 ? e : e + 1 } function nm(e, t, n) { let a = e[t]; e[t] = e[n], e[n] = a } function nM(e) { let t = 0; for (let n = 0; n < e.length; n++)t += e[n]; return t } function aM(e, t) { let n = Math.random(); return t * n + (1 - n) * e } function rM(e, t) { let n = 0; for (let a = 0; a < e.length; a++) { let r = Number(e[a]) - Number(t[a]); n += r * r } return n } function A(e, t) { if (!e) throw new Error(typeof t == "string" ? t : t()) } function Sn(e, t, n = "") { A($r(e, t), () => n + ` Shapes ${e} and ${t} must match`) } function Ti(e) { A(e != null, () => "The input to the tensor constructor must be a non-null value.") } function ot(e) { if (e.length === 0) return 1; let t = e[0]; for (let n = 1; n < e.length; n++)t *= e[n]; return t } function sM(e) { return e.length === 0 } function nN(e, t) { if (e === t) return !0; if (e == null || t == null || e.length !== t.length) return !1; for (let n = 0; n < e.length; n++)if (e[n] !== null && t[n] !== null && e[n] !== t[n]) return !1; return !0 } function $r(e, t) { if (e === t) return !0; if (e == null || t == null || e.length !== t.length) return !1; for (let n = 0; n < e.length; n++)if (e[n] !== t[n]) return !1; return !0 } function Hl(e) { return e % 1 === 0 } function iM(e) { if (Math.tanh != null) return Math.tanh(e); if (e === 1 / 0) return 1; if (e === -1 / 0) return -1; { let t = Math.exp(2 * e); return (t - 1) / (t + 1) } } function oM(e) { let t = Math.ceil(Math.sqrt(e)); return [t, Math.ceil(e / t)] } function lM(e) { let t = new Uint32Array(e); for (let n = 0; n < e; ++n)t[n] = n; return tN(t), t } function fc(e, t) { return t <= e.length ? e : e + " ".repeat(t - e.length) } function uM(e, t = r => 0, n, a) { return new Promise((r, s) => { let i = 0, o = () => { if (e()) { r(); return } i++; let l = t(i); if (n != null && i >= n) { s(); return } a != null ? a(o, l) : setTimeout(o, l) }; o() }) } function pM(e, t) { let n = 1, a = -1; for (let s = 0; s < e.length; ++s)if (e[s] >= 0) n *= e[s]; else if (e[s] === -1) { if (a !== -1) throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${a} and dim ${s}`); a = s } else if (e[s] < 0) throw Error(`Shapes can not be < 0. Found ${e[s]} at dim ${s}`); if (a === -1) { if (t > 0 && t !== n) throw Error(`Size(${t}) must match the product of shape ${e}`); return e } if (n === 0) throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`); if (t % n !== 0) throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`); let r = e.slice(); return r[a] = t / n, r } function $a(e, t) { let n = t.length; return e = e == null ? t.map((a, r) => r) : [].concat(e), A(e.every(a => a >= -n && a < n), () => `All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`), A(e.every(a => Hl(a)), () => `All values in axis param must be integers but got axis ${e}`), e.map(a => a < 0 ? n + a : a) } function aN(e, t) { let n = [], a = [], r = t != null && Array.isArray(t) && t.length === 0, s = t == null || r ? null : $a(t, e).sort(), i = 0; for (let o = 0; o < e.length; ++o) { if (s != null) { if (s[i] === o && e[o] !== 1) throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`); (s[i] == null || s[i] > o) && e[o] === 1 && (n.push(e[o]), a.push(o)), s[i] <= o && i++ } e[o] !== 1 && (n.push(e[o]), a.push(o)) } return { newShape: n, keptDims: a } } function rN(e, t) { return Fv(e, t) } function Fv(e, t) { let n = null; if (e == null || e === "float32") n = new Float32Array(t); else if (e === "int32") n = new Int32Array(t); else if (e === "bool") n = new Uint8Array(t); else if (e === "string") n = new Array(t); else throw new Error(`Unknown data type ${e}`); return n } function sN(e, t) { for (let n = 0; n < e.length; n++) { let a = e[n]; if (isNaN(a) || !isFinite(a)) throw Error(`A tensor of type ${t} being uploaded contains ${a}.`) } } function iN(e) { return e === "bool" || e === "complex64" || e === "float32" || e === "int32" || e === "string" } function cM(e, t) { return !(t === "complex64" || t === "float32" && e !== "complex64" || t === "int32" && e !== "float32" && e !== "complex64" || t === "bool" && e === "bool") } function am(e) { if (e === "float32" || e === "int32") return 4; if (e === "complex64") return 8; if (e === "bool") return 1; throw new Error(`Unknown dtype ${e}`) } function oN(e) { if (e == null) return 0; let t = 0; return e.forEach(n => t += n.length), t } function ns(e) { return typeof e == "string" || e instanceof String } function lN(e) { return typeof e == "boolean" } function uN(e) { return typeof e == "number" } function Lc(e) { return Array.isArray(e) ? Lc(e[0]) : e instanceof Float32Array ? "float32" : e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray ? "int32" : uN(e) ? "float32" : ns(e) ? "string" : lN(e) ? "bool" : "float32" } function us(e) { return !!(e && e.constructor && e.call && e.apply) } function rm(e, t) { for (let n = t; n < e; ++n)if (e % n === 0) return n; return e } function lu(e) { let t = e.length; if (t < 2) return []; let n = new Array(t - 1); n[t - 2] = e[t - 1]; for (let a = t - 3; a >= 0; --a)n[a] = n[a + 1] * e[a + 1]; return n } function pN(e, t, n, a = !1) { let r = new Array; if (t.length === 1) { let s = t[0] * (a ? 2 : 1); for (let i = 0; i < s; i++)r[i] = n[e + i] } else { let s = t[0], i = t.slice(1), o = i.reduce((l, u) => l * u) * (a ? 2 : 1); for (let l = 0; l < s; l++)r[l] = pN(e + l * o, i, n, a) } return r } function Bl(e, t, n = !1) { if (e.length === 0) return t[0]; let a = e.reduce((r, s) => r * s) * (n ? 2 : 1); if (a === 0) return []; if (a !== t.length) throw new Error(`[${e}] does not match the input size ${t.length}${n ? " for a complex tensor" : ""}.`); return pN(0, e, t, n) } function dM(e, t) { if (Array.isArray(e)) return e; if (t === "float32") return e instanceof Float32Array ? e : new Float32Array(e); if (t === "int32") return e instanceof Int32Array ? e : new Int32Array(e); if (t === "bool" || t === "string") return Uint8Array.from(new Int32Array(e)); throw new Error(`Unknown dtype ${t}`) } function $v(e, t) { let n = Dm(e, t); for (let a = 0; a < n.length; a++)n[a] = 1; return n } function Dm(e, t) { if (t == null || t === "float32" || t === "complex64") return new Float32Array(e); if (t === "int32") return new Int32Array(e); if (t === "bool") return new Uint8Array(e); throw new Error(`Unknown data type ${t}`) } function hM(e, t) { let n = e.reduce((a, r) => a * r, 1); if (t == null || t === "float32") return Bl(e, new Float32Array(n)); if (t === "int32") return Bl(e, new Int32Array(n)); if (t === "bool") return Bl(e, new Uint8Array(n)); throw new Error(`Unknown data type ${t}`) } function ra(e) { e.forEach(t => { A(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${e}].`) }) } function mM(e, t, n) { if (t === 0) return 0; if (t === 1) return e[0]; let a = e[e.length - 1]; for (let r = 0; r < e.length - 1; ++r)a += n[r] * e[r]; return a } function fM(e, t, n) { if (t === 0) return []; if (t === 1) return [e]; let a = new Array(t); for (let r = 0; r < a.length - 1; ++r)a[r] = Math.floor(e / n[r]), e -= a[r] * n[r]; return a[a.length - 1] = e, a } function Rm(e) { return e && e.then && typeof e.then == "function" } var mI = "tfjsflags", cN = class { constructor(e) { this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = gM, this.populateURLFlags() } setPlatform(e, t) { this.platform != null && (G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t } registerFlag(e, t, n) { if (this.flagRegistry[e] = { evaluationFn: t, setHook: n }, this.urlFlags[e] != null) { let a = this.urlFlags[e]; G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${a}.`), this.set(e, a) } } async getAsync(e) { return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]) } get(e) { if (e in this.flags) return this.flags[e]; let t = this.evaluateFlag(e); if (Rm(t)) throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`); return this.flags[e] = t, this.flags[e] } getNumber(e) { return this.get(e) } getBool(e) { return this.get(e) } getString(e) { return this.get(e) } getFlags() { return this.flags } get features() { return this.flags } set(e, t) { if (this.flagRegistry[e] == null) throw new Error(`Cannot set flag ${e} as it has not been registered.`); this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t) } evaluateFlag(e) { if (this.flagRegistry[e] == null) throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`); return this.flagRegistry[e].evaluationFn() } setFlags(e) { this.flags = Object.assign({}, e) } reset() { this.flags = {}, this.urlFlags = {}, this.populateURLFlags() } populateURLFlags() { if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined") return; let e = this.getQueryParams(this.global.location.search); mI in e && e[mI].split(",").forEach(t => { let [n, a] = t.split(":"); this.urlFlags[n] = yM(n, a) }) } }; function gM(e) { let t = {}; return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (n, ...a) => (bM(t, a[0], a[1]), a.join("="))), t } function bM(e, t, n) { e[decodeURIComponent(t)] = decodeURIComponent(n || "") } function yM(e, t) { let n = t.toLowerCase(); return n === "true" || n === "false" ? n === "true" : `${+n}` === n ? +n : t } function G() { return Dv } var Dv = null; function xM(e) { Dv = e } var cx; function dN() { if (cx == null) { let e; if (typeof window != "undefined") e = window; else if (typeof global != "undefined") e = global; else if (typeof process != "undefined") e = process; else if (typeof self != "undefined") e = self; else throw new Error("Could not find a global object"); cx = e } return cx } function vM() { let e = dN(); return e._tfGlobals == null && (e._tfGlobals = new Map), e._tfGlobals } function Rv(e, t) { let n = vM(); if (n.has(e)) return n.get(e); { let a = t(); return n.set(e, a), n.get(e) } } var uu = "Abs", Ci = "Acos", Ei = "Acosh", Is = "Add", _i = "AddN", pu = "All", cu = "Any", du = "ArgMax", hu = "ArgMin", Ai = "Asin", Fi = "Asinh", $i = "Atan", Di = "Atanh", Ri = "Atan2", Mi = "AvgPool", zc = "AvgPoolGrad", mu = "AvgPool3D", Wc = "AvgPool3DGrad", Oi = "BatchMatMul", fu = "BatchToSpaceND", gu = "Bincount", bu = "BitwiseAnd", hN = "BroadcastTo", Bc = "BroadcastArgs", Pi = "Cast", Li = "Ceil", Ss = "ClipByValue", Mm = "Complex", Vc = "ComplexAbs", yu = "Concat", zi = "Conv2D", Om = "Conv2DBackpropFilter", Wi = "Conv2DBackpropInput", Bi = "Conv3D", xu = "Conv3DBackpropFilterV2", vu = "Conv3DBackpropInputV2", Vi = "Cos", Ui = "Cosh", wu = "Cumprod", Gi = "Cumsum", ku = "CropAndResize", Uc = "DenseBincount", Iu = "DepthToSpace", Hi = "DepthwiseConv2dNative", Pm = "DepthwiseConv2dNativeBackpropFilter", Lm = "DepthwiseConv2dNativeBackpropInput", Gc = "Diag", qi = "Dilation2D", ql = "Dilation2DBackpropInput", jl = "Dilation2DBackpropFilter", zm = "Draw", ji = "RealDiv", Wm = "Einsum", Ki = "Elu", Su = "EluGrad", Xi = "Erf", Nu = "Equal", Yi = "Exp", Tu = "ExpandDims", Zi = "Expm1", Bm = "FFT", Hc = "Fill", Cu = "FlipLeftRight", Ji = "Floor", Qi = "FloorDiv", eo = "FusedBatchNorm", Eu = "GatherV2", _u = "GatherNd", Au = "Greater", to = "GreaterEqual", no = "Identity", Vm = "IFFT", Um = "Imag", ao = "IsFinite", ro = "IsInf", so = "IsNan", io = "LeakyRelu", Fu = "Less", $u = "LessEqual", Du = "LinSpace", oo = "Log", lo = "Log1p", Ru = "LogicalAnd", Mu = "LogicalNot", Ou = "LogicalOr", mN = "LogicalXor", fN = "LogSoftmax", wM = "LowerBound", uo = "LRN", Pu = "LRNGrad", kM = "MatrixBandPart", po = "Max", co = "Maximum", ho = "MaxPool", qc = "MaxPoolGrad", Lu = "MaxPool3D", jc = "MaxPool3DGrad", Kc = "MaxPoolWithArgmax", mo = "Mean", fo = "Min", go = "Minimum", bo = "MirrorPad", yo = "Mod", zu = "Multinomial", xo = "Multiply", Wu = "Neg", Bu = "NotEqual", Vu = "NonMaxSuppressionV3", Uu = "NonMaxSuppressionV4", Gu = "NonMaxSuppressionV5", Hu = "OnesLike", vo = "OneHot", qu = "Pack", wo = "PadV2", IM = "Pool", ko = "Pow", Io = "Prelu", So = "Prod", Gm = "RaggedGather", Hm = "RaggedRange", qm = "RaggedTensorToTensor", Xc = "Range", jm = "Real", No = "Reciprocal", To = "Relu", ju = "Reshape", Co = "ResizeNearestNeighbor", Ku = "ResizeNearestNeighborGrad", Eo = "ResizeBilinear", Xu = "ResizeBilinearGrad", _o = "Relu6", Ao = "Reverse", Fo = "Round", $o = "Rsqrt", Yu = "ScatterNd", Zu = "TensorScatterUpdate", Ju = "SearchSorted", Qu = "Select", Do = "Selu", ep = "Slice", Ro = "Sin", Mo = "Sinh", Oo = "Sign", Po = "Sigmoid", Lo = "Softplus", zo = "Sqrt", Wo = "Sum", tp = "SpaceToBatchND", np = "SplitV", Bo = "Softmax", Yc = "SparseFillEmptyRows", ap = "SparseReshape", Zc = "SparseSegmentMean", Jc = "SparseSegmentSum", rp = "SparseToDense", Vo = "SquaredDifference", Qc = "Square", ed = "StaticRegexReplace", sp = "StridedSlice", td = "StringNGrams", nd = "StringSplit", ad = "StringToHashBucketFast", Uo = "Sub", Go = "Tan", Ho = "Tanh", Ns = "Tile", ip = "TopK", op = "Transform", Er = "Transpose", rd = "Unique", lp = "Unpack", sd = "UnsortedSegmentSum", SM = "UpperBound", up = "ZerosLike", Ts = "Step", sm = "FromPixels", pp = "RotateWithOffset", oi = "_FusedMatMul", li = "FusedConv2D", ui = "FusedDepthwiseConv2D"; function ts(...e) { G().getBool("IS_TEST") || G().getBool("PROD") || console.warn(...e) } function NM(...e) { G().getBool("IS_TEST") || G().getBool("PROD") || console.log(...e) } var Kl = Rv("kernelRegistry", () => new Map), vc = Rv("gradRegistry", () => new Map); function wc(e, t) { let n = Mv(e, t); return Kl.get(n) } function Cx(e) { return vc.get(e) } function im(e) { let t = Kl.entries(), n = []; for (; ;) { let { done: a, value: r } = t.next(); if (a) break; let [s, i] = r, [o] = s.split("_"); o === e && n.push(i) } return n } function id(e) { let { kernelName: t, backendName: n } = e, a = Mv(t, n); Kl.has(a) && ts(`The kernel '${t}' for backend '${n}' is already registered`), Kl.set(a, e) } function gN(e) { let { kernelName: t } = e; vc.has(t) && G().getBool("DEBUG") && ts(`Overriding the gradient for '${t}'`), vc.set(t, e) } function TM(e, t) { let n = Mv(e, t); if (!Kl.has(n)) throw new Error(`The kernel '${e}' for backend '${t}' is not registered`); Kl.delete(n) } function CM(e) { if (!vc.has(e)) throw new Error(`The gradient '${e}' for backend is not registered`); vc.delete(e) } function EM(e, t) { im(e).forEach(n => { let a = Object.assign({}, n, { backendName: t }); id(a) }) } function Mv(e, t) { return `${t}_${e}` } var w = {}; _e(w, { arraysEqual: () => $r, arraysEqualWithNull: () => nN, assert: () => A, assertNonNegativeIntegerDimensions: () => ra, assertNonNull: () => Ti, assertShapesMatch: () => Sn, bytesFromStringArray: () => oN, bytesPerElement: () => am, checkConversionForErrors: () => sN, clamp: () => xc, computeStrides: () => lu, convertBackendValuesAndArrayBuffer: () => dM, createScalarValue: () => RM, createShuffledIndices: () => lM, decodeString: () => om, distSquared: () => rM, encodeString: () => ld, fetch: () => OM, fingerPrint64: () => DM, flatten: () => ps, getArrayFromDType: () => Fv, getTypedArrayFromDType: () => rN, hasEncodingLoss: () => cM, hexToLong: () => od, indexToLoc: () => fM, inferDtype: () => Lc, inferFromImplicitShape: () => pM, isBoolean: () => lN, isFunction: () => us, isInt: () => Hl, isNumber: () => uN, isPromise: () => Rm, isScalarShape: () => sM, isString: () => ns, isTypedArray: () => en, isValidDtype: () => iN, locToIndex: () => mM, makeOnesTypedArray: () => $v, makeZerosNestedTypedArray: () => hM, makeZerosTypedArray: () => Dm, nearestDivisor: () => rm, nearestLargerEven: () => tM, now: () => kc, parseAxisParam: () => $a, randUniform: () => aM, repeatedTry: () => uM, rightPad: () => fc, shuffle: () => tN, shuffleCombo: () => eM, sizeFromShape: () => ot, sizeToSquarishShape: () => oM, squeezeShape: () => aN, sum: () => nM, swap: () => nm, tanh: () => iM, toNestedArray: () => Bl, toTypedArray: () => Km }); function bN(e) { return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray } var fI = ks(PR()), Zs = fI.default || fI; function od(e) { return Zs.fromString(e, !0, 16) } var yN = od("c3a5c85c97cb3127"), Xs = od("b492b66fbe98f273"), vn = od("9ae16a3b2f90404f"); function Ex(e) { return e.xor(e.shru(47)) } function xN(e, t, n) { let a = e.slice(t, t + n); return Zs.fromBytes(Array.from(a), !0, !0) } function bt(e, t) { return xN(e, t, 8) } function gI(e, t) { return xN(e, t, 4) } function Qt(e, t) { return t === 0 ? e : e.shru(t).or(e.shl(64 - t)) } function is(e, t, n = od("9ddfea08eb382d69")) { let a = e.xor(t).mul(n); a = a.xor(a.shru(47)); let r = t.xor(a).mul(n); return r = r.xor(r.shru(47)), r = r.mul(n), r } function _M(e, t, n, a, r, s) { r = r.add(e), s = Qt(s.add(r).add(a), 21); let i = r; return r = r.add(t), r = r.add(n), s = s.add(Qt(r, 44)), [r.add(a), s.add(i)] } function Dh(e, t, n, a) { return _M(bt(e, t), bt(e, t + 8), bt(e, t + 16), bt(e, t + 24), n, a) } function AM(e, t = e.length) { if (t >= 8) { let n = vn.add(t * 2), a = bt(e, 0).add(vn), r = bt(e, t - 8), s = Qt(r, 37).mul(n).add(a), i = Qt(a, 25).add(r).mul(n); return is(s, i, n) } if (t >= 4) { let n = vn.add(t * 2), a = gI(e, 0); return is(a.shl(3).add(t), gI(e, t - 4), n) } if (t > 0) { let n = e[0], a = e[t >> 1], r = e[t - 1], s = n + (a << 8), i = t + (r << 2); return Ex(vn.mul(s).xor(yN.mul(i))).mul(vn) } return vn } function FM(e, t = e.length) { let n = vn.add(t * 2), a = bt(e, 0).mul(Xs), r = bt(e, 8), s = bt(e, t - 8).mul(n), i = bt(e, t - 16).mul(vn); return is(Qt(a.add(r), 43).add(Qt(s, 30)).add(i), a.add(Qt(r.add(vn), 18)).add(s), n) } function $M(e, t = e.length) { let n = vn.add(t * 2), a = bt(e, 0).mul(vn), r = bt(e, 8), s = bt(e, t - 8).mul(n), i = bt(e, t - 16).mul(vn), o = Qt(a.add(r), 43).add(Qt(s, 30)).add(i), l = is(o, a.add(Qt(r.add(vn), 18)).add(s), n), u = bt(e, 16).mul(n), p = bt(e, 24), d = o.add(bt(e, t - 32)).mul(n), c = l.add(bt(e, t - 24)).mul(n); return is(Qt(u.add(p), 43).add(Qt(d, 30)).add(c), u.add(Qt(p.add(a), 18)).add(d), n) } function DM(e, t = e.length) { let n = Zs.fromNumber(81, !0); if (t <= 32) return t <= 16 ? AM(e, t) : FM(e, t); if (t <= 64) return $M(e, t); let a = n, r = n.mul(Xs).add(113), s = Ex(r.mul(vn).add(113)).mul(vn), i = [Zs.UZERO, Zs.UZERO], o = [Zs.UZERO, Zs.UZERO]; a = a.mul(vn).add(bt(e, 0)); let l = 0, u = (t - 1 >> 6) * 64, p = u + (t - 1 & 63) - 63; do a = Qt(a.add(r).add(i[0]).add(bt(e, l + 8)), 37).mul(Xs), r = Qt(r.add(i[1]).add(bt(e, l + 48)), 42).mul(Xs), a = a.xor(o[1]), r = r.add(i[0]).add(bt(e, l + 40)), s = Qt(s.add(o[0]), 33).mul(Xs), i = Dh(e, l, i[1].mul(Xs), a.add(o[0])), o = Dh(e, l + 32, s.add(o[1]), r.add(bt(e, l + 16))), [s, a] = [a, s], l += 64; while (l !== u); let d = Xs.add(s.and(255).shl(1)); return l = p, o[0] = o[0].add(t - 1 & 63), i[0] = i[0].add(o[0]), o[0] = o[0].add(i[0]), a = Qt(a.add(r).add(i[0]).add(bt(e, l + 8)), 37).mul(d), r = Qt(r.add(i[1]).add(bt(e, l + 48)), 42).mul(d), a = a.xor(o[1].mul(9)), r = r.add(i[0].mul(9).add(bt(e, l + 40))), s = Qt(s.add(o[0]), 33).mul(d), i = Dh(e, l, i[1].mul(d), a.add(o[0])), o = Dh(e, l + 32, s.add(o[1]), r.add(bt(e, l + 16))), [s, a] = [a, s], is(is(i[0], o[0], d).add(Ex(r).mul(yN)).add(s), is(i[1], o[1], d).add(a), d) } function RM(e, t) { return t === "string" ? ld(e) : Km([e], t) } function MM(e, t) { return e instanceof Float32Array && t === "float32" || e instanceof Int32Array && t === "int32" || e instanceof Uint8Array && t === "bool" } function Km(e, t) { if (t === "string") throw new Error("Cannot convert a string[] to a TypedArray"); if (Array.isArray(e) && (e = ps(e)), G().getBool("DEBUG") && sN(e, t), MM(e, t)) return e; if (t == null || t === "float32" || t === "complex64") return new Float32Array(e); if (t === "int32") return new Int32Array(e); if (t === "bool") { let n = new Uint8Array(e.length); for (let a = 0; a < n.length; ++a)Math.round(e[a]) !== 0 && (n[a] = 1); return n } else throw new Error(`Unknown data type ${t}`) } function kc() { return G().platform.now() } function OM(e, t) { return G().platform.fetch(e, t) } function ld(e, t = "utf-8") { return t = t || "utf-8", G().platform.encode(e, t) } function om(e, t = "utf-8") { return t = t || "utf-8", G().platform.decode(e, t) } function en(e) { return G().platform.isTypedArray != null ? G().platform.isTypedArray(e) : bN(e) } function ps(e, t = [], n = !1) { if (t == null && (t = []), typeof e == "boolean" || typeof e == "number" || typeof e == "string" || Rm(e) || e == null || en(e) && n) t.push(e); else if (Array.isArray(e) || en(e)) for (let a = 0; a < e.length; ++a)ps(e[a], t, n); else { let a = -1; for (let r of Object.keys(e)) /^([1-9]+[0-9]*|0)$/.test(r) && (a = Math.max(a, Number(r))); for (let r = 0; r <= a; r++)ps(e[r], t, n) } return t } var PM = class { constructor(e, t) { this.backendTimer = e, this.logger = t, t == null && (this.logger = new zM) } profileKernel(e, t, n) { let a, r = () => { a = n() }, s, i = kc(); if (this.backendTimer.timerAvailable()) s = this.backendTimer.time(r); else { r(); for (let o of a) o.dataSync(); s = Promise.resolve({ kernelMs: kc() - i }) } if (G().getBool("CHECK_COMPUTATION_FOR_ERRORS")) for (let o = 0; o < a.length; o++) { let l = a[o]; l.data().then(u => { LM(u, l.dtype, e) }) } return { kernelName: e, outputs: a, inputs: t, timeMs: s.then(o => o.kernelMs), extraInfo: s.then(o => o.getExtraProfileInfo != null ? o.getExtraProfileInfo() : "") } } logKernelProfile(e) { let { kernelName: t, outputs: n, timeMs: a, inputs: r, extraInfo: s } = e; n.forEach(i => { Promise.all([i.data(), a, s]).then(o => { this.logger.logKernelProfile(t, i, o[0], o[1], r, o[2]) }) }) } }; function LM(e, t, n) { if (t !== "float32") return !1; for (let a = 0; a < e.length; a++) { let r = e[a]; if (isNaN(r) || !isFinite(r)) return console.warn(`Found ${r} in the result of '${n}'`), !0 } return !1 } var zM = class { logKernelProfile(e, t, n, a, r, s) { let i = typeof a == "number" ? fc(`${a}ms`, 9) : a.error, o = fc(e, 25), l = t.rank, u = t.size, p = fc(t.shape.toString(), 14), d = ""; for (let c in r) { let h = r[c]; if (h != null) { let m = h.shape || t.shape, f = m.length; d += `${c}: ${f}D ${f > 0 ? m : ""} ` } } console.log(`%c${o}	%c${i}	%c${l}D ${p}	%c${u}	%c${d}	%c${s}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue") } }; function WM(e, t, n) { let a = {}, r = {}; for (let l = 0; l < t.length; l++)a[t[l].id] = !0; for (let l = 0; l < e.length; l++) { let u = e[l], p = u.inputs; for (let d in p) { let c = p[d], h = !1; for (let m = 0; m < t.length; m++)if (a[c.id]) { u.outputs.forEach(f => a[f.id] = !0), h = !0, r[u.id] = !0; break } if (h) break } } let s = {}; s[n.id] = !0; let i = {}; for (let l = e.length - 1; l >= 0; l--) { let u = e[l], p = u.inputs; for (let d = 0; d < u.outputs.length; d++)if (s[u.outputs[d].id]) { for (let c in p) s[p[c].id] = !0, i[u.id] = !0; break } } let o = []; for (let l = 0; l < e.length; l++) { let u = e[l]; if (r[u.id] && i[u.id]) { let p = {}; for (let c in u.inputs) { let h = u.inputs[c]; a[h.id] && (p[c] = h) } let d = Object.assign({}, u); d.inputs = p, d.outputs = u.outputs, o.push(d) } } return o } function BM(e, t, n, a) { for (let r = t.length - 1; r >= 0; r--) { let s = t[r], i = []; if (s.outputs.forEach(l => { let u = e[l.id]; u != null ? i.push(u) : i.push(null) }), s.gradient == null) throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`); let o = s.gradient(i); for (let l in s.inputs) { if (!(l in o)) throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(o)}.`); let u = n(() => o[l]()); if (u.dtype !== "float32") throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`); let p = s.inputs[l]; if (!$r(u.shape, p.shape)) throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${p.shape}'`); if (e[p.id] == null) e[p.id] = u; else { let d = e[p.id]; e[p.id] = a(d, u), d.dispose() } } } } var bI = 20, ec = 3, dx = 7; function VM(e, t, n, a) {
        let r = lu(t), s = UM(e, t, n, r), i = t.length, o = jh(e, t, n, r, s), l = ["Tensor"]; return a && (l.push(`  dtype: ${n}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(o.map(u => "    " + u).join(`
`)), l.join(`
`)
    } function UM(e, t, n, a) { let r = ot(t), s = a[a.length - 1], i = new Array(s).fill(0), o = t.length, l = n === "complex64" ? ic(e) : e; if (o > 1) for (let u = 0; u < r / s; u++) { let p = u * s; for (let d = 0; d < s; d++)i[d] = Math.max(i[d], sc(l[p + d], 0, n).length) } return i } function sc(e, t, n) { let a; return Array.isArray(e) ? a = `${parseFloat(e[0].toFixed(dx))} + ${parseFloat(e[1].toFixed(dx))}j` : ns(e) ? a = `'${e}'` : n === "bool" ? a = vN(e) : a = parseFloat(e.toFixed(dx)).toString(), fc(a, t) } function vN(e) { return e === 0 ? "false" : "true" } function jh(e, t, n, a, r, s = !0) {
        let i = n === "complex64" ? 2 : 1, o = t[0], l = t.length; if (l === 0) { if (n === "complex64") { let f = ic(e); return [sc(f[0], 0, n)] } return n === "bool" ? [vN(e[0])] : [e[0].toString()] } if (l === 1) { if (o > bI) { let f = ec * i, g = Array.from(e.slice(0, f)), b = Array.from(e.slice((o - ec) * i, o * i)); return n === "complex64" && (g = ic(g), b = ic(b)), ["[" + g.map((y, x) => sc(y, r[x], n)).join(", ") + ", ..., " + b.map((y, x) => sc(y, r[o - ec + x], n)).join(", ") + "]"] } return ["[" + (n === "complex64" ? ic(e) : Array.from(e)).map((f, g) => sc(f, r[g], n)).join(", ") + "]"] } let u = t.slice(1), p = a.slice(1), d = a[0] * i, c = []; if (o > bI) { for (let f = 0; f < ec; f++) { let g = f * d, b = g + d; c.push(...jh(e.slice(g, b), u, n, p, r, !1)) } c.push("..."); for (let f = o - ec; f < o; f++) { let g = f * d, b = g + d; c.push(...jh(e.slice(g, b), u, n, p, r, f === o - 1)) } } else for (let f = 0; f < o; f++) { let g = f * d, b = g + d; c.push(...jh(e.slice(g, b), u, n, p, r, f === o - 1)) } let h = l === 2 ? "," : ""; c[0] = "[" + (o > 0 ? c[0] + h : ""); for (let f = 1; f < c.length - 1; f++)c[f] = " " + c[f] + h; let m = `,
`; for (let f = 2; f < l; f++)m += `
`; return c[c.length - 1] = " " + c[c.length - 1] + "]" + (s ? "" : m), c
    } function ic(e) { let t = []; for (let n = 0; n < e.length; n += 2)t.push([e[n], e[n + 1]]); return t } var Wt = class { constructor(e, t, n) { if (this.dtype = t, this.shape = e.slice(), this.size = ot(e), n != null) { let a = n.length; A(a === this.size, () => `Length of values '${a}' does not match the size inferred by the shape '${this.size}'.`) } if (t === "complex64") throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag)."); this.values = n || Fv(t, this.size), this.strides = lu(e) } set(e, ...t) { t.length === 0 && (t = [0]), A(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`); let n = this.locToIndex(t); this.values[n] = e } get(...e) { e.length === 0 && (e = [0]); let t = 0; for (let a of e) { if (a < 0 || a >= this.shape[t]) { let r = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`; throw new Error(r) } t++ } let n = e[e.length - 1]; for (let a = 0; a < e.length - 1; ++a)n += this.strides[a] * e[a]; return this.values[n] } locToIndex(e) { if (this.rank === 0) return 0; if (this.rank === 1) return e[0]; let t = e[e.length - 1]; for (let n = 0; n < e.length - 1; ++n)t += this.strides[n] * e[n]; return t } indexToLoc(e) { if (this.rank === 0) return []; if (this.rank === 1) return [e]; let t = new Array(this.shape.length); for (let n = 0; n < t.length - 1; ++n)t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n]; return t[t.length - 1] = e, t } get rank() { return this.shape.length } toTensor() { return za().makeTensor(this.values, this.shape, this.dtype) } }, za = null, Pl = null, GM = null; function HM(e) { za = e } function qM(e) { Pl = e } function jM(e) { GM = e } var Ce = class { constructor(e, t, n, a) { this.kept = !1, this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = ot(e), this.strides = lu(e), this.dataId = n, this.id = a, this.rankType = this.rank < 5 ? this.rank.toString() : "higher" } get rank() { return this.shape.length } async buffer() { let e = await this.data(); return Pl.buffer(this.shape, this.dtype, e) } bufferSync() { return Pl.buffer(this.shape, this.dtype, this.dataSync()) } async array() { let e = await this.data(); return Bl(this.shape, e, this.dtype === "complex64") } arraySync() { return Bl(this.shape, this.dataSync(), this.dtype === "complex64") } async data() { this.throwIfDisposed(); let e = za().read(this.dataId); if (this.dtype === "string") { let t = await e; try { return t.map(n => om(n)) } catch (n) { throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().") } } return e } dataToGPU(e) { return this.throwIfDisposed(), za().readToGPU(this.dataId, e) } dataSync() { this.throwIfDisposed(); let e = za().readSync(this.dataId); if (this.dtype === "string") try { return e.map(t => om(t)) } catch (t) { throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().") } return e } async bytes() { this.throwIfDisposed(); let e = await za().read(this.dataId); return this.dtype === "string" ? e : new Uint8Array(e.buffer) } dispose() { this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), za().disposeTensor(this), this.isDisposedInternal = !0) } get isDisposed() { return this.isDisposedInternal } throwIfDisposed() { if (this.isDisposed) throw new Error("Tensor is disposed.") } print(e = !1) { return Pl.print(this, e) } clone() { return this.throwIfDisposed(), Pl.clone(this) } toString(e = !1) { let t = this.dataSync(); return VM(t, this.shape, this.dtype, e) } cast(e) { return this.throwIfDisposed(), Pl.cast(this, e) } variable(e = !0, t, n) { return this.throwIfDisposed(), za().makeVariable(this, e, t, n) } }; Object.defineProperty(Ce, Symbol.hasInstance, { value: e => !!e && e.data != null && e.dataSync != null && e.throwIfDisposed != null }); function Q() { return Rv("Tensor", () => Ce) } Q(); var cs = class extends Ce { constructor(e, t, n, a) { super(e.shape, e.dtype, e.dataId, a), this.trainable = t, this.name = n } assign(e) { if (e.dtype !== this.dtype) throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`); if (!$r(e.shape, this.shape)) throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`); za().disposeTensor(this), this.dataId = e.dataId, za().incRef(this, null) } dispose() { za().disposeVariable(this), this.isDisposedInternal = !0 } }; Object.defineProperty(cs, Symbol.hasInstance, { value: e => e instanceof Ce && e.assign != null && e.assign instanceof Function }); var Wa = {}; _e(Wa, { assertTypesMatch: () => IN, getTensorsInContainer: () => Ov, isTensorInList: () => XM, makeTypesMatch: () => At }); var _x; (function (e) { e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6" })(_x || (_x = {})); var Ax; (function (e) { e.float32 = "float32", e.int32 = "int32", e.bool = "int32", e.complex64 = "complex64" })(Ax || (Ax = {})); var Fx; (function (e) { e.float32 = "float32", e.int32 = "int32", e.bool = "bool", e.complex64 = "complex64" })(Fx || (Fx = {})); var $x; (function (e) { e.float32 = "float32", e.int32 = "float32", e.bool = "float32", e.complex64 = "complex64" })($x || ($x = {})); var Dx; (function (e) { e.float32 = "complex64", e.int32 = "complex64", e.bool = "complex64", e.complex64 = "complex64" })(Dx || (Dx = {})); var KM = { float32: $x, int32: Ax, bool: Fx, complex64: Dx }; function ga(e, t) { if (e === "string" || t === "string") { if (e === "string" && t === "string") return "string"; throw new Error(`Can not upcast ${e} with ${t}`) } return KM[e][t] } function Xm(e) { return ga(e, "int32") } function wN(e) { return e != null && typeof e == "object" && "texture" in e && e.texture instanceof WebGLTexture } function kN(e) { return typeof GPUBuffer != "undefined" && e != null && typeof e == "object" && "buffer" in e && e.buffer instanceof GPUBuffer } function At(e, t) { if (e.dtype === t.dtype) return [e, t]; let n = ga(e.dtype, t.dtype); return [e.cast(n), t.cast(n)] } function IN(e, t) { A(e.dtype === t.dtype, () => `The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`) } function XM(e, t) { return t.some(n => n.id === e.id) } function Ov(e) { let t = []; return SN(e, t, new Set), t } function SN(e, t, n) { if (e == null) return; if (e instanceof Ce) { t.push(e); return } if (!YM(e)) return; let a = e; for (let r in a) { let s = a[r]; n.has(s) || (n.add(s), SN(s, t, n)) } } function YM(e) { return Array.isArray(e) || typeof e == "object" } function hx(e) { return e.kernelName != null } var yI = class { constructor() { this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = new WeakMap, this.profiling = !1, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() { return Array.from(new Set(this.kernels.map(e => e.name))) } } } dispose() { for (let e in this.registeredVariables) this.registeredVariables[e].dispose() } }, Pv = class Rx { constructor(t) { this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new yI } async ready() { if (this.pendingBackendInit != null) return this.pendingBackendInit.then(() => { }); if (this.backendInstance != null) return; let t = this.getSortedBackends(); for (let n = 0; n < t.length; n++) { let a = t[n]; if (await this.initializeBackend(a).success) { await this.setBackend(a); return } } throw new Error("Could not initialize any backends, all backend initializations failed.") } get backend() { if (this.pendingBackendInit != null) throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`); if (this.backendInstance == null) { let { name: t, asyncInit: n } = this.initializeBackendsAndReturnBest(); if (n) throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`); this.setBackend(t) } return this.backendInstance } backendNames() { return Object.keys(this.registryFactory) } findBackend(t) { if (!(t in this.registry)) if (t in this.registryFactory) { let { asyncInit: n } = this.initializeBackend(t); if (n) return null } else return null; return this.registry[t] } findBackendFactory(t) { return t in this.registryFactory ? this.registryFactory[t].factory : null } registerBackend(t, n, a = 1) { return t in this.registryFactory ? (ts(`${t} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[t] = { factory: n, priority: a }, !0) } async setBackend(t) { if (this.registryFactory[t] == null) throw new Error(`Backend name '${t}' not found in registry`); if (this.backendName = t, this.registry[t] == null) { this.backendInstance = null; let { success: n, asyncInit: a } = this.initializeBackend(t); if (!(a ? await n : n)) return !1 } return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new PM(this.backendInstance), !0 } setupRegisteredKernels() { im(this.backendName).forEach(t => { t.setupFunc != null && t.setupFunc(this.backendInstance) }) } disposeRegisteredKernels(t) { im(t).forEach(n => { n.disposeFunc != null && n.disposeFunc(this.registry[t]) }) } initializeBackend(t) { let n = this.registryFactory[t]; if (n == null) throw new Error(`Cannot initialize backend ${t}, no registration found.`); try { let a = n.factory(); if (a && !(a instanceof Pc) && typeof a.then == "function") { let r = ++this.pendingBackendInitId, s = a.then(i => r < this.pendingBackendInitId ? !1 : (this.registry[t] = i, this.pendingBackendInit = null, !0)).catch(i => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, ts(`Initialization of backend ${t} failed`), ts(i.stack || i.message)), !1)); return this.pendingBackendInit = s, { success: s, asyncInit: !0 } } else return this.registry[t] = a, { success: !0, asyncInit: !1 } } catch (a) { return ts(`Initialization of backend ${t} failed`), ts(a.stack || a.message), { success: !1, asyncInit: !1 } } } removeBackend(t) { if (!(t in this.registryFactory)) throw new Error(`${t} backend not found in registry`); this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null) } getSortedBackends() { if (Object.keys(this.registryFactory).length === 0) throw new Error("No backend found in registry."); return Object.keys(this.registryFactory).sort((t, n) => this.registryFactory[n].priority - this.registryFactory[t].priority) } initializeBackendsAndReturnBest() { let t = this.getSortedBackends(); for (let n = 0; n < t.length; n++) { let a = t[n], { success: r, asyncInit: s } = this.initializeBackend(a); if (s || r) return { name: a, asyncInit: s } } throw new Error("Could not initialize any backends, all backend initializations failed.") } moveData(t, n) { let a = this.state.tensorInfo.get(n), r = a.backend, s = this.readSync(n), i = r.refCount(n); r.disposeData(n, !0), a.backend = t, t.move(n, s, a.shape, a.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++ } tidy(t, n) { let a = null; if (n == null) { if (typeof t != "function") throw new Error("Please provide a function to tidy()"); n = t } else { if (typeof t != "string" && !(t instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string"); if (typeof n != "function") throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function"); a = t } let r; return this.scopedRun(() => this.startScope(a), () => this.endScope(r), () => (r = n(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r)) } scopedRun(t, n, a) { t(); try { let r = a(); return n(), r } catch (r) { throw n(), r } } nextTensorId() { return Rx.nextTensorId++ } nextVariableId() { return Rx.nextVariableId++ } clone(t) { let n = P.runKernel(no, { x: t }), a = { x: t }, r = i => ({ x: () => { let o = "float32", l = { x: i }, u = { dtype: o }; return P.runKernel(Pi, l, u) } }), s = []; return this.addTapeNode(this.state.activeScope.name, a, [n], r, s, {}), n } runKernel(t, n, a) { if (this.backendName == null && this.backend, wc(t, this.backendName) == null) throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`); return this.runKernelFunc({ kernelName: t, inputs: n, attrs: a }) } shouldCheckForMemLeaks() { return this.ENV.getBool("IS_TEST") } checkKernelForMemLeak(t, n, a) { let r = this.backend.numDataIds(), s = 0; a.forEach(l => { s += l.dtype === "complex64" ? 3 : 1 }); let i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], o = r - n - s - i; if (o > 0) throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`) } runKernelFunc(t) { let n, a = [], r = this.isTapeOn(), s = this.state.numBytes, i = this.state.numTensors; this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0); let o; this.backendName == null && this.backend; let l, u = hx(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ""; if (hx(t)) { let { kernelName: m, inputs: f, attrs: g } = t; this.backendName == null && this.backend; let b = wc(m, this.backendName); A(b != null, () => `Cannot find registered kernel '${m}' for backend '${this.backendName}'`), o = () => { let y = this.backend.numDataIds(); l = b.kernelFunc({ inputs: f, attrs: g, backend: this.backend }); let x = Array.isArray(l) ? l : [l]; this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(m, y, x); let v = x.map(I => I.rank != null ? I : this.makeTensorFromTensorInfo(I)); if (r) { let I = this.getTensorsForGradient(m, f, v); a = this.saveTensorsForBackwardMode(I) } return v } } else { let { forwardFunc: m } = t, f = g => { r && (a = g.map(b => this.keep(this.clone(b)))) }; o = () => { let g = this.backend.numDataIds(); l = this.tidy(() => m(this.backend, f)); let b = Array.isArray(l) ? l : [l]; return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, g, b), b } } let { inputs: p, attrs: d } = t, c = hx(t) ? null : t.backwardsFunc, h; return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => { !this.ENV.getBool("DEBUG") && !this.state.profiling ? n = o() : (h = this.profiler.profileKernel(u, p, () => o()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(h), n = h.outputs) }), r && this.addTapeNode(u, p, n, c, a, d), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - s, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - i, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(p).map(m => p[m] != null ? p[m].shape : null), outputShapes: n.map(m => m.shape), kernelTimeMs: h.timeMs, extraInfo: h.extraInfo }), Array.isArray(l) ? n : n[0] } saveTensorsForBackwardMode(t) { return t.map(n => this.keep(this.clone(n))) } getTensorsForGradient(t, n, a) { let r = Cx(t); if (r != null) { let s = r.inputsToSave || [], i = r.outputsToSave || [], o; r.saveAllInputs ? (A(Array.isArray(n), () => "saveAllInputs is true, expected inputs to be an array."), o = Object.keys(n).map(u => n[u])) : o = s.map(u => n[u]); let l = a.filter((u, p) => i[p]); return o.concat(l) } return [] } makeTensor(t, n, a, r) { if (t == null) throw new Error("Values passed to engine.makeTensor() are null"); a = a || "float32", r = r || this.backend; let s = t; a === "string" && ns(t[0]) && (s = t.map(l => ld(l))); let i = r.write(s, n, a), o = new Ce(n, a, i, this.nextTensorId()); if (this.trackTensor(o, r), a === "string") { let l = this.state.tensorInfo.get(i), u = oN(s); this.state.numBytes += u - l.bytes, l.bytes = u } return o } makeTensorFromDataId(t, n, a, r) { a = a || "float32"; let s = { dataId: t, shape: n, dtype: a }; return this.makeTensorFromTensorInfo(s, r) } makeTensorFromTensorInfo(t, n) { let { dataId: a, shape: r, dtype: s } = t, i = new Ce(r, s, a, this.nextTensorId()); return this.trackTensor(i, n), i } makeVariable(t, n = !0, a, r) { a = a || this.nextVariableId().toString(), r != null && r !== t.dtype && (t = t.cast(r)); let s = new cs(t, n, a, this.nextTensorId()); if (this.state.registeredVariables[s.name] != null) throw new Error(`Variable with name ${s.name} was already registered`); return this.state.registeredVariables[s.name] = s, this.incRef(s, this.backend), s } trackTensor(t, n) { this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++; let a = 0; t.dtype !== "complex64" && t.dtype !== "string" && (a = t.size * am(t.dtype)), this.state.numBytes += a, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, { backend: n || this.backend, dtype: t.dtype, shape: t.shape, bytes: a })), t instanceof cs || this.track(t) } incRef(t, n) { this.trackTensor(t, n), this.backend.incRef(t.dataId) } removeDataId(t, n) { this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === n && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--) } disposeTensor(t) { if (!this.state.tensorInfo.has(t.dataId)) return; let n = this.state.tensorInfo.get(t.dataId); if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= n.bytes), t.dtype !== "complex64" && t.dtype !== "string") { let a = t.size * am(t.dtype); this.state.numBytes -= a } n.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, n.backend) } disposeVariables() { for (let t in this.state.registeredVariables) { let n = this.state.registeredVariables[t]; this.disposeVariable(n) } } disposeVariable(t) { this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name] } memory() { let t = this.backend.memory(); return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t } async profile(t) { this.state.profiling = !0; let n = this.state.numBytes, a = this.state.numTensors; this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(r => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - n, this.state.activeProfile.newTensors = this.state.numTensors - a; for (let r of this.state.activeProfile.kernels) r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo; return this.state.activeProfile } isTapeOn() { return this.state.gradientDepth > 0 && this.state.kernelDepth === 0 } addTapeNode(t, n, a, r, s, i) { let o = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: n, outputs: a, saved: s }, l = Cx(t); l != null && (r = l.gradFunc), r != null && (o.gradient = u => (u = u.map((p, d) => { if (p == null) { let c = a[d], h = Dm(c.size, c.dtype); return this.makeTensor(h, c.shape, c.dtype) } return p }), r(u.length > 1 ? u : u[0], s, i))), this.state.activeTape.push(o) } keep(t) { return t.kept = !0, t } startTape() { this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++ } endTape() { this.state.gradientDepth-- } startScope(t) { let n = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ }; t && (n.name = t), this.state.scopeStack.push(n), this.state.activeScope = n } endScope(t) { let n = Ov(t), a = new Set(n.map(s => s.id)); for (let s = 0; s < this.state.activeScope.track.length; s++) { let i = this.state.activeScope.track[s]; !i.kept && !a.has(i.id) && i.dispose() } let r = this.state.scopeStack.pop(); this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n.forEach(s => { !s.kept && s.scopeId === r.id && this.track(s) }) } gradients(t, n, a, r = !1) { if (A(n.length > 0, () => "gradients() received an empty list of xs."), a != null && a.dtype !== "float32") throw new Error(`dy must have 'float32' dtype, but has '${a.dtype}'`); let s = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t)); A(s instanceof Ce, () => "The result y returned by f() must be a tensor."); let i = WM(this.state.activeTape, n, s); if (!r && i.length === 0 && n.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y."); return this.tidy("backward", () => { let o = {}; o[s.id] = a == null ? ZM(s.shape) : a, BM(o, i, u => this.tidy(u), JM); let l = n.map(u => o[u.id]); return this.state.gradientDepth === 0 && (this.state.activeTape.forEach(u => { for (let p of u.saved) p.dispose() }), this.state.activeTape = null), { value: s, grads: l } }) } customGrad(t) { return A(us(t), () => "The f passed in customGrad(f) must be a function."), (...n) => { A(n.every(o => o instanceof Ce), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors"); let a, r = {}; n.forEach((o, l) => { r[l] = o }); let s = (o, l) => (a = t(...n, l), A(a.value instanceof Ce, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), A(us(a.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), a.value), i = (o, l) => { let u = a.gradFunc(o, l), p = Array.isArray(u) ? u : [u]; A(p.length === n.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), A(p.every(c => c instanceof Ce), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."); let d = {}; return p.forEach((c, h) => { d[h] = () => c }), d }; return this.runKernelFunc({ forwardFunc: s, backwardsFunc: i, inputs: r }) } } readSync(t) { return this.state.tensorInfo.get(t).backend.readSync(t) } read(t) { return this.state.tensorInfo.get(t).backend.read(t) } readToGPU(t, n) { return this.state.tensorInfo.get(t).backend.readToGPU(t, n) } async time(t) { let n = kc(), a = await this.backend.time(t); return a.wallMs = kc() - n, a } track(t) { return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t } get registeredVariables() { return this.state.registeredVariables } reset() { this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new yI; for (let t in this.registry) this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]; this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null } }; Pv.nextTensorId = 0; Pv.nextVariableId = 0; function ZM(e) { let t = $v(ot(e), "float32"); return P.makeTensor(t, e, "float32") } function NN() { let e = dN(); if (e._tfengine == null) { let t = new cN(e); e._tfengine = new Pv(t) } return xM(e._tfengine.ENV), HM(() => e._tfengine), e._tfengine } var P = NN(); function JM(e, t) { let n = { a: e, b: t }; return P.runKernel(Is, n) } var ud = {}; _e(ud, { isBrowser: () => TN, isMobile: () => tO, mockIsMobile: () => eO }); function QM() { return typeof navigator != "undefined" && navigator != null } var Mx; function eO(e) { Mx = e } function tO(e) { if (Mx !== void 0) return Mx; if (e || QM()) { if (e || (e = navigator), e.product === "ReactNative") return !0; let t = e.userAgent || e.vendor || (typeof window != "undefined" ? window.opera : ""); if (!t) { let n = e; return n.userAgentData && n.userAgentData.mobile } return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4)) } return !1 } function TN() { return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined" } var zn = G(); zn.registerFlag("DEBUG", () => !1, e => { e && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.") }); zn.registerFlag("IS_BROWSER", () => TN()); zn.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined"); zn.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)); zn.registerFlag("IS_SAFARI", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor)); zn.registerFlag("PROD", () => !1); zn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => zn.getBool("DEBUG")); zn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0); zn.registerFlag("IS_TEST", () => !1); zn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => zn.getBool("DEBUG")); zn.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1); zn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1); zn.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1); function pr(e, t) { let n = e; if (en(e)) return t === "string" ? [] : [e.length]; if (wN(e)) { let r = e.channels || "RGBA"; return [e.height, e.width * r.length] } else if (kN(e)) return [e.buffer.size / (t == null ? 4 : am(t))]; if (!Array.isArray(e)) return []; let a = []; for (; Array.isArray(n) || en(n) && t !== "string";)a.push(n.length), n = n[0]; return Array.isArray(e) && G().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && CN(e, a, []), a } function CN(e, t, n) { if (n = n || [], !Array.isArray(e) && !en(e)) { A(t.length === 0, () => `Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`); return } A(t.length > 0, () => `Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`), A(e.length === t[0], () => `Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`); let a = t.slice(1); for (let r = 0; r < e.length; ++r)CN(e[r], a, n.concat(r)) } function xI(e, t, n, a) { if (e !== "string_or_numeric") { if (e == null) throw new Error("Expected dtype cannot be null."); if (e !== "numeric" && e !== t || e === "numeric" && t === "string") throw new Error(`Argument '${n}' passed to '${a}' must be ${e} tensor, but got ${t} tensor`) } } function E(e, t, n, a = "numeric") { if (e instanceof Q()) return xI(a, e.dtype, t, n), e; let r = Lc(e); if (r !== "string" && ["bool", "int32", "float32"].indexOf(a) >= 0 && (r = a), xI(a, r, t, n), e == null || !en(e) && !Array.isArray(e) && typeof e != "number" && typeof e != "boolean" && typeof e != "string") { let o = e == null ? "null" : e.constructor.name; throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${o}'`) } let s = pr(e, r); !en(e) && !Array.isArray(e) && (e = [e]); let i = r !== "string" ? Km(e, r) : ps(e, [], !0); return P.makeTensor(i, s, r) } function Ic(e, t, n, a = "numeric") { if (!Array.isArray(e)) throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``); return e.map((r, s) => E(r, `${t}[${s}]`, n, a)) } var Lv = "__op"; function L(e) { let t = Object.keys(e); if (t.length !== 1) throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`); let n = t[0], a = e[n]; n.endsWith("_") && (n = n.substring(0, n.length - 1)), n = n + Lv; let r = (...s) => { P.startScope(n); try { let i = a(...s); return Rm(i) && console.error("Cannot return a Promise inside of tidy."), P.endScope(i), i } catch (i) { throw P.endScope(null), i } }; return Object.defineProperty(r, "name", { value: n, configurable: !0 }), r } function nO(e, t) { let n = E(e, "real", "complex"), a = E(t, "imag", "complex"); Sn(n.shape, a.shape, `real and imag shapes, ${n.shape} and ${a.shape}, must match in call to tf.complex().`); let r = { real: n, imag: a }; return P.runKernel(Mm, r) } var Ar = L({ complex_: nO }); function Cs(e, t, n, a) { if (a == null) a = Lc(e); else if (a === "complex64") throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag)."); if (kN(e) || wN(e)) { if (a !== "float32" && a !== "int32") throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${a}.`); return P.backend.createTensorFromGPUData(e, t || n, a) } if (!en(e) && !Array.isArray(e) && typeof e != "number" && typeof e != "boolean" && typeof e != "string") throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray"); if (t != null) { ra(t); let r = ot(t), s = ot(n); A(r === s, () => `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${s}`); for (let i = 0; i < n.length; ++i) { let o = n[i], l = i === n.length - 1 ? o !== ot(t.slice(i)) : !0; A(n[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `) } } return !en(e) && !Array.isArray(e) && (e = [e]), t = t || n, e = a !== "string" ? Km(e, a) : ps(e, [], !0), P.makeTensor(e, t, a) } function bn(e, t, n) { let a = pr(e, n); return Cs(e, t, a, n) } var pi = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 }, Dr = class EN { static join(t) { return new EN(t).slice() } constructor(t) { if (this.shards = [], this.previousShardIndex = 0, t == null || (t instanceof Array || (t = [t]), t = t.map(a => en(a) ? a.buffer : a), t.length === 0)) return; this.bufferUniformSize = t[0].byteLength; let n = 0; for (let a = 0; a < t.length; a++) { let r = t[a]; a !== t.length - 1 && r.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0); let s = n + r.byteLength; this.shards.push({ buffer: r, start: n, end: s }), n = s } this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end } slice(t = 0, n = this.byteLength) { if (this.shards.length === 0) return new ArrayBuffer(0); if (t = isNaN(Number(t)) ? 0 : t, n = isNaN(Number(n)) ? 0 : n, t = Math.max(0, t), n = Math.min(this.byteLength, n), n <= t) return new ArrayBuffer(0); let a = this.findShardForByte(t); if (a === -1) throw new Error(`Could not find start shard for byte ${t}`); let r = n - t, s = new ArrayBuffer(r), i = new Uint8Array(s), o = 0; for (let l = a; l < this.shards.length; l++) { let u = this.shards[l], p = t + o - u.start, d = o, c = Math.min(n, u.end) - u.start, h = new Uint8Array(u.buffer, p, c - p); if (i.set(h, d), o += h.length, n < u.end) break } return s } findShardForByte(t) { if (this.shards.length === 0 || t < 0 || t >= this.byteLength) return -1; if (this.bufferUniformSize != null) return this.previousShardIndex = Math.floor(t / this.bufferUniformSize), this.previousShardIndex; function n(r) { return t < r.start ? -1 : t >= r.end ? 1 : 0 } if (n(this.shards[this.previousShardIndex]) === 0) return this.previousShardIndex; let a = aO(this.shards, n); return a === -1 ? -1 : (this.previousShardIndex = a, this.previousShardIndex) } }; function aO(e, t) { let n = 0, a = e.length; for (; n <= a;) { let r = Math.floor((a - n) / 2) + n, s = t(e[r]); if (s === 0) return r; s < 0 ? a = r : n = r + 1 } return -1 } function rO() { G().set("PROD", !0) } function sO() { G().set("DEBUG", !0) } function iO() { G().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.") } function zv(e) { G().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(e + " You can disable deprecation warnings with tf.disableDeprecationWarnings().") } jM(zv); function oO() { P.disposeVariables() } function Ea() { return P } function lm() { return P.memory() } function lO(e) { return P.profile(e) } function O(e, t) { return P.tidy(e, t) } function Ee(e) { Ov(e).forEach(t => t.dispose()) } function Ht(e) { return P.keep(e) } function uO(e) { return P.time(e) } function pO(e) { return P.setBackend(e) } function cO() { return P.ready() } function _N() { return P.backendName } function dO(e) { P.removeBackend(e) } function hO(e) { return P.findBackend(e) } function mO(e) { return P.findBackendFactory(e) } function Ym(e, t, n = 1) { return P.registerBackend(e, t, n) } function Wv() { return P.backend } function fO(e, t) { G().setPlatform(e, t) } var ds = 4; async function gO(e, t) { let n = [], a = [], r = Array.isArray(e) ? e.map(i => i.name) : Object.keys(e); for (let i = 0; i < r.length; ++i) { let o = r[i], l = Array.isArray(e) ? e[i].tensor : e[o]; if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64") throw new Error(`Unsupported dtype in weight '${o}': ${l.dtype}`); let u = { name: o, shape: l.shape, dtype: l.dtype }; if (l.dtype === "string") { let p = new Promise(async d => { let c = await l.bytes(), h = c.reduce((g, b) => g + b.length, 0) + ds * c.length, m = new Uint8Array(h), f = 0; for (let g = 0; g < c.length; g++) { let b = c[g], y = new Uint8Array(new Uint32Array([b.length]).buffer); m.set(y, f), f += ds, m.set(b, f), f += b.length } d(m) }); a.push(p) } else a.push(l.data()); t != null && (u.group = t), n.push(u) } let s = await Promise.all(a); return { data: xO(s), specs: n } } function AN(e, t) { let n = new Dr(e), a = {}, r = 0; for (let s of t) { let i = bO(s, (o, l) => n.slice(r + o, r + l)); a[s.name] = FN(s, n.slice(r, r + i)), r += i } return a } function bO(e, t) { let n = ot(e.shape), a; if ("quantization" in e) { let r = e.quantization; a = pi[r.dtype] } else if (e.dtype === "string") { let r = 0; for (let s = 0; s < n; s++)r += ds + new Uint32Array(t(r, r + ds))[0]; return r } else a = pi[e.dtype]; return n * a } async function yO(e, t) { let n = ot(e.shape), a; if ("quantization" in e) { let r = e.quantization; a = pi[r.dtype] } else if (e.dtype === "string") { let r = 0; for (let s = 0; s < n; s++)r += ds + new Uint32Array(await t(r, r + ds))[0]; return r } else a = pi[e.dtype]; return n * a } function FN(e, t) { let n = e.name, a = e.dtype, r = e.shape, s = ot(r), i, o = 0; if ("quantization" in e) { let l = e.quantization; if (l.dtype === "uint8" || l.dtype === "uint16") { if (!("min" in l && "scale" in l)) throw new Error(`Weight ${e.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`) } else if (l.dtype === "float16") { if (a !== "float32") throw new Error(`Weight ${e.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${a}.`) } else throw new Error(`Weight ${e.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`); let u = pi[l.dtype], p = l.dtype === "uint8" ? new Uint8Array(t) : new Uint16Array(t); if (a === "float32") if (l.dtype === "uint8" || l.dtype === "uint16") { i = new Float32Array(p.length); for (let d = 0; d < p.length; d++) { let c = p[d]; i[d] = c * l.scale + l.min } } else if (l.dtype === "float16") i = TO()(p); else throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`); else if (a === "int32") { if (l.dtype !== "uint8" && l.dtype !== "uint16") throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`); i = new Int32Array(p.length); for (let d = 0; d < p.length; d++) { let c = p[d]; i[d] = Math.round(c * l.scale + l.min) } } else throw new Error(`Unsupported dtype in weight '${n}': ${a}`); o += s * u } else if (a === "string") { let l = ot(e.shape); i = []; for (let u = 0; u < l; u++) { let p = new Uint32Array(t.slice(o, o + ds))[0]; o += ds; let d = new Uint8Array(t.slice(o, o + p)); i.push(d), o += p } } else { let l = pi[a]; if (a === "float32") i = new Float32Array(t); else if (a === "int32") i = new Int32Array(t); else if (a === "bool") i = new Uint8Array(t); else if (a === "complex64") { i = new Float32Array(t); let u = new Float32Array(i.length / 2), p = new Float32Array(i.length / 2); for (let m = 0; m < u.length; m++)u[m] = i[m * 2], p[m] = i[m * 2 + 1]; let d = bn(u, r, "float32"), c = bn(p, r, "float32"), h = Ar(d, c); return d.dispose(), c.dispose(), h } else throw new Error(`Unsupported dtype in weight '${n}': ${a}`); o += s * l } return bn(i, r, a) } async function vI(e, t, n) { let a = new Uint8Array(t); for (; a.byteLength < n;) { let { done: r, value: s } = await e.read(); if (r && s == null) { let o = n - a.byteLength; throw new Error(`Reader is done but ${o} bytes are still expected`) } let i = new Uint8Array(a.length + s.byteLength); i.set(a, 0), i.set(new Uint8Array(s), a.length), a = i } return a.buffer } async function $N(e, t) { let n = {}, a = e.getReader(), r = new ArrayBuffer(0); for (let s of t) { let i = await yO(s, async (u, p) => (r = await vI(a, r, p), r.slice(u, p))); r = await vI(a, r, i); let o = r.slice(0, i); r = r.slice(i); let l = FN(s, o); if (n[s.name] = l, _N() === "webgpu") { let u = Wv(); "uploadToGPU" in u && ot(l.shape) >= G().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD") && u.uploadToGPU(l.dataId) } } return n } function xO(e) { if (e === null) throw new Error(`Invalid input value: ${JSON.stringify(e)}`); let t = 0, n = []; e.forEach(s => { if (t += s.byteLength, n.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)), !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array)) throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`) }); let a = new Uint8Array(t), r = 0; return n.forEach(s => { a.set(new Uint8Array(s.buffer), r), r += s.byteLength }), a.buffer } var Bv = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined"); function wI(e) { return Bv ? Buffer.byteLength(e, "utf8") : new Blob([e]).size } function vO(e) { if (Bv) return Buffer.from(e).toString("base64"); let t = new Uint8Array(e), n = ""; for (let a = 0, r = t.length; a < r; a++)n += String.fromCharCode(t[a]); return btoa(n) } function wO(e) { if (Bv) { let a = Buffer.from(e, "base64"); return a.buffer.slice(a.byteOffset, a.byteOffset + a.byteLength) } let t = atob(e), n = new Uint8Array(t.length); for (let a = 0; a < t.length; ++a)n.set([t.charCodeAt(a)], a); return n.buffer } function kO(e) { return Dr.join(e) } function kI(e) { let t = "/"; for (e = e.trim(); e.endsWith(t);)e = e.slice(0, e.length - 1); let n = e.split(t); return n[n.length - 1] } function DN(e, t) { let n = { modelTopology: e.modelTopology, format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, weightsManifest: t }; return e.signature != null && (n.signature = e.signature), e.userDefinedMetadata != null && (n.userDefinedMetadata = e.userDefinedMetadata), e.modelInitializer != null && (n.modelInitializer = e.modelInitializer), e.initializerSignature != null && (n.initializerSignature = e.initializerSignature), e.trainingConfig != null && (n.trainingConfig = e.trainingConfig), n } function RN(e, t, n) { let a = { modelTopology: e.modelTopology, format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy }; if (e.trainingConfig != null && (a.trainingConfig = e.trainingConfig), e.weightsManifest != null) { if (!t) throw new Error("modelJSON has weightsManifest but weightSpecs is null"); if (!n) throw new Error("modelJSON has weightsManifest but weightData is null"); a.weightSpecs = t, a.weightData = n } return e.signature != null && (a.signature = e.signature), e.userDefinedMetadata != null && (a.userDefinedMetadata = e.userDefinedMetadata), e.modelInitializer != null && (a.modelInitializer = e.modelInitializer), e.initializerSignature != null && (a.initializerSignature = e.initializerSignature), a } async function Vv(e, t) { let n, a; return e.weightsManifest != null && ([n, a] = await t(e.weightsManifest)), RN(e, n, a) } function pd(e) { if (e.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer."); return { dateSaved: new Date, modelTopologyType: "JSON", modelTopologyBytes: e.modelTopology == null ? 0 : wI(JSON.stringify(e.modelTopology)), weightSpecsBytes: e.weightSpecs == null ? 0 : wI(JSON.stringify(e.weightSpecs)), weightDataBytes: e.weightData == null ? 0 : new Dr(e.weightData).byteLength } } function Ox(e) { let t = []; for (let n of e) t.push(...n.weights); return t } function IO() { let e = n => { let a = n << 13, r = 0; for (; !(a & 8388608);)r -= 8388608, a <<= 1; return a &= -8388609, r += 947912704, a | r }, t = new Uint32Array(2048); t[0] = 0; for (let n = 1; n < 1024; n++)t[n] = e(n); for (let n = 1024; n < 2048; n++)t[n] = 939524096 + (n - 1024 << 13); return t } function SO() { let e = new Uint32Array(64); e[0] = 0, e[31] = 1199570944, e[32] = 2147483648, e[63] = 3347054592; for (let t = 1; t < 31; t++)e[t] = t << 23; for (let t = 33; t < 63; t++)e[t] = 2147483648 + (t - 32 << 23); return e } function NO() { let e = new Uint32Array(64); for (let t = 0; t < 64; t++)e[t] = 1024; return e[0] = e[32] = 0, e } function TO() { let e = IO(), t = SO(), n = NO(); return a => { let r = new ArrayBuffer(4 * a.length), s = new Uint32Array(r); for (let i = 0; i < a.length; i++) { let o = a[i], l = e[n[o >> 10] + (o & 1023)] + t[o >> 10]; s[i] = l } return new Float32Array(r) } } var ba = class La { constructor() { this.saveRouters = [], this.loadRouters = [] } static getInstance() { return La.instance == null && (La.instance = new La), La.instance } static registerSaveRouter(t) { La.getInstance().saveRouters.push(t) } static registerLoadRouter(t) { La.getInstance().loadRouters.push(t) } static getSaveHandlers(t) { return La.getHandlers(t, "save") } static getLoadHandlers(t, n) { return La.getHandlers(t, "load", n) } static getHandlers(t, n, a) { let r = []; return (n === "load" ? La.getInstance().loadRouters : La.getInstance().saveRouters).forEach(s => { let i = s(t, a); i !== null && r.push(i) }), r } }, CO = e => ba.registerSaveRouter(e), EO = e => ba.registerLoadRouter(e), _O = e => ba.getSaveHandlers(e), AO = (e, t) => ba.getLoadHandlers(e, t), Px = "tensorflowjs", Lx = 1, ni = "models_store", as = "model_info_store"; function MN() { if (!G().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser."); let e = typeof window == "undefined" ? self : window, t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB; if (t == null) throw new Error("The current browser does not appear to support IndexedDB."); return t } function zx(e) { let t = e.result; t.createObjectStore(ni, { keyPath: "modelPath" }), t.createObjectStore(as, { keyPath: "modelPath" }) } var ci = class { constructor(e) { if (this.indexedDB = MN(), e == null || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty."); this.modelPath = e } async save(e) { if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet."); return this.databaseAction(this.modelPath, e) } async load() { return this.databaseAction(this.modelPath) } databaseAction(e, t) { return new Promise((n, a) => { let r = this.indexedDB.open(Px, Lx); r.onupgradeneeded = () => zx(r), r.onsuccess = () => { let s = r.result; if (t == null) { let i = s.transaction(ni, "readonly"), o = i.objectStore(ni).get(this.modelPath); o.onsuccess = () => { if (o.result == null) return s.close(), a(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`)); n(o.result.modelArtifacts) }, o.onerror = l => (s.close(), a(o.error)), i.oncomplete = () => s.close() } else { t.weightData = Dr.join(t.weightData); let i = pd(t), o = s.transaction(as, "readwrite"), l = o.objectStore(as), u; try { u = l.put({ modelPath: this.modelPath, modelArtifactsInfo: i }) } catch (d) { return a(d) } let p; u.onsuccess = () => { p = s.transaction(ni, "readwrite"); let d = p.objectStore(ni), c; try { c = d.put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: i }) } catch (h) { return a(h) } c.onsuccess = () => n({ modelArtifactsInfo: i }), c.onerror = h => { l = o.objectStore(as); let m = l.delete(this.modelPath); m.onsuccess = () => (s.close(), a(c.error)), m.onerror = f => (s.close(), a(c.error)) } }, u.onerror = d => (s.close(), a(u.error)), o.oncomplete = () => { p == null ? s.close() : p.oncomplete = () => s.close() } } }, r.onerror = s => a(r.error) }) } }; ci.URL_SCHEME = "indexeddb://"; var ON = e => G().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(ci.URL_SCHEME) ? FO(e.slice(ci.URL_SCHEME.length)) : null; ba.registerSaveRouter(ON); ba.registerLoadRouter(ON); function FO(e) { return new ci(e) } function $O(e) { return e.startsWith(ci.URL_SCHEME) ? e.slice(ci.URL_SCHEME.length) : e } var DO = class { constructor() { this.indexedDB = MN() } async listModels() { return new Promise((e, t) => { let n = this.indexedDB.open(Px, Lx); n.onupgradeneeded = () => zx(n), n.onsuccess = () => { let a = n.result, r = a.transaction(as, "readonly"), s = r.objectStore(as).getAll(); s.onsuccess = () => { let i = {}; for (let o of s.result) i[o.modelPath] = o.modelArtifactsInfo; e(i) }, s.onerror = i => (a.close(), t(s.error)), r.oncomplete = () => a.close() }, n.onerror = a => t(n.error) }) } async removeModel(e) { return e = $O(e), new Promise((t, n) => { let a = this.indexedDB.open(Px, Lx); a.onupgradeneeded = () => zx(a), a.onsuccess = () => { let r = a.result, s = r.transaction(as, "readwrite"), i = s.objectStore(as), o = i.get(e), l; o.onsuccess = () => { if (o.result == null) return r.close(), n(new Error(`Cannot find model with path '${e}' in IndexedDB.`)); { let u = i.delete(e), p = () => { l = r.transaction(ni, "readwrite"); let d = l.objectStore(ni).delete(e); d.onsuccess = () => t(o.result.modelArtifactsInfo), d.onerror = c => n(o.error) }; u.onsuccess = p, u.onerror = d => (p(), r.close(), n(o.error)) } }, o.onerror = u => (r.close(), n(o.error)), s.oncomplete = () => { l == null ? r.close() : l.oncomplete = () => r.close() } }, a.onerror = r => n(a.error) }) } }, Cr = "/", Ll = "tensorflowjs_models", PN = "info", RO = "model_topology", MO = "weight_specs", OO = "weight_data", PO = "model_metadata"; function LN(e) { return { info: [Ll, e, PN].join(Cr), topology: [Ll, e, RO].join(Cr), weightSpecs: [Ll, e, MO].join(Cr), weightData: [Ll, e, OO].join(Cr), modelMetadata: [Ll, e, PO].join(Cr) } } function zN(e) { for (let t of Object.values(e)) window.localStorage.removeItem(t) } function LO(e) { let t = e.split(Cr); if (t.length < 3) throw new Error(`Invalid key format: ${e}`); return t.slice(1, t.length - 1).join(Cr) } function zO(e) { return e.startsWith(di.URL_SCHEME) ? e.slice(di.URL_SCHEME.length) : e } var di = class { constructor(e) { if (!G().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined") throw new Error("The current environment does not support local storage."); if (this.LS = window.localStorage, e == null || !e) throw new Error("For local storage, modelPath must not be null, undefined or empty."); this.modelPath = e, this.keys = LN(this.modelPath) } async save(e) { if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet."); { let t = JSON.stringify(e.modelTopology), n = JSON.stringify(e.weightSpecs), a = pd(e), r = Dr.join(e.weightData); try { this.LS.setItem(this.keys.info, JSON.stringify(a)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, vO(r)); let s = { format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, signature: e.signature != null ? e.signature : void 0, userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0, modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0, initializerSignature: e.initializerSignature != null ? e.initializerSignature : void 0, trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0 }; return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(s)), { modelArtifactsInfo: a } } catch (s) { throw zN(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`) } } } async load() { let e = JSON.parse(this.LS.getItem(this.keys.info)); if (e == null) throw new Error(`In local storage, there is no model with name '${this.modelPath}'`); if (e.modelTopologyType !== "JSON") throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet."); let t = {}, n = JSON.parse(this.LS.getItem(this.keys.topology)); if (n == null) throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`); t.modelTopology = n; let a = JSON.parse(this.LS.getItem(this.keys.weightSpecs)); if (a == null) throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`); t.weightSpecs = a; let r = this.LS.getItem(this.keys.modelMetadata); if (r != null) { let i = JSON.parse(r); t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.initializerSignature != null && (t.initializerSignature = i.initializerSignature), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig) } let s = this.LS.getItem(this.keys.weightData); if (s == null) throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`); return t.weightData = wO(s), t } }; di.URL_SCHEME = "localstorage://"; var WN = e => G().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(di.URL_SCHEME) ? WO(e.slice(di.URL_SCHEME.length)) : null; ba.registerSaveRouter(WN); ba.registerLoadRouter(WN); function WO(e) { return new di(e) } var BO = class { constructor() { A(G().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), A(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage } async listModels() { let e = {}, t = Ll + Cr, n = Cr + PN; for (let a = 0; a < this.LS.length; ++a) { let r = this.LS.key(a); if (r.startsWith(t) && r.endsWith(n)) { let s = LO(r); e[s] = JSON.parse(this.LS.getItem(r)) } } return e } async removeModel(e) { e = zO(e); let t = LN(e); if (this.LS.getItem(t.info) == null) throw new Error(`Cannot find model at path '${e}'`); let n = JSON.parse(this.LS.getItem(t.info)); return zN(t), n } }, Vl = "://", hs = class Zr { constructor() { this.managers = {} } static getInstance() { return Zr.instance == null && (Zr.instance = new Zr), Zr.instance } static registerManager(t, n) { A(t != null, () => "scheme must not be undefined or null."), t.endsWith(Vl) && (t = t.slice(0, t.indexOf(Vl))), A(t.length > 0, () => "scheme must not be an empty string."); let a = Zr.getInstance(); A(a.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), a.managers[t] = n } static getManager(t) { let n = Zr.getInstance().managers[t]; if (n == null) throw new Error(`Cannot find model manager for scheme '${t}'`); return n } static getSchemes() { return Object.keys(Zr.getInstance().managers) } }; function Kh(e) { if (e.indexOf(Vl) === -1) throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${hs.getSchemes().join(",")}`); return { scheme: e.split(Vl)[0], path: e.split(Vl)[1] } } async function BN(e, t, n = !1) { A(e !== t, () => `Old path and new path are the same: '${e}'`); let a = ba.getLoadHandlers(e); A(a.length > 0, () => `Copying failed because no load handler is found for source URL ${e}.`), A(a.length < 2, () => `Copying failed because more than one (${a.length}) load handlers for source URL ${e}.`); let r = a[0], s = ba.getSaveHandlers(t); A(s.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), A(s.length < 2, () => `Copying failed because more than one (${a.length}) save handlers for destination URL ${t}.`); let i = s[0], o = Kh(e).scheme, l = Kh(e).path, u = o === Kh(e).scheme, p = await r.load(); n && u && await hs.getManager(o).removeModel(l); let d = await i.save(p); return n && !u && await hs.getManager(o).removeModel(l), d.modelArtifactsInfo } async function VO() { let e = hs.getSchemes(), t = {}; for (let n of e) { let a = await hs.getManager(n).listModels(); for (let r in a) { let s = n + Vl + r; t[s] = a[r] } } return t } async function UO(e) { let t = Kh(e); return hs.getManager(t.scheme).removeModel(t.path) } async function GO(e, t) { return BN(e, t, !1) } async function HO(e, t) { return BN(e, t, !0) } var qO = class { constructor() { this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1 } fetch(e, t) { return fetch(e, t) } now() { return performance.now() } encode(e, t) { if (t !== "utf-8" && t !== "utf8") throw new Error(`Browser's encoder only supports utf-8, but got ${t}`); return this.textEncoder == null && (this.textEncoder = new TextEncoder), this.textEncoder.encode(e) } decode(e, t) { return new TextDecoder(t).decode(e) } setTimeoutCustom(e, t) { if (typeof window == "undefined" || !G().getBool("USE_SETTIMEOUTCUSTOM")) { setTimeout(e, t); return } this.functionRefs.push(e), setTimeout(() => { window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*") }, t), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", n => { if (n.source === window && n.data.name === this.messageName) { n.stopPropagation(); let a = this.functionRefs[n.data.index]; a(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0) } }, !0)) } isTypedArray(e) { return bN(e) } }; if (G().get("IS_BROWSER")) { G().setPlatform("browser", new qO); try { hs.registerManager(di.URL_SCHEME, new BO) } catch (e) { } try { hs.registerManager(ci.URL_SCHEME, new DO) } catch (e) { } } var jO = { importFetch: () => LR() }, mx, KO = class { constructor() { this.util = zR(), this.textEncoder = new this.util.TextEncoder } fetch(e, t) { return G().global.fetch != null ? G().global.fetch(e, t) : (mx == null && (mx = jO.importFetch()), mx(e, t)) } now() { let e = process.hrtime(); return e[0] * 1e3 + e[1] / 1e6 } encode(e, t) { if (t !== "utf-8" && t !== "utf8") throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`); return this.textEncoder.encode(e) } decode(e, t) { return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e) } isTypedArray(e) { return this.util.types.isFloat32Array(e) || this.util.types.isInt32Array(e) || this.util.types.isUint8Array(e) || this.util.types.isUint8ClampedArray(e) } }; G().get("IS_NODE") && !G().get("IS_BROWSER") && G().setPlatform("node", new KO); function Pe(e, t = "float32", n) { return t = t || "float32", ra(e), new Wt(e, t, n) } function XO(e, t) { let n = E(e, "x", "cast"); if (!iN(t)) throw new Error(`Failed to cast to unknown dtype ${t}`); if (t === "string" && n.dtype !== "string" || t !== "string" && n.dtype === "string") throw new Error("Only strings can be casted to strings"); let a = { x: n }, r = { dtype: t }; return P.runKernel(Pi, a, r) } var re = L({ cast_: XO }); function YO(e) { let t = { x: E(e, "x", "clone", "string_or_numeric") }; return P.runKernel(no, t) } var or = L({ clone_: YO }); function Uv(e, t = !1) { console.log(e.toString(t)) } NN(); var ZO = { buffer: Pe, cast: re, clone: or, print: Uv }; qM(ZO); function JO(e, t) { let n = E(e, "a", "add"), a = E(t, "b", "add");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(Is, r) } var X = L({ add_: JO }); function QO(e, t) { let n = E(e, "a", "floorDiv"), a = E(t, "b", "floorDiv");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(Qi, r) } var Zm = L({ floorDiv_: QO }); function eP(e, t) { let n = E(e, "a", "div"), a = E(t, "b", "div"); if ([n, a] = At(n, a), n.dtype === "int32" && a.dtype === "int32") return Zm(n, a); let r = { a: n, b: a }, s = {}; return P.runKernel(ji, r, s) } var he = L({ div_: eP }); function tP(e, t) { let n = E(e, "a", "mul"), a = E(t, "b", "mul");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(xo, r) } var z = L({ mul_: tP }); function nP(e) { let t = E(e, "x", "abs"); if (t.dtype === "complex64") { let n = { x: t }; return P.runKernel(Vc, n) } else { let n = { x: t }; return P.runKernel(uu, n) } } var Lt = L({ abs_: nP }); function aP(e) { let t = { x: E(e, "x", "acos") }; return P.runKernel(Ci, t) } var Gv = L({ acos_: aP }); function rP(e) { let t = { x: E(e, "x", "acosh") }; return P.runKernel(Ei, t) } var Hv = L({ acosh_: rP }); function sP(e) { A(Array.isArray(e), () => "The argument passed to tf.addN() must be a list of tensors"), A(e.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${e.length}`); let t = e.map((r, s) => E(r, `tensors${s}`, "addN")), n = t[0]; t.forEach(r => { if (r.dtype !== n.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype") }), t.forEach(r => { if (!$r(r.shape, n.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape") }); let a = t; return P.runKernel(_i, a) } var VN = L({ addN_: sP }); function iP(e, t = null, n = !1) { let a = { x: E(e, "x", "all", "bool") }, r = { axis: t, keepDims: n }; return P.runKernel(pu, a, r) } var Jm = L({ all_: iP }); function oP(e, t = null, n = !1) { let a = { x: E(e, "x", "any", "bool") }, r = { axis: t, keepDims: n }; return P.runKernel(cu, a, r) } var Sc = L({ any_: oP }); function lP(e, t = 0) { let n = { x: E(e, "x", "argMax") }, a = { axis: t }; return P.runKernel(du, n, a) } var hi = L({ argMax_: lP }); function uP(e, t = 0) { let n = { x: E(e, "x", "argMin") }, a = { axis: t }; return P.runKernel(hu, n, a) } var qv = L({ argMin_: uP }); function pP(e) { let t = { x: E(e, "x", "asin") }; return P.runKernel(Ai, t) } var jv = L({ asin_: pP }); function cP(e) { let t = { x: E(e, "x", "asinh") }; return P.runKernel(Fi, t) } var Kv = L({ asinh_: cP }); function dP(e) { let t = { x: E(e, "x", "atan") }; return P.runKernel($i, t) } var Xv = L({ atan_: dP }); function hP(e, t) { let n = E(e, "a", "atan2"), a = E(t, "b", "atan2");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(Ri, r) } var Yv = L({ atan2_: hP }); function mP(e) { let t = { x: E(e, "x", "atanh") }; return P.runKernel(Di, t) } var Zv = L({ atanh_: mP }); function fP(e, t, n, a, r = "NHWC", s) { let i = e[3], o = [...t, i], l = HN(r); return cd(e, o, n, s, a, null, null, l) } function UN(e, t, n, a, r, s, i = "channelsLast") { let [o, l] = Nc(t), u; if (i === "channelsLast") u = [o, l, e[3], e[3]]; else if (i === "channelsFirst") u = [o, l, e[1], e[1]]; else throw new Error(`Unknown dataFormat ${i}`); return cd(e, u, n, a, r, s, !1, i) } function gP(e, t, n, a, r, s, i = "NDHWC") { let [o, l, u] = Wx(t), p, d; if (i === "NDHWC") d = "channelsLast", p = [o, l, u, e[4], e[4]]; else if (i === "NCDHW") d = "channelsFirst", p = [o, l, u, e[1], e[1]]; else throw new Error(`Unknown dataFormat ${i}`); return GN(e, p, n, a, r, !1, d, s) } function cd(e, t, n, a, r, s, i = !1, o = "channelsLast") { let [l, u, p, d] = [-1, -1, -1, -1]; if (o === "channelsLast") [l, u, p, d] = e; else if (o === "channelsFirst") [l, d, u, p] = e; else throw new Error(`Unknown dataFormat ${o}`); let [c, h, , m] = t, [f, g] = Nc(n), [b, y] = Nc(a), x = Ul(c, b), v = Ul(h, y), { padInfo: I, outHeight: N, outWidth: C } = xP(r, u, p, f, g, x, v, s, o), _ = i ? m * d : m, F; return o === "channelsFirst" ? F = [l, _, N, C] : o === "channelsLast" && (F = [l, N, C, _]), { batchSize: l, dataFormat: o, inHeight: u, inWidth: p, inChannels: d, outHeight: N, outWidth: C, outChannels: _, padInfo: I, strideHeight: f, strideWidth: g, filterHeight: c, filterWidth: h, effectiveFilterHeight: x, effectiveFilterWidth: v, dilationHeight: b, dilationWidth: y, inShape: e, outShape: F, filterShape: t } } function GN(e, t, n, a, r, s = !1, i = "channelsLast", o) { let [l, u, p, d, c] = [-1, -1, -1, -1, -1]; if (i === "channelsLast") [l, u, p, d, c] = e; else if (i === "channelsFirst") [l, c, u, p, d] = e; else throw new Error(`Unknown dataFormat ${i}`); let [h, m, f, , g] = t, [b, y, x] = Wx(n), [v, I, N] = Wx(a), C = Ul(h, v), _ = Ul(m, I), F = Ul(f, N), { padInfo: D, outDepth: $, outHeight: S, outWidth: M } = vP(r, u, p, d, b, y, x, C, _, F, o), B = s ? g * c : g, U; return i === "channelsFirst" ? U = [l, B, $, S, M] : i === "channelsLast" && (U = [l, $, S, M, B]), { batchSize: l, dataFormat: i, inDepth: u, inHeight: p, inWidth: d, inChannels: c, outDepth: $, outHeight: S, outWidth: M, outChannels: B, padInfo: D, strideDepth: b, strideHeight: y, strideWidth: x, filterDepth: h, filterHeight: m, filterWidth: f, effectiveFilterDepth: C, effectiveFilterHeight: _, effectiveFilterWidth: F, dilationDepth: v, dilationHeight: I, dilationWidth: N, inShape: e, outShape: U, filterShape: t } } function bP(e, t, n, a, r) { a == null && (a = Jv(e, t, n)); let s = e[0], i = e[1], o = Tc((s - t + 2 * a) / n + 1, r), l = Tc((i - t + 2 * a) / n + 1, r); return [o, l] } function yP(e, t, n, a, r, s) { r == null && (r = Jv(e, t[0], a[0])); let i = [0, 0, 0, n]; for (let o = 0; o < 3; o++)e[o] + 2 * r >= t[o] && (i[o] = Tc((e[o] - t[o] + 2 * r) / a[o] + 1, s)); return i } function Jv(e, t, n, a = 1) { let r = Ul(t, a); return Math.floor((e[0] * (n - 1) - n + r) / 2) } function Nc(e) { return typeof e == "number" ? [e, e, e] : e.length === 2 ? [e[0], e[1], 1] : e } function Wx(e) { return typeof e == "number" ? [e, e, e] : e } function Ul(e, t) { return t <= 1 ? e : e + (e - 1) * (t - 1) } function xP(e, t, n, a, r, s, i, o, l) { let u, p, d; if (typeof e == "number") { u = { top: e, bottom: e, left: e, right: e, type: e === 0 ? "VALID" : "NUMBER" }; let c = bP([t, n], s, a, e, o); p = c[0], d = c[1] } else if (e === "same") { p = Math.ceil(t / a), d = Math.ceil(n / r); let c = Math.max(0, (p - 1) * a + s - t), h = Math.max(0, (d - 1) * r + i - n), m = Math.floor(c / 2), f = c - m, g = Math.floor(h / 2), b = h - g; u = { top: m, bottom: f, left: g, right: b, type: "SAME" } } else if (e === "valid") u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, p = Math.ceil((t - s + 1) / a), d = Math.ceil((n - i + 1) / r); else if (typeof e == "object") { let c = l === "channelsLast" ? e[1][0] : e[2][0], h = l === "channelsLast" ? e[1][1] : e[2][1], m = l === "channelsLast" ? e[2][0] : e[3][0], f = l === "channelsLast" ? e[2][1] : e[3][1]; u = { top: c, bottom: h, left: m, right: f, type: c === 0 && h === 0 && m === 0 && f === 0 ? "VALID" : "EXPLICIT" }, p = Tc((t - s + c + h) / a + 1, o), d = Tc((n - i + m + f) / r + 1, o) } else throw Error(`Unknown padding parameter: ${e}`); return { padInfo: u, outHeight: p, outWidth: d } } function vP(e, t, n, a, r, s, i, o, l, u, p) { let d, c, h, m; if (e === "valid" && (e = 0), typeof e == "number") { d = { top: e, bottom: e, left: e, right: e, front: e, back: e, type: e === 0 ? "VALID" : "NUMBER" }; let f = yP([t, n, a, 1], [o, l, u], 1, [r, s, i], e, p); c = f[0], h = f[1], m = f[2] } else if (e === "same") { c = Math.ceil(t / r), h = Math.ceil(n / s), m = Math.ceil(a / i); let f = (c - 1) * r + o - t, g = (h - 1) * s + l - n, b = (m - 1) * i + u - a, y = Math.floor(f / 2), x = f - y, v = Math.floor(g / 2), I = g - v, N = Math.floor(b / 2), C = b - N; d = { top: v, bottom: I, left: N, right: C, front: y, back: x, type: "SAME" } } else throw Error(`Unknown padding parameter: ${e}`); return { padInfo: d, outDepth: c, outHeight: h, outWidth: m } } function Tc(e, t) { if (!t) return Math.trunc(e); switch (t) { case "round": return Math.round(e); case "ceil": return Math.ceil(e); case "floor": return Math.floor(e); default: throw new Error(`Unknown roundingMode ${t}`) } } function ms(e) { let [t, n, a] = Nc(e); return t === 1 && n === 1 && a === 1 } function hr(e, t) { return ms(e) || ms(t) } function mi(e) { return Nc(e).every(t => t > 0) } function HN(e) { if (e === "NHWC") return "channelsLast"; if (e === "NCHW") return "channelsFirst"; throw new Error(`Unknown dataFormat ${e}`) } function Nn(e, t, n) { if (n != null) { if (typeof t == "string") throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`); if (typeof t == "number") A(Hl(t), () => `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`); else if (typeof t == "object") t.forEach(a => { a.forEach(r => { A(Hl(r), () => `Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${r}.`) }) }); else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`) } } function wP(e, t) { let n = { x: E(e, "x", "reshape", "string_or_numeric") }, a = { shape: t }; return P.runKernel(ju, n, a) } var W = L({ reshape_: wP }); function kP(e, t, n, a, r) { let s = E(e, "x", "avgPool", "float32"), i = 1; A(hr(n, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`); let o = s, l = !1; s.rank === 3 && (l = !0, o = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(o.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${o.rank}.`), Nn("avgPool", a, r); let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r }, d = P.runKernel(Mi, u, p); return d = re(d, s.dtype), l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d } var xa = L({ avgPool_: kP }); function IP(e, t, n, a, r, s = "NDHWC") { let i = E(e, "x", "avgPool3d", "float32"), o = i, l = !1; i.rank === 4 && (l = !0, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(o.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`), A(s === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), A(typeof n == "number" && n > 0 || Array.isArray(n) && n[0] > 0 && n[1] > 0 && n[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${n}'`), Nn("avgPool3d", a, r); let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r, dataFormat: s }, d = P.runKernel(mu, u, p); return d = re(d, o.dtype), l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d } var Qv = L({ avgPool3d_: IP }); function SP(e, t = 0) {
        A(e.length >= 1, () => "Pass at least one tensor to concat"); let n = Ic(e, "tensors", "concat", "string_or_numeric"); if (n[0].dtype === "complex64" && n.forEach(s => {
            if (s.dtype !== "complex64") throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)
        }), n.length === 1) return or(n[0]); let a = n, r = { axis: t }; return P.runKernel(yu, a, r)
    } var et = L({ concat_: SP }); function NP(e, t, n = !1, a = !1) { let r = E(e, "a", "matMul"), s = E(t, "b", "matMul");[r, s] = At(r, s); let i = { a: r, b: s }, o = { transposeA: n, transposeB: a }; return P.runKernel(Oi, i, o) } var $e = L({ matMul_: NP }); function TP(e) { let t = { x: E(e, "x", "sigmoid", "float32") }; return P.runKernel(Po, t) } var ma = L({ sigmoid_: TP }); function CP(e, t, n) { let a = E(e, "x", "slice", "string_or_numeric"); if (a.rank === 0) throw new Error("Slicing scalar is not possible"); let r = { x: a }, s = { begin: t, size: n }; return P.runKernel(ep, r, s) } var Ve = L({ slice_: CP }); function EP(e) { let t = { x: E(e, "x", "tanh", "float32") }; return P.runKernel(Ho, t) } var fi = L({ tanh_: EP }); function _P(e, t, n, a, r, s) { let i = E(e, "forgetBias", "basicLSTMCell"), o = E(t, "lstmKernel", "basicLSTMCell"), l = E(n, "lstmBias", "basicLSTMCell"), u = E(a, "data", "basicLSTMCell"), p = E(r, "c", "basicLSTMCell"), d = E(s, "h", "basicLSTMCell"), c = et([u, d], 1), h = $e(c, o), m = X(h, l), f = m.shape[0], g = m.shape[1] / 4, b = [f, g], y = Ve(m, [0, 0], b), x = Ve(m, [0, g], b), v = Ve(m, [0, g * 2], b), I = Ve(m, [0, g * 3], b), N = X(z(ma(y), fi(x)), z(p, ma(X(i, v)))), C = z(fi(N), ma(I)); return [N, C] } var qN = L({ basicLSTMCell_: _P }); function AP(e, t, n) { let a = E(e, "x", "batchToSpaceND"), r = t.reduce((o, l) => o * l); A(a.rank >= 1 + t.length, () => `input rank is ${a.rank} but should be > than blockShape.length ${t.length}`), A(n.length === t.length, () => `crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`), A(a.shape[0] % r === 0, () => `input tensor batch is ${a.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`); let s = { x: a }, i = { blockShape: t, crops: n }; return P.runKernel(fu, s, i) } var dd = L({ batchToSpaceND_: AP }); function FP(e) { let t; return e.rank === 0 || e.rank === 1 ? t = W(e, [1, 1, 1, e.size]) : e.rank === 2 ? t = W(e, [1, 1, e.shape[0], e.shape[1]]) : e.rank === 3 ? t = W(e, [1, e.shape[0], e.shape[1], e.shape[2]]) : t = e, t } function $P(e, t, n, a, r, s) { s == null && (s = .001); let i = E(e, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u; r != null && (u = E(r, "scale", "batchNorm")); let p; a != null && (p = E(a, "offset", "batchNorm")), A(o.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), A(p == null || o.rank === p.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), A(u == null || o.rank === u.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks."); let d = { x: FP(i), scale: u, offset: p, mean: o, variance: l }, c = { varianceEpsilon: s }, h = P.runKernel(eo, d, c); return W(h, i.shape) } var Es = L({ batchNorm_: $P }); function DP(e, t, n, a, r, s) { let i = E(e, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u; r != null && (u = E(r, "scale", "batchNorm")); let p; return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), A(o.rank === 2 || o.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`), A(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 2 || p.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`), Es(i, o, l, p, u, s) } var ew = L({ batchNorm2d_: DP }); function RP(e, t, n, a, r, s) { let i = E(e, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u; r != null && (u = E(r, "scale", "batchNorm")); let p; return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), A(o.rank === 3 || o.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`), A(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 3 || p.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`), Es(i, o, l, p, u, s) } var tw = L({ batchNorm3d_: RP }); function MP(e, t, n, a, r, s) { let i = E(e, "x", "batchNorm"), o = E(t, "mean", "batchNorm"), l = E(n, "variance", "batchNorm"), u; r != null && (u = E(r, "scale", "batchNorm")); let p; return a != null && (p = E(a, "offset", "batchNorm")), A(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), A(o.rank === 4 || o.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`), A(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), u != null && A(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`), p != null && A(p.rank === 4 || p.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`), Es(i, o, l, p, u, s) } var nw = L({ batchNorm4d_: MP }); function OP(e, t, n) { let a = E(e, "x", "bincount"), r = E(t, "weights", "bincount"); A(a.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${a.dtype}`), A(n >= 0, () => `size must be non-negative, but got ${n}.`), A(r.size === a.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${a.shape}, weights shape: ${r.shape}.`); let s = { x: a, weights: r }, i = { size: n }; return P.runKernel(gu, s, i) } var aw = L({ bincount_: OP }); function PP(e, t) { let n = E(e, "x", "bitwiseAnd"), a = E(t, "y", "bitwiseAnd"); if (!$r(n.shape, a.shape)) throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${a.shape}`); if (n.dtype !== "int32" || a.dtype !== "int32") throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${a.dtype}`); let r = { a: n, b: a }; return P.runKernel(bu, r) } var jN = L({ bitwiseAnd_: PP }); function LP(e, t) { let n = E(e, "s0", "broadcastArgs", "int32"), a = E(t, "s1", "broadcastArgs", "int32"); if (n.rank !== 1) throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`); if (a.rank !== 1) throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${a.rank}`); let r = { s0: n, s1: a }; return P.runKernel(Bc, r) } var KN = L({ broadcastArgs_: LP }); function zP(e, t) { let n = E(e, "broadcastTo", "x"), a = n.shape; if (ra(t), t.length < n.rank) throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`); if (t.length > n.rank) { let l = n.shape.slice(); for (; l.length < t.length;)l.unshift(1); n = W(n, l) } let r = n.shape, s = Array.from(t); for (let l = t.length - 1; l >= 0; l--)if (r[l] === t[l]) s[l] = 1; else if (n.shape[l] !== 1) throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${t}].`); if (s.map((l, u) => l > 1 ? u : -1).filter(l => l >= 0).length === 0) return or(n); let i = { x: n }, o = { reps: s }; return P.runKernel(Ns, i, o) } var ri = L({ broadcastTo_: zP }); function WP(e) { let t = { x: E(e, "x", "ceil", "float32") }; return P.runKernel(Li, t) } var rw = L({ ceil_: WP }); function yn(e, t, n) { ra(e), n = n || Lc(t); let a = { shape: e, value: t, dtype: n }; return P.runKernel(Hc, {}, a) } function BP(e, t, n) { let a = E(e, "x", "clipByValue"); if (A(t <= n, () => `Error in clip: min (${t}) must be less than or equal to max (${n}).`), t === n) return yn(a.shape, t, a.dtype); let r = { x: a }, s = { clipValueMin: t, clipValueMax: n }; return P.runKernel(Ss, r, s) } var an = L({ clipByValue_: BP }); function VP(e) { return et(e, 0) } var sw = L({ concat1d_: VP }); function UP(e, t) { return et(e, t) } var iw = L({ concat2d_: UP }); function GP(e, t) { return et(e, t) } var ow = L({ concat3d_: GP }); function HP(e, t) { return et(e, t) } var lw = L({ concat4d_: HP }); function qP(e, t, n, a, r = "NHWC", s = [1, 1], i) { let o = E(e, "x", "conv2d", "float32"), l = E(t, "filter", "conv2d", "float32"), u = o, p = !1; o.rank === 3 && (p = !0, u = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(u.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`), A(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), Nn("conv2d", a, i); let d = r === "NHWC" ? u.shape[3] : u.shape[1]; A(d === l.shape[2], () => `Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`), A(hr(n, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), A(mi(s), () => "Error in conv2D: Dilated rates should be larger than 0."), A(mi(n), () => "Error in conv2D: Strides should be larger than 0."); let c = { x: u, filter: l }, h = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i }, m = P.runKernel(zi, c, h); return p ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m } var $t = L({ conv2d_: qP }); function jP(e, t, n, a, r = "NWC", s = 1, i) { let o = E(e, "x", "conv1d"), l = E(t, "filter", "conv1d"), u = o, p = !1; o.rank === 2 && (p = !0, u = W(o, [1, o.shape[0], o.shape[1]])), A(u.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`), A(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), Nn("conv1d", a, i), A(u.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`), A(hr(n, s), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`), A(mi(s), () => "Error in conv1D: Dilated rates should be larger than 0."), A(mi(n), () => "Error in conv1D: Stride should be larger than 0."), A(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`); let d = W(l, [1, l.shape[0], l.shape[1], l.shape[2]]), c = W(u, [u.shape[0], 1, u.shape[1], u.shape[2]]), h = $t(c, d, [1, n], a, "NHWC", [1, s], i); return p ? W(h, [h.shape[2], h.shape[3]]) : W(h, [h.shape[0], h.shape[2], h.shape[3]]) } var Qm = L({ conv1d_: jP }); function KP(e, t, n, a, r, s = "NHWC", i) { A(e.length === t.rank, () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`); let o = e, l = t, u = !1; t.rank === 3 && (u = !0, l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]]), o = [1, e[0], e[1], e[2]]), A(o.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`), A(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), A(n.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`); let p = s === "NHWC" ? o[3] : o[1], d = s === "NHWC" ? l.shape[3] : l.shape[1]; A(p === n.shape[2], () => `Error in conv2dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[2]}.`), A(d === n.shape[3], () => `Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`), Nn("conv2dDerInput", r, i); let c = { dy: l, filter: n }, h = { strides: a, pad: r, dataFormat: s, dimRoundingMode: i, inputShape: o }, m = P.runKernel(Wi, c, h); return u ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m } var uw = L({ conv2DBackpropInput_: KP }); function XP(e, t, n, a, r, s) { let i = E(e, "x", "conv2dTranspose"), o = E(t, "filter", "conv2dTranspose"); return uw(n, i, o, a, r, "NHWC", s) } var ef = L({ conv2dTranspose_: XP }); function YP(e, t, n, a, r = "NDHWC", s = [1, 1, 1]) { let i = E(e, "x", "conv3d"), o = E(t, "filter", "conv3d"), l = i, u = !1; i.rank === 4 && (u = !0, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), A(o.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`), A(l.shape[4] === o.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`), A(hr(n, s), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), A(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`), A(mi(s), () => "Error in conv3D: Dilated rates should be larger than 0."), A(mi(n), () => "Error in conv3D: Strides should be larger than 0."); let p = { x: l, filter: o }, d = { strides: n, pad: a, dataFormat: r, dilations: s }, c = P.runKernel(Bi, p, d); return u ? W(c, [c.shape[1], c.shape[2], c.shape[3], c.shape[4]]) : c } var pw = L({ conv3d_: YP }); function ZP(e, t, n, a, r) { A(e.length === t.rank, () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`); let s = e, i = t, o = !1; t.rank === 4 && (o = !0, i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), s = [1, e[0], e[1], e[2], e[3]]); let l = s[4], u = i.shape[4]; A(s.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`), A(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), A(n.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`), A(l === n.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`), A(u === n.shape[4], () => `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`); let p = { dy: i, filter: n }, d = { pad: r, strides: a, inputShape: s }, c = P.runKernel(vu, p, d); return o ? W(c, [c.shape[1], c.shape[2], c.shape[3], c.shape[4]]) : c } var XN = L({ conv3DBackpropInput_: ZP }); function JP(e, t, n, a, r) { let s = E(e, "x", "conv3dTranspose"), i = E(t, "filter", "conv3dTranspose"); return XN(n, s, i, a, r) } var cw = L({ conv3dTranspose_: JP }); function QP(e) { let t = { x: E(e, "x", "cos", "float32") }; return P.runKernel(Vi, t) } var hd = L({ cos_: QP }); function e3(e) { let t = { x: E(e, "x", "cosh", "float32") }; return P.runKernel(Ui, t) } var tf = L({ cosh_: e3 }); function t3(e, t = 0, n = !1, a = !1) { let r = { x: E(e, "x", "cumprod") }, s = { axis: t, exclusive: n, reverse: a }; return P.runKernel(wu, r, s) } var Cc = L({ cumprod_: t3 }); function n3(e, t = 0, n = !1, a = !1) { let r = { x: E(e, "x", "cumsum") }, s = { axis: t, exclusive: n, reverse: a }; return P.runKernel(Gi, r, s) } var nf = L({ cumsum_: n3 }); function a3(e, t, n, a = !1) { let r = E(e, "x", "denseBincount"), s = E(t, "weights", "denseBincount"); A(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), A(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), A(n >= 0, () => `size must be non-negative, but got ${n}.`), A(s.size === r.size || s.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${s.shape}.`); let i = { x: r, weights: s }, o = { size: n, binaryOutput: a }; return P.runKernel(Uc, i, o) } var um = L({ denseBincount_: a3 }); function r3(e, t, n = "NHWC") {
        let a = E(e, "x", "depthToSpace", "float32"), r = n === "NHWC" ? a.shape[1] : a.shape[2], s = n === "NHWC" ? a.shape[2] : a.shape[3], i = n === "NHWC" ? a.shape[3] : a.shape[1]; A(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), A(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${a.shape}`), A(s * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${a.shape}`), A(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${a.shape}`); let o = { x: a }, l = { blockSize: t, dataFormat: n }; return P.runKernel(Iu, o, l)
    } var dw = L({ depthToSpace_: r3 }); function s3(e, t, n, a, r = "NHWC", s = [1, 1], i) { let o = E(e, "x", "depthwiseConv2d", "float32"), l = E(t, "filter", "depthwiseConv2d", "float32"), u = o, p = !1; o.rank === 3 && (p = !0, u = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(u.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`), A(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`); let d = r === "NHWC" ? u.shape[3] : u.shape[1]; A(d === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${l.shape[2]}.`), Nn("depthwiseConv2d", a, i); let c = { x: u, filter: l }, h = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i }, m = P.runKernel(Hi, c, h); return p ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m } var _s = L({ depthwiseConv2d_: s3 }); function i3(e) { let t = { x: E(e, "x", "diag") }; return P.runKernel(Gc, t) } var YN = L({ diag_: i3 }); function o3(e, t, n, a, r = [1, 1], s = "NHWC") { let i = E(e, "x", "dilation2d"), o = E(t, "filter", "dilation2d"); A(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), A(o.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`), A(s === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`); let l = i, u = !1; i.rank === 3 && (l = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), u = !0), A(l.shape[3] === o.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`); let p = { x: l, filter: o }, d = { strides: n, pad: a, dilations: r }, c = P.runKernel(qi, p, d); return u ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c } var hw = L({ dilation2d_: o3 }), cp = {}; _e(cp, { assertAndGetBroadcastShape: () => ct, getBroadcastDims: () => ZN, getReductionAxes: () => Bt }); function ZN(e, t) { let n = e.length, a = []; for (let r = 0; r < n; r++) { let s = n - 1 - r, i = e[s] || 1; (t[t.length - 1 - r] || 1) > 1 && i === 1 && a.unshift(s) } return a } function Bt(e, t) { let n = []; for (let a = 0; a < t.length; a++) { let r = e[e.length - a - 1], s = t.length - a - 1, i = t[s]; (r == null || r === 1 && i > 1) && n.unshift(s) } return n } function ct(e, t) { let n = Math.max(e.length, t.length), a = new Array(n); for (let r = 0; r < n; r++) { let s = e[e.length - r - 1]; s == null && (s = 1); let i = t[t.length - r - 1]; if (i == null && (i = 1), s === 1) a[n - r - 1] = i; else if (i === 1) a[n - r - 1] = s; else if (s !== i) { let o = `Operands could not be broadcast together with shapes ${e} and ${t}.`; throw Error(o) } else a[n - r - 1] = s } return a } function l3(e, t) { let n = E(e, "a", "equal", "string_or_numeric"), a = E(t, "b", "equal", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Nu, r) } var ea = L({ equal_: l3 }); function u3(e, t, n) { let a = E(t, "a", "where"), r = E(n, "b", "where"), s = E(e, "condition", "where", "bool"), i = ct(ct(s.shape, a.shape), r.shape), o = ri(s, i), l = ri(a, i), u = ri(r, i), p = { condition: o, t: l, e: u }; return P.runKernel(Qu, p) } var nn = L({ where_: u3 }); function p3(e) { let t = { x: E(e, "x", "zerosLike") }; return P.runKernel(up, t) } var je = L({ zerosLike_: p3 }); function c3(e, t) { let n = E(e, "a", "div"), a = E(t, "b", "div");[n, a] = At(n, a); let r = he(n, a), s = je(r), i = ea(a, s); return nn(i, s, r) } var mw = L({ divNoNan_: c3 }); function d3(e, t) { let n = E(e, "t1", "dot"), a = E(t, "t2", "dot"); A((n.rank === 1 || n.rank === 2) && (a.rank === 1 || a.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${a.rank}.`); let r = n.rank === 1 ? n.size : n.shape[1], s = a.rank === 1 ? a.size : a.shape[0]; if (A(r === s, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${s}.`), n.rank === 1 && a.rank === 1) { let i = W(n, [1, -1]), o = W(a, [-1, 1]), l = $e(i, o); return W(l, []) } else if (n.rank === 1 && a.rank === 2) { let i = W(n, [1, -1]), o = W(a, [a.shape[0], a.shape[1]]), l = $e(i, o); return W(l, [l.size]) } else if (n.rank === 2 && a.rank === 1) { let i = W(a, [-1, 1]), o = $e(n, i); return W(o, [o.size]) } else { let i = W(a, [a.shape[0], a.shape[1]]); return $e(n, i) } } var fw = L({ dot_: d3 }); function h3(e, ...t) { let n = t.map((r, s) => E(r, `tensors${s}`, "einsum")), a = { equation: e }; return P.runKernel(Wm, n, a) } var Js = L({ einsum_: h3 }); function m3(e) { let t = { x: E(e, "x", "elu", "float32") }; return P.runKernel(Ki, t) } var dp = L({ elu_: m3 }); function f3(e, t) { let n = E(e, "x", "ensureShape", "string_or_numeric"); if (!nN(n.shape, t)) throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`); return e } var JN = L({ ensureShape_: f3 }); function g3(e) { let t = E(e, "x", "erf"); A(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = re(t, "float32")); let n = { x: t }; return P.runKernel(Xi, n) } var gw = L({ erf_: g3 }); function bw(e, t) { for (let n = 0; n < e.length; ++n)if (e[e.length - n - 1] !== t - 1 - n) return !1; return !0 } function QN(e, t, n) { let a = e.length + t.length, r = [], s = 0, i = 0; for (let o = 0; o < a; o++)n.indexOf(o) === -1 ? r.push(e[s++]) : r.push(t[i++]); return r } function eT(e, t) { let n = [], a = e.length; for (let s = 0; s < a; s++)t.indexOf(s) === -1 && n.push(e[s]); let r = t.map(s => e[s]); return [n, r] } function gi(e, t) { let n = t.map(a => 1); return QN(e, n, t) } function b3(e, t, n) { A(bw(t, n), () => `${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`) } function tT(e, t) { if (bw(e, t)) return null; let n = []; for (let a = 0; a < t; ++a)e.indexOf(a) === -1 && n.push(a); return e.forEach(a => n.push(a)), n } function yw(e) { return e.map((t, n) => [n, t]).sort((t, n) => t[1] - n[1]).map(t => t[0]) } function y3(e, t) { let n = []; for (let a = t - e; a < t; ++a)n.push(a); return n } function x3(e, t = null, n = !1) { let a = { x: E(e, "x", "max") }, r = { reductionIndices: t, keepDims: n }; return P.runKernel(po, a, r) } var fa = L({ max_: x3 }); function v3(e, t = null, n = !1) { let a = { x: E(e, "x", "min") }, r = { axis: t, keepDims: n }; return P.runKernel(fo, a, r) } var Xl = L({ min_: v3 }); function w3(e, t) { let n = E(e, "base", "pow"), a = E(t, "exp", "pow");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(ko, r) } var Fr = L({ pow_: w3 }); function ve(e, t) { if ((en(e) && t !== "string" || Array.isArray(e)) && t !== "complex64") throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)"); if (t === "string" && en(e) && !(e instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`."); return Cs(e, [], [], t) } function k3(e) { let t = { x: E(e, "x", "sqrt", "float32") }; return P.runKernel(zo, t) } var hn = L({ sqrt_: k3 }); function I3(e) { let t = E(e, "x", "square"), n = {}; return P.runKernel("Square", { x: t }, n) } var pt = L({ square_: I3 }); function S3(e, t = null, n = !1) { let a = E(e, "x", "sum"); a.dtype === "bool" && (a = re(a, "int32")); let r = { x: a }, s = { axis: t, keepDims: n }; return P.runKernel(Wo, r, s) } var fe = L({ sum_: S3 }); function N3(e, t = "euclidean", n = null, a = !1) { e = E(e, "x", "norm"); let r = nT(e, t, n), s = r.shape; if (a) { let i = $a(n, e.shape); s = gi(r.shape, i) } return W(r, s) } function nT(e, t, n = null) { if (e.rank === 0) return Lt(e); if (e.rank !== 1 && n === null) return nT(W(e, [-1]), t, n); if (e.rank === 1 || typeof n == "number" || Array.isArray(n) && n.length === 1) { if (t === 1) return fe(Lt(e), n); if (t === 1 / 0) return fa(Lt(e), n); if (t === -1 / 0) return Xl(Lt(e), n); if (t === "euclidean" || t === 2) return hn(fe(Fr(Lt(e), ve(2, "int32")), n)); throw new Error(`Error in norm: invalid ord value: ${t}`) } if (Array.isArray(n) && n.length === 2) { if (t === 1) return fa(fe(Lt(e), n[0]), n[1] - 1); if (t === 1 / 0) return fa(fe(Lt(e), n[1]), n[0]); if (t === -1 / 0) return Xl(fe(Lt(e), n[1]), n[0]); if (t === "fro" || t === "euclidean") return hn(fe(pt(e), n)); throw new Error(`Error in norm: invalid ord value: ${t}`) } throw new Error(`Error in norm: invalid axis: ${n}`) } var hp = L({ norm_: N3 }); function T3(e, t = null, n = !1) { return hp(e, "euclidean", t, n) } var xw = L({ euclideanNorm_: T3 }); function C3(e) { let t = { x: E(e, "x", "exp") }; return P.runKernel(Yi, t) } var mn = L({ exp_: C3 }); function E3(e, t = 0) { let n = E(e, "x", "expandDims", "string_or_numeric"); A(t <= n.rank, () => "Axis must be <= rank of the tensor"); let a = { input: n }, r = { dim: t }; return P.runKernel(Tu, a, r) } var Gt = L({ expandDims_: E3 }); function _3(e) { let t = { x: E(e, "x", "expm1") }; return P.runKernel(Zi, t) } var vw = L({ expm1_: _3 }); function A3(e, t) { let n = E(e, "x", "tile", "string_or_numeric"); A(n.rank === t.length, () => `Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`); let a = { x: n }, r = { reps: t }; return P.runKernel(Ns, a, r) } var Mn = L({ tile_: A3 }); function F3(e, t, n, a = "float32") { t == null && (t = e); let r = Pe([e, t], a), s = e <= t ? e : t; for (let o = 0; o < s; ++o)r.set(1, o, o); let i = W(r.toTensor(), [e, t]); if (n == null) return i; if (n.length === 1) return Mn(Gt(i, 0), [n[0], 1, 1]); if (n.length === 2) return Mn(Gt(Gt(i, 0), 0), [n[0], n[1], 1, 1]); if (n.length === 3) return Mn(Gt(Gt(Gt(i, 0), 0), 0), [n[0], n[1], n[2], 1, 1]); throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`) } var af = L({ eye_: F3 }); function $3(e) { let t = { x: E(e, "x", "floor", "float32") }; return P.runKernel(Ji, t) } var mp = L({ floor_: $3 }); function D3(e, t, n = 0, a = 0) { let r = E(e, "x", "gather"), s = E(t, "indices", "gather", "int32"), i = { x: r, indices: s }, o = { axis: n, batchDims: a }; return P.runKernel(Eu, i, o) } var fp = L({ gather_: D3 }); function R3(e, t) { let n = E(e, "a", "greater", "string_or_numeric"), a = E(t, "b", "greater", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Au, r) } var Tn = L({ greater_: R3 }); function M3(e, t) { let n = E(e, "a", "greaterEqual", "string_or_numeric"), a = E(t, "b", "greaterEqual", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(to, r) } var Rr = L({ greaterEqual_: M3 }); function O3(e) { let t = { input: E(e, "input", "imag") }; return P.runKernel(Um, t) } var md = L({ imag_: O3 }); function P3(e) { let t = { x: E(e, "x", "isFinite") }; return P.runKernel(ao, t) } var ww = L({ isFinite_: P3 }); function L3(e) { let t = { x: E(e, "x", "isInf") }; return P.runKernel(ro, t) } var kw = L({ isInf_: L3 }); function z3(e) { let t = { x: E(e, "x", "isNaN") }; return P.runKernel(so, t) } var Iw = L({ isNaN_: z3 }); function W3(e, t = .2) { let n = { x: E(e, "x", "leakyRelu") }, a = { alpha: t }; return P.runKernel(io, n, a) } var fd = L({ leakyRelu_: W3 }); function B3(e, t) { let n = E(e, "a", "less", "string_or_numeric"), a = E(t, "b", "less", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Fu, r) } var Yl = L({ less_: B3 }); function V3(e, t) { let n = E(e, "a", "lessEqual", "string_or_numeric"), a = E(t, "b", "lessEqual", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel($u, r) } var As = L({ lessEqual_: V3 }); function aT(e, t, n) { if (n <= 0) throw new Error("The number of values should be positive."); let a = { start: e, stop: t, num: n }; return P.runKernel(Du, {}, a) } function U3(e, t = 5, n = 1, a = 1, r = .5) {
        let s = E(e, "x", "localResponseNormalization"); A(s.rank === 4 || s.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`), A(Hl(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`); let i = s, o = !1; s.rank === 3 && (o = !0, i = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])); let l = { x: i }, u = { depthRadius: t, bias: n, alpha: a, beta: r }, p = P.runKernel(uo, l, u); return o ? W(p, [p.shape[1], p.shape[2], p.shape[3]]) : p
    } var Sw = L({ localResponseNormalization_: U3 }); function G3(e) { let t = { x: E(e, "x", "log", "float32") }; return P.runKernel(oo, t) } var ta = L({ log_: G3 }); function H3(e) { let t = { x: E(e, "x", "log1p") }; return P.runKernel(lo, t) } var gd = L({ log1p_: H3 }); function q3(e) { return A(us(e), () => "The f passed in grad(f) must be a function"), (t, n) => { let a = E(t, "x", "tf.grad", "string_or_numeric"), r = n != null ? E(n, "dy", "tf.grad") : null; return P.tidy(() => { let { value: s, grads: i } = P.gradients(() => e(a), [a], r); return r != null && Sn(s.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), rf(i), i[0] }) } } function j3(e) { return A(us(e), () => "The f passed in grads(f) must be a function"), (t, n) => { A(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"); let a = Ic(t, "args", "tf.grads", "string_or_numeric"), r = n != null ? E(n, "dy", "tf.grads") : null; return P.tidy(() => { let { value: s, grads: i } = P.gradients(() => e(...a), a, r); return r != null && Sn(s.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), rf(i), i }) } } function K3(e) { return A(us(e), () => "The f passed in valueAndGrad(f) must be a function"), (t, n) => { A(t instanceof Ce, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), A(n == null || n instanceof Ce, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor"); let { grads: a, value: r } = P.gradients(() => e(t), [t], n); return rf(a), { grad: a[0], value: r } } } function X3(e) { return A(us(e), () => "The f passed in valueAndGrads(f) must be a function"), (t, n) => { A(Array.isArray(t) && t.every(r => r instanceof Ce), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), A(n == null || n instanceof Ce, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor"); let a = P.gradients(() => e(...t), t, n); return n != null && Sn(a.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), rf(a.grads), a } } function rT(e, t) { A(us(e), () => "The f passed in variableGrads(f) must be a function"), A(t == null || Array.isArray(t) && t.every(u => u instanceof cs), () => "The varList passed in variableGrads(f, varList) must be an array of variables"); let n = t != null; if (!n) { t = []; for (let u in P.registeredVariables) t.push(P.registeredVariables[u]) } let a = n ? t.filter(u => !u.trainable) : null, r = t.length; t = t.filter(u => u.trainable), A(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`); let s = !0, { value: i, grads: o } = P.gradients(e, t, null, s); A(o.some(u => u != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), A(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`); let l = {}; return t.forEach((u, p) => { o[p] != null && (l[u.name] = o[p]) }), a != null && a.forEach(u => l[u.name] = null), { value: i, grads: l } } function cr(e) { return P.customGrad(e) } function rf(e) {
        if (e.filter(t => t == null).length > 0) throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)
    } function Y3(e) { let t = { x: E(e, "x", "neg") }; return P.runKernel(Wu, t) } var yt = L({ neg_: Y3 }); function Z3(e) { let t = { x: E(e, "x", "softplus") }; return P.runKernel(Lo, t) } var qo = L({ softplus_: Z3 }); function J3(e) { let t = E(e, "x", "logSigmoid"); return cr(n => ({ value: yt(qo(yt(n))), gradFunc: a => z(a, ma(yt(n))) }))(t) } var Nw = L({ logSigmoid_: J3 }); function Q3(e, t) { let n = E(e, "a", "sub"), a = E(t, "b", "sub");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(Uo, r) } var pe = L({ sub_: Q3 }); function eL(e, t = -1) { let n = E(e, "logits", "logSoftmax"); if (t === -1 && (t = n.rank - 1), t !== n.rank - 1) throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`); return cr((a, r) => { let s = fa(a, t, !0), i = pe(a, s), o = pe(re(i, "float32"), ta(fe(mn(i), t, !0))); return r([o]), { value: o, gradFunc: (l, u) => { let [p] = u, d = !0, c = mn(p); return pe(l, z(fe(l, t, d), c)) } } })(n) } var sf = L({ logSoftmax_: eL }); function tL(e, t = null, n = !1) { let a = E(e, "x", "logSumExp"), r = $a(t, a.shape), s = fa(a, r, !0), i = pe(a, s), o = mn(i), l = fe(o, r), u = ta(l), p = X(W(s, u.shape), u); if (n) { let d = gi(p.shape, r); return W(p, d) } return p } var bd = L({ logSumExp_: tL }); function nL(e, t) { let n = E(e, "a", "logicalAnd", "bool"), a = E(t, "b", "logicalAnd", "bool"); ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Ru, r) } var Fa = L({ logicalAnd_: nL }); function aL(e) { let t = { x: E(e, "x", "logicalNot", "bool") }; return P.runKernel(Mu, t) } var yd = L({ logicalNot_: aL }); function rL(e, t) { let n = E(e, "a", "logicalOr", "bool"), a = E(t, "b", "logicalOr", "bool"); ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Ou, r) } var of = L({ logicalOr_: rL }); function sL(e, t) { let n = E(e, "a", "logicalXor", "bool"), a = E(t, "b", "logicalXor", "bool"); return ct(n.shape, a.shape), Fa(of(e, t), yd(Fa(e, t))) } var Tw = L({ logicalXor_: sL }), Rh = 2147483648; function iL(e, t, n = "left") { let a = E(e, "sortedSequence", "searchSorted"), r = E(t, "values", "searchSorted"), s = a.shape[a.shape.length - 1], i = r.shape[r.shape.length - 1], o = W(a, [-1, s]), l = W(r, [-1, i]); if (o.rank < 2) throw new Error("Sorted input argument must be at least 2-dimensional"); if (o.shape[0] !== l.shape[0]) throw new Error("Leading dimension of 'sortedSequence' and 'values' must match."); if (ot(l.shape) >= Rh) throw new Error(`values tensor size must less than ${Rh}`); if (o.shape[1] >= Rh) throw new Error(`trailing dim_size must less than ${Rh} for int32 output type, was ${o.shape[1]}`); let u = { sortedSequence: o, values: l }, p = { side: n }; return P.runKernel(Ju, u, p) } var lf = L({ searchSorted_: iL }); function sT(e, t) { return lf(e, t, "left") } function oL(e, t, n, a, r) { let s = E(e, "x", "maxPool"), i = 1, o = s, l = !1; s.rank === 3 && (l = !0, o = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(o.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${o.rank}.`), A(hr(n, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`), Nn("maxPool", a, r); let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r }, d = P.runKernel(ho, u, p); return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d } var Dt = L({ maxPool_: oL }); function lL(e, t = [1, 1, 1], n, a, r, s = "NDHWC") { let i = E(e, "x", "maxPool3d"), o = i, l = !1; i.rank === 4 && (l = !0, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), A(o.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`), A(s === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), Nn("maxPool3d", a, r); let u = { x: o }, p = { filterSize: t, strides: n, pad: a, dimRoundingMode: r, dataFormat: s }, d = P.runKernel(Lu, u, p); return l ? W(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d } var Cw = L({ maxPool3d_: lL }); function uL(e, t, n, a, r = !1) { let s = { x: E(e, "x", "maxPoolWithArgmax") }, i = { filterSize: t, strides: n, pad: a, includeBatchInIndex: r }, o = P.runKernel(Kc, s, i); return { result: o[0], indexes: o[1] } } var iT = L({ maxPoolWithArgmax_: uL }); function pL(e, t) { let n = E(e, "a", "maximum"), a = E(t, "b", "maximum");[n, a] = At(n, a), n.dtype === "bool" && (n = re(n, "int32"), a = re(a, "int32")), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(co, r) } var mr = L({ maximum_: pL }); function cL(e, t = null, n = !1) { let a = { x: E(e, "x", "mean") }, r = { axis: t, keepDims: n }; return P.runKernel(mo, a, r) } var Et = L({ mean_: cL }); function It(e, t = "float32") { if (ra(e), t === "complex64") { let a = It(e, "float32"), r = It(e, "float32"); return Ar(a, r) } let n = Dm(ot(e), t); return P.makeTensor(n, e, t) } function On(e, t = "float32") { if (ra(e), t === "complex64") { let a = On(e, "float32"), r = It(e, "float32"); return Ar(a, r) } let n = $v(ot(e), t); return P.makeTensor(n, e, t) } function oT(e, t, { indexing: n = "xy" } = {}) { if (n !== "xy" && n !== "ij") throw new TypeError(`${n} is not a valid third argument to meshgrid`); if (e === void 0) return []; let a = E(e, "x", "meshgrid", e instanceof Ce ? e.dtype : "float32"); if (t === void 0) return [a]; let r = E(t, "y", "meshgrid", t instanceof Ce ? t.dtype : "float32"), s = ot(a.shape), i = ot(r.shape); return n === "xy" ? (a = W(a, [1, -1]), r = W(r, [-1, 1]), [$e(On([i, 1], a.dtype), a), $e(r, On([1, s], r.dtype))]) : (a = W(a, [-1, 1]), r = W(r, [1, -1]), [$e(a, On([1, i], a.dtype)), $e(On([s, 1], r.dtype), r)]) } function dL(e, t) { let n = E(e, "a", "minimum"), a = E(t, "b", "minimum");[n, a] = At(n, a), n.dtype === "bool" && (n = re(n, "int32"), a = re(a, "int32")), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(go, r) } var fs = L({ minimum_: dL }); function hL(e, t, n) { A(n === "reflect" || n === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`); let a = E(e, "x", "mirrorPad"); if (a.rank === 0) throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad"); A(t.length === a.rank, () => `Padding doesn't match input. Must be ${a.rank}. Got ${t.length}.`); let r = n === "reflect" ? 1 : 0; for (let o = 0; o < a.rank; o++)A(t[o].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), A(t[o][0] >= 0 && t[o][0] <= a.shape[o] - r && t[o][1] >= 0 && t[o][1] <= a.shape[o] - r, () => `Padding in dimension ${o} cannot be greater than or equal to ${a.shape[o] - r} or less than 0 for input of shape ${a.shape}`); let s = { paddings: t, mode: n }, i = { x: a }; return P.runKernel(bo, i, s) } var Ew = L({ mirrorPad_: hL }); function mL(e, t) { let n = E(e, "a", "mod"), a = E(t, "b", "mod");[n, a] = At(n, a); let r = { a: n, b: a }; return P.runKernel(yo, r) } var _w = L({ mod_: mL }); function fL(e, t = null, n = !1) { e = E(e, "x", "moments"); let a = $a(t, e.shape), r = Et(e, a, n), s = r.shape; n || (s = gi(r.shape, a)); let i = pt(pe(re(e, "float32"), W(r, s))), o = Et(i, a, n); return { mean: r, variance: o } } var xd = L({ moments_: fL }); function gL(e, t, n, a) { let r = E(t, "data", "multiRNNCell"), s = Ic(n, "c", "multiRNNCell"), i = Ic(a, "h", "multiRNNCell"), o = r, l = []; for (let d = 0; d < e.length; d++) { let c = e[d](o, s[d], i[d]); l.push(c[0]), l.push(c[1]), o = c[1] } let u = [], p = []; for (let d = 0; d < l.length; d += 2)u.push(l[d]), p.push(l[d + 1]); return [u, p] } var lT = L({ multiRNNCell_: gL }); function bL(e, t, n, a = !1) { let r = E(e, "logits", "multinomial"), s = r.size, i = r.rank; if (s < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`); if (i > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`); n = n || Math.random(); let o = { logits: i === 1 ? W(r, [1, -1]) : r }, l = { numSamples: t, seed: n, normalized: a }, u = P.runKernel(zu, o, l); return i === 1 ? W(u, [u.size]) : u } var uT = L({ multinomial_: bL }); function yL(e, t) { let n = E(e, "a", "notEqual", "string_or_numeric"), a = E(t, "b", "notEqual", "string_or_numeric");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }; return P.runKernel(Bu, r) } var bi = L({ notEqual_: yL }); function xL(e, t, n = 1, a = 0, r = "int32") { if (t < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`); let s = { indices: E(e, "indices", "oneHot", "int32") }, i = { dtype: r, depth: t, onValue: n, offValue: a }; return P.runKernel(vo, s, i) } var Zl = L({ oneHot_: xL }); function vL(e) { let t = { x: E(e, "x", "onesLike") }; return P.runKernel(Hu, t) } var na = L({ onesLike_: vL }); function wL(e, t) { let n = E(e, "v1", "outerProduct"), a = E(t, "v2", "outerProduct"); A(n.rank === 1 && a.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${a.rank}.`); let r = W(n, [-1, 1]), s = W(a, [1, -1]); return $e(r, s) } var pT = L({ outerProduct_: wL }); function kL(e, t, n = 0) { let a = E(e, "x", "pad"); if (a.rank === 0) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad"); let r = { paddings: t, constantValue: n }, s = { x: a }; return P.runKernel(wo, s, r) } var va = L({ pad_: kL }); function IL(e, t, n = 0) { return A(t.length === 2, () => "Invalid number of paddings. Must be length of 2."), va(e, [t], n) } var cT = L({ pad1d_: IL }); function SL(e, t, n = 0) { return A(t.length === 2 && t[0].length === 2 && t[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), va(e, t, n) } var dT = L({ pad2d_: SL }); function NL(e, t, n = 0) { return A(t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), va(e, t, n) } var hT = L({ pad3d_: NL }); function TL(e, t, n = 0) { return A(t.length === 4 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2 && t[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), va(e, t, n) } var mT = L({ pad4d_: TL }); function CL(e, t, n) { let a = E(e, "x", "spaceToBatchND"); A(a.rank >= 1 + t.length, () => `input rank ${a.rank} should be > than [blockShape] ${t.length}`), A(n.length === t.length, () => `paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`), A(a.shape.reduce((i, o, l) => l > 0 && l <= t.length ? i && (o + n[l - 1][0] + n[l - 1][1]) % t[l - 1] === 0 : i, !0), () => `input spatial dimensions ${a.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`); let r = { x: a }, s = { blockShape: t, paddings: n }; return P.runKernel(tp, r, s) } var vd = L({ spaceToBatchND_: CL }); function EL(e, t, n, a, r, s, i) { r == null && (r = [1, 1]), s == null && (s = 1), a === 0 && (a = "valid"); let o = E(e, "x", "maxPool"), l = o, u = !1; o.rank === 3 && (u = !0, l = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), A(hr(s, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`); let p = UN(l.shape, t, s, r, a), d = [p.dilationHeight, p.dilationWidth], c; a === "same" ? c = AL([p.filterHeight, p.filterWidth], d) : c = [[0, 0], [0, 0]]; let h = d[0] === 1 && d[1] === 1, [m, f] = _L([p.inHeight, p.inWidth], d, c), g = h ? a : "valid", b = h ? l : vd(l, d, m), y = (n === "avg" ? () => xa(b, t, s, g, i) : () => Dt(b, t, s, g, i))(), x = h ? y : dd(y, d, f); return u ? W(x, [x.shape[1], x.shape[2], x.shape[3]]) : x } function _L(e, t, n) { let a = n.map(p => p[0]), r = n.map(p => p[1]), s = e.concat(a, r), i = t.map((p, d) => (p - s[d] % p) % p), o = r.map((p, d) => p + i[d]), l = t.map((p, d) => [a[d], o[d]]), u = t.map((p, d) => [0, i[d]]); return [l, u] } function AL(e, t) { let n = e.map((s, i) => s + (s - 1) * (t[i] - 1)).map(s => s - 1), a = n.map(s => Math.floor(s / 2)), r = n.map((s, i) => s - a[i]); return n.map((s, i) => [a[i], r[i]]) } var Aw = L({ pool_: EL }); function FL(e, t) { let n = E(e, "x", "prelu"), a = E(t, "alpha", "prelu"), r = { x: n, alpha: a }; return P.runKernel(Io, r) } var wd = L({ prelu_: FL }); function $L(e, t = null, n = !1) { let a = E(e, "x", "prod"); a.dtype === "bool" && (a = re(a, "int32")); let r = { x: a }, s = { axis: t, keepDims: n }; return P.runKernel(So, r, s) } var Fw = L({ prod_: $L }); function DL(e, t, n, a) { let r = e.map((p, d) => E(p, `tensors${d}`, "raggedGather", "int32")), s = E(t, "paramsDenseValues", "raggedGather"), i = E(n, "indices", "raggedGather", "int32"), o = { paramsNestedSplits: r, paramsDenseValues: s, indices: i }, l = { outputRaggedRank: a }, u = P.runKernel(Gm, o, l); return { outputNestedSplits: u.slice(0, u.length - 1), outputDenseValues: u[u.length - 1] } } var fT = L({ raggedGather_: DL }); function RL(e, t, n) { let a = E(e, "starts", "raggedRange"), r = E(t, "limits", "raggedRange", a.dtype), s = E(n, "deltas", "raggedRange", a.dtype), i = { starts: a, limits: r, deltas: s }, o = P.runKernel(Hm, i); return { rtNestedSplits: o[0], rtDenseValues: o[1] } } var gT = L({ raggedRange_: RL }); function ML(e, t, n, a, r) { let s = E(e, "shape", "raggedTensorToTensor", "int32"), i = E(t, "values", "raggedTensorToTensor"), o = E(n, "defaultValue", "raggedTensorToTensor", i.dtype), l = a.map((d, c) => E(d, `tensors${c}`, "raggedTensorToTensor", "int32")), u = { shape: s, values: i, defaultValue: o, rowPartitionTensors: l }, p = { rowPartitionTypes: r }; return P.runKernel(qm, u, p) } var bT = L({ raggedTensorToTensor_: ML }); function OL(e, t, n) { ra(e); let a = ot(e), r = null; if (n == null || n === "float32") r = new Float32Array(a); else if (n === "int32") r = new Int32Array(a); else if (n === "bool") r = new Uint8Array(a); else throw new Error(`Unknown data type ${n}`); for (let s = 0; s < a; s++)r[s] = t(); return P.makeTensor(r, e, n) } var yT = L({ rand_: OL }), $w = ks(Fm()), xT = {}; _e(xT, { TEST_EPSILON_FLOAT16: () => vT, createVideoElement: () => GL, encodeStrings: () => wT, expectArrayBuffersEqual: () => UL, expectArraysClose: () => LL, expectArraysEqual: () => WL, expectNumbersClose: () => BL, expectPromiseToFail: () => zL, expectValuesInRange: () => VL, play: () => HL, testEpsilon: () => Dw }); var PL = .001, vT = .1; function LL(e, t, n) { return n == null && (n = Dw()), Bx(e, t, (a, r) => Rw(a, r, n)) } function Dw() { return P.backend.floatPrecision() === 32 ? PL : vT } function Bx(e, t, n) {
        let a = !0; if ((en(e) || en(t)) && (a = !1), en(e) && en(t) && (a = !0), a) { let i = e.constructor.name, o = t.constructor.name; if (i !== o) throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${o}`) } if (Array.isArray(e) && Array.isArray(t)) { let i = pr(e), o = pr(t); if (!$r(i, o)) throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${o}]`) } let r = en(e) ? e : ps(e), s = en(t) ? t : ps(t); if (r.length !== s.length) throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${s.length}.
Actual:   ${r}.
Expected: ${s}.`); for (let i = 0; i < s.length; ++i) {
            let o = r[i], l = s[i]; if (!n(o, l)) throw new Error(`Arrays differ: actual[${i}] = ${o}, expected[${i}] = ${l}.
Actual:   ${r}.
Expected: ${s}.`)
        } typeof expect != "undefined" && expect().nothing()
    } function zL(e, t) { e().then(() => t.fail(), () => t()), typeof expect != "undefined" && expect().nothing() } function WL(e, t) { let n = typeof t == "string" || typeof t == "number" || typeof t == "boolean" ? [t] : t; return ns(e) || ns(e[0]) || ns(t) || ns(t[0]) ? Bx(e, n, (a, r) => a == r) : Bx(e, t, (a, r) => Rw(a, r, 0)) } function BL(e, t, n) { if (n == null && (n = Dw()), !Rw(e, t, n)) throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`); typeof expect != "undefined" && expect().nothing() } function Rw(e, t, n) { return !isFinite(e) && !isFinite(t) ? !0 : !(isNaN(e) || isNaN(t) || Math.abs(e - t) > n) } function VL(e, t, n) { for (let a = 0; a < e.length; a++)if (e[a] < t || e[a] > n) throw new Error(`Value out of range:${e[a]} low: ${t}, high: ${n}`) } function UL(e, t) { let n = new Float32Array(e), a = new Float32Array(t); if (n.length !== a.length) throw new Error(`Expected ArrayBuffer to be of length ${a.length}, but it was ${n.length}`); for (let r = 0; r < a.length; r++)if (n[r] !== a[r]) throw new Error(`Expected ArrayBuffer value at ${r} to be ${a[r]} but got ${n[r]} instead`) } function wT(e) { for (let t = 0; t < e.length; t++) { let n = e[t]; Array.isArray(n) ? wT(n) : e[t] = ld(n) } return e } function GL(e) { let t = document.createElement("video"); return "playsInline" in t && (t.playsInline = !0), t.muted = !0, t.loop = !0, t.style.position = "fixed", t.style.left = "0px", t.style.top = "0px", t.preload = "auto", t.appendChild(e), new Promise(n => { t.addEventListener("loadeddata", a => n(t)), t.load() }) } async function HL(e) { await e.play(), "requestVideoFrameCallback" in e && await new Promise(t => { e.requestVideoFrameCallback(t) }) } var Mw = class { constructor(e, t, n, a, r) { this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = a, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2); let s = r || Math.random(); this.random = $w.alea(s.toString()) } nextValue() { if (!isNaN(this.nextVal)) { let a = this.nextVal; return this.nextVal = NaN, a } let e, t, n = !1; for (; !n;) { let a, r, s; do a = 2 * this.random() - 1, r = 2 * this.random() - 1, s = a * a + r * r; while (s >= 1 || s === 0); let i = Math.sqrt(-2 * Math.log(s) / s); e = this.mean + this.stdDev * a * i, t = this.mean + this.stdDev * r * i, (!this.truncated || this.isValidTruncated(e)) && (n = !0) } return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e) } convertValue(e) { return this.dtype == null || this.dtype === "float32" ? e : Math.round(e) } isValidTruncated(e) { return e <= this.upper && e >= this.lower } }, qL = class { constructor(e, t, n, a) { this.alpha = e, this.beta = 1 / t, this.dtype = n; let r = a || Math.random(); this.randu = $w.alea(r.toString()), this.randn = new Mw(0, 1, n, !1, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d) } nextValue() { let e, t, n, a, r, s; for (; ;) { do a = this.randn.nextValue(), s = 1 + this.c * a; while (s <= 0); if (s *= s * s, e = a * a, t = 1 - .331 * e * e, n = .5 * e + this.d * (1 - s + Math.log(s)), r = this.randu(), r < t || Math.log(r) < n) break } return s = 1 / this.beta * this.d * s, this.alpha < 1 && (s *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(s) } convertValue(e) { return this.dtype === "float32" ? e : Math.round(e) } }, jL = class { constructor(e = 0, t = 1, n, a) { if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = n, a == null && (a = Math.random()), typeof a == "number" && (a = a.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`); this.random = $w.alea(a) } convertValue(e) { return this.canReturnFloat() ? e : Math.round(e) } nextValue() { return this.convertValue(this.min + this.range * this.random()) } }; function KL(e, t, n = 1, a = "float32", r) { if (ra(e), n == null && (n = 1), a == null && (a = "float32"), a !== "float32" && a !== "int32") throw new Error(`Unsupported data type ${a}`); let s = new qL(t, n, a, r), i = Pe(e, a); for (let o = 0; o < i.values.length; o++)i.values[o] = s.nextValue(); return i.toTensor() } var kT = L({ randomGamma_: KL }); function XL(e, t = 0, n = 1, a, r) { if (ra(e), a != null && a === "bool") throw new Error(`Unsupported data type ${a}`); let s = new Mw(t, n, a, !1, r), i = Pe(e, a); for (let o = 0; o < i.values.length; o++)i.values[o] = s.nextValue(); return i.toTensor() } var uf = L({ randomNormal_: XL }); function YL(e, t, n) { if (t != null && t === "bool") throw new Error(`Unsupported data type ${t}`); return uf(e, 0, 1, t, n) } var IT = L({ randomStandardNormal_: YL }); function ZL(e, t = 0, n = 1, a = "float32", r) { ra(e); let s = Pe(e, a), i = new jL(t, n, null, r); for (let o = 0; o < s.values.length; o++)s.values[o] = i.nextValue(); return s.toTensor() } var Fs = L({ randomUniform_: ZL }); function JL(e, t, n, a) { return Fs(e, t, n, "int32", a) } var ST = L({ randomUniformInt_: JL }); function yi(e, t, n = 1, a = "float32") { if (n === 0) throw new Error("Cannot have a step of zero"); let r = { start: e, stop: t, step: n, dtype: a }; return P.runKernel(Xc, {}, r) } function QL(e) { let t = { input: E(e, "input", "real") }; return P.runKernel(jm, t) } var Jl = L({ real_: QL }); function ez(e) { let t = { x: E(e, "x", "reciprocal") }; return P.runKernel(No, t) } var Ow = L({ reciprocal_: ez }); function tz(e) { let t = { x: E(e, "x", "relu") }; return P.runKernel(To, t) } var Ke = L({ relu_: tz }); function nz(e) { let t = { x: E(e, "x", "relu6") }; return P.runKernel(_o, t) } var pf = L({ relu6_: nz }); function az(e, t) { let n = { x: E(e, "x", "reverse") }, a = { dims: t }; return P.runKernel(Ao, n, a) } var ya = L({ reverse_: az }); function rz(e) { let t = E(e, "x", "reverse"); return A(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), ya(t, 0) } var NT = L({ reverse1d_: rz }); function sz(e, t) { let n = E(e, "x", "reverse"); return A(n.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`), ya(n, t) } var TT = L({ reverse2d_: sz }); function iz(e, t) { let n = E(e, "x", "reverse"); return A(n.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`), ya(n, t) } var CT = L({ reverse3d_: iz }); function oz(e, t) { let n = E(e, "x", "reverse"); return A(n.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`), ya(n, t) } var ET = L({ reverse4d_: oz }); function lz(e) { let t = { x: E(e, "x", "round") }; return P.runKernel(Fo, t) } var cf = L({ round_: lz }); function uz(e) { let t = { x: E(e, "x", "rsqrt", "float32") }; return P.runKernel($o, t) } var df = L({ rsqrt_: uz }); function pz(e) { let t = { x: E(e, "x", "selu") }; return P.runKernel(Do, t) } var hf = L({ selu_: pz }); function cz(e, t, n, a, r, s = [1, 1], i = "NHWC") { let o = E(e, "x", "separableConv2d"), l = E(t, "depthwiseFilter", "separableConv2d"), u = E(n, "pointwiseFilter", "separableConv2d"), p = o, d = !1; if (o.rank === 3 && (d = !0, p = W(o, [1, o.shape[0], o.shape[1], o.shape[2]])), i === "NCHW") throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported"); A(p.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`), A(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), A(u.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), A(u.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`), A(u.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`); let c = l.shape[2], h = l.shape[3]; A(u.shape[2] === c * h, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${c * h}, but got ${u.shape[2]}.`); let m = _s(p, l, a, r, i, s), f = $t(m, u, 1, "valid", i); return d ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f } var $s = L({ separableConv2d_: cz }); async function dz(e, t) { let n = E(e, "x", "setdiff1d"), a = E(t, "y", "setdiff1d"); A(n.dtype === a.dtype, () => `x and y should have the same dtype, but got x (${n.dtype}) and y (${a.dtype}).`), A(n.rank === 1, () => `x should be 1D tensor, but got x (${n.shape}).`), A(a.rank === 1, () => `y should be 1D tensor, but got y (${a.shape}).`); let r = await n.data(), s = await a.data(), i = new Set(s), o = 0; for (let p = 0; p < r.length; p++)i.has(r[p]) || o++; let l = new Wt([o], n.dtype), u = new Wt([o], "int32"); for (let p = 0, d = 0; p < r.length; p++)i.has(r[p]) || (l.values[d] = r[p], u.values[d] = p, d++); return [l.toTensor(), u.toTensor()] } var _T = dz; function hz(e) { let t = { x: E(e, "x", "sign") }; return P.runKernel(Oo, t) } var Pw = L({ sign_: hz }); function mz(e) { let t = { x: E(e, "x", "sin", "float32") }; return P.runKernel(Ro, t) } var mf = L({ sin_: mz }); function fz(e) { let t = { x: E(e, "x", "sinh") }; return P.runKernel(Mo, t) } var ff = L({ sinh_: fz }); function gz(e, t, n) { let a = E(e, "x", "slice1d"); return A(a.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${a.rank} tensor`), Ve(a, [t], [n]) } var kd = L({ slice1d_: gz }); function bz(e, t, n) { let a = E(e, "x", "slice2d"); return A(a.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n) } var gf = L({ slice2d_: bz }); function yz(e, t, n) { let a = E(e, "x", "slice3d"); return A(a.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n) } var jo = L({ slice3d_: yz }); function xz(e, t, n) { let a = E(e, "x", "slice4d"); return A(a.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${a.rank} tensor`), Ve(a, t, n) } var Ql = L({ slice4d_: xz }); function vz(e, t = -1) { let n = E(e, "logits", "softmax", "float32"); if (t === -1 && (t = n.rank - 1), t !== n.rank - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`); let a = { logits: n }, r = { dim: t }; return P.runKernel(Bo, a, r) } var ja = L({ softmax_: vz }); function wz(e) { A(e.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`); let t = { input: e }; return P.runKernel(Bm, t) } var Id = L({ fft_: wz }); function kz(e) { A(e.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`); let t = { input: e }; return P.runKernel(Vm, t) } var eu = L({ ifft_: kz }); function Iz(e) { let t = e.shape[e.shape.length - 1], n = e.size / t, a; if (t <= 2) { let r = W(e, [n, t]); a = eu(r) } else { let r = [n, 2 * (t - 1)], s = W(Jl(e), [n, t]), i = W(md(e), [n, t]), o = ya(Ve(s, [0, 1], [n, t - 2]), 1), l = z(ya(Ve(i, [0, 1], [n, t - 2]), 1), ve(-1)), u = et([s, o], 1), p = et([i, l], 1), d = W(Ar(u, p), [r[0], r[1]]); a = eu(d) } if (a = Jl(a), e.rank === 3 && e.shape[0] !== 0) { let r = a, s = e.shape[0]; a = W(a, [s, a.shape[0] / s, a.shape[1]]), r.dispose() } return a } var bf = L({ irfft_: Iz }); function Sz(e, t, n = 0) { let a = { x: E(e, "x", "split") }, r = { numOrSizeSplits: t, axis: n }; return P.runKernel(np, a, r) } var Pn = L({ split_: Sz }); function Nz(e, t) { A(e.dtype === "float32", () => `The dtype for rfft() must be real value but got ${e.dtype}`); let n = e.shape[e.shape.length - 1], a = e.size / n, r; if (t != null && t < n) { let m = e.shape.map(g => 0), f = e.shape.map(g => g); f[e.shape.length - 1] = t, r = Ve(e, m, f), n = t } else if (t != null && t > n) { let m = e.shape.map(f => f); m[e.shape.length - 1] = t - n, r = et([e, It(m)], e.shape.length - 1), n = t } else r = e; let s = je(r), i = W(Ar(r, s), [a, n]), o = Id(i), l = Math.floor(n / 2) + 1, u = Jl(o), p = md(o), d = Pn(u, [l, n - l], u.shape.length - 1), c = Pn(p, [l, n - l], p.shape.length - 1), h = r.shape.slice(); return h[r.shape.length - 1] = l, W(Ar(d[0], c[0]), h) } var Sd = L({ rfft_: Nz }); function Tz(e, t) { let n = E(e, "a", "squaredDifference"), a = E(t, "b", "squaredDifference");[n, a] = At(n, a), ct(n.shape, a.shape); let r = { a: n, b: a }, s = {}; return P.runKernel(Vo, r, s) } var yf = L({ squaredDifference_: Tz }); function Cz(e, t) { let n = E(e, "x", "squeeze", "string_or_numeric"); return W(n, aN(n.shape, t).newShape) } var Ds = L({ squeeze_: Cz }); function Ez(e, t = 0) { let n = Ic(e, "tensors", "stack", "string_or_numeric"); A(n.length >= 1, () => "Pass at least one tensor to tf.stack"), n.length > 0 && A(t <= n[0].rank, () => "Axis must be <= rank of the tensor"); let a = n, r = { axis: t }; return P.runKernel(qu, a, r) } var Ft = L({ stack_: Ez }); function _z(e, t = 0) { let n = { x: E(e, "x", "step") }, a = { alpha: t }; return P.runKernel(Ts, n, a) } var Ko = L({ step_: _z }); function Az(e, t, n, a, r = 0, s = 0, i = 0, o = 0, l = 0) { let u = { x: E(e, "x", "stridedSlice", "string_or_numeric") }, p = { begin: t, end: n, strides: a, beginMask: r, endMask: s, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: l }; return P.runKernel(sp, u, p) } var Lw = L({ stridedSlice_: Az }); function Fz(e) { let t = { x: E(e, "x", "tan", "float32") }; return P.runKernel(Go, t) } var zw = L({ tan_: Fz }); function qe(e, t) { Ti(e); let n = pr(e, t); if (n.length !== 1) throw new Error("tensor1d() requires values to be a flat/TypedArray"); return Cs(e, null, n, t) } function Aa(e, t, n) { if (Ti(e), t != null && t.length !== 2) throw new Error("tensor2d() requires shape to have two numbers"); let a = pr(e, n); if (a.length !== 2 && a.length !== 1) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray"); if (a.length === 1 && t == null) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray"); return Cs(e, t, a, n) } function Nd(e, t, n) { if (Ti(e), t != null && t.length !== 3) throw new Error("tensor3d() requires shape to have three numbers"); let a = pr(e, n); if (a.length !== 3 && a.length !== 1) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray"); if (a.length === 1 && t == null) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array"); return Cs(e, t, a, n) } function Da(e, t, n) { if (Ti(e), t != null && t.length !== 4) throw new Error("tensor4d() requires shape to have four numbers"); let a = pr(e, n); if (a.length !== 4 && a.length !== 1) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray"); if (a.length === 1 && t == null) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array"); return Cs(e, t, a, n) } function AT(e, t, n) { if (Ti(e), t != null && t.length !== 5) throw new Error("tensor5d() requires shape to have five numbers"); let a = pr(e, n); if (a.length !== 5 && a.length !== 1) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray"); if (a.length === 1 && t == null) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array"); return Cs(e, t, a, n) } function FT(e, t, n) { if (Ti(e), t != null && t.length !== 6) throw new Error("tensor6d() requires shape to have six numbers"); let a = pr(e, n); if (a.length !== 6 && a.length !== 1) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray"); if (a.length === 1 && t == null) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array"); return t = t || a, Cs(e, t, a, n) } var xf = {}; _e(xf, { calculateShapes: () => $T, validateInput: () => vf, validateUpdateShape: () => Ww }); function Ww(e, t, n) { let a = t.rank > 1 ? t.shape[t.rank - 1] : 1, r = t.rank > 1 ? t.rank - 1 : 1, s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${a}, and batchDim: ${r}.`; if (n.rank < r) throw new Error(s + ` update.rank < ${r}. `); if (e.length < a + (n.rank - r)) throw new Error(s + ` Output shape length < ${a + (n.rank - r)}`); if (n.rank !== r + e.length - a) throw new Error(s + ` update.rank != ${r + e.length - a}`); for (let i = 0; i < r; ++i)if (n.shape[i] !== t.shape[i]) throw new Error(s + ` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`); for (let i = 0; i < n.rank - r; ++i)if (n.shape[i + r] !== e[i + a]) throw new Error(s + ` updates.shape[${i + r}] (${n.shape[i + r]}) != shape[${i + r}] (${e[i + r]})`) } function vf(e, t, n) { if (t.rank < 1) throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`); if (e.rank < 1) throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`); if (t.dtype !== "int32") throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`); if (n.length < 1) throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`); if (n.length === 0) { if (t.size === 0) throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`); if (e.size === 0) throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`) } Ww(n, t, e) } function $T(e, t, n) { let a = t.shape.length, r = a > 1 ? t.shape[a - 1] : 1, s = n.length, i = 1; for (let d = r; d < s; ++d)i *= n[d]; let o = r < 1 ? 1 : r, l = ot(t.shape) / o, u = [...lu(n.slice(0, r)), 1], p = ot(n); return { sliceRank: r, numUpdates: l, sliceSize: i, strides: u, outputSize: p } } function $z(e, t, n) { let a = E(e, "tensor", "tensorScatterupdate"), r = E(t, "indices", "tensorScatterupdate", "int32"), s = E(n, "updates", "tensorScatterupdate"); if (vf(s, r, a.shape), a.dtype !== s.dtype) throw new Error(`tensor and updates must have the same dtype, instead they are ${a.dtype} and ${s.dtype}.`); let i = { tensor: a, indices: r, updates: s }, o = {}; return P.runKernel(Zu, i, o) } var DT = L({ tensorScatterUpdate_: $z }); function Dz(e, t = 1, n = !0) { let a = E(e, "x", "topk"); if (a.rank === 0) throw new Error("topk() expects the input to be of rank 1 or higher"); let r = a.shape[a.shape.length - 1]; if (t < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`); if (t > r) throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`); let s = { x: a }, i = { k: t, sorted: n }, [o, l] = P.runKernel(ip, s, i); return { values: o, indices: l } } var Bw = L({ topk_: Dz }); function Rz(e, t = 0, n = 1, a, r) { if (ra(e), a != null && a === "bool") throw new Error("Unsupported data type $ { dtype }"); let s = new Mw(t, n, a, !0, r), i = Pe(e, a); for (let o = 0; o < i.values.length; o++)i.values[o] = s.nextValue(); return i.toTensor() } var wf = L({ truncatedNormal_: Rz }); function Mz(e, t = 0) { let n = E(e, "x", "unique", "string_or_numeric"); A(n.rank > 0, () => "The input tensor must be at least 1D"); let a = { x: n }, r = { axis: t }, [s, i] = P.runKernel(rd, a, r); return { values: s, indices: i } } var Vw = L({ unique_: Mz }); function Oz(e, t, n) { let a = E(e, "x", "unsortedSegmentSum"), r = E(t, "segmentIds", "unsortedSegmentSum", "int32"); A(Hl(n), () => "numSegments must be of dtype int"); let s = { x: a, segmentIds: r }, i = { numSegments: n }; return P.runKernel(sd, s, i) } var kf = L({ unsortedSegmentSum_: Oz }); function Pz(e, t = 0) { let n = E(e, "x", "unstack", "string_or_numeric"); A(t >= -n.shape.length && t < n.shape.length, () => `Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`); let a = { value: n }, r = { axis: t }; return P.runKernel(lp, a, r) } var dt = L({ unstack_: Pz }); function RT(e, t) { return lf(e, t, "right") } function Uw(e, t = !0, n, a) { return P.makeVariable(e, t, n, a) } function MT(e, t) { let n = []; for (let s = 0; s < t.length; s++)t[s] && n.push(s); let a = Pe(e, "int32"), r = Pe([n.length, e.length], "int32"); for (let s = 0; s < n.length; s++) { let i = a.indexToLoc(n[s]), o = s * e.length; r.values.set(i, o) } return r.toTensor() } async function Lz(e) { let t = E(e, "condition", "whereAsync", "bool"), n = await t.data(), a = MT(t.shape, n); return e !== t && t.dispose(), a } var Gw = Lz; async function zz(e, t, n) { let a = E(e, "tensor", "boolMask"), r = E(t, "mask", "boolMask", "bool"), s = n == null ? 0 : n, i = r.rank, o = a.shape; A(i > 0, () => "mask cannot be scalar"), Sn(o.slice(s, s + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,"); let l = 1; for (let f = s; f < s + i; f++)l *= o[f]; let u = o.slice(0, s).concat([l], o.slice(s + i)), p = W(a, u), d = W(r, [-1]), c = await Gw(d), h = Ds(c, [1]), m = fp(p, h, s); return e !== a && a.dispose(), t !== r && r.dispose(), h.dispose(), p.dispose(), d.dispose(), c.dispose(), m } var OT = zz; function Wz(e, t, n) { let a = E(e, "x", "transpose"); if (t == null && (t = a.shape.map((i, o) => o).reverse()), A(a.rank === t.length, () => `Error in transpose: rank of input ${a.rank} must match length of perm ${t}.`), t.forEach(i => { A(i >= 0 && i < a.rank, () => `All entries in 'perm' must be between 0 and ${a.rank - 1} but got ${t}`) }), a.rank <= 1) return a.clone(); let r = { x: a }, s = { perm: t }; return a.dtype === "complex64" ? O(() => { let i = Jl(a), o = md(a); return i = P.runKernel(Er, { x: i }, s), o = P.runKernel(Er, { x: o }, s), n && (o = yt(o)), Ar(i, o) }) : P.runKernel(Er, r, s) } var De = L({ transpose_: Wz }); function Bz(e, t, n, a, r = !0) { let s = E(e, "v", "movingAverage"), i = E(t, "x", "movingAverage"), o = E(n, "decay", "movingAverage"); IN(s, i), A($r(s.shape, i.shape), () => "Shape mismatch in v and x"); let l = ve(1), u = pe(l, o), p = z(pe(i, s), u); if (r) { A(a != null, () => "When using zeroDebias: true, step is required."); let d = E(a, "step", "movingAverage"); p = he(p, pe(l, Fr(o, d))) } return X(s, p) } var PT = L({ movingAverage_: Bz }); function Vz(e, t, n) { ra(n); let a = E(e, "indices", "scatterND", "int32"), r = E(t, "updates", "scatterND"); vf(r, a, n); let s = { indices: a, updates: r }, i = { shape: n }; return P.runKernel(Yu, s, i) } var LT = L({ scatterND_: Vz }); function Uz(e, t, n, a) { if (e.dtype !== "int32") throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`); if (e.rank > 2) throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`); let r = e.rank > 0 ? e.shape[0] : 1, s = e.rank > 1 ? e.shape[1] : 1; if (n.length !== s) throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`); let i = t.size; if (!(t.rank === 0 || t.rank === 1 && i === r)) throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`); if (t.dtype !== a.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype") } function Gz(e, t, n, a = 0) { ra(n); let r = E(e, "sparseIndices", "sparseToDense", "int32"), s = E(t, "sparseValues", "sparseToDense", "string_or_numeric"), i = E(a, "defaultValue", "sparseToDense", s.dtype); Uz(r, s, n, i); let o = { sparseIndices: r, sparseValues: s, defaultValue: i }, l = { outputShape: n }; return P.runKernel(rp, o, l) } var zT = L({ sparseToDense_: Gz }); function Hz(e, t) { let n = E(t, "indices", "gatherND", "int32"), a = { params: E(e, "x", "gatherND", "string_or_numeric"), indices: n }; return P.runKernel(_u, a) } var WT = L({ gatherND_: Hz }); function qz(e, t) { if (t == null) return e.shape.slice(); if ($r(e.shape, t)) return t; if (e.shape.length === t.length) { let n = []; for (let a = 0; a < e.shape.length; a++)t[a] == null && e.shape[a] != null ? n.push(e.shape[a]) : n.push(t[a]); return n } return t } function jz(e, t, n, a) { let r = E(e, "x", "dropout"); if (A(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), A(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0) return e instanceof Ce ? r.clone() : r; let s = qz(r, n), i = 1 - t, o = he(mp(X(Fs(s, 0, 1, "float32", a), i)), i); return z(r, o) } var Hw = L({ dropout_: jz }); function qw(e) { return Math.floor(Math.pow(2, Math.ceil(Math.log(e) / Math.log(2)))) } function If(e, t, n) { let a = 1 - e % 2, r = new Float32Array(e); for (let s = 0; s < e; ++s) { let i = 2 * Math.PI * s / (e + a - 1); r[s] = t - n * Math.cos(i) } return qe(r, "float32") } async function Kz(e, t, n = 1) { let a = E(e, "predictions", "inTopK"), r = E(t, "targets", "inTopK"); A(a.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${a.rank}`), A(a.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${a.rank} and targets rank ${r.rank}`), Sn(a.shape.slice(0, a.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension."); let s = a.shape[a.shape.length - 1]; A(n > 0 && n <= s, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`); let i = await a.data(), o = await r.data(), [l, u] = [i.length / s, s], p = rN("bool", l); for (let d = 0; d < l; d++) { let c = d * u, h = i.subarray(c, c + u), m = []; for (let f = 0; f < h.length; f++)m.push({ value: h[f], index: f }); m.sort((f, g) => g.value - f.value), p[d] = 0; for (let f = 0; f < n; f++)if (m[f].index === o[d]) { p[d] = 1; break } } return e !== a && a.dispose(), t !== r && r.dispose(), bn(p, r.shape, "bool") } var BT = Kz, tu = {}; _e(tu, { conv2d: () => Zz, depthwiseConv2d: () => tW, matMul: () => aW }); function Xz(e, t, n, a, r, s = "NHWC", i) { let o = e; e.rank === 3 && (o = W(e, [1, e.shape[0], e.shape[1], e.shape[2]])); let l = t; l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])), A(o.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`), A(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), A(n.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`); let u = s === "NHWC" ? o.shape[3] : o.shape[1], p = s === "NHWC" ? l.shape[3] : l.shape[1]; A(u === n[2], () => `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`), A(p === n[3], () => `Error in conv2dDerFilter: depth of dy (${p}) must match output depth for filter (${n[3]}).`), Nn("conv2dDerFilter", r, i); let d = { x: o, dy: l }, c = { strides: a, pad: r, dataFormat: s, dimRoundingMode: i, filterShape: n }; return P.runKernel(Om, d, c) } var jw = L({ conv2DBackpropFilter_: Xz }); function Sf(e, t, n) { if (n == null || n === "linear") return e; if (n === "relu") return z(e, Ko(t)); throw new Error(`Cannot compute gradient for fused activation ${n}.`) } function Nf(e, t) { let n = t, a = Bt(e.shape, t.shape); return a.length > 0 && (n = fe(n, a)), W(n, e.shape) } function Tf(e, t, n, a) { if (t === "linear") return e; if (t === "relu") return Ke(e); if (t === "elu") return dp(e); if (t === "relu6") return pf(e); if (t === "prelu") return wd(e, n); if (t === "leakyrelu") return fd(e, a); if (t === "sigmoid") return ma(e); throw new Error(`Unknown fused activation ${t}.`) } var Cf = (e, t) => !(e > 0) || t === "linear"; function Yz({ x: e, filter: t, strides: n, pad: a, dataFormat: r = "NHWC", dilations: s = [1, 1], dimRoundingMode: i, bias: o, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: p }) { if (l = l || "linear", Cf(P.state.gradientDepth, l) === !1) { A(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`); let N = $t(e, t, n, a, r, s, i); return o != null && (N = X(N, o)), Tf(N, l, u, p) } let d = E(e, "x", "conv2d", "float32"), c = E(t, "filter", "conv2d", "float32"), h = d, m = !1; d.rank === 3 && (m = !0, h = W(d, [1, d.shape[0], d.shape[1], d.shape[2]])), A(h.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${h.rank}.`), A(c.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${c.rank}.`), Nn("fused conv2d", a, i); let f = r === "NHWC" ? h.shape[3] : h.shape[1]; A(c.shape[2] === f, () => `Error in conv2d: depth of input (${f}) must match input depth for filter ${c.shape[2]}.`), A(hr(n, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`); let g = cd(h.shape, c.shape, n, s, a, i), b; o != null && (b = E(o, "bias", "fused conv2d"), [b] = At(b, d), r === "NHWC" ? ct(g.outShape, b.shape) : (A(b.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`), A(b.shape.length === 0 || b.shape[0] === g.outChannels || b.shape[0] === 1, () => `Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`))); let y; if (u != null) { let N = u.shape; if (A(N.length <= 1 || N.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${N.length}.`), N.length === 1) A(N[0] === 1 || N[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the number of output channels (${g.outChannels}).`); else if (N.length === 3) try { ct(N, g.outShape) } catch (C) { let _ = `Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the output shape of the conv2d (${g.outShape}).`; throw Error(_) } y = E(u, "prelu weights", "fused conv2d") } let x = (N, C) => { A(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`); let [_, F, D, $] = C, S = Sf(N, D, l); A(ms(s), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`); let M = uw(F.shape, S, _, n, a), B = jw(F, S, _.shape, n, a), U = [M, B]; if ($ != null) { let H = Nf($, S); U.push(H) } return U }, v = { x: h, filter: c, bias: b, preluActivationWeights: y }, I = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i, activation: l, leakyreluAlpha: p }; return o == null ? cr((N, C, _) => { let F = P.runKernel(li, v, I); return _([C, N, F]), m && (F = W(F, [F.shape[1], F.shape[2], F.shape[3]])), { value: F, gradFunc: x } })(h, c) : cr((N, C, _, F) => { let D = P.runKernel(li, v, I); return F([C, N, D, _]), m && (D = W(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: x } })(h, c, b) } var Zz = L({ fusedConv2d_: Yz }); function Jz(e, t, n, a, r, s = [1, 1], i) { let o = e; e.rank === 3 && (o = W(e, [1, e.shape[0], e.shape[1], e.shape[2]])); let l = t; l.rank === 3 && (l = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])); let u = { x: o, dy: l }, p = { strides: a, pad: r, dimRoundingMode: i, dilations: s, filterShape: n }; return P.runKernel(Pm, u, p) } var VT = L({ depthwiseConv2dNativeBackpropFilter_: Jz }); function Qz(e, t, n, a, r, s = [1, 1], i) { let o = t, l = !1; t.rank === 3 && (l = !0, o = W(t, [1, t.shape[0], t.shape[1], t.shape[2]])); let u = { dy: o, filter: n }, p = { strides: a, pad: r, dimRoundingMode: i, dilations: s, inputShape: e }, d = P.runKernel(Lm, u, p); return l ? W(d, [d.shape[1], d.shape[2], d.shape[3]]) : d } var UT = L({ depthwiseConv2dNativeBackpropInput_: Qz }); function eW({ x: e, filter: t, strides: n, pad: a, dataFormat: r = "NHWC", dilations: s = [1, 1], dimRoundingMode: i, bias: o, activation: l = "linear", preluActivationWeights: u, leakyreluAlpha: p }) { if (Cf(P.state.gradientDepth, l) === !1) { let I = _s(e, t, n, a, r, s, i); return o != null && (I = X(I, o)), Tf(I, l, u, p) } let d = E(e, "x", "depthwiseConv2d", "float32"), c = E(t, "filter", "depthwiseConv2d", "float32"), h = d, m = !1; d.rank === 3 && (m = !0, h = W(d, [1, d.shape[0], d.shape[1], d.shape[2]])), A(h.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`), A(c.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${c.rank}.`), A(h.shape[3] === c.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), s == null && (s = [1, 1]), A(hr(n, s), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`), Nn("fused depthwiseConv2d", a, i); let f = cd(h.shape, c.shape, n, s, a, i, !0), g; o != null && (g = E(o, "bias", "fused conv2d"), [g] = At(g, d), ct(f.outShape, g.shape)); let b; u != null && (b = E(u, "prelu weights", "fused depthwiseConv2d")); let y = (I, N) => { A(ms(s), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`); let [C, _, F, D] = N, $ = Sf(I, F, l), S = UT(_.shape, $, C, n, a, s, i), M = VT(_, $, C.shape, n, a, s, i); if (D != null) { let B = Nf(g, $); return [S, M, B] } return [S, M] }, x = { x: h, filter: c, bias: g, preluActivationWeights: b }, v = { strides: n, pad: a, dataFormat: r, dilations: s, dimRoundingMode: i, activation: l, leakyreluAlpha: p }; return o == null ? cr((I, N, C) => { let _ = P.runKernel(ui, x, v); return C([N, I, _]), m && (_ = W(_, [_.shape[1], _.shape[2], _.shape[3]])), { value: _, gradFunc: y } })(h, c) : cr((I, N, C, _) => { let F = P.runKernel(ui, x, v); return _([N, I, F, C]), m && (F = W(F, [F.shape[1], F.shape[2], F.shape[3]])), { value: F, gradFunc: y } })(h, c, g) } var tW = L({ fusedDepthwiseConv2d_: eW }); function nW({ a: e, b: t, transposeA: n = !1, transposeB: a = !1, bias: r, activation: s = "linear", preluActivationWeights: i, leakyreluAlpha: o = .2 }) { if (Cf(P.state.gradientDepth, s) === !1) { let D = $e(e, t, n, a); return r != null && (D = X(D, r)), Tf(D, s, i, o) } let l = E(e, "a", "fused matMul"), u = E(t, "b", "fused matMul");[l, u] = At(l, u); let p = n ? l.shape[l.rank - 2] : l.shape[l.rank - 1], d = a ? u.shape[u.rank - 1] : u.shape[u.rank - 2], c = n ? l.shape[l.rank - 1] : l.shape[l.rank - 2], h = a ? u.shape[u.rank - 2] : u.shape[u.rank - 1], m = l.shape.slice(0, -2), f = u.shape.slice(0, -2), g = ot(m), b = ot(f); A(p === d, () => `Error in fused matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${a} must match.`); let y = ct(l.shape.slice(0, -2), u.shape.slice(0, -2)).concat([c, h]), x = n ? W(l, [g, p, c]) : W(l, [g, c, p]), v = a ? W(u, [b, h, d]) : W(u, [b, d, h]), I; r != null && (I = E(r, "bias", "fused matMul"), [I] = At(I, l), ct(y, I.shape)); let N; i != null && (N = E(i, "prelu weights", "fused matMul")); let C = (D, $) => { let [S, M, B, U] = $, H = Sf(W(D, B.shape), B, s), j, K; if (!n && !a ? (j = $e(H, M, !1, !0), K = $e(S, H, !0, !1)) : !n && a ? (j = $e(H, M, !1, !1), K = $e(H, S, !0, !1)) : n && !a ? (j = $e(M, H, !1, !0), K = $e(S, H, !1, !1)) : (j = $e(M, H, !0, !0), K = $e(H, S, !0, !0)), r != null) { let Z = Nf(U, H); return [j, K, Z] } else return [j, K] }, _ = { a: x, b: v, bias: I, preluActivationWeights: N }, F = { transposeA: n, transposeB: a, activation: s, leakyreluAlpha: o }; return r == null ? cr((D, $, S) => { let M = P.runKernel(oi, _, F); return S([D, $, M]), { value: W(M, y), gradFunc: C } })(x, v) : cr((D, $, S, M) => { let B = P.runKernel(oi, _, F); return M([D, $, B, S]), { value: W(B, y), gradFunc: C } })(x, v, I) } var aW = L({ fusedMatMul_: nW }); function rW(e) { return If(e, .54, .46) } var sW = L({ hammingWindow_: rW }); function iW(e) { return If(e, .5, .5) } var GT = L({ hannWindow_: iW }); function oW(e, t, n, a = !1, r = 0) { let s = 0, i = []; for (; s + t <= e.size;)i.push(Ve(e, s, t)), s += n; if (a) for (; s < e.size;) { let o = s + t - e.size, l = et([Ve(e, s, t - o), yn([o], r)]); i.push(l), s += n } return i.length === 0 ? Aa([], [0, t]) : W(et(i), [i.length, t]) } var HT = L({ frame_: oW }); function lW(e, t, n, a, r = GT) { a == null && (a = qw(t)); let s = HT(e, t, n), i = z(s, r(t)); return Sd(i, a) } var uW = L({ stft_: lW }); function pW(e, t, n, a, r = "bilinear", s = 0) { let i = E(e, "image", "cropAndResize"), o = E(t, "boxes", "cropAndResize", "float32"), l = E(n, "boxInd", "cropAndResize", "int32"), u = o.shape[0]; A(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), A(o.rank === 2 && o.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`), A(l.rank === 1 && l.shape[0] === u, () => `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`), A(a.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${a.length}.`), A(a[0] >= 1 && a[1] >= 1, () => `cropSize must be atleast [1,1], but was ${a}`), A(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`); let p = { image: i, boxes: o, boxInd: l }, d = { method: r, extrapolationValue: s, cropSize: a }; return P.runKernel(ku, p, d) } var cW = L({ cropAndResize_: pW }); function dW(e) { let t = E(e, "image", "flipLeftRight", "float32"); A(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`); let n = { image: t }; return P.runKernel(Cu, n, {}) } var hW = L({ flipLeftRight_: dW }); function mW(e) { let t = E(e, "image", "grayscaleToRGB"), n = t.rank - 1, a = t.shape[n]; A(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), A(a === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${a}.`); let r = new Array(t.rank); return r.fill(1, 0, n), r[n] = 3, Mn(t, r) } var fW = L({ grayscaleToRGB_: mW }); function gW(e) { let t = E(e, "image", "RGBToGrayscale"), n = t.rank - 1, a = t.shape[n]; A(t.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`), A(a === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${a}.`); let r = t.dtype, s = re(t, "float32"), i = qe([.2989, .587, .114]), o; switch (t.rank) { case 2: o = Js("ij,j->i", s, i); break; case 3: o = Js("ijk,k->ij", s, i); break; case 4: o = Js("ijkl,l->ijk", s, i); break; case 5: o = Js("ijklm,m->ijkl", s, i); break; case 6: o = Js("ijklmn,n->ijklm", s, i); break; default: throw new Error("Not a valid tensor rank.") }return o = Gt(o, -1), re(o, r) } var bW = L({ rgbToGrayscale_: gW }); function yW(e, t, n = 0, a = .5) { let r = E(e, "image", "rotateWithOffset", "float32"); A(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`); let s = { image: r }, i = { radians: t, fillValue: n, center: a }; return P.runKernel(pp, s, i) } var xW = L({ rotateWithOffset_: yW }); function gp(e, t, n, a, r, s) { a == null && (a = .5), r == null && (r = Number.NEGATIVE_INFINITY), s == null && (s = 0); let i = e.shape[0]; return n = Math.min(n, i), A(0 <= a && a <= 1, () => `iouThreshold must be in [0, 1], but was '${a}'`), A(e.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${e.rank}'`), A(e.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`), A(t.rank === 1, () => "scores must be a 1D tensor"), A(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), A(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`), { maxOutputSize: n, iouThreshold: a, scoreThreshold: r, softNmsSigma: s } } function vW(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY) { let s = E(e, "boxes", "nonMaxSuppression", "float32"), i = E(t, "scores", "nonMaxSuppression", "float32"), o = gp(s, i, n, a, r); n = o.maxOutputSize, a = o.iouThreshold, r = o.scoreThreshold; let l = { maxOutputSize: n, iouThreshold: a, scoreThreshold: r }; return P.runKernel(Vu, { boxes: s, scores: i }, l) } var wW = L({ nonMaxSuppression_: vW }); function kW(e, t, n) { let a = IW(e, t, n), r = a < 0 ? -(a + 1) : a; e.splice(r, 0, t) } function IW(e, t, n) { return NW(e, t, n || SW) } function SW(e, t) { return e > t ? 1 : e < t ? -1 : 0 } function NW(e, t, n) { let a = 0, r = e.length, s = 0, i = !1; for (; a < r;) { s = a + (r - a >>> 1); let o = n(t, e[s]); o > 0 ? a = s + 1 : (r = s, i = !o) } return i ? a : -a - 1 } function qT(e, t, n, a, r) { return Kw(e, t, n, a, r, 0) } function jT(e, t, n, a, r, s) { return Kw(e, t, n, a, r, 0, !1, s, !0) } function KT(e, t, n, a, r, s) { return Kw(e, t, n, a, r, s, !0) } function Kw(e, t, n, a, r, s, i = !1, o = !1, l = !1) { let u = []; for (let g = 0; g < t.length; g++)t[g] > r && u.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 }); u.sort(II); let p = s > 0 ? -.5 / s : 0, d = [], c = []; for (; d.length < n && u.length > 0;) { let g = u.pop(), { score: b, boxIndex: y, suppressBeginIndex: x } = g; if (b < r) break; let v = !1; for (let I = d.length - 1; I >= x; --I) { let N = TW(e, y, d[I]); if (N >= a) { v = !0; break } if (g.score = g.score * CW(a, p, N), g.score <= r) break } g.suppressBeginIndex = d.length, v || (g.score === b ? (d.push(y), c.push(g.score)) : g.score > r && kW(u, g, II)) } let h = d.length, m = n - h; o && m > 0 && (d.push(...new Array(m).fill(0)), c.push(...new Array(m).fill(0))); let f = { selectedIndices: d }; return i && (f.selectedScores = c), l && (f.validOutputs = h), f } function TW(e, t, n) { let a = e.subarray(t * 4, t * 4 + 4), r = e.subarray(n * 4, n * 4 + 4), s = Math.min(a[0], a[2]), i = Math.min(a[1], a[3]), o = Math.max(a[0], a[2]), l = Math.max(a[1], a[3]), u = Math.min(r[0], r[2]), p = Math.min(r[1], r[3]), d = Math.max(r[0], r[2]), c = Math.max(r[1], r[3]), h = (o - s) * (l - i), m = (d - u) * (c - p); if (h <= 0 || m <= 0) return 0; let f = Math.max(s, u), g = Math.max(i, p), b = Math.min(o, d), y = Math.min(l, c), x = Math.max(b - f, 0) * Math.max(y - g, 0); return x / (h + m - x) } function CW(e, t, n) { let a = Math.exp(t * n * n); return n <= e ? a : 0 } function II(e, t) { return e.score - t.score || e.score === t.score && t.boxIndex - e.boxIndex } async function EW(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY) { let s = E(e, "boxes", "nonMaxSuppressionAsync"), i = E(t, "scores", "nonMaxSuppressionAsync"), o = gp(s, i, n, a, r); n = o.maxOutputSize, a = o.iouThreshold, r = o.scoreThreshold; let l = await Promise.all([s.data(), i.data()]), u = l[0], p = l[1], { selectedIndices: d } = qT(u, p, n, a, r); return s !== e && s.dispose(), i !== t && i.dispose(), qe(d, "int32") } var _W = EW; function AW(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY, s = 0) { let i = E(e, "boxes", "nonMaxSuppression"), o = E(t, "scores", "nonMaxSuppression"), l = gp(i, o, n, a, r, s); n = l.maxOutputSize, a = l.iouThreshold, r = l.scoreThreshold, s = l.softNmsSigma; let u = { boxes: i, scores: o }, p = { maxOutputSize: n, iouThreshold: a, scoreThreshold: r, softNmsSigma: s }, d = P.runKernel(Gu, u, p); return { selectedIndices: d[0], selectedScores: d[1] } } var FW = L({ nonMaxSuppressionWithScore_: AW }); async function $W(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY, s = 0) { let i = E(e, "boxes", "nonMaxSuppressionAsync"), o = E(t, "scores", "nonMaxSuppressionAsync"), l = gp(i, o, n, a, r, s); n = l.maxOutputSize, a = l.iouThreshold, r = l.scoreThreshold, s = l.softNmsSigma; let u = await Promise.all([i.data(), o.data()]), p = u[0], d = u[1], { selectedIndices: c, selectedScores: h } = KT(p, d, n, a, r, s); return i !== e && i.dispose(), o !== t && o.dispose(), { selectedIndices: qe(c, "int32"), selectedScores: qe(h) } } var DW = $W; function RW(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY, s = !1) { let i = E(e, "boxes", "nonMaxSuppression"), o = E(t, "scores", "nonMaxSuppression"), l = gp(i, o, n, a, r, null), u = l.maxOutputSize, p = l.iouThreshold, d = l.scoreThreshold, c = { boxes: i, scores: o }, h = { maxOutputSize: u, iouThreshold: p, scoreThreshold: d, padToMaxOutputSize: s }, m = P.runKernel(Uu, c, h); return { selectedIndices: m[0], validOutputs: m[1] } } var MW = L({ nonMaxSuppressionPadded_: RW }); async function OW(e, t, n, a = .5, r = Number.NEGATIVE_INFINITY, s = !1) { let i = E(e, "boxes", "nonMaxSuppressionAsync"), o = E(t, "scores", "nonMaxSuppressionAsync"), l = gp(i, o, n, a, r, null), u = l.maxOutputSize, p = l.iouThreshold, d = l.scoreThreshold, [c, h] = await Promise.all([i.data(), o.data()]), { selectedIndices: m, validOutputs: f } = jT(c, h, u, p, d, s); return i !== e && i.dispose(), o !== t && o.dispose(), { selectedIndices: qe(m, "int32"), validOutputs: ve(f, "int32") } } var PW = OW; function LW(e, t, n = !1, a = !1) { let r = E(e, "images", "resizeBilinear"); A(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), A(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), A(a === !1 || n === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."); let s = r, i = !1; r.rank === 3 && (i = !0, s = W(r, [1, r.shape[0], r.shape[1], r.shape[2]])); let [] = t, o = { images: s }, l = { alignCorners: n, halfPixelCenters: a, size: t }, u = P.runKernel(Eo, o, l); return i ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u } var XT = L({ resizeBilinear_: LW }); function zW(e, t, n = !1, a = !1) { let r = E(e, "images", "resizeNearestNeighbor"); A(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), A(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), A(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), A(a === !1 || n === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."); let s = r, i = !1; r.rank === 3 && (i = !0, s = W(r, [1, r.shape[0], r.shape[1], r.shape[2]])); let [] = t, o = { images: s }, l = { alignCorners: n, halfPixelCenters: a, size: t }, u = P.runKernel(Co, o, l); return i ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u } var YT = L({ resizeNearestNeighbor_: zW }); function WW(e, t = "binary", n = !1, a = .5) { let r = E(e, "image", "threshold"), s = .2989, i = .587, o = .114, l = r.shape[0] * r.shape[1], u = z(qe([a]), 255), p, d, c, h; if (A(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), A(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), A(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), A(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), r.shape[2] === 3) { [p, d, c] = Pn(r, [1, 1, 1], -1); let f = z(p, s), g = z(d, i), b = z(c, o); h = X(X(f, g), b) } else h = e; if (t === "otsu") { let f = aw(re(cf(h), "int32"), bn([]), 256); u = BW(f, l) } let m = n ? As(h, u) : Tn(h, u); return re(z(m, 255), "int32") } function BW(e, t) { let n = qe([-1]), a = qe([0]), r = qe([0]), s, i, o, l, u, p; for (let d = 0; d < e.size - 1; d++) { s = Ve(e, 0, d + 1), i = Ve(e, d + 1), u = he(fe(s), t), p = he(fe(i), t); let c = fe(z(s, yi(0, s.size))); o = he(c, fe(s)); let h = yn(i.shape, s.size), m = X(yi(0, i.size), h), f = z(i, m); l = he(fe(f), fe(i)); let g = pe(o, l), b = pe(o, l), y = z(u, p); r = z(z(y, g), b); let x = Tn(r, a); a = nn(x, r, a), n = nn(x, qe([d]), n) } return n } var VW = L({ threshold_: WW }); function UW(e, t, n = "nearest", a = "constant", r = 0, s) { let i = E(e, "image", "transform", "float32"), o = E(t, "transforms", "transform", "float32"); A(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), A(o.rank === 2 && (o.shape[0] === i.shape[0] || o.shape[0] === 1) && o.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), A(s == null || s.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`); let l = { image: i, transforms: o }, u = { interpolation: n, fillMode: a, fillValue: r, outputShape: s }; return P.runKernel(op, l, u) } var GW = L({ transform_: UW }); function HW(e, t, n) { let a = E(e, "a", "bandPart"); A(a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${a.rank}.`); let r = a.shape, [s, i] = a.shape.slice(-2), o, l; typeof t == "number" ? (A(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), A(t <= s, () => `bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`), o = E(t < 0 ? s : t, "numLower", "bandPart")) : (A(t.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), o = nn(Yl(t, 0), s, fs(t, s))), typeof n == "number" ? (A(n % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${n}.`), A(n <= i, () => `bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`), l = E(n < 0 ? i : n, "numUpper", "bandPart")) : (A(n.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), l = nn(Yl(n, 0), i, fs(n, i))); let u = W(yi(0, s, 1, "int32"), [-1, 1]), p = yi(0, i, 1, "int32"), d = pe(u, p), c = Fa(As(d, o), Rr(d, yt(l))), h = It([s, i], a.dtype); return W(Ft(dt(W(a, [-1, s, i])).map(m => nn(c, m, h))), r) } var qW = L({ bandPart_: HW }); function jW(e) { let t; if (Array.isArray(e)) { t = !1, A(e != null && e.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty"); let r = e[0].shape[0]; for (let s = 1; s < e.length; ++s)A(e[s].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[s].shape[0]} vs. ${r})`) } else t = !0, e = Pn(e, e.shape[0], 0).map(r => Ds(r, [0])); A(e.length <= e[0].shape[0], () => `Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`); let n = [], a = e; for (let r = 0; r < e.length; ++r)n.push(P.tidy(() => { let s = a[r]; if (r > 0) for (let i = 0; i < r; ++i) { let o = z(fe(z(n[i], s)), n[i]); s = pe(s, o) } return he(s, hp(s, "euclidean")) })); return t ? Ft(n, 0) : n } var KW = L({ gramSchmidt_: jW }); function XW(e, t = !1) { if (A(e.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`), e.rank === 2) return SI(e, t); { let n = e.shape.slice(0, e.shape.length - 2).reduce((l, u) => l * u), a = dt(W(e, [n, e.shape[e.shape.length - 2], e.shape[e.shape.length - 1]]), 0), r = [], s = []; a.forEach(l => { let [u, p] = SI(l, t); r.push(u), s.push(p) }); let i = W(Ft(r, 0), e.shape), o = W(Ft(s, 0), e.shape); return [i, o] } } function SI(e, t = !1) { return P.tidy(() => { A(e.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`); let n = e.shape[0], a = e.shape[1], r = af(n), s = or(e), i = Aa([[1]], [1, 1]), o = or(i), l = n >= a ? a : n; for (let u = 0; u < l; ++u) { let p = s, d = o, c = r;[o, s, r] = P.tidy(() => { let h = Ve(s, [u, u], [n - u, 1]), m = hp(h), f = Ve(s, [u, u], [1, 1]), g = nn(Tn(f, 0), Aa([[-1]]), Aa([[1]])), b = pe(f, z(g, m)), y = he(h, b); y.shape[0] === 1 ? o = or(i) : o = et([i, Ve(y, [1, 0], [y.shape[0] - 1, y.shape[1]])], 0); let x = yt(he($e(g, b), m)), v = Ve(s, [u, 0], [n - u, a]), I = z(x, o), N = De(o); if (u === 0) s = pe(v, $e(I, $e(N, v))); else { let F = pe(v, $e(I, $e(N, v))); s = et([Ve(s, [0, 0], [u, a]), F], 0) } let C = De(I), _ = Ve(r, [0, u], [n, r.shape[1] - u]); if (u === 0) r = pe(_, $e($e(_, o), C)); else { let F = pe(_, $e($e(_, o), C)); r = et([Ve(r, [0, 0], [n, u]), F], 1) } return [o, s, r] }), Ee([p, d, c]) } return !t && n > a && (r = Ve(r, [0, 0], [n, a]), s = Ve(s, [0, 0], [a, a])), [r, s] }) } var YW = L({ qr_: XW }), wn; (function (e) { e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS" })(wn || (wn = {})); function ZW(e, t, n = wn.SUM_BY_NONZERO_WEIGHTS) { let a = E(e, "losses", "computeWeightedLoss"), r = null; t != null && (r = E(t, "weights", "computeWeightedLoss")); let s = r == null ? a : z(a, r); if (n === wn.NONE) return s; if (n === wn.SUM) return fe(s); if (n === wn.MEAN) { if (r == null) return Et(s); { let i = a.size / r.size, o = he(fe(s), fe(r)); return i > 1 ? he(o, ve(i)) : o } } if (n === wn.SUM_BY_NONZERO_WEIGHTS) { if (r == null) return he(fe(s), ve(a.size)); { let i = z(r, On(a.shape)), o = re(fe(bi(i, ve(0))), "float32"); return he(fe(s), o) } } throw Error(`Unknown reduction: ${n}`) } var Mr = L({ computeWeightedLoss_: ZW }); function JW(e, t, n, a = wn.SUM_BY_NONZERO_WEIGHTS) { let r = E(e, "labels", "absoluteDifference"), s = E(t, "predictions", "absoluteDifference"), i = null; n != null && (i = E(n, "weights", "absoluteDifference")), Sn(r.shape, s.shape, "Error in absoluteDifference: "); let o = Lt(pe(r, s)); return Mr(o, i, a) } var QW = L({ absoluteDifference_: JW }); function eB(e, t, n, a, r = wn.SUM_BY_NONZERO_WEIGHTS) { let s = E(e, "labels", "cosineDistance"), i = E(t, "predictions", "cosineDistance"), o = null; a != null && (o = E(a, "weights", "cosineDistance")), Sn(s.shape, i.shape, "Error in cosineDistance: "); let l = ve(1), u = pe(l, fe(z(s, i), n, !0)); return Mr(u, o, r) } var tB = L({ cosineDistance_: eB }); function nB(e, t, n, a = wn.SUM_BY_NONZERO_WEIGHTS) { let r = E(e, "labels", "hingeLoss"), s = E(t, "predictions", "hingeLoss"), i = null; n != null && (i = E(n, "weights", "hingeLoss")), Sn(r.shape, s.shape, "Error in hingeLoss: "); let o = ve(1); r = pe(z(ve(2), r), o); let l = Ke(pe(o, z(r, s))); return Mr(l, i, a) } var aB = L({ hingeLoss_: nB }); function rB(e, t, n, a = 1, r = wn.SUM_BY_NONZERO_WEIGHTS) { let s = E(e, "labels", "huberLoss"), i = E(t, "predictions", "huberLoss"), o = null; n != null && (o = E(n, "weights", "huberLoss")), Sn(s.shape, i.shape, "Error in huberLoss: "); let l = ve(a), u = Lt(pe(i, s)), p = fs(u, l), d = pe(u, p), c = X(z(ve(.5), pt(p)), z(l, d)); return Mr(c, o, r) } var sB = L({ huberLoss_: rB }); function iB(e, t, n, a = 1e-7, r = wn.SUM_BY_NONZERO_WEIGHTS) { let s = E(e, "labels", "logLoss"), i = E(t, "predictions", "logLoss"), o = null; n != null && (o = E(n, "weights", "logLoss")), Sn(s.shape, i.shape, "Error in logLoss: "); let l = ve(1), u = ve(a), p = yt(z(s, ta(X(i, u)))), d = z(pe(l, s), ta(X(pe(l, i), u))), c = pe(p, d); return Mr(c, o, r) } var oB = L({ logLoss_: iB }); function lB(e, t, n, a = wn.SUM_BY_NONZERO_WEIGHTS) { let r = E(e, "labels", "meanSquaredError"), s = E(t, "predictions", "meanSquaredError"), i = null; n != null && (i = E(n, "weights", "meanSquaredError")), Sn(r.shape, s.shape, "Error in meanSquaredError: "); let o = yf(r, s); return Mr(o, i, a) } var uB = L({ meanSquaredError_: lB }); function pB(e, t) { let n = E(e, "labels", "sigmoidCrossEntropyWithLogits"), a = E(t, "logits", "sigmoidCrossEntropyWithLogits"); Sn(n.shape, a.shape, "Error in sigmoidCrossEntropyWithLogits: "); let r = Ke(a), s = z(a, n), i = gd(mn(yt(Lt(a)))); return X(pe(r, s), i) } function cB(e, t, n, a = 0, r = wn.SUM_BY_NONZERO_WEIGHTS) { let s = E(e, "multiClassLabels", "sigmoidCrossEntropy"), i = E(t, "logits", "sigmoidCrossEntropy"), o = null; if (n != null && (o = E(n, "weights", "sigmoidCrossEntropy")), Sn(s.shape, i.shape, "Error in sigmoidCrossEntropy: "), a > 0) { let u = ve(a), p = ve(1), d = ve(.5); s = X(z(s, pe(p, u)), z(d, u)) } let l = pB(s, i); return Mr(l, o, r) } var dB = L({ sigmoidCrossEntropy_: cB }); function hB(e, t, n = -1) { if (n === -1 && (n = t.rank - 1), n !== t.rank - 1) throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`); return cr((a, r, s) => { let i = bd(r, [n], !0), o = pe(re(r, "float32"), i); s([a, o]); let l = yt(z(o, a)); return { value: fe(l, [n]), gradFunc: (u, p) => { let [d, c] = p, h = gi(u.shape, [n]); return [z(W(u, h), pe(re(d, "float32"), mn(c))), z(W(u, h), pe(mn(c), re(d, "float32")))] } } })(e, t) } function mB(e, t, n, a = 0, r = wn.SUM_BY_NONZERO_WEIGHTS) { let s = E(e, "onehotLabels", "softmaxCrossEntropy"), i = E(t, "logits", "softmaxCrossEntropy"), o = null; if (n != null && (o = E(n, "weights", "softmaxCrossEntropy")), Sn(s.shape, i.shape, "Error in softmaxCrossEntropy: "), a > 0) { let u = ve(a), p = ve(1), d = ve(s.shape[1]); s = X(z(s, pe(p, u)), he(u, d)) } let l = hB(s, i); return Mr(l, o, r) } var fB = L({ softmaxCrossEntropy_: mB }); function gB(e, t, n, a) {
        let r = E(e, "indices", "sparseFillEmptyRows", "int32"), s = E(t, "values", "sparseFillEmptyRows"), i = E(n, "denseShape", "sparseFillEmptyRows", "int32"), o = E(a, "defaultValue", "sparseFillEmptyRows", s.dtype); if (r.rank !== 2) throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`); if (s.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${s.shape}`); if (i.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`); if (o.rank !== 0) throw new Error(`Default value should be a scalar but received shape ${o.shape}`); let l = { indices: r, values: s, denseShape: i, defaultValue: o }, u = P.runKernel(Yc, l); return { outputIndices: u[0], outputValues: u[1], emptyRowIndicator: u[2], reverseIndexMap: u[3] }
    } var bB = L({ sparseFillEmptyRows_: gB }); function yB(e, t, n) {
        let a = E(e, "inputIndices", "sparseReshape", "int32"), r = E(t, "inputShape", "sparseReshape", "int32"), s = E(n, "newShape", "sparseReshape", "int32"); if (a.rank !== 2) throw new Error(`Input indices should be Tensor2D but received shape
        ${a.shape}`); if (r.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`); if (s.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`); let i = { inputIndices: a, inputShape: r, newShape: s }, o = P.runKernel(ap, i); return { outputIndices: o[0], outputShape: o[1] }
    } var xB = L({ sparseReshape_: yB }); function vB(e, t, n) {
        let a = E(e, "data", "sparseSegmentMean"), r = E(t, "indices", "sparseSegmentMean", "int32"), s = E(n, "segmentIds", "sparseSegmentMean", "int32"); if (a.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`); if (s.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`); let i = { data: a, indices: r, segmentIds: s }; return P.runKernel(Zc, i)
    } var wB = L({ sparseSegmentMean_: vB }); function kB(e, t, n) {
        let a = E(e, "data", "sparseSegmentSum"), r = E(t, "indices", "sparseSegmentSum", "int32"), s = E(n, "segmentIds", "sparseSegmentSum", "int32"); if (a.rank < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.rank !== 1) throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`); if (s.rank !== 1) throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`); let i = { data: a, indices: r, segmentIds: s }; return P.runKernel(Jc, i)
    } var IB = L({ sparseSegmentSum_: kB }); function SB(e, t, n, a, r, s, i, o) { let l = E(e, "data", "stringNGrams", "string"); if (l.dtype !== "string") throw new Error("Data must be of datatype string"); if (l.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${l.shape}`); let u = E(t, "dataSplits", "stringNGrams"); if (u.dtype !== "int32") throw new Error("Data splits must be of datatype int32"); let p = { separator: n, nGramWidths: a, leftPad: r, rightPad: s, padWidth: i, preserveShortSequences: o }, d = { data: l, dataSplits: u }, c = P.runKernel(td, d, p); return { nGrams: c[0], nGramsSplits: c[1] } } var NB = L({ stringNGrams_: SB }); function TB(e, t, n = !0) { let a = E(e, "input", "stringSplit", "string"), r = E(t, "delimiter", "stringSplit", "string"); if (a.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${a.shape}`); if (r.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`); let s = { skipEmpty: n }, i = { input: a, delimiter: r }, o = P.runKernel(nd, i, s); return { indices: o[0], values: o[1], shape: o[2] } } var CB = L({ stringSplit_: TB }); function EB(e, t) { let n = E(e, "input", "stringToHashBucketFast", "string"), a = { numBuckets: t }; if (t <= 0) throw new Error("Number of buckets must be at least 1"); let r = { input: n }; return P.runKernel(ad, r, a) } var _B = L({ stringToHashBucketFast_: EB }); function AB(e, t, n, a = !0) { let r = E(e, "input", "staticRegexReplace", "string"), s = { pattern: t, rewrite: n, replaceGlobal: a }; return P.runKernel(ed, { x: r }, s) } var FB = L({ staticRegexReplace_: AB }), ZT = { fft: Id, ifft: eu, rfft: Sd, irfft: bf }, JT = { hammingWindow: sW, hannWindow: GT, frame: HT, stft: uW }, Qn = { flipLeftRight: hW, grayscaleToRGB: fW, resizeNearestNeighbor: YT, resizeBilinear: XT, rgbToGrayscale: bW, rotateWithOffset: xW, cropAndResize: cW, nonMaxSuppression: wW, nonMaxSuppressionAsync: _W, nonMaxSuppressionWithScore: FW, nonMaxSuppressionWithScoreAsync: DW, nonMaxSuppressionPadded: MW, nonMaxSuppressionPaddedAsync: PW, threshold: VW, transform: GW }, Xw = { bandPart: qW, gramSchmidt: KW, qr: YW }, QT = { absoluteDifference: QW, computeWeightedLoss: Mr, cosineDistance: tB, hingeLoss: aB, huberLoss: sB, logLoss: oB, meanSquaredError: uB, sigmoidCrossEntropy: dB, softmaxCrossEntropy: fB }, e2 = { sparseFillEmptyRows: bB, sparseReshape: xB, sparseSegmentMean: wB, sparseSegmentSum: IB }, t2 = { stringNGrams: NB, stringSplit: CB, stringToHashBucketFast: _B, staticRegexReplace: FB }, ne = {}; _e(ne, { Serializable: () => n2, SerializationMap: () => a2, getRegisteredName: () => DB, registerClass: () => r2 }); var $B = new Map, Vx = new Map, n2 = class { getClassName() { return this.constructor.className } static fromConfig(e, t) { return new e(t) } }, a2 = class zl { constructor() { this.classNameMap = {} } static getMap() { return zl.instance == null && (zl.instance = new zl), zl.instance } static register(t) { zl.getMap().classNameMap[t.className] = [t, t.fromConfig] } }; function r2(e, t, n) { A(e.className != null, () => "Class being registered does not have the static className property defined."), A(typeof e.className == "string", () => "className is required to be a string, but got type " + typeof e.className), A(e.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof t == "undefined" && (t = "Custom"), typeof n == "undefined" && (n = e.className); let a = n, r = t + ">" + a; return a2.register(e), $B.set(r, e), Vx.set(e, r), e } function DB(e) { return Vx.has(e) ? Vx.get(e) : e.className } var Or = class extends n2 { minimize(e, t = !1, n) { let { value: a, grads: r } = this.computeGradients(e, n); if (n != null) { let s = n.map(i => ({ name: i.name, tensor: r[i.name] })); this.applyGradients(s) } else this.applyGradients(r); return Ee(r), t ? a : (a.dispose(), null) } get iterations() { return this.iterations_ == null && (this.iterations_ = 0), this.iterations_ } incrementIterations() { this.iterations_ = this.iterations + 1 } computeGradients(e, t) { return rT(e, t) } dispose() { this.iterations_ != null && Ee(this.iterations_) } async saveIterations() { return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: ve(this.iterations_, "int32") } } async getWeights() { throw new Error("getWeights() is not implemented for this optimizer yet.") } async setWeights(e) { throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`) } async extractIterations(e) { return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1) } }; Object.defineProperty(Or, Symbol.hasInstance, { value: e => e.minimize != null && e.computeGradients != null && e.applyGradients != null }); var Yw = class extends Or { static get className() { return "Adadelta" } constructor(e, t, n = null) { super(), this.learningRate = e, this.rho = t, this.epsilon = n, this.accumulatedGrads = [], this.accumulatedUpdates = [], n == null && (this.epsilon = P.backend.epsilon()) } applyGradients(e) { (Array.isArray(e) ? e.map(t => t.name) : Object.keys(e)).forEach((t, n) => { let a = P.registeredVariables[t], r = !1; this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${t}/accum_grad`, variable: O(() => je(a).variable(r)) }), this.accumulatedUpdates[n] == null && (this.accumulatedUpdates[n] = { originalName: `${t}/accum_var`, variable: O(() => je(a).variable(r)) }); let s = Array.isArray(e) ? e[n].tensor : e[t]; if (s == null) return; let i = this.accumulatedGrads[n].variable, o = this.accumulatedUpdates[n].variable; O(() => { let l = X(z(i, this.rho), z(pt(s), 1 - this.rho)), u = z(he(hn(X(o, this.epsilon)), hn(X(i, this.epsilon))), s), p = X(z(o, this.rho), z(pt(u), 1 - this.rho)); i.assign(l), o.assign(p); let d = X(z(u, -this.learningRate), a); a.assign(d) }) }), this.incrementIterations() } dispose() { this.accumulatedUpdates != null && (Ee(this.accumulatedGrads.map(e => e.variable)), Ee(this.accumulatedUpdates.map(e => e.variable))) } async getWeights() { let e = [...this.accumulatedGrads, ...this.accumulatedUpdates]; return [await this.saveIterations()].concat(e.map(t => ({ name: t.originalName, tensor: t.variable }))) } async setWeights(e) { e = await this.extractIterations(e); let t = e.length / 2, n = !1; this.accumulatedGrads = e.slice(0, t).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedUpdates = e.slice(t, t * 2).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })) } getConfig() { return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon } } static fromConfig(e, t) { return new e(t.learningRate, t.rho, t.epsilon) } }, Zw = class extends Or { static get className() { return "Adagrad" } constructor(e, t = .1) { super(), this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [] } applyGradients(e) { (Array.isArray(e) ? e.map(t => t.name) : Object.keys(e)).forEach((t, n) => { let a = P.registeredVariables[t]; this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${t}/accumulator`, variable: O(() => yn(a.shape, this.initialAccumulatorValue).variable(!1)) }); let r = Array.isArray(e) ? e[n].tensor : e[t]; if (r == null) return; let s = this.accumulatedGrads[n].variable; O(() => { let i = X(s, pt(r)); s.assign(i); let o = X(z(he(r, hn(X(i, P.backend.epsilon()))), -this.learningRate), a); a.assign(o) }) }), this.incrementIterations() } dispose() { this.accumulatedGrads != null && Ee(this.accumulatedGrads.map(e => e.variable)) } async getWeights() { return [await this.saveIterations()].concat(this.accumulatedGrads.map(e => ({ name: e.originalName, tensor: e.variable }))) } async setWeights(e) { e = await this.extractIterations(e); let t = !1; this.accumulatedGrads = e.map(n => ({ originalName: n.name, variable: n.tensor.variable(t) })) } getConfig() { return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue } } static fromConfig(e, t) { return new e(t.learningRate, t.initialAccumulatorValue) } }, Jw = class extends Or { static get className() { return "Adam" } constructor(e, t, n, a = null) { super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = a, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], O(() => { this.accBeta1 = ve(t).variable(), this.accBeta2 = ve(n).variable() }), a == null && (this.epsilon = P.backend.epsilon()) } applyGradients(e) { let t = Array.isArray(e) ? e.map(n => n.name) : Object.keys(e); O(() => { let n = pe(1, this.accBeta1), a = pe(1, this.accBeta2); t.forEach((r, s) => { let i = P.registeredVariables[r], o = !1; this.accumulatedFirstMoment[s] == null && (this.accumulatedFirstMoment[s] = { originalName: `${r}/m`, variable: O(() => je(i).variable(o)) }), this.accumulatedSecondMoment[s] == null && (this.accumulatedSecondMoment[s] = { originalName: `${r}/v`, variable: O(() => je(i).variable(o)) }); let l = Array.isArray(e) ? e[s].tensor : e[r]; if (l == null) return; let u = this.accumulatedFirstMoment[s].variable, p = this.accumulatedSecondMoment[s].variable, d = X(z(u, this.beta1), z(l, 1 - this.beta1)), c = X(z(p, this.beta2), z(pt(l), 1 - this.beta2)), h = he(d, n), m = he(c, a); u.assign(d), p.assign(c); let f = X(z(he(h, X(hn(m), this.epsilon)), -this.learningRate), i); i.assign(f) }), this.accBeta1.assign(z(this.accBeta1, this.beta1)), this.accBeta2.assign(z(this.accBeta2, this.beta2)) }), this.incrementIterations() } dispose() { this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Ee(this.accumulatedFirstMoment.map(e => e.variable)), this.accumulatedSecondMoment != null && Ee(this.accumulatedSecondMoment.map(e => e.variable)) } async getWeights() { let e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment]; return [await this.saveIterations()].concat(e.map(t => ({ name: t.originalName, tensor: t.variable }))) } async setWeights(e) { e = await this.extractIterations(e), O(() => { this.accBeta1.assign(Fr(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(Fr(this.beta2, this.iterations_ + 1)) }); let t = e.length / 2, n = !1; this.accumulatedFirstMoment = e.slice(0, t).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedSecondMoment = e.slice(t, t * 2).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })) } getConfig() { return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon } } static fromConfig(e, t) { return new e(t.learningRate, t.beta1, t.beta2, t.epsilon) } }, Qw = class extends Or { static get className() { return "Adamax" } constructor(e, t, n, a = null, r = 0) { super(), this.learningRate = e, this.beta1 = t, this.beta2 = n, this.epsilon = a, this.decay = r, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], O(() => { this.iteration = ve(0).variable(), this.accBeta1 = ve(t).variable() }), a == null && (this.epsilon = P.backend.epsilon()) } applyGradients(e) { let t = Array.isArray(e) ? e.map(n => n.name) : Object.keys(e); O(() => { let n = pe(1, this.accBeta1), a = he(-this.learningRate, X(z(this.iteration, this.decay), 1)); t.forEach((r, s) => { let i = P.registeredVariables[r], o = !1; this.accumulatedFirstMoment[s] == null && (this.accumulatedFirstMoment[s] = { originalName: `${r}/m`, variable: je(i).variable(o) }), this.accumulatedWeightedInfNorm[s] == null && (this.accumulatedWeightedInfNorm[s] = { originalName: `${r}/v`, variable: je(i).variable(o) }); let l = Array.isArray(e) ? e[s].tensor : e[r]; if (l == null) return; let u = this.accumulatedFirstMoment[s].variable, p = this.accumulatedWeightedInfNorm[s].variable, d = X(z(u, this.beta1), z(l, 1 - this.beta1)), c = z(p, this.beta2), h = Lt(l), m = mr(c, h); u.assign(d), p.assign(m); let f = X(z(he(a, n), he(d, X(m, this.epsilon))), i); i.assign(f) }), this.iteration.assign(X(this.iteration, 1)), this.accBeta1.assign(z(this.accBeta1, this.beta1)) }), this.incrementIterations() } dispose() { this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Ee(this.accumulatedFirstMoment.map(e => e.variable)), this.accumulatedWeightedInfNorm != null && Ee(this.accumulatedWeightedInfNorm.map(e => e.variable)) } async getWeights() { throw new Error("getWeights() is not implemented for Adamax yet.") } async setWeights(e) { throw new Error("setWeights() is not implemented for Adamax yet.") } getConfig() { return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay } } static fromConfig(e, t) { return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay) } }, Ef = class extends Or { static get className() { return "SGD" } constructor(e) { super(), this.learningRate = e, this.setLearningRate(e) } applyGradients(e) { (Array.isArray(e) ? e.map(t => t.name) : Object.keys(e)).forEach((t, n) => { let a = Array.isArray(e) ? e[n].tensor : e[t]; if (a == null) return; let r = P.registeredVariables[t]; O(() => { let s = X(z(this.c, a), r); r.assign(s) }) }), this.incrementIterations() } setLearningRate(e) { this.learningRate = e, this.c != null && this.c.dispose(), this.c = Ht(ve(-e)) } dispose() { this.c.dispose() } async getWeights() { return [await this.saveIterations()] } async setWeights(e) { if (e = await this.extractIterations(e), e.length !== 0) throw new Error("SGD optimizer does not have settable weights.") } getConfig() { return { learningRate: this.learningRate } } static fromConfig(e, t) { return new e(t.learningRate) } }, e0 = class extends Ef { static get className() { return "Momentum" } constructor(e, t, n = !1) { super(e), this.learningRate = e, this.momentum = t, this.useNesterov = n, this.accumulations = [], this.m = ve(this.momentum) } applyGradients(e) { (Array.isArray(e) ? e.map(t => t.name) : Object.keys(e)).forEach((t, n) => { let a = P.registeredVariables[t]; this.accumulations[n] == null && (this.accumulations[n] = { originalName: `${t}/momentum`, variable: O(() => je(a).variable(!1)) }); let r = this.accumulations[n].variable, s = Array.isArray(e) ? e[n].tensor : e[t]; s != null && O(() => { let i, o = X(z(this.m, r), s); this.useNesterov ? i = X(z(this.c, X(s, z(o, this.m))), a) : i = X(z(this.c, o), a), r.assign(o), a.assign(i) }) }), this.incrementIterations() } dispose() { this.m.dispose(), this.accumulations != null && Ee(this.accumulations.map(e => e.variable)) } setMomentum(e) { this.momentum = e } async getWeights() { return [await this.saveIterations()].concat(this.accumulations.map(e => ({ name: e.originalName, tensor: e.variable }))) } async setWeights(e) { e = await this.extractIterations(e); let t = !1; this.accumulations = e.map(n => ({ originalName: n.name, variable: n.tensor.variable(t) })) } getConfig() { return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov } } static fromConfig(e, t) { return new e(t.learningRate, t.momentum, t.useNesterov) } }, t0 = class extends Or { static get className() { return "RMSProp" } constructor(e, t = .9, n = 0, a = null, r = !1) { if (super(), this.learningRate = e, this.decay = t, this.momentum = n, this.epsilon = a, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = r, a == null && (this.epsilon = P.backend.epsilon()), e == null) throw new Error("learningRate for RMSPropOptimizer must be defined.") } applyGradients(e) { (Array.isArray(e) ? e.map(t => t.name) : Object.keys(e)).forEach((t, n) => { let a = P.registeredVariables[t], r = !1; this.accumulatedMeanSquares[n] == null && (this.accumulatedMeanSquares[n] = { originalName: `${t}/rms`, variable: O(() => je(a).variable(r)) }), this.accumulatedMoments[n] == null && (this.accumulatedMoments[n] = { originalName: `${t}/momentum`, variable: O(() => je(a).variable(r)) }), this.accumulatedMeanGrads[n] == null && this.centered && (this.accumulatedMeanGrads[n] = { originalName: `${t}/mg`, variable: O(() => je(a).variable(r)) }); let s = Array.isArray(e) ? e[n].tensor : e[t]; if (s == null) return; let i = this.accumulatedMeanSquares[n].variable, o = this.accumulatedMoments[n].variable; O(() => { let l = X(z(i, this.decay), z(pt(s), 1 - this.decay)); if (this.centered) { let u = this.accumulatedMeanGrads[n].variable, p = X(z(u, this.decay), z(s, 1 - this.decay)), d = he(z(s, this.learningRate), hn(pe(l, X(pt(p), this.epsilon)))), c = X(z(o, this.momentum), d); i.assign(l), u.assign(p), o.assign(c); let h = pe(a, c); a.assign(h) } else { let u = X(z(i, this.decay), z(pt(s), 1 - this.decay)), p = X(z(o, this.momentum), he(z(s, this.learningRate), hn(X(u, this.epsilon)))); i.assign(u), o.assign(p); let d = pe(a, p); a.assign(d) } }) }), this.incrementIterations() } dispose() { this.accumulatedMeanSquares != null && Ee(this.accumulatedMeanSquares.map(e => e.variable)), this.accumulatedMeanGrads != null && this.centered && Ee(this.accumulatedMeanGrads.map(e => e.variable)), this.accumulatedMoments != null && Ee(this.accumulatedMoments.map(e => e.variable)) } async getWeights() { let e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments]; return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map(t => ({ name: t.originalName, tensor: t.variable }))) } async setWeights(e) { e = await this.extractIterations(e); let t = this.centered ? e.length / 3 : e.length / 2, n = !1; this.accumulatedMeanSquares = e.slice(0, t).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.accumulatedMoments = e.slice(t, t * 2).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map(a => ({ originalName: a.name, variable: a.tensor.variable(n) }))) } getConfig() { return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered } } static fromConfig(e, t) { return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered) } }, RB = [Yw, Zw, Jw, Qw, e0, t0, Ef]; function MB() { for (let e of RB) r2(e) } var qt = {}; _e(qt, { CompositeArrayBuffer: () => Dr, browserFiles: () => VB, browserHTTPRequest: () => KB, concatenateArrayBuffers: () => kO, copyModel: () => GO, decodeWeights: () => AN, decodeWeightsStream: () => $N, encodeWeights: () => gO, fromMemory: () => YB, fromMemorySync: () => u2, getLoadHandlers: () => AO, getModelArtifactsForJSON: () => Vv, getModelArtifactsForJSONSync: () => RN, getModelArtifactsInfoForJSON: () => pd, getSaveHandlers: () => _O, getWeightSpecs: () => Ox, http: () => a0, isHTTPScheme: () => Gx, listModels: () => VO, loadWeights: () => GB, moveModel: () => HO, registerLoadRouter: () => EO, registerSaveRouter: () => CO, removeModel: () => UO, weightsLoaderFactory: () => i2, withSaveHandler: () => ZB, withSaveHandlerSync: () => JB }); var OB = "model", PB = ".json", LB = ".weights.bin"; function NI(e) { return new Promise(t => setTimeout(t)).then(e) } var pm = class Ux { constructor(t) { if (!G().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser."); t.startsWith(Ux.URL_SCHEME) && (t = t.slice(Ux.URL_SCHEME.length)), (t == null || t.length === 0) && (t = OB), this.modelJsonFileName = t + PB, this.weightDataFileName = t + LB } async save(t) { if (typeof document == "undefined") throw new Error("Browser downloads are not supported in this environment since `document` is not present"); let n = Dr.join(t.weightData), a = window.URL.createObjectURL(new Blob([n], { type: "application/octet-stream" })); if (t.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet."); { let r = [{ paths: ["./" + this.weightDataFileName], weights: t.weightSpecs }], s = DN(t, r), i = window.URL.createObjectURL(new Blob([JSON.stringify(s)], { type: "application/json" })), o = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor; if (o.download = this.modelJsonFileName, o.href = i, await NI(() => o.dispatchEvent(new MouseEvent("click"))), t.weightData != null) { let l = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor; l.download = this.weightDataFileName, l.href = a, await NI(() => l.dispatchEvent(new MouseEvent("click"))) } return { modelArtifactsInfo: pd(t) } } } }; pm.URL_SCHEME = "downloads://"; var zB = class { constructor(e) { if (e == null || e.length < 1) throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`); this.jsonFile = e[0], this.weightsFiles = e.slice(1) } async load() { return new Promise((e, t) => { let n = new FileReader; n.onload = a => { let r = JSON.parse(a.target.result), s = r.modelTopology; if (s == null) { t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`)); return } if (r.weightsManifest == null) { t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`)); return } if (this.weightsFiles.length === 0) { e({ modelTopology: s }); return } let i = Vv(r, o => this.loadWeights(o)); e(i) }, n.onerror = a => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), n.readAsText(this.jsonFile) }) } loadWeights(e) { let t = [], n = []; for (let s of e) t.push(...s.weights), n.push(...s.paths); let a = this.checkManifestAndWeightFiles(e), r = n.map(s => this.loadWeightsFile(s, a[s])); return Promise.all(r).then(s => [t, s]) } loadWeightsFile(e, t) { return new Promise((n, a) => { let r = new FileReader; r.onload = s => { let i = s.target.result; n(i) }, r.onerror = s => a(`Failed to weights data from file of path '${e}'.`), r.readAsArrayBuffer(t) }) } checkManifestAndWeightFiles(e) { let t = [], n = this.weightsFiles.map(r => kI(r.name)), a = {}; for (let r of e) r.paths.forEach(s => { let i = kI(s); if (t.indexOf(i) !== -1) throw new Error(`Duplicate file basename found in weights manifest: '${i}'`); if (t.push(i), n.indexOf(i) === -1) throw new Error(`Weight file with basename '${i}' is not provided.`); a[s] = this.weightsFiles[n.indexOf(i)] }); if (t.length !== this.weightsFiles.length) throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`); return a } }, WB = e => G().getBool("IS_BROWSER") && !Array.isArray(e) && e.startsWith(pm.URL_SCHEME) ? BB(e.slice(pm.URL_SCHEME.length)) : null; ba.registerSaveRouter(WB); function BB(e = "model") { return new pm(e) } function VB(e) { return new zB(e) } function TI(e, t, n, a) { i(e), n = n == null ? 0 : n, a = a == null ? 1 : a, o(n, a); let r = 0, s = l => (l.then(u => { let p = n + ++r / e.length * (a - n); return t(p), u }), l); function i(l) { A(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array") } function o(l, u) { A(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), A(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${u}`), A(u >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`) } return Promise.all(e.map(s)) } async function s2(e, t) { t == null && (t = {}); let n = t.fetchFunc == null ? G().platform.fetch : t.fetchFunc, a = e.map(s => n(s, t.requestInit, { isBinary: !0 })), r = (t.onProgress == null ? await Promise.all(a) : await TI(a, t.onProgress, 0, .5)).map(s => s.arrayBuffer()); return t.onProgress == null ? await Promise.all(r) : await TI(r, t.onProgress, .5, 1) } function UB(e, t) { var n; let a = t.fetchFunc == null ? G().platform.fetch : t.fetchFunc, r = 0, s; return (n = t.onProgress) === null || n === void 0 || n.call(t, 0), new ReadableStream({ pull: async i => { for (var o; r < e.length;) { s || (s = (await a(e[r], t.requestInit, { isBinary: !0 })).body.getReader()); let { done: l, value: u } = await s.read(); if (l) { r++, s = void 0, (o = t.onProgress) === null || o === void 0 || o.call(t, r / e.length); continue } i.enqueue(u); return } i.close() } }) } async function GB(e, t = "", n, a) { return i2(r => s2(r, { requestInit: a }))(e, t, n) } function i2(e) {
        return async (t, n = "", a) => {
            let r = t.map(() => !1), s = {}, i = a != null ? a.map(() => !1) : [], o = []; if (t.forEach((h, m) => { let f = 0; h.weights.forEach(g => { let b = "quantization" in g ? g.quantization.dtype : g.dtype, y = pi[b] * ot(g.shape), x = () => { r[m] = !0, s[m] == null && (s[m] = []), s[m].push({ manifestEntry: g, groupOffset: f, sizeBytes: y }) }; a != null ? a.forEach((v, I) => { v === g.name && (x(), i[I] = !0) }) : x(), o.push(g.name), f += y }) }), !i.every(h => h)) {
                let h = a.filter((m, f) => !i[f]); throw new Error(`Could not find weights in manifest with names: ${h.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`)
            } let l = r.reduce((h, m, f) => (m && h.push(f), h), []), u = []; l.forEach(h => { t[h].paths.forEach(m => { let f = n + (n.endsWith("/") ? "" : "/") + m; u.push(f) }) }); let p = await e(u), d = {}, c = 0; return l.forEach(h => { let m = t[h].paths.length, f = new Dr(p.slice(c, c + m)); s[h].forEach(g => { let b = f.slice(g.groupOffset, g.groupOffset + g.sizeBytes), y = AN(b, [g.manifestEntry]); for (let x in y) d[x] = y[x] }), c += m }), d
        }
    } var HB = "application/octet-stream", qB = "application/json", n0 = class { constructor(e, t) { if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (A(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = G().platform.fetch, A(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && A(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null) throw new Error("requestInit is expected to have no pre-existing body, but has one."); this.requestInit = t.requestInit || {}, this.loadOptions = t } async save(e) { if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet."); let t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit); t.body = new FormData; let n = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], a = DN(e, n); if (t.body.append("model.json", new Blob([JSON.stringify(a)], { type: qB }), "model.json"), e.weightData != null) { let s = Dr.join(e.weightData); t.body.append("model.weights.bin", new Blob([s], { type: HB }), "model.weights.bin") } let r = await this.fetch(this.path, t); if (r.ok) return { modelArtifactsInfo: pd(e), responses: [r] }; throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`) } async loadModelJSON() { let e = await this.fetch(this.path, this.requestInit); if (!e.ok) throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`); let t; try { t = await e.json() } catch (r) { let s = `Failed to parse model JSON of response from ${this.path}.`; throw this.path.endsWith(".pb") ? s += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : s += " Please make sure the server is serving valid JSON for this request.", new Error(s) } let n = t.modelTopology, a = t.weightsManifest; if (n == null && a == null) throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`); return t } async load() { if (this.loadOptions.streamWeights) return this.loadStream(); let e = await this.loadModelJSON(); return Vv(e, t => this.loadWeights(t)) } async loadStream() { let e = await this.loadModelJSON(), t = await this.getWeightUrls(e.weightsManifest), n = Ox(e.weightsManifest), a = () => UB(t, this.loadOptions); return Object.assign(Object.assign({}, e), { weightSpecs: n, getWeightStream: a }) } async getWeightUrls(e) { let t = Array.isArray(this.path) ? this.path[1] : this.path, [n, a] = jB(t), r = this.weightPathPrefix || n, s = [], i = []; for (let o of e) for (let l of o.paths) this.weightUrlConverter != null ? i.push(this.weightUrlConverter(l)) : s.push(r + l + a); return this.weightUrlConverter && s.push(...await Promise.all(i)), s } async loadWeights(e) { let t = await this.getWeightUrls(e), n = Ox(e), a = await s2(t, this.loadOptions); return [n, a] } }; n0.URL_SCHEME_REGEX = /^https?:\/\//; function jB(e) { let t = e.lastIndexOf("/"), n = e.lastIndexOf("?"), a = e.substring(0, t), r = n > t ? e.substring(n) : ""; return [a + "/", r] } function Gx(e) { return e.match(n0.URL_SCHEME_REGEX) != null } var o2 = (e, t) => { if (typeof fetch == "undefined" && (t == null || t.fetchFunc == null)) return null; { let n = !0; if (Array.isArray(e) ? n = e.every(a => Gx(a)) : n = Gx(e), n) return a0(e, t) } return null }; ba.registerSaveRouter(o2); ba.registerLoadRouter(o2); function a0(e, t) { return new n0(e, t) } function KB(e, t) { return a0(e, t) } var fx = class { constructor(e) { this.modelArtifacts = e } load() { return this.modelArtifacts } }, l2 = class { constructor(e) { this.saveHandler = e } save(e) { return this.saveHandler(e) } }, XB = class { constructor(e) { e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = t => Promise.resolve(e.save(t))) } }; function YB(e, t, n, a) { let r = arguments; return new XB(u2(...r)) } function u2(e, t, n, a) { return arguments.length === 1 ? e.modelTopology != null || e.weightSpecs != null ? new fx(e) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new fx({ modelTopology: e })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new fx({ modelTopology: e, weightSpecs: t, weightData: n, trainingConfig: a })) } function ZB(e) { return new l2(e) } function JB(e) { return new l2(e) } var p2 = {}; _e(p2, { confusionMatrix: () => e4 }); function QB(e, t, n) { let a = E(e, "labels", "confusionMatrix"), r = E(t, "predictions", "confusionMatrix"); A(n == null || n > 0 && Number.isInteger(n), () => `If provided, numClasses must be a positive integer, but got ${n}`), A(a.rank === 1, () => `Expected the rank of labels to be 1, but got ${a.rank}`), A(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), A(a.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${a.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), A(n > 0 && Number.isInteger(n), () => `numClasses is required to be a positive integer, but got ${n}`); let s = Zl(re(a, "int32"), n), i = Zl(re(r, "int32"), n), o = De(s), l = $e(o, i); return re(l, "int32") } var e4 = L({ confusionMatrix_: QB }), Xo = {}; _e(Xo, { draw: () => l4, fromPixels: () => u4, fromPixelsAsync: () => s4, toPixels: () => o4 }); var js, CI = !1; function c2(e, t = 3) { if (t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels."); if (e == null) throw new Error("pixels passed to tf.browser.fromPixels() can not be null"); let n = !1, a = !1, r = !1, s = !1, i = !1, o = !1; if (e.data instanceof Uint8Array) n = !0; else if (typeof ImageData != "undefined" && e instanceof ImageData) a = !0; else if (typeof HTMLVideoElement != "undefined" && e instanceof HTMLVideoElement) r = !0; else if (typeof HTMLImageElement != "undefined" && e instanceof HTMLImageElement) s = !0; else if (e.getContext != null) i = !0; else if (typeof ImageBitmap != "undefined" && e instanceof ImageBitmap) o = !0; else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`); if (wc(sm, P.backendName) != null) { let c = { pixels: e }, h = { numChannels: t }; return P.runKernel(sm, c, h) } let [l, u] = r ? [e.videoWidth, e.videoHeight] : [e.width, e.height], p; if (i) p = e.getContext("2d").getImageData(0, 0, l, u).data; else if (a || n) p = e.data; else if (s || r || o) { if (js == null) if (typeof document == "undefined") if (typeof OffscreenCanvas != "undefined" && typeof OffscreenCanvasRenderingContext2D != "undefined") js = new OffscreenCanvas(1, 1).getContext("2d"); else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported."); else js = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 }); js.canvas.width = l, js.canvas.height = u, js.drawImage(e, 0, 0, l, u), p = js.getImageData(0, 0, l, u).data } let d; if (t === 4) d = new Int32Array(p); else { let c = l * u; d = new Int32Array(c * t); for (let h = 0; h < c; h++)for (let m = 0; m < t; ++m)d[h * t + m] = p[h * 4 + m] } return Nd(d, [u, l, t], "int32") } function t4(e) { return e != null && e.data instanceof Uint8Array } function n4() { return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap") } function a4(e) { return e != null && e.width !== 0 && e.height !== 0 } function r4(e) { return n4() && !(e instanceof ImageBitmap) && a4(e) && !t4(e) } async function s4(e, t = 3) { let n = null; if (G().getBool("WRAP_TO_IMAGEBITMAP") && r4(e)) { let a; try { a = await createImageBitmap(e, { premultiplyAlpha: "none" }) } catch (r) { a = null } a != null && a.width === e.width && a.height === e.height ? n = a : n = e } else n = e; return c2(n, t) } function d2(e) { if (e.rank !== 2 && e.rank !== 3) throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`); let t = e.rank === 2 ? 1 : e.shape[2]; if (t > 4 || t === 2) throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`); if (e.dtype !== "float32" && e.dtype !== "int32") throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`) } function i4(e) { let t = (e == null ? void 0 : e.alpha) || 1; if (t > 1 || t < 0) throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`) } async function o4(e, t) { let n = E(e, "img", "toPixels"); if (!(e instanceof Ce)) { let u = n; n = re(u, "int32"), u.dispose() } d2(n); let [a, r] = n.shape.slice(0, 2), s = n.rank === 2 ? 1 : n.shape[2], i = await n.data(), o = n.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(r * a * 4); for (let u = 0; u < a * r; ++u) { let p = [0, 0, 0, 255]; for (let c = 0; c < s; c++) { let h = i[u * s + c]; if (n.dtype === "float32") { if (h < 0 || h > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${h}.`) } else if (n.dtype === "int32" && (h < 0 || h > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${h}.`); s === 1 ? (p[0] = h * o, p[1] = h * o, p[2] = h * o) : p[c] = h * o } let d = u * 4; l[d + 0] = Math.round(p[0]), l[d + 1] = Math.round(p[1]), l[d + 2] = Math.round(p[2]), l[d + 3] = Math.round(p[3]) } if (t != null) { CI || wc(zm, P.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), CI = !0), t.width = r, t.height = a; let u = t.getContext("2d"), p = new ImageData(l, r, a); u.putImageData(p, 0, 0) } return n !== e && n.dispose(), l } function l4(e, t, n) { let a = E(e, "img", "draw"); if (!(e instanceof Ce)) { let i = a; a = re(i, "int32"), i.dispose() } d2(a), i4(n == null ? void 0 : n.imageOptions); let r = { image: a }, s = { canvas: t, options: n }; P.runKernel(zm, r, s) } var u4 = L({ fromPixels_: c2 }), r0 = {}; _e(r0, { prepareAndValidate: () => h2 }); function h2(e, t) { let n = e.shape.length, a = t.shape.length; if (n < 1) throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`); if (a < 1) throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${a}.`); if (t.dtype !== "int32") throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`); if (t.shape[a - 1] > n) throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[a - 1]} vs. ${n}`); if (ot(e.shape) === 0) throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`); let r = t.shape, s = r[r.length - 1], i = 1; for (let d = 0; d < r.length - 1; ++d)i *= r[d]; let o = e.shape, l = r.slice(); l.pop(); let u = 1; for (let d = s; d < n; ++d)u *= o[d], l.push(o[d]); let p = [...lu(e.shape).map(d => d / u), 1].slice(0, s); return [l, i, u, p] } var Kt = {}; _e(Kt, { assertParamsValid: () => c4, computeFlatOffset: () => g4, computeOutShape: () => h4, getNormalizedAxes: () => m4, isSliceContinous: () => f4, maskToAxes: () => d4, parseSliceParams: () => k2, sliceInfo: () => b4, startForAxis: () => v2, startIndicesWithElidedDims: () => b2, stopForAxis: () => w2, stopIndicesWithElidedDims: () => y2, stridesForAxis: () => x2, stridesWithElidedDims: () => m2 }); var Hx = -2, p4 = -1; function c4(e, t, n) { let a = e.shape.length; A(a === t.length, () => `Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`), A(a === n.length, () => `Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`); for (let r = 0; r < a; ++r)A(t[r] + n[r] <= e.shape[r], () => `Error in slice${a}D: begin[${r}] + size[${r}] (${t[r] + n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`) } function d4(e) { let t = [], n = 0; for (; e > 0;)e & 1 && t.push(n), e /= 2, n++; return t } function h4(e, t, n) { let a = []; for (let r = 0; r < e.length; r++)a[r] = Math.ceil((t[r] - e[r]) / n[r]); return a } function m2(e, t, n, a) { let r = [...e]; for (let s = r.length; s < a.length; s++)r.push(1); for (let s = 0; s < n; s++)s === 0 ? r[t] = 1 : (r.splice(t, 0, 1), r.pop()); return r } function f2(e, t, n) { return n <= e ? n : n - (t - 1) } function g2(e, t) { let n = []; for (let a = 0; a < e; a++)n.push(t + a); return n } function m4(e, t, n, a, r, s, i, o, l) { let u = e.length, p = new Array(u), d = new Array(u), c = new Array(u); if (t.length && n > 0) { let h = t[0], m = n + 1; p = b2(i, h, m, a, e), d = y2(o, h, m, r, e), c = m2(s, h, m, e) } else for (let h = 0; h < u; h++)p[h] = v2(i, a, s, e, h, l), d[h] = w2(o, r, s, e, h, l), c[h] = x2(s, h, l); return { begin: p, end: d, strides: c } } function b2(e, t, n, a, r) { let s = [...r], i = g2(n, t); for (let o = 0; o < s.length; o++)if (i.indexOf(o) > -1) s[o] = 0; else { let l = f2(t, n, o), u = a[l]; e & 1 << l && (u = 0), s[o] = u } return s } function y2(e, t, n, a, r) { let s = [...r], i = g2(n, t); for (let o = 0; o < s.length; o++)if (i.indexOf(o) > -1) s[o] = Number.MAX_SAFE_INTEGER; else { let l = f2(t, n, o), u = a[l]; e & 1 << l && (u = Number.MAX_SAFE_INTEGER), s[o] = u } for (let o = 0; o < s.length; o++) { let l = r[o]; s[o] < 0 && (s[o] += l), s[o] = xc(0, s[o], r[o]) } return s } function x2(e, t, n) { let a = e[t]; return (n & 1 << t || a == null) && (a = 1), a } function v2(e, t, n, a, r, s) { let i = t[r], o = n[r] || 1; (e & 1 << r || s & 1 << r || i == null) && (o > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER); let l = a[r]; return i < 0 && (i += l), i = xc(0, i, l - 1), i } function w2(e, t, n, a, r, s) { let i = t[r], o = n[r] || 1; (e & 1 << r || s & 1 << r || i == null) && (o > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER); let l = a[r]; return i < 0 && (i += l), o > 0 ? i = xc(0, i, l) : i = xc(-1, i, l - 1), i } function f4(e, t, n) { let a = n.length; for (let r = 0; r < n.length; r++)if (n[r] > 1) { a = r; break } for (let r = a + 1; r < n.length; r++)if (t[r] > 0 || n[r] !== e[r]) return !1; return !0 } function g4(e, t) { let n = e.length > 0 ? e[e.length - 1] : 1; for (let a = 0; a < e.length - 1; a++)n += e[a] * t[a]; return n } function k2(e, t, n) { let a, r = e.shape.length; typeof t == "number" ? a = [t, ...new Array(r - 1).fill(0)] : t.length < r ? a = t.concat(new Array(r - t.length).fill(0)) : a = t.slice(), a.forEach(i => { A(i !== -1, () => "slice() does not support negative begin indexing.") }); let s; return n == null ? s = new Array(r).fill(-1) : typeof n == "number" ? s = [n, ...new Array(r - 1).fill(-1)] : n.length < r ? s = n.concat(new Array(r - n.length).fill(-1)) : s = n, s = s.map((i, o) => i >= 0 ? i : (A(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${o}.`), e.shape[o] - a[o])), [a, s] } function b4(e, t, n, a, r, s, i, o, l) { let u; if (a == null ? (u = new Array(t.length), u.fill(1)) : u = a, i != null && i & i - 1) throw new Error("Multiple ellipses in slice is not allowed."); let p = !1, d = { dims: u.length, numAddAxisAfterEllipsis: 0, begin: t.slice(), end: n.slice(), strides: u.slice(), beginMask: r, endMask: s, ellipsisMask: i, newAxisMask: o, shrinkAxisMask: l }; for (let y = 0; y < d.dims; y++)p && 1 << y & o && d.numAddAxisAfterEllipsis++, 1 << y & i && (p = !0); p || (d.ellipsisMask |= 1 << d.dims, d.dims++); let c = { dims: e.length, beginMask: 0, endMask: 0, beginValid: !1, endValid: !1 }; y4(d, c); let h = !0, m = !0, f = !0, g = [], b = []; for (let y = 0; y < e.length; ++y) { if (c.strides[y] === 0) throw Error(`strides[${y}] must be non-zero`); let x = !!(c.shrinkAxisMask & 1 << y), v = e[y]; if (v === -1) { g.push(x ? 1 : -1); continue } let I = [c.beginMask & 1 << y, c.endMask & 1 << y], N = [c.strides[y] > 0 ? 0 : -1, c.strides[y] > 0 ? v : v - 1]; if (x && c.strides[y] <= 0) throw Error("only stride 1 allowed on non-range indexing."); f = f && c.strides[y] === 1; let C = !!(c.beginMask & 1 << y && c.endMask & 1 << y); if (c.beginValid && c.endValid) { if (x) { let $ = c.begin[y] < 0 ? v + c.begin[y] : c.begin[y]; if (c.begin[y] = $, c.end[y] = c.begin[y] + 1, $ < 0 || $ >= v) throw Error(`slice index ${c.begin[y]} of dimension ${y} out of bounds.`) } else c.begin[y] = EI(c.begin[y], 0, c.strides[y], v, I, N), c.end[y] = EI(c.end[y], 1, c.strides[y], v, I, N); let D = c.strides[y] === 1 && c.begin[y] === 0 && c.end[y] === v; h = h && D, m = m && (y === 0 && c.strides[y] === 1 || D) } else h = h && c.strides[y] === 1 && C, m = m && (y === 0 && c.strides[y] === 1 || C); let _, F = !1; if (c.beginValid && c.endValid ? (_ = c.end[y] - c.begin[y], F = !0) : x ? (_ = 1, F = !0) : C && v >= 0 && (c.strides[y] < 0 ? _ = -v : _ = v, F = !0), F) { let D; _ === 0 || _ < 0 != c.strides[y] < 0 ? D = 0 : D = Math.trunc(_ / c.strides[y]) + (_ % c.strides[y] !== 0 ? 1 : 0), g.push(D) } else g.push(-1) } for (let y = 0; y < c.finalShapeGatherIndices.length; ++y) { let x = c.finalShapeGatherIndices[y]; x >= 0 ? b.push(g[x]) : x === Hx && b.push(1) } return { finalShapeSparse: b.filter((y, x) => c.finalShapeGatherIndices[x] !== Hx), finalShape: b, isIdentity: h, sliceDim0: m, isSimpleSlice: f, begin: c.begin, end: c.end, strides: c.strides } } function y4(e, t) { t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0; let n = 0; t.beginValid = e.begin != null, t.endValid = e.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims); for (let a = 0; a < e.dims; a++)if (1 << a & e.ellipsisMask) { let r = Math.min(t.dims - (e.dims - a) + 1 + e.numAddAxisAfterEllipsis, t.dims); for (; n < r; n++)t.begin[n] = 0, t.end[n] = 0, t.strides[n] = 1, t.beginMask |= 1 << n, t.endMask |= 1 << n, t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[n] = a } else if (1 << a & e.newAxisMask) t.finalShapeGatherIndices.push(Hx), t.finalShapeGatherIndicesSparse.push(-1); else { if (n === t.begin.length) throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`); e.begin != null && (t.begin[n] = e.begin[a]), e.end != null && (t.end[n] = e.end[a]), t.strides[n] = e.strides[a], e.beginMask & 1 << a && (t.beginMask |= 1 << n), e.endMask & 1 << a && (t.endMask |= 1 << n), e.shrinkAxisMask & 1 << a ? (t.finalShapeGatherIndices.push(p4), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << n) : (t.finalShapeGatherIndices.push(n), t.finalShapeGatherIndicesSparse.push(a)), t.inputShapeGatherIndicesSparse[n] = a, n++ } } function EI(e, t, n, a, r, s) { if (r[t]) return n > 0 ? s[t] : s[t + 1 & 1]; { let i = e < 0 ? a + e : e; return i < s[0] ? s[0] : i > s[1] ? s[1] : i } } var x4 = "4.16.0", I2 = class { static sgd(e) { return new Ef(e) } static momentum(e, t, n = !1) { return new e0(e, t, n) } static rmsprop(e, t = .9, n = 0, a = null, r = !1) { return new t0(e, t, n, a, r) } static adam(e = .001, t = .9, n = .999, a = null) { return new Jw(e, t, n, a) } static adadelta(e = .001, t = .95, n = null) { return new Yw(e, t, n) } static adamax(e = .002, t = .9, n = .999, a = null, r = 0) { return new Qw(e, t, n, a, r) } static adagrad(e, t = .1) { return new Zw(e, t) } }, Ys = I2, v4 = typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : e => e(); function s0() { return new Promise(e => v4(() => e())) } var T = {}; _e(T, { ERF_A1: () => M4, ERF_A2: () => O4, ERF_A3: () => P4, ERF_A4: () => L4, ERF_A5: () => z4, ERF_P: () => R4, PARALLELIZE_THRESHOLD: () => i0, RowPartitionType: () => nr, SELU_SCALE: () => N2, SELU_SCALEALPHA: () => S2, applyActivation: () => Tf, assertAndGetBroadcastShape: () => ct, assertAxesAreInnerMostDims: () => b3, assertParamsConsistent: () => w4, assignToTypedArray: () => H4, axesAreInnerMostDims: () => bw, calculateShapes: () => $T, checkEinsumDimSizes: () => Z4, checkPadOnDimRoundingMode: () => Nn, combineLocations: () => QN, combineRaggedTensorToTensorShapes: () => I4, complexWithEvenIndex: () => V4, complexWithOddIndex: () => U4, computeConv2DInfo: () => cd, computeConv3DInfo: () => GN, computeDefaultPad: () => Jv, computeDilation2DInfo: () => fP, computeOptimalWindowSize: () => C4, computeOutAndReduceShapes: () => eT, computeOutShape: () => k4, computePool2DInfo: () => UN, computePool3DInfo: () => gP, convertConv2DDataFormat: () => HN, decodeEinsumEquation: () => X4, eitherStridesOrDilationsAreOne: () => hr, expandShapeToKeepDim: () => gi, exponent: () => j4, exponents: () => q4, fromStringArrayToUint8: () => yV, fromUint8ToStringArray: () => bV, getAxesPermutation: () => tT, getBroadcastDims: () => ZN, getComplexWithIndex: () => G4, getEinsumComputePath: () => J4, getEinsumPermutation: () => Y4, getFusedBiasGradient: () => Nf, getFusedDyActivation: () => Sf, getImageCenter: () => E4, getInnerMostAxes: () => y3, getPermuted: () => A4, getRaggedRank: () => N4, getReductionAxes: () => Bt, getReshaped: () => _4, getReshapedPermuted: () => F4, getRowPartitionTypesHelper: () => S4, getSliceBeginCoords: () => $4, getSliceSize: () => D4, getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => nV, getSparseFillEmptyRowsNegativeIndexErrorMessage: () => aV, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => rV, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => oV, getSparseReshapeInputOutputMismatchErrorMessage: () => uV, getSparseReshapeInputOutputMultipleErrorMessage: () => lV, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => sV, getSparseReshapeNegativeOutputDimErrorMessage: () => iV, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => hV, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => pV, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => cV, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => dV, getUndoAxesPermutation: () => yw, isIdentityPermutation: () => Q4, log: () => NM, mergeRealAndImagArrays: () => W4, prepareAndValidate: () => h2, prepareSplitSize: () => tV, segment_util: () => T2, shouldFuse: () => Cf, slice_util: () => Kt, splitRealAndImagArrays: () => B4, stridesOrDilationsArePositive: () => mi, tupleValuesAreOne: () => ms, upcastType: () => ga, validateDefaultValueShape: () => T4, validateInput: () => vf, validateUpdateShape: () => Ww, warn: () => ts }); function w4(e, t) { let n = e[0].length; e.forEach((r, s) => { A(r.length === n, () => `Error in concat${n}D: rank of tensors[${s}] must be the same as the rank of the rest (${n})`) }), A(t >= 0 && t < n, () => `Error in concat${n}D: axis must be between 0 and ${n - 1}.`); let a = e[0]; e.forEach((r, s) => { for (let i = 0; i < n; i++)A(i === t || r[i] === a[i], () => `Error in concat${n}D: Shape of tensors[${s}] (${r}) does not match the shape of the rest (${a}) along the non-concatenated axis ${s}.`) }) } function k4(e, t) { let n = e[0].slice(); for (let a = 1; a < e.length; a++)n[t] += e[a][t]; return n } var nr; (function (e) { e[e.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", e[e.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", e[e.ROW_LENGTHS = 2] = "ROW_LENGTHS", e[e.ROW_SPLITS = 3] = "ROW_SPLITS", e[e.ROW_LIMITS = 4] = "ROW_LIMITS", e[e.ROW_STARTS = 5] = "ROW_STARTS" })(nr || (nr = {})); function I4(e, t, n) { let a = new Array; if (n == null && t == null) return a; if (t == null) for (; a.length < e + n.length;)a.push(-1); else a = t.slice(); if (n == null) return a; if (e + n.length !== a.length) throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e + n.length}, but shape.rank = ${a.length}`); for (let r = 1; r < n.length; ++r) { let s = n[r], i = a[a.length - n.length + r], o = a[i]; if (s >= 0) if (o >= 0) { if (o !== s) throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r + e}] = ${s} but shape[${r + e}] = ${o}`) } else a[i] = s } return a } function S4(e) { let t = { FIRST_DIM_SIZE: nr.FIRST_DIM_SIZE, VALUE_ROWIDS: nr.VALUE_ROWIDS, ROW_LENGTHS: nr.ROW_LENGTHS, ROW_SPLITS: nr.ROW_SPLITS, ROW_LIMITS: nr.ROW_LIMITS, ROW_STARTS: nr.ROW_STARTS }, n = []; for (let a of e) if (a in t) n.push(t[a]); else break; return n } function N4(e) { return e.length === 0 ? 0 : e[0] === nr.FIRST_DIM_SIZE ? e.length - 1 : e.length } function T4(e, t) { if (e == null || t == null) return; let n = e.length, a = t.length; if (n >= a) throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${a})`); for (let r = 0; r < Math.min(n, a - 1); ++r) { let s = e[r], i = t[r + 1]; if (s >= 0 && i >= 0 && s !== 1 && s !== i) throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r - e.length}] = ${s} but ragged tensor input.flatValues.shape[${r - e.length}] = ${i}`) } } var i0 = 30; function C4(e) { return e <= i0 ? e : rm(e, Math.floor(Math.sqrt(e))) } function E4(e, t, n) { let a = n * (typeof e == "number" ? e : e[0]), r = t * (typeof e == "number" ? e : e[1]); return [a, r] } function _4(e, t, n, a = !0) { let r = []; if (a) r = r.concat(t.slice(0)), r.push(e[0] / n), r = r.concat(e.slice(1)); else { r = r.concat(e[0]); let s = t.length; for (let i = 0; i < s; ++i)r = r.concat([e[i + 1] / t[i], t[i]]); r = r.concat(e.slice(s + 1)) } return r } function A4(e, t, n = !0) { let a = []; if (n) { a.push(t); for (let r = t + 1; r < e; ++r)r <= 2 * t ? (a.push(r), a.push(r - (t + 1))) : a.push(r) } else { let r = [], s = []; for (let i = 1; i < e; ++i)i >= t * 2 + 1 || i % 2 === 1 ? s.push(i) : r.push(i); a.push(...r), a.push(0), a.push(...s) } return a } function F4(e, t, n, a = !0) { let r = []; a ? r.push(e[0] / n) : r.push(e[0] * n); for (let s = 1; s < e.length; ++s)s <= t.length ? a ? r.push(t[s - 1] * e[s]) : r.push(e[s] / t[s - 1]) : r.push(e[s]); return r } function $4(e, t) { let n = [0]; for (let a = 0; a < t; ++a)n.push(e[a][0]); return n } function D4(e, t, n) { let a = e.slice(0, 1); for (let r = 0; r < n; ++r)a.push(e[r + 1] - t[r][0] - t[r][1]); return a } var S2 = 1.7580993408473768, N2 = 1.0507009873554805, R4 = .3275911, M4 = .254829592, O4 = -.284496736, P4 = 1.421413741, L4 = -1.453152027, z4 = 1.061405429; function W4(e, t) { if (e.length !== t.length) throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`); let n = new Float32Array(e.length * 2); for (let a = 0; a < n.length; a += 2)n[a] = e[a / 2], n[a + 1] = t[a / 2]; return n } function B4(e) { let t = new Float32Array(e.length / 2), n = new Float32Array(e.length / 2); for (let a = 0; a < e.length; a += 2)t[a / 2] = e[a], n[a / 2] = e[a + 1]; return { real: t, imag: n } } function V4(e) { let t = Math.ceil(e.length / 4), n = new Float32Array(t), a = new Float32Array(t); for (let r = 0; r < e.length; r += 4)n[Math.floor(r / 4)] = e[r], a[Math.floor(r / 4)] = e[r + 1]; return { real: n, imag: a } } function U4(e) { let t = Math.floor(e.length / 4), n = new Float32Array(t), a = new Float32Array(t); for (let r = 2; r < e.length; r += 4)n[Math.floor(r / 4)] = e[r], a[Math.floor(r / 4)] = e[r + 1]; return { real: n, imag: a } } function G4(e, t) { let n = e[t * 2], a = e[t * 2 + 1]; return { real: n, imag: a } } function H4(e, t, n, a) { e[a * 2] = t, e[a * 2 + 1] = n } function q4(e, t) { let n = new Float32Array(e / 2), a = new Float32Array(e / 2); for (let r = 0; r < Math.ceil(e / 2); r++) { let s = (t ? 2 : -2) * Math.PI * (r / e); n[r] = Math.cos(s), a[r] = Math.sin(s) } return { real: n, imag: a } } function j4(e, t, n) { let a = (n ? 2 : -2) * Math.PI * (e / t), r = Math.cos(a), s = Math.sin(a); return { real: r, imag: s } } var gx = "->", K4 = /->/g, _I = ",", AI = "..."; function X4(e, t) { e = e.replace(/\s/g, ""); let n = (e.length - e.replace(K4, "").length) / gx.length; if (n < 1) throw new Error("Equations without an arrow are not supported."); if (n > 1) throw new Error(`Equation must contain exactly one arrow ("${gx}").`); let [a, r] = e.split(gx); A(a.indexOf(AI) === -1, () => `The ellipsis notation ("${AI}") is not supported yet.`); let s = a.split(_I), i = s.length; if (t !== i) throw new Error(`Expected ${i} input tensors, received ${t}`); if (i > 2) throw new Error("Support for more than 2 input tensors is not implemented yet."); let o = []; for (let c = 0; c < r.length; ++c) { let h = r[c]; if (!s.some(m => m.indexOf(h) !== -1)) throw new Error(`Output subscripts contain the label ${h} not present in the input subscripts.`); o.indexOf(h) === -1 && o.push(h) } for (let c = 0; c < a.length; ++c) { let h = a[c]; o.indexOf(h) === -1 && h !== _I && o.push(h) } let l = new Array(s.length); for (let c = 0; c < i; ++c) { if (new Set(s[c].split("")).size !== s[c].length) throw new Error(`Found duplicate axes in input component ${s[c]}. Support for duplicate axes in input is not implemented yet.`); l[c] = []; for (let h = 0; h < s[c].length; ++h)l[c].push(o.indexOf(s[c][h])) } let u = o.length, p = r.length, d = []; for (let c = p; c < u; ++c)d.push(c); return { allDims: o, summedDims: d, idDims: l } } function Y4(e, t) { let n = new Array(e); n.fill(-1); for (let r = 0; r < t.length; ++r)n[t[r]] = r; let a = []; for (let r = 0; r < e; ++r)n[r] === -1 && a.push(r); return n = n.filter(r => r !== -1), { permutationIndices: n, expandDims: a } } function Z4(e, t, n) { let a = new Array(e); for (let r = 0; r < n.length; ++r) { let s = n[r].shape; for (let i = 0; i < t[r].length; ++i)a[t[r][i]] === void 0 ? a[t[r][i]] = s[i] : A(a[t[r][i]] === s[i], () => `Expected dimension ${a[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`) } } function J4(e, t) { let n = e, a = [], r = 0; e.length === 0 && n.push(-1), r = e.length + 1; for (let i = 0; i < r; ++i)a.push([]); let s = []; for (let i = 0; i < n.length; ++i) { let o = n[i], l = eV(t, o); for (let u of l) s.indexOf(u) === -1 && (a[i].push(u), s.push(u)) } return { path: n, steps: a } } function Q4(e) { return e.every((t, n) => t === n) } function eV(e, t) { let n = []; for (let a = 0; a < e.length; ++a)(e[a].length === 0 || e[a].indexOf(t) !== -1 || t === -1) && n.push(a); return n } function tV(e, t, n = 0) { let a = []; if (typeof t == "number") A(e.shape[n] % t === 0, () => "Number of splits must evenly divide the axis."), a = new Array(t).fill(e.shape[n] / t); else { let r = t.reduce((i, o) => (o === -1 && (i += 1), i), 0); A(r <= 1, () => "There should be only one negative value in split array."); let s = t.indexOf(-1); if (s !== -1) { let i = t.reduce((o, l) => l > 0 ? o + l : o); t[s] = e.shape[n] - i } A(e.shape[n] === t.reduce((i, o) => i + o), () => "The sum of sizes must match the size of the axis dimension."), a = t } return a } function nV(e) {
        return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`
    } function aV(e, t) { return `indices(${e}, 0) is invalid: ${t} < 0` } function rV(e, t, n) { return `indices(${e}, 0) is invalid: ${t} >= ${n}` } function sV(e, t) { return `only one output dimension may be -1, not both ${e} and ${t}` } function iV(e, t) { return `size ${e} must be non-negative, not ${t}` } function oV() { return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero" } function lV(e, t) {
        let n = ot(e), a = ot(t); return `Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${a}. inputShape=${e} outputShape= ${t}`
    } function uV(e, t) { let n = ot(e), a = ot(t); return `Input to reshape is a tensor with ${n} dense values, but the requested shape has ${a}. inputShape=${e} outputShape=${t}` } function pV() { return "segment ids must be >= 0" } function cV() { return "segment ids are not increasing" } function dV(e, t) { return `Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.` } function hV(e, t, n) { return `Bad: indices[${e}] == ${t} out of range [0, ${n})` } var T2 = {}; _e(T2, { collectGatherOpShapeInfo: () => gV, computeOutShape: () => fV, segOpComputeOptimalWindowSize: () => mV }); function mV(e, t) { let n = !1, a; for (e <= i0 ? (a = e, n = !0) : a = rm(e, Math.floor(Math.sqrt(e))); !n;)a > t || a === e ? n = !0 : a = rm(e, a + 1); return a } function fV(e, t, n) { let a = [], r = e.length; for (let s = 0; s < r; s++)s !== t ? a.push(e[s]) : a.push(n); return a } function gV(e, t, n, a) {
        let r = t.shape.length, s = e.shape.length; if (a !== 0 && (a < -r || a > r)) throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${a}`); if (a < 0 && (a += r), a > s) throw new Error(`batchDims (${a}) must be less than rank(x) (
    ${s}).`); if (n < a) throw new Error(`batchDims (${a}) must be less than or equal to axis (${n}).`); for (let d = 0; d < a; ++d)if (e.shape[d] !== t.shape[d]) throw new Error(`x.shape[${d}]: ${e.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`); let i = e.shape[n], o = [], l = 1, u = 1, p = 1; for (let d = 0; d < a; ++d)o.push(e.shape[d]), l *= e.shape[d]; for (let d = a; d < n; d++)o.push(e.shape[d]), u *= e.shape[d]; for (let d = a; d < r; d++)o.push(t.shape[d]); for (let d = n + 1; d < s; d++)o.push(e.shape[d]), p *= e.shape[d]; return { batchSize: l, sliceSize: p, outerSize: u, dimSize: i, outputShape: o }
    } function bV(e) { try { return e.map(t => om(t)) } catch (t) { throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`) } } function yV(e) { return e.map(t => ld(t)) } var fr = {}; _e(fr, { nonMaxSuppressionV3Impl: () => qT, nonMaxSuppressionV4Impl: () => jT, nonMaxSuppressionV5Impl: () => KT, whereImpl: () => MT }); MB(); var C2 = { kernelName: uu, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, Ko(re(n, "float32"), -1)) } } }, xV = { kernelName: Ci, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => { let a = pt(re(n, "float32")), r = hn(pe(ve(1), a)); return yt(he(e, r)) } } } }, vV = { kernelName: Ei, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => { let a = hn(pe(pt(re(n, "float32")), 1)); return he(e, a) } } } }, wV = { kernelName: Is, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = e, i = Bt(n.shape, r); return i.length > 0 && (s = fe(s, i)), W(s, n.shape) }, b: () => { let s = e, i = Bt(a.shape, r); return i.length > 0 && (s = fe(s, i)), W(s, a.shape) } } } }, kV = { kernelName: _i, saveAllInputs: !0, gradFunc: (e, t) => { let n = {}; return t.forEach((a, r) => { n[r] = () => e.clone() }), n } }, IV = { kernelName: du, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => je(n) } } }, SV = { kernelName: hu, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => je(n) } } }, NV = { kernelName: Ai, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, hn(pe(ve(1), pt(re(n, "float32"))))) } } }, TV = { kernelName: Fi, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => { let a = hn(X(ve(1), pt(re(n, "float32")))); return he(e, a) } } } }, CV = { kernelName: Ri, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = X(pt(n), pt(a)), i = z(e, he(a, s)), o = Bt(n.shape, r); return o.length > 0 && (i = fe(i, o)), W(i, n.shape) }, b: () => { let s = X(pt(n), pt(a)), i = yt(z(e, he(n, s))), o = Bt(a.shape, r); return o.length > 0 && (i = fe(i, o)), W(i, a.shape) } } } }, EV = { kernelName: $i, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, X(pt(re(n, "float32")), 1)) } } }, _V = { kernelName: Di, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, pe(ve(1), pt(re(n, "float32")))) } } }; function AV(e, t, n, a, r, s) { let i = E(e, "dy", "avgPool3dGrad"), o = E(t, "input", "avgPool3dGrad"), l = i, u = o, p = !1; o.rank === 4 && (p = !0, l = W(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), u = W(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]])), A(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), A(u.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`), Nn("avgPool3dGrad", r, s); let d = { dy: l, input: u }, c = { filterSize: n, strides: a, pad: r, dimRoundingMode: s }, h = P.runKernel(Wc, d, c); return p ? W(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h } var FV = L({ avgPool3dGrad_: AV }), $V = { kernelName: mu, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { filterSize: r, strides: s, pad: i, dimRoundingMode: o } = n; return { x: () => FV(e, a, r, s, i, o) } } }; function DV(e, t, n, a, r) { let s = E(e, "dy", "avgPoolGrad"), i = E(t, "input", "avgPoolGrad"); A(i.rank === s.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${s.rank})`); let o = i, l = s, u = !1; i.rank === 3 && (u = !0, o = W(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), A(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), A(o.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`); let p = { dy: l, input: o }, d = { filterSize: n, strides: a, pad: r }, c = P.runKernel(zc, p, d); return u ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c } var RV = L({ avgPoolGrad_: DV }), MV = { kernelName: Mi, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { filterSize: r, strides: s, pad: i } = n; return { x: () => RV(e, a, r, s, i) } } }, OV = { kernelName: Oi, inputsToSave: ["a", "b"], gradFunc: (e, t, n) => { let [a, r] = t, { transposeA: s, transposeB: i } = n; return !s && !i ? { a: () => $e(e, r, !1, !0), b: () => $e(a, e, !0, !1) } : !s && i ? { a: () => $e(e, r, !1, !1), b: () => $e(e, a, !0, !1) } : s && !i ? { a: () => $e(r, e, !1, !0), b: () => $e(a, e, !1, !1) } : { a: () => $e(r, e, !0, !0), b: () => $e(e, a, !0, !0) } } }, PV = { kernelName: fu, gradFunc: (e, t, n) => { let { blockShape: a, crops: r } = n; return { x: () => vd(e, a, r) } } }, LV = { kernelName: hN, gradFunc: (e, t, n) => { let a = n, r = a.inputShape, s = a.shape, i = Array.from(s); for (let l = r.length - 1; l >= 0; l--)if (r[l] === s[l]) i[l] = 1; else if (r[l] !== 1) throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`); let o = []; for (let l = 0; l < i.length; l++)i[l] > 1 && o.push(l); return { x: () => fe(e, o, !0) } } }, zV = { kernelName: Pi, gradFunc: e => ({ x: () => e.clone() }) }, WV = { kernelName: Li, gradFunc: e => ({ x: () => je(e) }) }, BV = { kernelName: Ss, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { clipValueMin: r, clipValueMax: s } = n; return { x: () => nn(Fa(Rr(a, r), As(a, s)), e, je(e)) } } }, VV = { kernelName: Vc, inputsToSave: ["x"], gradFunc: C2.gradFunc }, UV = { kernelName: yu, saveAllInputs: !0, gradFunc: (e, t, n) => { let a = t.map(o => o.shape), { axis: r } = n, s = $a(r, t[0].shape)[0], i = a.map(o => o[s]); return Pn(e, i, s).map(o => () => o) } }, GV = { kernelName: zi, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => { let [a, r] = t, { dilations: s, strides: i, pad: o, dataFormat: l } = n; return A(ms(s), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`), { x: () => uw(a.shape, e, r, i, o, l), filter: () => jw(a, e, r.shape, i, o, l) } } }, HV = { kernelName: Wi, inputsToSave: ["dy", "filter"], gradFunc: (e, t, n) => { let [a, r] = t, { strides: s, pad: i, dataFormat: o, dimRoundingMode: l } = n; return { dy: () => $t(e, r, s, i, o, 1, l), filter: () => jw(e, a, r.shape, s, i, o, l) } } }; function qV(e, t, n, a, r) { let s = e; e.rank === 4 && (s = W(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])); let i = t; i.rank === 4 && (i = W(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), A(s.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`), A(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), A(n.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`), A(s.shape[4] === n[3], () => `Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`), A(i.shape[4] === n[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`); let o = { x: s, dy: i }, l = { strides: a, pad: r, filterShape: n }; return P.runKernel(xu, o, l) } var jV = L({ conv3DBackpropFilter_: qV }), KV = { kernelName: Bi, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => { let { dilations: a, strides: r, pad: s } = n; A(ms(a), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`); let [i, o] = t; return { x: () => XN(i.shape, e, o, r, s), filter: () => jV(i, e, o.shape, r, s) } } }, XV = { kernelName: Vi, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(yt(mf(re(n, "float32"))), e) } } }, YV = { kernelName: Ui, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(ff(re(n, "float32")), e) } } }, ZV = { kernelName: Gi, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { axis: r, exclusive: s, reverse: i } = n; return { x: () => { let o = tT([r], a.rank), l = nf(e, r, s, !i); return o != null && (l = De(l, o)), l } } } }, JV = { kernelName: Hi, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => { let { dilations: a, strides: r, pad: s, dimRoundingMode: i } = n, o = a == null ? [1, 1] : a; A(ms(o), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`); let [l, u] = t; return A(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), A(u.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`), A(l.shape[3] === u.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`), A(hr(r, o), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`), Nn("depthwiseConv2d", s, i), { x: () => UT(l.shape, e, u, r, s, o, i), filter: () => VT(l, e, u.shape, r, s, o, i) } } }, QV = { kernelName: qi, inputsToSave: ["x", "filter"], gradFunc: (e, t, n) => { let [a, r] = t, s = { x: a, filter: r, dy: e }, i = { x: a, filter: r, dy: e }; return { x: () => P.runKernel(ql, s, n), filter: () => P.runKernel(jl, i, n) } } }, eU = { kernelName: Ki, outputsToSave: [!0], gradFunc: (e, t) => { let [n] = t, a = { dy: e, y: n }; return { x: () => P.runKernel(Su, a) } } }, tU = { kernelName: Xi, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t, a = z(mn(yt(pt(n))), 2 / Math.sqrt(Math.PI)); return { x: () => z(e, a) } } }, nU = { kernelName: Yi, outputsToSave: [!0], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, n) } } }, aU = { kernelName: Tu, inputsToSave: ["input"], gradFunc: (e, t) => { let [n] = t; return { input: () => W(e, n.shape) } } }, rU = { kernelName: Zi, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, mn(n)) } } }, sU = { kernelName: Ji, gradFunc: e => ({ x: () => je(e) }) }, iU = { kernelName: Qi, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = he(e, re(a, "float32")), i = Bt(n.shape, r); return i.length > 0 ? W(fe(s, i), n.shape) : s }, b: () => { let s = z(e, re(n, "float32")), i = Bt(a.shape, r); i.length > 0 && (s = W(fe(s, i), a.shape)); let o = pt(a); return yt(he(s, re(o, "float32"))) } } } }, oU = { kernelName: eo, inputsToSave: ["x", "mean", "variance", "scale"], gradFunc: (e, t, n) => { let { varianceEpsilon: a } = n, [r, s, i, o] = t, l = o == null ? ve(1) : o, u = Bt(s.shape, r.shape), p = []; if (s.rank === 1) { for (let f = 0; f < r.shape.length - 1; ++f)p.push(r.shape[f]); p.push(1) } let d = pe(r, s), c = z(e, l), h = df(X(i, ve(a))), m = z(z(z(h, h), h), ve(-.5)); return { x: () => s.rank === 1 ? W(z(z(e, Mn(W(h, [1, 1, 1, s.shape[0]]), p)), l), r.shape) : W(z(z(e, h), l), r.shape), mean: () => { let f = z(z(h, ve(-1)), c); return s.rank === 1 && (f = fe(f, u)), W(f, s.shape) }, variance: () => { let f = z(z(m, d), c); return s.rank === 1 && (f = fe(f, u)), W(f, s.shape) }, scale: () => { let f = z(d, h), g = z(e, f); return s.rank === 1 && (g = fe(g, u)), W(g, s.shape) }, offset: () => { let f = e; return s.rank === 1 && (f = fe(f, u)), W(f, s.shape) } } } }, lU = { kernelName: Eu, inputsToSave: ["x", "indices"], gradFunc: (e, t, n) => { let [a, r] = t, { axis: s, batchDims: i } = n, o = $a(s, a.shape)[0], l = (u, p, d) => () => { let c = u.shape, h = p.size, m = c.slice(0, o), f = m.length, g = c.slice(s, c.length).slice(1), b = g.length, y = FI(0, f), x = FI(f + 1, f + 1 + b), v = $I([m, [h], g]), I = W(d, v), N = W(p, [h]), C = $I([[f], y, x]), _ = De(I, C), F = kf(_, N, u.shape[o]), D = yw(C); return F = De(F, D), F }; if (i === 1) { let u = a.shape[0], p = a.split(u, 0); return { x: () => Ft(p.map((d, c) => l(d, r.slice(c, 1), e.slice(c, 1))())).reshape(a.shape), indices: () => r } } else return { x: l(a, r, e), indices: () => r } } }; function FI(e, t) { let n = []; for (let a = e; a < t; ++a)n.push(a); return n } function $I(e) { let t = []; for (let n = 0; n < e.length; ++n)for (let a = 0; a < e[n].length; ++a)t.push(e[n][a]); return t } var uU = { kernelName: to, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t; return { a: () => je(n), b: () => je(a) } } }, pU = { kernelName: no, gradFunc: e => ({ x: () => re(e, "float32") }) }, cU = { kernelName: ao, gradFunc: e => ({ x: () => je(e) }) }, dU = { kernelName: ro, gradFunc: e => ({ x: () => je(e) }) }, hU = { kernelName: so, gradFunc: e => ({ x: () => je(e) }) }, mU = { kernelName: io, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { alpha: r } = n, s = Tn(a, 0); return { x: () => nn(s, e, z(e, r)) } } }, fU = { kernelName: lo, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, X(n, 1)) } } }, gU = { kernelName: oo, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, re(n, "float32")) } } }, bU = { kernelName: fN, inputsToSave: [], outputsToSave: [!0], gradFunc: (e, t, n) => { let [a] = t, { axis: r } = n; return { logits: () => { let s = mn(a); return pe(e, z(fe(e, r, !0), s)) } } } }; function yU(e, t, n, a = 5, r = 1, s = 1, i = .5) { let o = { x: e, y: t, dy: n }, l = { depthRadius: a, bias: r, alpha: s, beta: i }; return P.runKernel(Pu, o, l) } var xU = L({ localResponseNormalizationBackprop_: yU }), vU = { kernelName: uo, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (e, t, n) => { let [a, r] = t, { depthRadius: s, bias: i, alpha: o, beta: l } = n; return { x: () => xU(a, r, e, s, i, o, l) } } }; function E2(e, t, n, a) { return t.rank < n.rank && (t = W(t, gi(t.shape, a))), e.rank < n.rank && (e = W(e, gi(e.shape, a))), { x: () => z(e, re(ea(n, t), e.dtype)) } } var DI = { kernelName: po, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (e, t, n) => { let a = n, { reductionIndices: r } = a, s = t[0], i = t[1], o = $a(r, s.shape), l = E2(e, i, s, o); return { x: () => l.x() } } }, wU = { kernelName: co, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t; return { a: () => z(e, re(Rr(n, a), "float32")), b: () => z(e, re(Yl(n, a), "float32")) } } }; function kU(e, t, n, a, r, s, i) { let o = E(e, "dy", "maxPool3dGrad"), l = E(t, "input", "maxPool3dGrad"), u = E(n, "output", "maxPool3dGrad"), p = o, d = l, c = u, h = !1; l.rank === 4 && (h = !0, p = W(o, [1, o.shape[0], o.shape[1], o.shape[2], o.shape[3]]), d = W(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]]), c = W(u, [1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]])), A(p.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${p.rank}.`), A(d.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`), A(c.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${c.rank}.`), Nn("maxPool3dGrad", s, i); let m = { dy: p, input: d, output: c }, f = { filterSize: a, strides: r, pad: s, dimRoundingMode: i }, g = P.runKernel(jc, m, f); return h ? W(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g } var IU = L({ maxPool3dGrad_: kU }), SU = { kernelName: Lu, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (e, t, n) => { let [a, r] = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = n; return { x: () => IU(e, a, r, s, i, o, l) } } }; function NU(e, t, n, a, r, s, i) { let o = E(e, "dy", "maxPoolGrad"), l = E(t, "input", "maxPoolGrad"), u = E(n, "output", "maxPoolGrad"); A(l.rank === o.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${o.rank})`), A(o.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`), A(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), Nn("maxPoolGrad", s, i); let p = { dy: o, input: l, output: u }, d = { filterSize: a, strides: r, pad: s, dimRoundingMode: i }; return P.runKernel(qc, p, d) } var TU = L({ maxPoolGrad_: NU }), CU = { kernelName: ho, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (e, t, n) => { let [a, r] = t, { filterSize: s, strides: i, pad: o } = n; return { x: () => TU(e, a, r, s, i, o) } } }, EU = { kernelName: mo, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { axis: r } = n, s = $a(r, a.shape), i = eT(a.shape, s)[1], o = ot(i); return { x: () => { let l = a.shape.slice(); s.forEach(p => { l[p] = 1 }); let u = W(e, l); return he(z(u, On(a.shape, "float32")), o) } } } }, _U = { kernelName: fo, inputsToSave: ["x"], outputsToSave: [!0], gradFunc: (e, t, n) => { let a = n, { axis: r } = a, [s, i] = t, o = $a(r, s.shape), l = E2(e, i, s, o); return { x: () => l.x() } } }, AU = { kernelName: go, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t; return { a: () => z(e, re(As(n, a), "float32")), b: () => z(e, re(Tn(n, a), "float32")) } } }, FU = { kernelName: bo, inputsToSave: ["x"], gradFunc: (e, t, n) => { let a = t[0], { paddings: r } = n, s = r.map(i => i[0]); return { x: () => Ve(e, s, a.shape) } } }, $U = { kernelName: yo, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = Bt(n.shape, r); return s.length > 0 ? W(fe(e, s), n.shape) : e }, b: () => { let s = z(e, yt(mp(he(n, a)))), i = Bt(a.shape, r); return i.length > 0 ? W(fe(s, i), a.shape) : s } } } }, DU = { kernelName: xo, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = z(e, re(a, "float32")), i = Bt(n.shape, r); return i.length > 0 ? W(fe(s, i), n.shape) : s }, b: () => { let s = z(e, re(n, "float32")), i = Bt(a.shape, r); return i.length > 0 ? W(fe(s, i), a.shape) : s } } } }, RU = { kernelName: Wu, gradFunc: e => ({ x: () => yt(e) }) }, MU = { kernelName: vo, inputsToSave: ["indices"], gradFunc: (e, t) => { let n = t[0]; return { indices: () => It(n.shape, "float32") } } }, OU = { kernelName: Hu, gradFunc: e => ({ x: () => je(e) }) }, PU = { kernelName: qu, saveAllInputs: !0, gradFunc: (e, t, n) => { let { axis: a } = n; return dt(e, a).map(r => () => r) } }, RI = { kernelName: wo, inputsToSave: ["x"], gradFunc: (e, t, n) => { let a = t[0], { paddings: r } = n, s = r.map(i => i[0]); return { x: () => Ve(e, s, a.shape) } } }, LU = { kernelName: ko, inputsToSave: ["a", "b"], outputsToSave: [!0], gradFunc: (e, t) => { let [n, a, r] = t, s = n, i = a, o = ct(s.shape, i.shape); return { a: () => { let l = re(i, "float32"), u = z(e, z(l, Fr(s, pe(l, ve(1))))), p = Bt(s.shape, o); return p.length > 0 && (u = fe(u, p)), W(u, s.shape) }, b: () => { let l = Tn(s, 0), u = nn(l, ta(s), je(s)), p = z(e, z(r, u)), d = Bt(i.shape, o); return d.length > 0 && (p = fe(p, d)), W(p, i.shape) } } } }, zU = { kernelName: Io, inputsToSave: ["x", "alpha"], gradFunc: (e, t) => { let [n, a] = t, r = Tn(n, 0); return { x: () => nn(r, e, z(e, a)), alpha: () => { let s = nn(r, je(e), z(e, n)), i = Bt(a.shape, e.shape); return i.length > 0 && (s = fe(s, i)), W(s, a.shape) } } } }; function WU(e, t, n) { let a = e.shape.slice(); a[n] = 1; let r = W(t, a), s = Cc(e, n, !0, !1), i = Cc(e, n, !0, !0), o = z(s, i); return z(r, o) } function BU(e, t, n) { let a = e.shape.length, r = a - n.length, s = T.getAxesPermutation(n, a), i = e; s != null && (i = De(e, s)); let o = i.shape.slice(), l = o.splice(a - n.length, n.length).reduce((d, c) => d * c, 1); o.push(l); let u = i.reshape(o), p = WU(u, t, r); if (p = p.reshape(i.shape), s != null) { let d = T.getUndoAxesPermutation(s); p = De(p, d) } return p } var VU = { kernelName: So, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { axis: r } = n, s = []; return r == null ? s = a.shape.map((i, o) => o) : typeof r == "number" ? s = [r] : s = r, { x: () => BU(a, e, s) } } }, UU = { kernelName: ji, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = he(e, re(a, "float32")), i = Bt(n.shape, r); return i.length > 0 ? W(fe(s, i), n.shape) : s }, b: () => { let s = z(e, re(n, "float32")), i = Bt(a.shape, r); i.length > 0 && (s = W(fe(s, i), a.shape)); let o = pt(a); return yt(he(s, re(o, "float32"))) } } } }, GU = { kernelName: No, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, yt(pt(n))) } } }, HU = { kernelName: _o, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t, a = z(As(n, 6), Ko(n)); return { x: () => z(e, re(a, "float32")) } } }, qU = { kernelName: To, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, re(Ko(n), "float32")) } } }, jU = { kernelName: ju, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => W(e, n.shape) } } }, KU = { kernelName: Eo, inputsToSave: ["images"], gradFunc: (e, t, n) => { let [a] = t, r = { dy: e, images: a }; return { images: () => P.runKernel(Xu, r, n) } } }, XU = { kernelName: Co, inputsToSave: ["images"], gradFunc: (e, t, n) => { let [a] = t, r = { dy: e, images: a }; return { images: () => P.runKernel(Ku, r, n) } } }, YU = { kernelName: Ao, gradFunc: (e, t, n) => { let { dims: a } = n, r = $a(a, e.shape); return { x: () => ya(e, r) } } }, ZU = { kernelName: Fo, gradFunc: e => ({ x: () => je(e) }) }, JU = { kernelName: $o, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => yt(he(e, z(Fr(n, 1.5), 2))) } } }, QU = { kernelName: Qu, inputsToSave: ["condition"], gradFunc: (e, t) => { let [n] = t; return { condition: () => re(je(n), "float32"), t: () => z(e, re(n, e.dtype)), e: () => z(e, re(yd(n), e.dtype)) } } }, eG = { kernelName: Do, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => { let a = Tn(n, ve(0)), r = ve(S2), s = ve(N2), i = z(e, s), o = z(z(e, r), mn(re(n, "float32"))); return nn(a, i, o) } } } }, tG = { kernelName: Po, outputsToSave: [!0], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, z(n, pe(ve(1), n))) } } }, nG = { kernelName: Oo, gradFunc: e => ({ x: () => je(e) }) }, aG = { kernelName: Ro, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(hd(re(n, "float32")), e) } } }, rG = { kernelName: Mo, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(tf(re(n, "float32")), e) } } }, sG = { kernelName: ep, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { begin: r, size: s } = n, i = a.shape, [o, l] = k2(a, r, s), u = []; for (let p = 0; p < e.rank; p++)u.push([o[p], i[p] - o[p] - l[p]]); return { x: () => va(e, u) } } }, iG = { kernelName: Bo, outputsToSave: [!0], gradFunc: (e, t, n) => { let [a] = t, { dim: r } = n, s = !0, i = z(e, a); return { logits: () => pe(i, z(fe(i, [r], s), a)) } } }, oG = { kernelName: Lo, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, ma(n)) } } }, MI = { kernelName: tp, gradFunc: (e, t, n) => { let { blockShape: a, paddings: r } = n; return { x: () => dd(e, a, r) } } }, OI = { kernelName: np, gradFunc: (e, t, n) => { let { axis: a } = n; return { x: () => et(e, a) } } }, lG = { kernelName: zo, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, z(hn(re(n, "float32")), 2)) } } }, uG = { kernelName: Qc, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => z(e, z(re(n, "float32"), 2)) } } }, pG = { kernelName: Vo, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ve(2); return { a: () => z(e, z(r, pe(n, a))), b: () => z(e, z(r, pe(a, n))) } } }, cG = { kernelName: Ts, gradFunc: e => ({ x: () => je(e) }) }, dG = { kernelName: Uo, inputsToSave: ["a", "b"], gradFunc: (e, t) => { let [n, a] = t, r = ct(n.shape, a.shape); return { a: () => { let s = e, i = Bt(n.shape, r); return i.length > 0 && (s = fe(s, i)), W(s, n.shape) }, b: () => { let s = e, i = Bt(a.shape, r); return i.length > 0 && (s = fe(s, i)), W(yt(s), a.shape) } } } }, hG = { kernelName: Wo, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, r = a.shape.slice(), { axis: s } = n; $a(s, a.shape).forEach(l => { r[l] = 1 }); let i = W(e, r), o = z(i, On(a.shape, "float32")); return { x: () => o } } }, mG = { kernelName: Go, inputsToSave: ["x"], gradFunc: (e, t) => { let [n] = t; return { x: () => he(e, pt(hd(n))) } } }, fG = { kernelName: Ho, outputsToSave: [!0], gradFunc: (e, t) => { let [n] = t; return { x: () => z(pe(ve(1), pt(n)), e) } } }, gG = { kernelName: Ns, inputsToSave: ["x"], gradFunc: (e, t, n) => { let [a] = t, { reps: r } = n; return { x: () => { let s = je(a); if (a.rank === 1) for (let i = 0; i < r[0]; ++i)s = X(s, Ve(e, [i * a.shape[0]], [a.shape[0]])); else if (a.rank === 2) for (let i = 0; i < r[0]; ++i)for (let o = 0; o < r[1]; ++o)s = X(s, Ve(e, [i * a.shape[0], o * a.shape[1]], [a.shape[0], a.shape[1]])); else if (a.rank === 3) for (let i = 0; i < r[0]; ++i)for (let o = 0; o < r[1]; ++o)for (let l = 0; l < r[2]; ++l)s = X(s, Ve(e, [i * a.shape[0], o * a.shape[1], l * a.shape[2]], [a.shape[0], a.shape[1], a.shape[2]])); else if (a.rank === 4) for (let i = 0; i < r[0]; ++i)for (let o = 0; o < r[1]; ++o)for (let l = 0; l < r[2]; ++l)for (let u = 0; u < r[3]; ++u)s = X(s, Ve(e, [i * a.shape[0], o * a.shape[1], l * a.shape[2], u * a.shape[3]], [a.shape[0], a.shape[1], a.shape[2], a.shape[3]])); else throw new Error(`Gradient for tile operation is not implemented for rank-${a.rank} tensors yet.`); return s } } } }, bG = { kernelName: Er, gradFunc: (e, t, n) => { let a = n, { perm: r } = a, s = yw(r); return { x: () => De(e, s) } } }, yG = { kernelName: lp, gradFunc: (e, t, n) => { let a = n, { axis: r } = a; return { value: () => Ft(e, r) } } }, xG = { kernelName: sd, inputsToSave: ["segmentIds"], gradFunc: (e, t) => { let [n] = t; return { x: () => vG(e, n) } } }; function vG(e, t) { let n = mr(t, je(t)), a = fp(e, n), r = Rr(t, ve(0, "int32")), s = a.rank - r.rank; for (let o = 0; o < s; ++o)r = Gt(r, o + 1); r = Fa(r, On(a.shape, "bool")); let i = je(a); return nn(r, a, i) } var wG = { kernelName: up, gradFunc: e => ({ x: () => je(e) }) }, kG = [C2, xV, vV, wV, kV, IV, SV, NV, TV, CV, EV, _V, $V, MV, OV, PV, LV, zV, WV, BV, VV, UV, HV, GV, KV, XV, YV, ZV, JV, QV, UU, eU, tU, nU, aU, rU, iU, sU, oU, lU, uU, pU, cU, dU, hU, mU, fU, gU, bU, vU, DI, DI, wU, SU, CU, EU, _U, AU, FU, $U, DU, RU, MU, OU, PU, RI, RI, LU, zU, VU, GU, HU, qU, jU, KU, XU, YU, ZU, JU, QU, eG, tG, nG, aG, rG, sG, iG, oG, MI, MI, OI, OI, lG, pG, uG, cG, dG, hG, mG, fG, gG, bG, yG, xG, wG]; for (let e of kG) gN(e); Q().prototype.abs = function () { return this.throwIfDisposed(), Lt(this) }; Q().prototype.acos = function () { return this.throwIfDisposed(), Gv(this) }; Q().prototype.acosh = function () { return this.throwIfDisposed(), Hv(this) }; Q().prototype.add = function (e) { return this.throwIfDisposed(), X(this, e) }; Q().prototype.all = function (e, t) { return this.throwIfDisposed(), Jm(this, e, t) }; Q().prototype.any = function (e, t) { return this.throwIfDisposed(), Sc(this, e, t) }; Q().prototype.argMax = function (e) { return this.throwIfDisposed(), hi(this, e) }; Q().prototype.argMin = function (e) { return this.throwIfDisposed(), qv(this, e) }; Q().prototype.asScalar = function () { return this.throwIfDisposed(), A(this.size === 1, () => "The array must have only 1 element."), W(this, []) }; Q().prototype.asType = function (e) { return this.throwIfDisposed(), re(this, e) }; Q().prototype.as1D = function () { return this.throwIfDisposed(), W(this, [this.size]) }; Q().prototype.as2D = function (e, t) { return this.throwIfDisposed(), W(this, [e, t]) }; Q().prototype.as3D = function (e, t, n) { return this.throwIfDisposed(), W(this, [e, t, n]) }; Q().prototype.as4D = function (e, t, n, a) { return this.throwIfDisposed(), W(this, [e, t, n, a]) }; Q().prototype.as5D = function (e, t, n, a, r) { return this.throwIfDisposed(), W(this, [e, t, n, a, r]) }; Q().prototype.asin = function () { return this.throwIfDisposed(), jv(this) }; Q().prototype.asinh = function () { return this.throwIfDisposed(), Kv(this) }; Q().prototype.atan = function () { return this.throwIfDisposed(), Xv(this) }; Q().prototype.atan2 = function (e) { return this.throwIfDisposed(), Yv(this, e) }; Q().prototype.atanh = function () { return this.throwIfDisposed(), Zv(this) }; Q().prototype.avgPool = function (e, t, n, a) { return this.throwIfDisposed(), xa(this, e, t, n, a) }; Q().prototype.batchToSpaceND = function (e, t) { return this.throwIfDisposed(), dd(this, e, t) }; Q().prototype.batchNorm = function (e, t, n, a, r) { return this.throwIfDisposed(), Es(this, e, t, n, a, r) }; Q().prototype.broadcastTo = function (e) { return this.throwIfDisposed(), ri(this, e) }; Q().prototype.cast = function (e) { return this.throwIfDisposed(), re(this, e) }; Q().prototype.ceil = function () { return this.throwIfDisposed(), rw(this) }; Q().prototype.clipByValue = function (e, t) { return this.throwIfDisposed(), an(this, e, t) }; Q().prototype.concat = function (e, t) { return this.throwIfDisposed(), e instanceof Ce && (e = [e]), et([this, ...e], t) }; Q().prototype.conv1d = function (e, t, n, a, r, s) { return this.throwIfDisposed(), Qm(this, e, t, n, a, r, s) }; Q().prototype.conv2dTranspose = function (e, t, n, a, r) { return this.throwIfDisposed(), ef(this, e, t, n, a, r) }; Q().prototype.conv2d = function (e, t, n, a, r, s) { return this.throwIfDisposed(), $t(this, e, t, n, a, r, s) }; Q().prototype.cos = function () { return this.throwIfDisposed(), hd(this) }; Q().prototype.cosh = function () { return this.throwIfDisposed(), tf(this) }; Q().prototype.cumprod = function (e, t, n) { return this.throwIfDisposed(), Cc(this, e, t, n) }; Q().prototype.cumsum = function (e, t, n) { return this.throwIfDisposed(), nf(this, e, t, n) }; Q().prototype.depthToSpace = function (e, t) { return this.throwIfDisposed(), dw(this, e, t) }; Q().prototype.depthwiseConv2d = function (e, t, n, a, r, s) { return this.throwIfDisposed(), _s(this, e, t, n, a, r, s) }; Q().prototype.dilation2d = function (e, t, n, a, r) { return this.throwIfDisposed(), hw(this, e, t, n, a, r) }; Q().prototype.divNoNan = function (e) { return this.throwIfDisposed(), mw(this, e) }; Q().prototype.div = function (e) { return this.throwIfDisposed(), he(this, e) }; Q().prototype.dot = function (e) { return this.throwIfDisposed(), fw(this, e) }; Q().prototype.elu = function () { return this.throwIfDisposed(), dp(this) }; Q().prototype.equal = function (e) { return this.throwIfDisposed(), ea(this, e) }; Q().prototype.erf = function () { return this.throwIfDisposed(), gw(this) }; Q().prototype.euclideanNorm = function (e, t) { return this.throwIfDisposed(), xw(this, e, t) }; Q().prototype.exp = function () { return this.throwIfDisposed(), mn(this) }; Q().prototype.expandDims = function (e) { return this.throwIfDisposed(), Gt(this, e) }; Q().prototype.expm1 = function () { return this.throwIfDisposed(), vw(this) }; Q().prototype.fft = function () { return this.throwIfDisposed(), Id(this) }; Q().prototype.flatten = function () { return this.throwIfDisposed(), W(this, [this.size]) }; Q().prototype.floor = function () { return this.throwIfDisposed(), mp(this) }; Q().prototype.floorDiv = function (e) { return this.throwIfDisposed(), Zm(this, e) }; Q().prototype.gather = function (e, t, n) { return this.throwIfDisposed(), fp(this, e, t, n) }; Q().prototype.greaterEqual = function (e) { return this.throwIfDisposed(), Rr(this, e) }; Q().prototype.greater = function (e) { return this.throwIfDisposed(), Tn(this, e) }; Q().prototype.ifft = function () { return this.throwIfDisposed(), eu(this) }; Q().prototype.irfft = function () { return this.throwIfDisposed(), bf(this) }; Q().prototype.isFinite = function () { return this.throwIfDisposed(), ww(this) }; Q().prototype.isInf = function () { return this.throwIfDisposed(), kw(this) }; Q().prototype.isNaN = function () { return this.throwIfDisposed(), Iw(this) }; Q().prototype.leakyRelu = function (e) { return this.throwIfDisposed(), fd(this, e) }; Q().prototype.lessEqual = function (e) { return this.throwIfDisposed(), As(this, e) }; Q().prototype.less = function (e) { return this.throwIfDisposed(), Yl(this, e) }; Q().prototype.localResponseNormalization = function (e, t, n, a) { return this.throwIfDisposed(), Sw(this, e, t, n, a) }; Q().prototype.logSigmoid = function () { return this.throwIfDisposed(), Nw(this) }; Q().prototype.logSoftmax = function (e) { return this.throwIfDisposed(), sf(this, e) }; Q().prototype.logSumExp = function (e, t) { return this.throwIfDisposed(), bd(this, e, t) }; Q().prototype.log = function () { return this.throwIfDisposed(), ta(this) }; Q().prototype.log1p = function () { return this.throwIfDisposed(), gd(this) }; Q().prototype.logicalAnd = function (e) { return this.throwIfDisposed(), Fa(this, e) }; Q().prototype.logicalNot = function () { return this.throwIfDisposed(), yd(this) }; Q().prototype.logicalOr = function (e) { return this.throwIfDisposed(), of(this, e) }; Q().prototype.logicalXor = function (e) { return this.throwIfDisposed(), Tw(this, e) }; Q().prototype.matMul = function (e, t, n) { return this.throwIfDisposed(), $e(this, e, t, n) }; Q().prototype.maxPool = function (e, t, n, a) { return this.throwIfDisposed(), Dt(this, e, t, n, a) }; Q().prototype.max = function (e, t) { return this.throwIfDisposed(), fa(this, e, t) }; Q().prototype.maximum = function (e) { return this.throwIfDisposed(), mr(this, e) }; Q().prototype.mean = function (e, t) { return this.throwIfDisposed(), Et(this, e, t) }; Q().prototype.min = function (e, t) { return this.throwIfDisposed(), Xl(this, e, t) }; Q().prototype.minimum = function (e) { return this.throwIfDisposed(), fs(this, e) }; Q().prototype.mirrorPad = function (e, t) { return this.throwIfDisposed(), Ew(this, e, t) }; Q().prototype.mod = function (e) { return this.throwIfDisposed(), _w(this, e) }; Q().prototype.mul = function (e) { return this.throwIfDisposed(), z(this, e) }; Q().prototype.neg = function () { return this.throwIfDisposed(), yt(this) }; Q().prototype.norm = function (e, t, n) { return this.throwIfDisposed(), hp(this, e, t, n) }; Q().prototype.notEqual = function (e) { return this.throwIfDisposed(), bi(this, e) }; Q().prototype.oneHot = function (e, t = 1, n = 0) { return this.throwIfDisposed(), Zl(this, e, t, n) }; Q().prototype.onesLike = function () { return this.throwIfDisposed(), na(this) }; Q().prototype.pad = function (e, t) { return this.throwIfDisposed(), va(this, e, t) }; Q().prototype.pool = function (e, t, n, a, r, s) { return this.throwIfDisposed(), Aw(this, e, t, n, a, r, s) }; Q().prototype.pow = function (e) { return this.throwIfDisposed(), Fr(this, e) }; Q().prototype.prelu = function (e) { return this.throwIfDisposed(), wd(this, e) }; Q().prototype.prod = function (e, t) { return this.throwIfDisposed(), Fw(this, e, t) }; Q().prototype.reciprocal = function () { return this.throwIfDisposed(), Ow(this) }; Q().prototype.relu = function () { return this.throwIfDisposed(), Ke(this) }; Q().prototype.relu6 = function () { return this.throwIfDisposed(), pf(this) }; Q().prototype.reshapeAs = function (e) { return this.throwIfDisposed(), W(this, e.shape) }; Q().prototype.reshape = function (e) { return this.throwIfDisposed(), W(this, e) }; Q().prototype.resizeBilinear = function (e, t, n) { return this.throwIfDisposed(), XT(this, e, t, n) }; Q().prototype.resizeNearestNeighbor = function (e, t, n) { return this.throwIfDisposed(), YT(this, e, t, n) }; Q().prototype.reverse = function (e) { return this.throwIfDisposed(), ya(this, e) }; Q().prototype.rfft = function () { return this.throwIfDisposed(), Sd(this) }; Q().prototype.round = function () { return this.throwIfDisposed(), cf(this) }; Q().prototype.rsqrt = function () { return this.throwIfDisposed(), df(this) }; Q().prototype.selu = function () { return this.throwIfDisposed(), hf(this) }; Q().prototype.separableConv2d = function (e, t, n, a, r, s) { return this.throwIfDisposed(), $s(this, e, t, n, a, r, s) }; Q().prototype.sigmoid = function () { return this.throwIfDisposed(), ma(this) }; Q().prototype.sign = function () { return this.throwIfDisposed(), Pw(this) }; Q().prototype.sin = function () { return this.throwIfDisposed(), mf(this) }; Q().prototype.sinh = function () { return this.throwIfDisposed(), ff(this) }; Q().prototype.slice = function (e, t) { return this.throwIfDisposed(), Ve(this, e, t) }; Q().prototype.softmax = function (e) { return this.throwIfDisposed(), ja(this, e) }; Q().prototype.softplus = function () { return this.throwIfDisposed(), qo(this) }; Q().prototype.spaceToBatchND = function (e, t) { return this.throwIfDisposed(), vd(this, e, t) }; Q().prototype.split = function (e, t) { return this.throwIfDisposed(), Pn(this, e, t) }; Q().prototype.sqrt = function () { return this.throwIfDisposed(), hn(this) }; Q().prototype.square = function () { return this.throwIfDisposed(), pt(this) }; Q().prototype.squaredDifference = function (e) { return this.throwIfDisposed(), yf(this, e) }; Q().prototype.squeeze = function (e) { return this.throwIfDisposed(), Ds(this, e) }; Q().prototype.stack = function (e, t) { this.throwIfDisposed(); let n = e instanceof Ce ? [this, e] : [this, ...e]; return Ft(n, t) }; Q().prototype.step = function (e) { return this.throwIfDisposed(), Ko(this, e) }; Q().prototype.stridedSlice = function (e, t, n, a, r, s, i, o) { return this.throwIfDisposed(), Lw(this, e, t, n, a, r, s, i, o) }; Q().prototype.sub = function (e) { return this.throwIfDisposed(), pe(this, e) }; Q().prototype.sum = function (e, t) { return this.throwIfDisposed(), fe(this, e, t) }; Q().prototype.tan = function () { return this.throwIfDisposed(), zw(this) }; Q().prototype.tanh = function () { return this.throwIfDisposed(), fi(this) }; Q().prototype.tile = function (e) { return this.throwIfDisposed(), Mn(this, e) }; Q().prototype.toBool = function () { return this.throwIfDisposed(), re(this, "bool") }; Q().prototype.toFloat = function () { return this.throwIfDisposed(), re(this, "float32") }; Q().prototype.toInt = function () { return this.throwIfDisposed(), re(this, "int32") }; Q().prototype.topk = function (e, t) { return this.throwIfDisposed(), Bw(this, e, t) }; Q().prototype.transpose = function (e) { return this.throwIfDisposed(), De(this, e) }; Q().prototype.unique = function (e) { return this.throwIfDisposed(), Vw(this, e) }; Q().prototype.unsortedSegmentSum = function (e, t) { return this.throwIfDisposed(), kf(this, e, t) }; Q().prototype.unstack = function (e) { return this.throwIfDisposed(), dt(this, e) }; Q().prototype.where = function (e, t) { return this.throwIfDisposed(), nn(e, this, t) }; Q().prototype.zerosLike = function () { return this.throwIfDisposed(), je(this) }; var Qr = class _2 extends Error { constructor(t) { super(t), Object.setPrototypeOf(this, _2.prototype) } }, sr = class A2 extends Error { constructor(t) { super(t), Object.setPrototypeOf(this, A2.prototype) } }, V = class F2 extends Error { constructor(t) { super(t), Object.setPrototypeOf(this, F2.prototype) } }, ze = class $2 extends Error { constructor(t) { super(t), Object.setPrototypeOf(this, $2.prototype) } }, IG = class D2 extends Error { constructor(t) { super(t), Object.setPrototypeOf(this, D2.prototype) } }, R2 = class { constructor(e) { this.maxEntries = e || 100, this.cache = new Map } get(e) { let t; return this.cache.has(e) && (t = this.cache.get(e), this.cache.delete(e), this.cache.set(e, t)), t } put(e, t) { if (this.cache.has(e)) this.cache.delete(e); else if (this.cache.size >= this.maxEntries) { let n = this.cache.keys().next().value; this.cache.delete(n) } this.cache.set(e, t) } getMaxEntries() { return this.maxEntries } setMaxEntries(e) { if (e < 0) throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`); if (this.maxEntries > e) for (let t = 0; t < this.maxEntries - e; t++) { let n = this.cache.keys().next().value; this.cache.delete(n) } this.maxEntries = e } }; function xi(e, t) { if (Array.isArray(e)) { let n = []; for (let a = 0; a < t; a++)n = n.concat(e); return n } else { let n = new Array(t); return n.fill(e), n } } function ar(e, t) { if (!e) throw new IG(t) } function PI(e, t) { let n = 0; for (let a of e) a === t && n++; return n } function Rn(e) { return e.length === 1 ? e[0] : e } function it(e) { return Array.isArray(e) ? e : [e] } function Sr(e) { let t = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase(); return t[0] !== "_" ? t : "private" + t } function Qs(e) { return e.length <= 1 || e.indexOf("_") === -1 ? e : e.replace(/[_]+(\w|$)/g, (t, n) => n.toUpperCase()) } var Ta = {}; function o0(e) { if (e == null) return null; let t = {}; return t.className = e.getClassName(), t.config = e.getConfig(), t } function qx(e) { if (!(e == null || typeof e != "object")) if (Array.isArray(e)) e.forEach(t => qx(t)); else { let t = Object.keys(e); for (let n of t) { let a = e[n]; a != null && typeof a == "object" && (!Array.isArray(a) && a.type === "ndarray" && typeof a.value == "number" ? e[n] = a.value : qx(a)) } } } function Td(e, t = {}, n = {}, a = "object", r = !1) {
        if (typeof e == "string") {
            let s = e, i; if (s in n) i = n[s]; else if (s in Ta) i = Ta[s]; else if (i = t[s], i == null) throw new V(`Unknown ${a}: ${e}. This may be due to one of the following reasons:
1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`); return i
        } else {
            let s = e; if (s.className == null || s.config == null) throw new V(`${a}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`); let i = s.className, o, l; if (i in n ? [o, l] = n[i] : i in Ta ? [o, l] = Ta.className : i in t && ([o, l] = t[i]), o == null) throw new V(`Unknown ${a}: ${i}. This may be due to one of the following reasons:
1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`); if (l != null) { let u = {}; for (let h of Object.keys(Ta)) u[h] = Ta[h]; for (let h of Object.keys(n)) u[h] = n[h]; let p = s.config; p.customObjects = u; let d = Object.assign({}, Ta); for (let h of Object.keys(n)) Ta[h] = n[h]; qx(s.config); let c = l(o, s.config, n, r); return Ta = Object.assign({}, d), c } else { let u = Object.assign({}, Ta); for (let d of Object.keys(n)) Ta[d] = n[d]; let p = new o(s.config); return Ta = Object.assign({}, u), p }
        }
    } function SG(e, t) { return e < t ? -1 : e > t ? 1 : 0 } function Mh(e, t) { return -1 * SG(e, t) } function os(e) { if (e == null) return e; let t = []; for (let n of e) t.indexOf(n) === -1 && t.push(n); return t } function NG(e) { if (e == null) throw new V(`Invalid value in obj: ${JSON.stringify(e)}`); for (let t in e) if (e.hasOwnProperty(t)) return !1; return !0 } function Yo(e, t, n) { if (n != null && e.indexOf(n) < 0) throw new V(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`) } function l0(e, t, n = 0, a = 1 / 0) { return ar(n >= 0), ar(a >= n), Array.isArray(e) && e.length >= n && e.length <= a && e.every(r => typeof r === t) } function tn(e, t) { Array.isArray(e) ? (w.assert(e.length > 0, () => `${t} is unexpectedly an empty array.`), e.forEach((n, a) => tn(n, `element ${a + 1} of ${t}`))) : w.assert(Number.isInteger(e) && e > 0, () => `Expected ${t} to be a positive integer, but got ${M2(e)}.`) } function M2(e) { return e === null ? "null" : Array.isArray(e) ? "[" + e.map(t => M2(t)).join(",") + "]" : typeof e == "string" ? `"${e}"` : `${e}` } function TG(e, t, n) { let a = n != null ? n() : w.now(), r; return (...s) => { let i = n != null ? n() : w.now(); return i - a < t || (a = i, r = e(...s)), r } } function O2(e) { return e === "relu" ? "relu" : e === "linear" ? "linear" : e === "elu" ? "elu" : null } var CG = 0; function P2() { return CG++ } var Oh = {}; function _f(e = "") { return e in Oh || (Oh[e] = 0), Oh[e] += 1, e + Oh[e].toString() } var EG = ["channelsFirst", "channelsLast"], _G = ["nearest", "bilinear"], AG = ["valid", "same", "causal"], FG = ["max", "avg"], $G = ["sum", "mul", "concat", "ave"], Ml = new Map; function Rt(e) { Yo(EG, "DataFormat", e) } function DG(e) { Yo(_G, "InterpolationFormat", e) } function wa(e) { Yo(AG, "PaddingMode", e) } function L2(e) { Yo(FG, "PoolMode", e) } var gc = [], LI = "/"; function si(e, t) { gc.push(e); try { let n = t(); return gc.pop(), n } catch (n) { throw gc.pop(), n } } function RG() { return gc.length === 0 ? "" : gc.join(LI) + LI } function z2(e) { if (!B2(e)) throw new Error("Not a valid tensor name: '" + e + "'"); return RG() + e } function W2(e) { if (!B2(e)) throw new Error("Not a valid tensor name: '" + e + "'"); Ml.has(e) || Ml.set(e, 0); let t = Ml.get(e); if (Ml.set(e, Ml.get(e) + 1), t > 0) { let n = `${e}_${t}`; return Ml.set(n, 1), n } else return e } var MG = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/); function B2(e) { return !!e.match(MG) } function OG(e) { return e === parseInt(e.toString(), 10) } function ls(e, t, n) { t == null && (t = 0), n == null && (n = e.length); let a = 1; for (let r = t; r < n; ++r)a *= e[r]; return a } function nu(e) { if (e.length === 0) return Number.NaN; let t = Number.POSITIVE_INFINITY; for (let n = 0; n < e.length; n++) { let a = e[n]; a < t && (t = a) } return t } function gs(e) { if (e.length === 0) return Number.NaN; let t = Number.NEGATIVE_INFINITY; for (let n = 0; n < e.length; n++) { let a = e[n]; a > t && (t = a) } return t } function Ua(e, t) { if (t < e) throw new V(`end (${t}) < begin (${e}) is forbidden.`); let n = []; for (let a = e; a < t; ++a)n.push(a); return n } var bx; function jt() { return bx == null && (bx = Wv().epsilon()), bx } function Ga() { return "channelsLast" } function lr(e, t) { return re(e, t) } function Cd(e, t = -1) { let n = e.shape.slice(); return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), W(e, n) } function PG(e, t) { return O(() => { if (e.shape.length !== 2) throw new V(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`); let n = Cd(e, 1); return jx(n, [1, t, 1]) }) } function LG(e) { let t = [ls(e.shape)]; return W(e, t) } function zG(e) { if (e.rank <= 1) throw new V(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`); let t = [e.shape[0], ls(e.shape, 1)]; return W(e, t) } function ii(e, t, n) { return O(() => { switch (e.rank) { case 1: return kd(e, t, n); case 2: return gf(e, [t, 0], [n, e.shape[1]]); case 3: return jo(e, [t, 0, 0], [n, e.shape[1], e.shape[2]]); case 4: return Ql(e, [t, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3]]); case 5: return Ve(e, [t, 0, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4]]); case 6: return Ve(e, [t, 0, 0, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3], e.shape[4], e.shape[5]]); default: throw new V(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`) } }) } function yx(e, t, n) { return O(() => { switch (e.rank) { case 1: return kd(e, t, n); case 2: return gf(e, [0, t], [e.shape[0], n]); case 3: return jo(e, [0, 0, t], [e.shape[0], e.shape[1], n]); case 4: return Ql(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], n]); default: throw new V(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`) } }) } function Ph(e, t, n, a) { return O(() => { switch (e.rank) { case 1: return kd(e, t, n); case 2: switch (a) { case 1: return ii(e, t, n); case 2: return yx(e, t, n); default: throw new V(`The axis is not within the rank of the tensor ${a}`) }case 3: switch (a) { case 1: return ii(e, t, n); case 2: return jo(e, [0, t, 0], [e.shape[0], n, e.shape[2]]); case 3: return yx(e, t, n); default: throw new V(`The axis is not within the rank of the tensor ${a}`) }case 4: switch (a) { case 1: return ii(e, t, n); case 2: return Ql(e, [0, t, 0, 0], [e.shape[0], n, e.shape[2], e.shape[3]]); case 3: return Ql(e, [0, 0, t, 0], [e.shape[0], e.shape[1], n, e.shape[3]]); case 4: return yx(e, t, n); default: throw new V(`The axis is not within the rank of the tensor ${a}`) }default: throw new V(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`) } }) } function u0(e, t = -1) { let n; return t < 0 && (n = e[0].rank, n !== 0 ? t = n : t = 0), t === e[0].rank && (t = -1), et(e, t) } function zI(e, t) { switch (e.rank) { case 1: return sw([e, t]); case 2: return iw([e, t], 0); case 3: return ow([e, t], 0); case 4: return lw([e, t], 0); default: throw new V(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`) } } function jx(e, t) { if (Array.isArray(t) || (t = [t]), e.rank !== t.length) throw new V(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`); return Mn(e, t) } function Af(e, t = 0, n = 1, a, r) { return uf(e, t, n, a, r) } function ur(e, t, n, a) { if (e.rank < 2 || t.rank < 2) throw new ze(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`); if (t.rank >= 3) { let r = e.shape.slice(-1)[0], s = t.shape.slice(-2)[0]; if (r !== s) throw new ze(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`) } if (e.rank === 2 && t.rank === 2) return tu.matMul({ a: e, b: t, transposeA: !1, transposeB: !1, bias: a ? Kx(e.rank, a, Ga()) : null, activation: n }); { let r = e.shape.slice(), s = r.pop(); e = W(e, [-1, s]); let i = t.shape.slice(), o = i.pop(), l = i.pop(), u = [...i, o], p = Array.from({ length: t.rank }, (c, h) => h === 0 ? t.rank - 2 : h <= t.rank - 2 ? h - 1 : h); t = W(De(t, p), [l, -1]); let d = [...r, ...u]; return W(tu.matMul({ a: e, b: t, transposeA: !1, transposeB: !1, bias: a ? Kx(e.rank, a, Ga()) : null, activation: n }), d) } } function V2(e, t, n) { return O(() => (Array.isArray(t) ? t = qe(t, "int32") : t = re(t, "int32"), fp(e, t, n))) } function Ed(e) { return z(e, e) } function Kx(e, t, n) { let a = t.shape; if (t.rank !== 1 && t.rank !== e) throw new V(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`); if (e === 5) { if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1, 1, 1]) : W(t, [1, a[3], a[0], a[1], a[2]]); if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, 1, 1, a[0]]) : W(t, [1].concat(a)) } else if (e === 4) { if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1, 1]) : W(t, [1, a[2], a[0], a[1]]); if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, 1, a[0]]) : W(t, [1].concat(a)) } else if (e === 3) { if (n === "channelsFirst") return a.length === 1 ? W(t, [1, a[0], 1]) : W(t, [1, a[1], a[0]]); if (n === "channelsLast") return a.length === 1 ? W(t, [1, 1, a[0]]) : W(t, [1].concat(a)) } else if (e < 3) return t; throw new V(`Unsupported input rank by biasAdd: ${t.rank}`) } function Ka(e, t, n) { return O(() => (n == null && (n = Ga()), Rt(n), X(e, Kx(e.rank, t, n)))) } function WG(e, t = 1) { if (t !== 1) throw new ze(`Support for alpha values other than 1 (${t}) is not implemented yet.`); return dp(e) } function BG(e) { return O(() => he(e, X(Lt(e), 1))) } function U2(e, t, n, a) { return O(() => Hw(e, t, n, a)) } function VG(e) { return O(() => { let t = X(.5, z(.2, e)); return an(t, 0, 1) }) } function _d(e, t, n = !1) { return n ? e() : t() } var UG = ["fanIn", "fanOut", "fanAvg"], GG = ["normal", "uniform", "truncatedNormal"]; function HG(e) { Yo(UG, "FanMode", e) } function qG(e) { Yo(GG, "Distribution", e) } var Ra = class extends ne.Serializable { fromConfigUsesCustomObjects() { return !1 } getConfig() { return {} } }, p0 = class extends Ra { apply(e, t) { return It(e, t) } }; p0.className = "Zeros"; ne.registerClass(p0); var Ff = class extends Ra { apply(e, t) { return On(e, t) } }; Ff.className = "Ones"; ne.registerClass(Ff); var c0 = class extends Ra { constructor(e) { if (super(), typeof e != "object") throw new V(`Expected argument of type ConstantConfig but got ${e}`); if (e.value === void 0) throw new V(`config must have value set but got ${e}`); this.value = e.value } apply(e, t) { return O(() => z(ve(this.value), On(e, t))) } getConfig() { return { value: this.value } } }; c0.className = "Constant"; ne.registerClass(c0); var d0 = class extends Ra { constructor(e) { super(), this.DEFAULT_MINVAL = -.05, this.DEFAULT_MAXVAL = .05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed } apply(e, t) { return Fs(e, this.minval, this.maxval, t, this.seed) } getConfig() { return { minval: this.minval, maxval: this.maxval, seed: this.seed } } }; d0.className = "RandomUniform"; ne.registerClass(d0); var h0 = class extends Ra { constructor(e) { super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = .05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed } apply(e, t) { if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`randomNormal does not support dType ${t}.`); return Af(e, this.mean, this.stddev, t, this.seed) } getConfig() { return { mean: this.mean, stddev: this.stddev, seed: this.seed } } }; h0.className = "RandomNormal"; ne.registerClass(h0); var m0 = class extends Ra { constructor(e) { super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = .05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed } apply(e, t) { if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`truncatedNormal does not support dType ${t}.`); return wf(e, this.mean, this.stddev, t, this.seed) } getConfig() { return { mean: this.mean, stddev: this.stddev, seed: this.seed } } }; m0.className = "TruncatedNormal"; ne.registerClass(m0); var f0 = class extends Ra { constructor(e) { super(), this.gain = e.gain != null ? e.gain : 1 } apply(e, t) { return O(() => { if (e.length !== 2 || e[0] !== e[1]) throw new V("Identity matrix initializer can only be used for 2D square matrices."); return z(this.gain, af(e[0])) }) } getConfig() { return { gain: this.gain } } }; f0.className = "Identity"; ne.registerClass(f0); function jG(e, t = "channelsLast") { let n, a; if (Rt(t), e.length === 2) n = e[0], a = e[1]; else if ([3, 4, 5].indexOf(e.length) !== -1) { if (t === "channelsFirst") { let r = ls(e, 2); n = e[1] * r, a = e[0] * r } else if (t === "channelsLast") { let r = ls(e, 0, e.length - 2); n = e[e.length - 2] * r, a = e[e.length - 1] * r } } else { let r = ls(e); n = Math.sqrt(r), a = Math.sqrt(r) } return [n, a] } var Wn = class extends Ra { constructor(e) { if (super(), e.scale < 0) throw new V(`scale must be a positive float. Got: ${e.scale}`); this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, HG(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, qG(this.distribution), this.seed = e.seed } apply(e, t) { let n = jG(e), a = n[0], r = n[1], s = this.scale; if (this.mode === "fanIn" ? s /= Math.max(1, a) : this.mode === "fanOut" ? s /= Math.max(1, r) : s /= Math.max(1, (a + r) / 2), this.distribution === "normal") { let i = Math.sqrt(s); if (t = t || "float32", t !== "float32" && t !== "int32") throw new ze(`${this.getClassName()} does not support dType ${t}.`); return wf(e, 0, i, t, this.seed) } else { let i = Math.sqrt(3 * s); return Fs(e, -i, i, t, this.seed) } } getConfig() { return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed } } }; Wn.className = "VarianceScaling"; ne.registerClass(Wn); var $f = class extends Wn { constructor(e) { super({ scale: 1, mode: "fanAvg", distribution: "uniform", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; $f.className = "GlorotUniform"; ne.registerClass($f); var Df = class extends Wn { constructor(e) { super({ scale: 1, mode: "fanAvg", distribution: "normal", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; Df.className = "GlorotNormal"; ne.registerClass(Df); var Rf = class extends Wn { constructor(e) { super({ scale: 2, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; Rf.className = "HeNormal"; ne.registerClass(Rf); var Mf = class extends Wn { constructor(e) { super({ scale: 2, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; Mf.className = "HeUniform"; ne.registerClass(Mf); var Of = class extends Wn { constructor(e) { super({ scale: 1, mode: "fanIn", distribution: "normal", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; Of.className = "LeCunNormal"; ne.registerClass(Of); var Pf = class extends Wn { constructor(e) { super({ scale: 1, mode: "fanIn", distribution: "uniform", seed: e == null ? null : e.seed }) } getClassName() { return Wn.className } }; Pf.className = "LeCunUniform"; ne.registerClass(Pf); var g0 = class extends Ra { constructor(e) { super(), this.DEFAULT_GAIN = 1, this.ELEMENTS_WARN_SLOW = 2e3, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed } apply(e, t) { return O(() => { if (e.length < 2) throw new ze("Shape must be at least 2D."); if (t !== "int32" && t !== "float32" && t !== void 0) throw new TypeError(`Unsupported data type ${t}.`); t = t; let n = w.sizeFromShape(e.slice(0, -1)), a = e[e.length - 1], r = n * a; r > this.ELEMENTS_WARN_SLOW && console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`); let s = [Math.max(a, n), Math.min(a, n)], i = Af(s, 0, 1, t, this.seed), o = Xw.qr(i, !1), l = o[0], u = o[1].flatten().stridedSlice([0], [Math.min(a, n) * Math.min(a, n)], [Math.min(a, n) + 1]); return l = z(l, u.sign()), n < a && (l = l.transpose()), z(ve(this.gain), l.reshape(e)) }) } getConfig() { return { gain: this.gain, seed: this.seed } } }; g0.className = "Orthogonal"; ne.registerClass(g0); var WI = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", heUniform: "HeUniform", identity: "Identity", leCunNormal: "LeCunNormal", leCunUniform: "LeCunUniform", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" }; function BI(e, t = {}) { return Td(e, ne.SerializationMap.getMap().classNameMap, t, "initializer") } function _t(e) { return o0(e) } function St(e) { if (typeof e == "string") { let t = e in WI ? WI[e] : e; if (t === "GlorotNormal") return new Df; if (t === "GlorotUniform") return new $f; if (t === "HeNormal") return new Rf; if (t === "HeUniform") return new Mf; if (t === "LeCunNormal") return new Of; if (t === "LeCunUniform") return new Pf; { let n = {}; return n.className = t, n.config = {}, BI(n) } } else return e instanceof Ra ? e : BI(e) } function Xx(e) { return Array.isArray(e) && Array.isArray(e[0]) } function cm(e) { return e.length === 0 ? [] : Array.isArray(e[0]) ? e : [e] } function Te(e) { let t; if (Array.isArray(e)) { if (e.length !== 1) throw new V(`Expected Tensor length to be 1; got ${e.length}`); t = e[0] } else t = e; return t } function Je(e) { if (Array.isArray(e) && Array.isArray(e[0])) { if (e.length === 1) return e = e, e[0]; throw new V(`Expected exactly 1 Shape; got ${e.length}`) } else return e } function dm(e) { let t = 0; for (let n of e) n.shape.length === 0 ? t += 1 : t += n.shape.reduce((a, r) => a * r); return t } var VI = "Variable", G2 = class { constructor(e, t = "float32", n = VI, a = !0, r = null) { this.dtype = t == null ? "float32" : t, this.shape = e.shape, this.id = P2(), n = n == null ? VI : n, this.originalName = z2(n), this.name = W2(this.originalName), this.trainable_ = a, this.constraint = r, this.val = Uw(e, this.trainable_, this.name, this.dtype) } read() { return this.assertNotDisposed(), this.val } write(e) { return this.assertNotDisposed(), KG(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this } dispose() { this.assertNotDisposed(), this.val.dispose() } assertNotDisposed() { if (this.val.isDisposed) throw new Error(`LayersVariable ${this.name} is already disposed.`) } get trainable() { return this.trainable_ } set trainable(e) { this.trainable_ = e, this.val.trainable = e } }; function KG(e, t) { if (e.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(e.shape) + " vs. " + JSON.stringify(t.shape)) } function Yx(e) { return e.map(t => t.read()) } function b0(e) { e.forEach(t => { t[0].write(t[1]) }) } var zt = class { constructor(e) { this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {} } }, Ha = class { constructor(e, t, n, a, r, s, i) { this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = a, this.callArgs = r, this.outputTensorIndex = i, this.id = P2(), s != null && (this.originalName = z2(s), this.name = W2(this.originalName)), this.rank = t.length } }, XG = 0, Lf = class { constructor(e, t) { this.callArgs = t, this.id = XG++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes; for (let n of e.inboundLayers) n != null && n.outboundNodes.push(this); e.outboundLayer.inboundNodes.push(this) } getConfig() { let e = []; for (let t of this.inboundLayers) t != null ? e.push(t.name) : e.push(null); return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices } } }, YG = 0, We = class extends ne.Serializable { constructor(e = {}) { super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = YG++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = []; let t = e.name; if (!t) { let n = this.getClassName(); t = Sr(n) + "_" + _f(n) } if (this.name = t, this.trainable_ = e.trainable == null ? !0 : e.trainable, e.inputShape != null || e.batchInputShape != null) { let n; if (e.batchInputShape != null) n = e.batchInputShape; else if (e.inputShape != null) { let r = null; e.batchSize != null && (r = e.batchSize), n = [r].concat(e.inputShape) } this.batchInputShape = n; let a = e.dtype; a == null && (a = e.inputDType), a == null && (a = "float32"), this.dtype = a } e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1 } static nodeKey(e, t) { return e.name + "_ib-" + t.toString() } getNodeAtIndex(e, t) { if (this.inboundNodes.length === 0) throw new sr(`The layer has never been called and thus has no defined ${t}.`); if (this.inboundNodes.length <= e) throw new V(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`); return this.inboundNodes[e] } getInputAt(e) { return Rn(this.getNodeAtIndex(e, "input").inputTensors) } getOutputAt(e) { return Rn(this.getNodeAtIndex(e, "output").outputTensors) } get input() { if (this.inboundNodes.length > 1) throw new Qr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`); if (this.inboundNodes.length === 0) throw new Qr(`Layer ${this.name} is not connected, no input to return.`); return Rn(this.getNodeAtIndex(0, "input").inputTensors) } get output() { if (this.inboundNodes.length === 0) throw new Qr(`Layer ${this.name} has no inbound nodes.`); if (this.inboundNodes.length > 1) throw new Qr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`); return Rn(this.getNodeAtIndex(0, "output").outputTensors) } get losses() { return this._losses } calculateLosses() { return this.losses.map(e => e()) } get updates() { return this._updates } get built() { return this._built } set built(e) { this._built = e } get trainable() { return this.trainable_ } set trainable(e) { this._trainableWeights.forEach(t => t.trainable = e), this.trainable_ = e } get trainableWeights() { return this.trainable_ ? this._trainableWeights.filter(e => e.trainable) : [] } set trainableWeights(e) { this._trainableWeights = e } get nonTrainableWeights() { return this.trainable ? this._trainableWeights.filter(e => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights) } set nonTrainableWeights(e) { this._nonTrainableWeights = e } get weights() { return this.trainableWeights.concat(this.nonTrainableWeights) } get stateful() { return this._stateful } resetStates() { if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.") } assertInputCompatibility(e) { let t = it(e); if (this.inputSpec == null || this.inputSpec.length === 0) return; let n = it(this.inputSpec); if (t.length !== n.length) throw new V(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`); for (let a = 0; a < t.length; a++) { let r = t[a], s = n[a]; if (s == null) continue; let i = r.rank; if (s.ndim != null && i !== s.ndim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`); if (s.maxNDim != null && i > s.maxNDim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`); if (s.minNDim != null && i < s.minNDim) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`); if (s.dtype != null && r.dtype !== s.dtype) throw new V(`Input ${a} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`); if (s.axes) { let o = r.shape; for (let l in s.axes) { let u = Number(l), p = s.axes[l], d = u >= 0 ? o[u] : o[o.length + u]; if (p != null && [p, null].indexOf(d) === -1) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${p} but got shape ${o}.`) } } if (s.shape != null) for (let o = 0; o < s.shape.length; ++o) { let l = s.shape[o], u = r.shape[o]; if (l != null && u != null && l !== u) throw new V(`Input ${a} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`) } } } call(e, t) { return e } invokeCallHook(e, t) { this._callHook != null && this._callHook(e, t) } setCallHook(e) { this._callHook = e } clearCallHook() { this._callHook = null } apply(e, t) { t = t || {}, this.assertNotDisposed(); let n = it(e), a = QG(e), r = eH(e); if (a === r) throw new V("Arguments to apply() must be all SymbolicTensors or all Tensors"); return si(this.name, () => { if (!this.built) { this.assertInputCompatibility(e); let s = []; for (let i of it(e)) s.push(i.shape); this.build(Rn(s)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && r && (this._refCount = 1) } if (this.assertInputCompatibility(e), r) { let s = this.call(e, t); this.supportsMasking && this.setMaskMetadata(e, s); let i = it(s), o = []; for (let l of i) n.indexOf(l) !== -1 && (l = l.clone()), o.push(l); if (s = Rn(o), this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet."); return s } else { let s = ZG(e), i = this.computeOutputShape(s), o, l = JG(e); if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? s[0] : s), i != null && i.length > 0 && Array.isArray(i[0]) ? o = i.map((u, p) => new Ha(l, u, this, it(e), t, this.name, p)) : o = new Ha(l, i, this, it(e), t, this.name), this.addInboundNode(e, o, null, null, s, i, t), this._refCount++, this.activityRegularizer != null) throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet."); return o } }) } warnOnIncompatibleInputShape(e) { if (this.batchInputShape != null) if (e.length !== this.batchInputShape.length) console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`); else { let t = !1; this.batchInputShape.forEach((n, a) => { n != null && e[a] != null && e[a] !== n && (t = !0) }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`) } } get outputShape() { if (this.inboundNodes == null || this.inboundNodes.length === 0) throw new Qr(`The layer ${this.name} has never been called and thus has no defined output shape.`); let e = []; for (let t of this.inboundNodes) { let n = JSON.stringify(t.outputShapes); e.indexOf(n) === -1 && e.push(n) } if (e.length === 1) { let t = this.inboundNodes[0].outputShapes; return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t } else throw new Qr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`) } countParams() { if (!this.built) throw new sr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`); return dm(this.weights) } build(e) { this.built = !0 } getWeights(e = !1) { return Yx(e ? this.trainableWeights : this.weights) } setWeights(e) { O(() => { let t = this.weights; if (t.length !== e.length) throw new V(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`); if (t.length === 0) return; let n = [], a = Yx(t); for (let r = 0; r < a.length; ++r) { let s = a[r], i = t[r], o = e[r]; if (!w.arraysEqual(s.shape, o.shape)) throw new V(`Layer weight shape ${s.shape} not compatible with provided weight shape ${o.shape}`); n.push([i, o]) } b0(n) }) } addWeight(e, t, n, a, r, s, i, o) { if (this._addedWeightNames.indexOf(e) !== -1) throw new V(`Duplicate weight name ${e} for layer ${this.name}`); this._addedWeightNames.push(e), n == null && (n = "float32"), this.fastWeightInitDuringBuild && (a = o != null ? o() : St("zeros")); let l = a.apply(t, n), u = new G2(l, n, e, s, i); return l.dispose(), r != null && this.addLoss(() => r.apply(u.read())), s == null && (s = !0), s ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u } setFastWeightInitDuringBuild(e) { this.fastWeightInitDuringBuild = e } addLoss(e) { e == null || Array.isArray(e) && e.length === 0 || (e = it(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e)) } computeOutputShape(e) { return e } computeMask(e, t) { if (!this.supportsMasking) { if (t != null) if (Array.isArray(t)) t.forEach(n => { if (n != null) throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`) }); else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`); return null } return t } setMaskMetadata(e, t, n) { if (!this.supportsMasking) return; let a = this.computeMask(e, n), r = it(t), s = it(a); if (r.length !== s.length) throw new Error(`${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`); for (let i = 0; i < r.length; i++)r[i].kerasMask = s[i] } addInboundNode(e, t, n, a, r, s, i = null) { let o = it(e); t = it(t), n = it(n), a = it(a), r = cm(r), s = cm(s); let l = [], u = [], p = []; for (let d of o) l.push(d.sourceLayer), u.push(d.nodeIndex), p.push(d.tensorIndex); new Lf({ outboundLayer: this, inboundLayers: l, nodeIndices: u, tensorIndices: p, inputTensors: o, outputTensors: t, inputMasks: n, outputMasks: a, inputShapes: r, outputShapes: s }, i); for (let d = 0; d < t.length; d++)t[d].sourceLayer = this, t[d].nodeIndex = this.inboundNodes.length - 1, t[d].tensorIndex = d } getConfig() { let e = { name: this.name, trainable: this.trainable }; return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e } disposeWeights() { return this.weights.forEach(e => e.dispose()), this.weights.length } assertNotDisposed() { if (this._refCount === 0) throw new Error(`Layer '${this.name}' is already disposed.`) } dispose() { if (!this.built) throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`); if (this._refCount === null) throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`); this.assertNotDisposed(); let e = 0; return --this._refCount === 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e } } }; function ZG(e) { e = it(e); let t = []; for (let n of e) t.push(n.shape); return Rn(t) } function JG(e) { return "float32" } function H2(e, t, n) { if ((t == null || n != null && n > 0) && (t = e.sourceLayer, n = e.nodeIndex), t.inboundNodes.length === 0) return [e]; { let a = t.inboundNodes[n]; if (a.inboundLayers.length === 0) return a.inputTensors; { let r = []; for (let s = 0; s < a.inboundLayers.length; s++) { let i = a.inputTensors[s], o = a.inboundLayers[s], l = a.nodeIndices[s], u = H2(i, o, l); for (let p of u) r.indexOf(p) === -1 && r.push(p) } return r } } } function QG(e) { let t = !0; for (let n of it(e)) if (!(n instanceof Ha)) { t = !1; break } return t } function eH(e) { let t = !0; for (let n of it(e)) if (n instanceof Ha) { t = !1; break } return t } var bp = class extends We { constructor(e) { if (super({ dtype: e.dtype, name: e.name != null ? e.name : _f("input").toString() }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null) throw new V("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time."); let t = e.batchInputShape; if (t == null) { if (e.inputShape == null) throw new V("An InputLayer should be passed either a `batchInputShape` or an `inputShape`."); t = [e.batchSize].concat(e.inputShape) } else if (e.batchSize != null) throw new V("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer."); let n = e.dtype || "float32"; this.batchInputShape = t, this.dtype = n, this.inputSpec = [{ shape: t }]; let a = new Ha(this.dtype, this.batchInputShape, this, [], {}, this.name); a.nodeIndex = 0, a.tensorIndex = 0, new Lf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [a], outputTensors: [a], inputMasks: [null], outputMasks: [null], inputShapes: [t], outputShapes: [t] }) } apply(e, t) { throw new V(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`) } dispose() { return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 } } getConfig() { return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name } } }; bp.className = "InputLayer"; ne.registerClass(bp); function q2(e) { if (e.batchShape == null && e.shape == null) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension."); if (e.batchShape != null && e.shape != null) throw new V("Please provide either a `shape` or `batchShape` argument to Input, but not both."); let t = e.batchShape; e.shape != null && t == null && (t = [null].concat(e.shape)); let n = e.dtype; return n == null && (n = "float32"), new bp({ batchInputShape: t, name: e.name, dtype: n, sparse: e.sparse }).inboundNodes[0].outputTensors[0] } function tH(e, t) { if (e.dtype == null || e.dtype === t.dtype) return t; try { return re(t, e.dtype) } catch (n) { throw new V(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`) } } var Wl = class j2 { constructor(t) { if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof j2) for (let n in t.id2Value) this.id2Value[n] = t.id2Value[n], n in t.id2Mask && (this.id2Mask[n] = t.id2Mask[n]); else { if (t == null) return; for (let n of t) this.add(n.key, n.value) } } add(t, n, a) { if (this.id2Value[t.id] == null) this.id2Value[t.id] = tH(t, n), this.name2Id[t.name] = t.id, a != null && (this.id2Mask[t.id] = a); else throw new V(`Duplicate key: name=${t.name}, id=${t.id}`); return this } addFeed(t) { this.add(t.key, t.value) } hasKey(t) { return this.id2Value[t.id] != null } names() { return Object.keys(this.name2Id) } getValue(t) { if (t instanceof Ha) { if (this.id2Value[t.id] == null) throw new V(`Nonexistent key: ${t.name}`); return this.id2Value[t.id] } else { let n = this.name2Id[t]; if (n == null) throw new V(`Feed dict has no SymbolicTensor name: ${t}`); return this.id2Value[n] } } getMask(t) { if (t instanceof Ha) { if (this.id2Value[t.id] == null) throw new V(`Nonexistent key: ${t.name}`); return this.id2Mask[t.id] } else { let n = this.name2Id[t]; if (n == null) throw new V(`Feed dict has no SymbolicTensor name: ${t}`); return this.id2Mask[n] } } disposeMasks() { this.id2Mask != null && Ee(this.id2Mask) } }, hm = new R2, mm = new R2; function nH(e) { hm != null && hm.setMaxEntries(e), mm != null && mm.setMaxEntries(e) } function oc(e, t, n, a) { let r = n == null ? !1 : n.training, s = Array.isArray(e), i = s ? e : [e], o = i.map(m => m.name), l = [], u = t.names(); for (let m of o) u.indexOf(m) !== -1 ? l.push(t.getValue(m)) : l.push(null); a != null && (a.maxNumTensors = -1 / 0, a.minNumTensors = 1 / 0); let p = o.join(",") + "|" + t.names().sort().join(","), d = hm.get(p), c; if (d == null) { let m = aH(i, t); d = m.sorted, c = m.recipientCounts, hm.put(p, d), mm.put(p, c) } c = {}, r || Object.assign(c, mm.get(p)); let h = new Wl(t); for (let m = 0; m < d.length; ++m) { if (a != null) { let F = lm().numTensors; F > a.maxNumTensors && (a.maxNumTensors = F), F < a.minNumTensors && (a.minNumTensors = F) } let f = d[m], g = f.sourceLayer; if (g instanceof bp) continue; let b = [], y = [], x = [], v = !1; for (let F of f.inputs) { let D = h.getValue(F), $ = h.getMask(F); b.push(D), y.push($), $ != null && (v = !0), r || (c[F.name]--, c[F.name] === 0 && !t.hasKey(F) && o.indexOf(F.name) === -1 && !D.isDisposed && F.sourceLayer.stateful !== !0 && x.push(D)) } v && (n = n || {}, n.mask = y[0]); let I = it(g.apply(b, n)), N = null; g.supportsMasking && (N = g.computeMask(b, y)); let C = sH(f), _ = Array.isArray(C) ? C : [C]; for (let F = 0; F < _.length; ++F) { h.hasKey(_[F]) || h.add(_[F], I[F], Array.isArray(N) ? N[0] : N); let D = o.indexOf(_[F].name); D !== -1 && (l[D] = I[F]) } r || Ee(x) } return h.disposeMasks(), s ? l : l[0] } function aH(e, t) { w.assert(e != null && e.length > 0, () => "Expected at least one fetch, got none"); let n = [], a = {}; if (e.length === 1) { let r = UI(e[0], t); n = r.sorted, a = r.recipientMap } else { let r = new Set; for (let s of e) { let { sorted: i, recipientMap: o } = UI(s, t); for (let l of i) r.has(l.name) || (n.push(l), r.add(l.name)); for (let l in o) a[l] == null && (a[l] = new Set), o[l].forEach(u => a[l].add(u)) } } return { sorted: n, recipientCounts: rH(a) } } function rH(e) { let t = {}; for (let n in e) t[n] = e[n].size; return t } function UI(e, t) { let n = new Set, a = [], r = {}; for (let o of t.names()) n.add(o); let s = [], i = []; for (s.push(e); s.length > 0;) { let o = s[s.length - 1]; if (n.has(o.name)) { s.pop(); continue } let l = i[i.length - 1] === s.length - 1; if (o.inputs.length === 0 || l) s.pop(), a.push(o), n.add(o.name), l && i.pop(); else { i.push(s.length - 1); for (let u of o.inputs) r[u.name] == null && (r[u.name] = new Set), r[u.name].add(o.name), !n.has(u.name) && s.push(u) } } return { sorted: a, recipientMap: r } } function sH(e) { let t; if (e.sourceLayer.inboundNodes.length === 1) t = e.sourceLayer.output; else { let n = null; for (let a = 0; a < e.sourceLayer.inboundNodes.length; ++a)for (let r of e.sourceLayer.inboundNodes[a].outputTensors) if (r.id === e.id) { n = a; break } t = e.sourceLayer.getOutputAt(n) } return t } var iH = G(); iH.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, nH); var K2 = {}; _e(K2, { maxNorm: () => oH, minMaxNorm: () => pH, nonNeg: () => uH, unitNorm: () => lH }); function y0(e, t) { return O(() => hn(fe(z(e, e), t, !0))) } var Ad = class extends ne.Serializable { getConfig() { return {} } }, x0 = class extends Ad { constructor(e) { super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis } apply(e) { return O(() => { let t = y0(e, this.axis), n = an(t, 0, this.maxValue); return z(e, he(n, X(jt(), t))) }) } getConfig() { return { maxValue: this.maxValue, axis: this.axis } } }; x0.className = "MaxNorm"; ne.registerClass(x0); var v0 = class extends Ad { constructor(e) { super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis } apply(e) { return O(() => he(e, X(jt(), y0(e, this.axis)))) } getConfig() { return { axis: this.axis } } }; v0.className = "UnitNorm"; ne.registerClass(v0); var w0 = class extends Ad { apply(e) { return Ke(e) } }; w0.className = "NonNeg"; ne.registerClass(w0); var k0 = class extends Ad { constructor(e) { super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis } apply(e) { return O(() => { let t = y0(e, this.axis), n = X(z(this.rate, an(t, this.minValue, this.maxValue)), z(1 - this.rate, t)); return z(e, he(n, X(jt(), t))) }) } getConfig() { return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis } } }; k0.className = "MinMaxNorm"; ne.registerClass(k0); var GI = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" }; function Xt(e) { return o0(e) } function HI(e, t = {}) { return Td(e, ne.SerializationMap.getMap().classNameMap, t, "constraint") } function Yt(e) { if (e == null) return null; if (typeof e == "string") { let t = { className: e in GI ? GI[e] : e, config: {} }; return HI(t) } else return e instanceof Ad ? e : HI(e) } function oH(e) { return new x0(e) } function lH(e) { return new v0(e) } function uH() { return new w0 } function pH(e) { return new k0(e) } var X2 = {}; _e(X2, { constant: () => hH, glorotNormal: () => vH, glorotUniform: () => xH, heNormal: () => wH, heUniform: () => kH, identity: () => bH, leCunNormal: () => IH, leCunUniform: () => SH, ones: () => dH, orthogonal: () => NH, randomNormal: () => fH, randomUniform: () => mH, truncatedNormal: () => gH, varianceScaling: () => yH, zeros: () => cH }); function cH() { return new p0 } function dH() { return new Ff } function hH(e) { return new c0(e) } function mH(e) { return new d0(e) } function fH(e) { return new h0(e) } function gH(e) { return new m0(e) } function bH(e) { return new f0(e) } function yH(e) { return new Wn(e) } function xH(e) { return new $f(e) } function vH(e) { return new Df(e) } function wH(e) { return new Rf(e) } function kH(e) { return new Mf(e) } function IH(e) { return new Of(e) } function SH(e) { return new Pf(e) } function NH(e) { return new g0(e) } var Y2 = {}; _e(Y2, { Layer: () => We, RNN: () => Pr, RNNCell: () => $d, activation: () => tq, add: () => pq, alphaDropout: () => jq, average: () => cq, averagePooling1d: () => R1, averagePooling2d: () => M1, averagePooling3d: () => O1, avgPool1d: () => vq, avgPool2d: () => kq, avgPool3d: () => Sq, avgPooling1d: () => wq, avgPooling2d: () => Iq, avgPooling3d: () => Nq, batchNormalization: () => bq, bidirectional: () => zq, categoryEncoding: () => Jq, centerCrop: () => Yq, concatenate: () => dq, conv1d: () => q6, conv2d: () => j6, conv2dTranspose: () => K6, conv3d: () => X6, conv3dTranspose: () => Y6, convLstm2d: () => Mq, convLstm2dCell: () => Oq, cropping2D: () => J6, dense: () => nq, depthwiseConv2d: () => eq, dot: () => gq, dropout: () => aq, elu: () => W6, embedding: () => uq, flatten: () => sq, gaussianDropout: () => qq, gaussianNoise: () => Hq, globalAveragePooling1d: () => Tq, globalAveragePooling2d: () => Cq, globalMaxPool1d: () => Bq, globalMaxPool2d: () => Vq, globalMaxPooling1d: () => YC, globalMaxPooling2d: () => ZC, gru: () => _q, gruCell: () => Aq, input: () => mC, inputLayer: () => z6, layerNormalization: () => yq, leakyReLU: () => V6, lstm: () => Fq, lstmCell: () => $q, masking: () => Kq, maxPool1d: () => Uq, maxPool2d: () => Gq, maxPooling1d: () => JC, maxPooling2d: () => QC, maxPooling3d: () => Eq, maximum: () => hq, minimum: () => mq, multiply: () => fq, permute: () => lq, prelu: () => U6, randomWidth: () => Qq, reLU: () => B6, repeatVector: () => iq, rescaling: () => Xq, reshape: () => oq, resizing: () => Zq, rnn: () => Pq, separableConv2d: () => Z6, simpleRNN: () => Dq, simpleRNNCell: () => Rq, softmax: () => G6, spatialDropout1d: () => rq, stackedRNNCells: () => Lq, thresholdedReLU: () => H6, timeDistributed: () => Wq, upSampling2d: () => Q6, zeroPadding2d: () => xq }); async function Jr(e) { if (e == null) return; let t = [], n = [], a = []; for (let r in e) { let s = e[r]; if (typeof s != "number") { let i = s; t.push(i.data()), n.push(r), a.push(i) } } if (t.length > 0) { let r = await Promise.all(t); for (let s = 0; s < r.length; ++s)e[n[s]] = r[s][0]; Ee(a) } } function Z2(e) { if (e != null) for (let t in e) { let n = e[t]; typeof n != "number" && n.dispose() } } var qI; (function (e) { e[e.SILENT = 0] = "SILENT", e[e.VERBOSE = 1] = "VERBOSE" })(qI || (qI = {})); var TH = 125, au = class { constructor() { this.validationData = null } setParams(e) { this.params = e } async onEpochBegin(e, t) { } async onEpochEnd(e, t) { } async onBatchBegin(e, t) { } async onBatchEnd(e, t) { } async onTrainBegin(e) { } async onTrainEnd(e) { } setModel(e) { } }, J2 = class { constructor(e, t = 10) { e == null && (e = []), this.callbacks = e, this.queueLength = t } append(e) { this.callbacks.push(e) } setParams(e) { for (let t of this.callbacks) t.setParams(e) } setModel(e) { for (let t of this.callbacks) t.setModel(e) } async onEpochBegin(e, t) { t == null && (t = {}); for (let n of this.callbacks) await n.onEpochBegin(e, t) } async onEpochEnd(e, t) { t == null && (t = {}); for (let n of this.callbacks) await n.onEpochEnd(e, t) } async onBatchBegin(e, t) { t == null && (t = {}); for (let n of this.callbacks) await n.onBatchBegin(e, t) } async onBatchEnd(e, t) { t == null && (t = {}); for (let n of this.callbacks) await n.onBatchEnd(e, t) } async onTrainBegin(e) { e == null && (e = {}); for (let t of this.callbacks) await t.onTrainBegin(e) } async onTrainEnd(e) { e == null && (e = {}); for (let t of this.callbacks) await t.onTrainEnd(e) } }, CH = class extends au { constructor() { super() } async onEpochBegin(e) { this.seen = 0, this.totals = {} } async onBatchEnd(e, t) { t == null && (t = {}); let n = t.size == null ? 0 : t.size; this.seen += n; for (let a in t) { let r = t[a]; if (typeof r == "number") this.totals.hasOwnProperty(a) || (this.totals[a] = 0), this.totals[a] = this.totals[a] + r * n; else { let s; a in this.totals ? s = this.totals[a] : this.totals[a] = 0; let i = O(() => X(this.totals[a], z(r, n))); this.totals[a] = i, s != null && s.dispose() } } } async onEpochEnd(e, t) { if (t != null) for (let n of this.params.metrics) this.totals[n] != null && (typeof this.totals[n] == "number" ? t[n] = this.totals[n] / this.seen : O(() => { let a = z(he(1, this.seen), this.totals[n]); t[n] = a, this.totals[n].dispose(), Ht(t[n]) })) } }, Q2 = class extends au { async onTrainBegin(e) { this.epoch = [], this.history = {} } async onEpochEnd(e, t) { t == null && (t = {}), this.epoch.push(e); for (let n in t) this.history[n] == null && (this.history[n] = []), this.history[n].push(t[n]) } async syncData() { let e = [], t = [], n = []; for (let r in this.history) { let s = this.history[r]; for (let i = 0; i < s.length; ++i)if (typeof s[i] != "number") { let o = s[i]; e.push(o.data()), t.push(r), n.push(i) } } let a = await Promise.all(e); for (let r = 0; r < a.length; ++r)this.history[t[r]][n[r]].dispose(), this.history[t[r]][n[r]] = a[r][0] } }, eC = class extends au { constructor(e, t) { if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || s0, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = TH), this.yieldEvery === "never" && e.onYield != null) throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback"); w.isNumber(this.yieldEvery) && (this.maybeWait = TG(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield } async maybeWait(e, t, n) { let a = []; this.yield != null && (await Jr(n), a.push(this.yield(e, t, n))), a.push(this.nextFrameFunc()), await Promise.all(a) } async onEpochBegin(e, t) { this.currentEpoch = e, this.epochBegin != null && (await Jr(t), await this.epochBegin(e, t)) } async onEpochEnd(e, t) { let n = []; this.epochEnd != null && (await Jr(t), n.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && n.push(this.nextFrameFunc()), await Promise.all(n) } async onBatchBegin(e, t) { this.batchBegin != null && (await Jr(t), await this.batchBegin(e, t)) } async onBatchEnd(e, t) { let n = []; this.batchEnd != null && (await Jr(t), n.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? n.push(this.nextFrameFunc()) : w.isNumber(this.yieldEvery) && n.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(n) } async onTrainBegin(e) { this.trainBegin != null && (await Jr(e), await this.trainBegin(e)) } async onTrainEnd(e) { this.trainEnd != null && (await Jr(e), await this.trainEnd(e)) } }; function tC(e, t) { return e == null && (e = {}), e instanceof au ? [e] : Array.isArray(e) && e[0] instanceof au ? e : it(e).map(n => new eC(n, t)) } var I0 = class er { constructor() { } static registerCallbackConstructor(t, n) { w.assert(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), er.checkForDuplicate(n), er.constructors[t] == null && (er.constructors[t] = []), er.constructors[t].push(n) } static checkForDuplicate(t) { for (let n in er.constructors) er.constructors[+n].forEach(a => { if (a === t) throw new V("Duplicate callback constructor.") }) } static clear() { er.constructors = {} } static createCallbacks(t) { let n = []; for (let a in er.constructors) { let r = +a; t >= r && n.push(...er.constructors[r]) } return n.map(a => new a) } }; I0.constructors = {}; function nC(e, t, n, a, r, s, i, o, l) { let u = new Q2, p = [new CH, ...I0.createCallbacks(t)]; e != null && p.push(...e), p.push(u); let d = new J2(p); return d.setParams({ epochs: n, initialEpoch: a, samples: r, steps: s, batchSize: i, verbose: t, doValidation: o, metrics: l }), { callbackList: d, history: u } } function Ba(e, t = {}, n = !1) { return Td(e, ne.SerializationMap.getMap().classNameMap, t, "layer", n) } function fm(e, t) { return O(() => { e.dtype !== "float32" && (e = re(e, "float32")); let n = fe(Ed(e), t, !0), a = yn(n.shape, jt()), r = hn(mr(n, a)); return he(e, r) }) } function Zo(e, t) { return O(() => Et(Ed(pe(t, e)), -1)) } function zf(e, t) { return O(() => Et(Lt(pe(t, e)), -1)) } function yp(e, t) { return O(() => { let n = pe(e, t), a = an(Lt(e), jt(), Number.MAX_VALUE), r = Lt(he(n, a)); return z(100, Et(r, -1)) }) } function EH(e, t) { return O(() => { let n = an(t, jt(), Number.MAX_VALUE), a = ta(X(1, n)), r = an(e, jt(), Number.MAX_VALUE), s = ta(X(1, r)); return Et(Ed(pe(a, s)), -1) }) } function _H(e, t) { return O(() => { let n = mr(0, pe(1, z(e, t))); return Et(Ed(n), -1) }) } function AH(e, t) { return O(() => { let n = mr(0, pe(1, z(e, t))); return Et(n, -1) }) } function FH(e, t) { return O(() => { let n = fe(z(e, t), -1), a = fa(z(pe(1, e), t), -1); return mr(0, X(1, pe(a, n))) }) } function $H(e, t) { return O(() => { let n = Math.log(2), a = pe(t, e), r = pe(X(a, qo(z(-2, a))), n); return Et(r, -1) }) } function Ec(e, t, n = !1) { return O(() => { if (n) t = ja(t); else { let a = fe(t, t.shape.length - 1, !0); t = he(t, a) } return t = an(t, jt(), 1 - jt()), yt(fe(z(re(e, "float32"), ta(t)), t.shape.length - 1)) }) } function gm(e, t, n = !1) { return O(() => { let a = re(mp(LG(e)), "int32"); t = an(t, jt(), 1 - jt()); let r = t.shape, s = W(Zl(a, r[r.length - 1]), r); return Ec(s, t, n) }) } function DH(e, t) { if (!w.arraysEqual(e.shape, t.shape)) throw new V(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`); return O(() => { let n = Ke(t), a = yt(Lt(t)); return X(pe(n, z(t, e)), gd(mn(a))) }) } function Wf(e, t) { return O(() => { let n; return n = an(t, jt(), 1 - jt()), n = ta(he(n, pe(1, n))), Et(DH(e, n), -1) }) } function RH(e, t) { return O(() => { let n = an(e, jt(), 1), a = an(t, jt(), 1); return fe(z(e, ta(he(n, a))), -1) }) } function MH(e, t) { return O(() => { let n = ta(X(jt(), t)); return Et(pe(t, z(e, n)), -1) }) } function S0(e, t) { return O(() => { let n = fm(e, -1), a = fm(t, -1), r = z(n, a); return yt(fe(r, -1)) }) } var bm = { meanSquaredError: Zo, meanAbsoluteError: zf, meanAbsolutePercentageError: yp, meanSquaredLogarithmicError: EH, squaredHinge: _H, hinge: AH, categoricalHinge: FH, logcosh: $H, categoricalCrossentropy: Ec, sparseCategoricalCrossentropy: gm, binaryCrossentropy: Wf, kullbackLeiblerDivergence: RH, poisson: MH, cosineProximity: S0 }; function xx(e) { if (typeof e == "string") { if (e in bm) return bm[e]; let t = `Unknown loss ${e}`; throw e.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new V(t) } else return e } function N0(e, t) { return O(() => { let n = z(.5, na(t)), a = lr(Tn(t, n), e.dtype); return Et(ea(e, a), -1) }) } function T0(e, t) { return O(() => lr(ea(hi(e, -1), hi(t, -1)), "float32")) } function aC(e, t) { return O(() => re(fe(Fa(ea(e, 1), ea(t, 1))), "float32")) } function OH(e, t) { return O(() => re(fe(Fa(ea(e, 1), ea(t, 0))), "float32")) } function PH(e, t) { return O(() => re(fe(Fa(ea(e, 0), ea(t, 1))), "float32")) } function rC(e, t) { return O(() => { let n = aC(e, t), a = PH(e, t), r = X(n, a); return re(nn(Tn(r, 0), he(n, r), 0), "float32") }) } function LH(e, t) { return O(() => { let n = aC(e, t), a = OH(e, t), r = X(n, a); return re(nn(Tn(r, 0), he(n, r), 0), "float32") }) } function sC(e, t) { return Wf(e, t) } function iC(e, t) { return e.rank === t.rank && (e = Ds(e, [e.rank - 1])), t = hi(t, -1), t.dtype !== e.dtype && (t = re(t, e.dtype)), re(ea(e, t), "float32") } var zH = Zo, WH = Zo, BH = zf, VH = zf, UH = yp, GH = yp, C0 = Ec, HH = S0, oC = gm, ym = { binaryAccuracy: N0, categoricalAccuracy: T0, precision: rC, categoricalCrossentropy: C0, sparseCategoricalCrossentropy: oC, mse: zH, MSE: WH, mae: BH, MAE: VH, mape: UH, MAPE: GH, cosine: HH }; function qH(e) { if (typeof e == "string" && e in ym) return ym[e]; if (typeof e != "string" && e != null) return e; throw new V(`Unknown metric ${e}`) } function Lh(e) { if (ar(e !== null, `Unknown LossOrMetricFn ${e}`), typeof e == "string") return e; { let t; for (let n of Object.keys(bm)) if (bm[n] === e) { t = n; break } if (t !== void 0) return t; for (let n of Object.keys(ym)) if (ym[n] === e) { t = n; break } return t !== void 0 ? t : e.name } } function jH(e) { let t = { Adagrad: () => Ys.adagrad(.01), Adadelta: () => Ys.adadelta(1, .95, jt()), Adam: () => Ys.adam(.001, .9, .999, jt()), Adamax: () => Ys.adamax(.002, .9, .999, jt(), 0), RMSProp: () => Ys.rmsprop(.001, .9, 0, jt()), SGD: () => Ys.sgd(.01) }; if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t) return t[e](); throw new V(`Unknown Optimizer ${e}`) } function jI(e, t, n = !1) { if (e == null || typeof e != "object" || Object.getPrototypeOf(e) !== Object.prototype || !Zx(e)) throw new Error("User-defined metadata is expected to be a JSON object, but is not."); if (n) { let a = JSON.stringify(e); a.length > 1048576 && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${a.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`) } } function Zx(e) { if (e === null) return !0; if (typeof e == "object") if (Object.getPrototypeOf(e) === Object.prototype) { let t = Object.keys(e); for (let n of t) if (typeof n != "string" || !Zx(e[n])) return !1; return !0 } else if (Array.isArray(e)) { for (let t of e) if (!Zx(t)) return !1; return !0 } else return !1; else { let t = typeof e; return t === "string" || t === "number" || t === "boolean" } } function KH(e, t, n, a = console.log) { let r = YH(e), s = ["Layer (type)", "Input Shape", "Output shape", "Param #"]; r ? (t = t || 90, n = n || [.32, .61, .89, 1]) : (t = t || 115, n = n || [.24, .48, .7, .8, 1]), n[n.length - 1] <= 1 && (n = n.map(p => Math.floor(t * p))); let i; if (!r) { s.push("Receives inputs"), i = []; for (let p in e.nodesByDepth) i.push(...e.nodesByDepth[p]) } a("_".repeat(t)), xm(s, n, a), a("=".repeat(t)); let o = e.layers; for (let p = 0; p < o.length; ++p)r ? ZH(o[p], n, a) : JH(o[p], n, i, a), a((p === o.length - 1 ? "=" : "_").repeat(t)); e.checkTrainableWeightsConsistency(); let l = XH(e), u = dm(e.nonTrainableWeights); a(`Total params: ${l + u}`), a(`Trainable params: ${l}`), a(`Non-trainable params: ${u}`), a("_".repeat(t)) } function XH(e) { let t; return e.collectedTrainableWeights != null ? t = dm(e.collectedTrainableWeights) : t = dm(e.trainableWeights), t } function YH(e) { let t = !0, n = [], a = []; for (let r in e.nodesByDepth) n.push(e.nodesByDepth[r]); for (let r of n) { if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) { t = !1; break } a.push(...r) } if (t) for (let r of e.layers) { let s = !1; for (let i of r.inboundNodes) if (a.indexOf(i) !== -1) if (s) { t = !1; break } else s = !0; if (!t) break } return t } function xm(e, t, n = console.log) { let a = ""; for (let r = 0; r < e.length; ++r)r > 0 && (a = a.slice(0, a.length - 1) + " "), a += e[r], a = a.slice(0, t[r]), a += " ".repeat(t[r] - a.length); n(a) } function ZH(e, t, n) { let a, r; try { r = e.inboundNodes.map(l => JSON.stringify(l.inputShapes)).join(",") } catch (l) { r = "multiple" } try { a = JSON.stringify(e.outputShape) } catch (l) { a = "multiple" } let s = e.name, i = e.getClassName(), o = [`${s} (${i})`, r, a, e.countParams().toString()]; xm(o, t, n) } function JH(e, t, n, a) { let r, s; try { s = e.inboundNodes.map(d => JSON.stringify(d.inputShapes)).join(",") } catch (d) { s = "multiple" } try { r = JSON.stringify(e.outputShape) } catch (d) { r = "multiple" } let i = []; for (let d of e.inboundNodes) if (!(n != null && n.length > 0 && n.indexOf(d) === -1)) for (let c = 0; c < d.inboundLayers.length; ++c) { let h = d.inboundLayers[c].name, m = d.nodeIndices[c], f = d.tensorIndices[c]; i.push(`${h}[${m}][${f}]`) } let o = e.name, l = e.getClassName(), u = i.length === 0 ? "" : i[0], p = [`${o} (${l})`, s, r, e.countParams().toString(), u]; xm(p, t, a); for (let d = 1; d < i.length; ++d)xm(["", "", "", "", i[d]], t, a) } function lC(e, t, n) { return (e === "inboundNodes" || e === "outputLayers" || e === "inputLayers") && t === 0 && typeof n == "string" } function _c(e, t) { if (e === null) return null; if (typeof e == "string") return Qs(e); if (typeof e == "number" || typeof e == "boolean") return e; if (e instanceof Array) { let n = [], a = e.length; for (let r = 0; r < a; ++r) { let s = e[r]; lC(t, r, s) ? n.push(s) : n.push(_c(s, t)) } return n } else { let n = {}; for (let a of Object.keys(e)) { let r = e[a]; if (a === "name" && typeof r == "string") n[a] = r; else { let s = Qs(a); n[s] = _c(r, s) } } return n } } function Jx(e, t) { if (e == null) return null; if (typeof e == "string") return Sr(e); if (typeof e == "number" || typeof e == "boolean") return e; if (e instanceof Array) { let n = [], a = e.length; for (let r = 0; r < a; ++r) { let s = e[r]; lC(t, r, s) ? n.push(s) : n.push(Jx(s, t)) } return n } else { let n = {}; for (let a of Object.keys(e)) { let r = e[a], s = Sr(a); (a === "name" || a === "className") && typeof r == "string" ? n[s] = r : n[s] = Jx(r, a) } return n } } var E0 = "4.16.0", QH = e => { let t = Object.keys(e); if (t.length === 0) return !1; let n = t[0].split("/"); return !isNaN(parseInt(n[n.length - 1], 10)) }, e6 = class tr extends We { constructor(t) { if (super({}), this.containerNodes = new Set, this.name = t.name, this.name == null) { let y = this.getClassName().toLowerCase(); this.name = _f(y) } if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], os(this.inputs).length !== this.inputs.length) throw new V(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(y => y.name)}`); os(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(y => y.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = []; for (let y of this.outputs) { let x = y.sourceLayer, v = y.nodeIndex, I = y.tensorIndex; this.outputLayers.push(x), this.outputLayersNodeIndices.push(v), this.outputLayersTensorIndices.push(I) } for (let y of this.inputs) { let x = y.sourceLayer, v = y.nodeIndex, I = y.tensorIndex; ar(v === 0, "input layer has >1 nodes"), ar(I === 0, "input layer has >1 tensors"), this.inputLayers.push(x), this.inputLayersNodeIndices.push(v), this.inputLayersTensorIndices.push(I) } this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = []; for (let y = 0; y < this.inputLayers.length; y++) { let x = this.inputLayers[y]; if (!(x instanceof bp)) throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${y} (0-based) originates from layer type ${x.getClassName()}.`); this.inputNames.push(x.name), this.feedInputShapes.push(x.batchInputShape), this.feedInputNames.push(x.name) } for (let y of this.outputLayers) this.outputNames.push(y.name); this.internalInputShapes = this.inputs.map(y => y.shape), this.internalOutputShapes = this.outputs.map(y => y.shape); let n = {}, a = {}, r = {}, s = {}, i = {}, o = [], l = (y, x, v, I, N, C) => { (I == null || N == null || C == null) && (I = y.sourceLayer, N = y.nodeIndex, C = y.tensorIndex); let _ = I.inboundNodes[N]; if (v.indexOf(_) !== -1) throw new sr(`The tensor ${y.name} at layer "${I.name}" is part of a cycle.`); if (x.indexOf(_) !== -1) return; this.containerNodes.add(tr.nodeKey(I, N)), I.id in i || (i[I.id] = Object.keys(i).length), v.indexOf(_) === -1 && v.push(_); let F = _.inboundLayers.length; for (let D = 0; D < F; D++) { let $ = _.inputTensors[D], S = _.inboundLayers[D], M = _.nodeIndices[D], B = _.tensorIndices[D]; l($, x, v, S, M, B) } for (x.push(_); v.indexOf(_) >= 0;)v.splice(v.indexOf(_), 1); o.push(_) }, u = [], p = []; for (let y of this.outputs) l(y, u, p); let d = o.slice().reverse(); for (let y of d) { a[y.id] = y, y.id in n || (n[y.id] = 0); let x = n[y.id], v = r[y.outboundLayer.id] == null ? 0 : r[y.outboundLayer.id]; x = Math.max(x, v), r[y.outboundLayer.id] = x, s[y.outboundLayer.id] = y.outboundLayer, n[y.id] = x; for (let I = 0; I < y.inboundLayers.length; I++) { let N = y.inboundLayers[I], C = y.nodeIndices[I], _ = N.inboundNodes[C], F = n[_.id] == null ? 0 : n[_.id]; n[_.id] = Math.max(x + 1, F), a[_.id] = _ } } let c = {}; for (let y in n) { let x = n[y]; x in c || (c[x] = []), c[x].push(a[y]) } let h = {}; for (let y in r) { let x = r[y]; x in h || (h[x] = []), h[x].push(s[y]) } let m = Object.keys(h).map(y => parseInt(y, 10)).sort(Mh); this.layers = []; for (let y of m) { let x = h[y]; x.sort((v, I) => { let N = i[v.id], C = i[I.id]; return N < C ? -1 : N > C ? 1 : 0 }); for (let v of x) v instanceof tr && this.internalContainerRefs.push(v), this.layers.push(v) } this.layersByDepth = h, m = Object.keys(c).map(y => parseInt(y, 10)).sort(Mh); let f = this.inputs.slice(), g = []; for (let y of m) for (let x of c[y]) { let v = x.outboundLayer; if (v != null) { for (let I of x.inputTensors) if (f.indexOf(I) === -1) throw new sr(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${v.name}". The following previous layers were accessed without issue: ${g}`); for (let I of x.outputTensors) f.push(I); g.push(v.name) } } this.nodesByDepth = c; let b = this.layers.map(y => y.name); for (let y of b) { let x = b.filter(v => v === y).length; if (x !== 1) throw new sr(`The name "${y}" is used ${x} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(b)) } this.outboundNodes = [], this.inboundNodes = [], new Lf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: this.inputs.map(y => null), outputMasks: this.outputs.map(y => null), inputShapes: this.inputs.map(y => y.shape), outputShapes: this.outputs.map(y => y.shape) }), this.built = !0, this._refCount = 1 } assertNotDisposed() { if (this._refCount === 0) throw new Error(`Container '${this.name}' is already disposed.`) } dispose() { this.assertNotDisposed(); let t = { refCountAfterDispose: null, numDisposedVariables: 0 }; if (--this._refCount === 0) { for (let n of this.layers) t.numDisposedVariables += n.dispose().numDisposedVariables; for (let n of this.internalContainerRefs) t.numDisposedVariables += n.dispose().numDisposedVariables } return t.refCountAfterDispose = this._refCount, t } get trainable() { return this.trainable_ } set trainable(t) { this.layers.forEach(n => { n._trainableWeights.forEach(a => a.trainable = t) }), this.trainable_ = t } get trainableWeights() { if (this._trainableWeights.length > 0) throw new V("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array."); if (!this.trainable) return []; let t = []; for (let n of this.layers) t = t.concat(n.trainableWeights); return t } get nonTrainableWeights() { let t = []; for (let n of this.layers) t.push(...n.nonTrainableWeights); if (!this.trainable) { let n = []; for (let a of this.layers) n.push(...a.trainableWeights); return n.concat(t) } return t } get weights() { return this.trainableWeights.concat(this.nonTrainableWeights) } loadWeights(t, n = !0) { let a = {}, r = 0, s = QH(t); s && this.parseWeights(t); for (let o of this.layers) for (let [l, u] of o.weights.entries()) { let p = s ? `${u.name.split("/").slice(0, -1).join("/") + "/"}${l}` : u.originalName; if (a[p] != null) throw new V(`Duplicate weight name: ${p}`); a[p] = u, r++ } let i = []; for (let o in t) { let l = o; if (a[o] == null) { let u = o.split("/"); l = u.slice(0, -2).concat([u[u.length - 1]]).join("/") } if (a[l] != null) i.push([a[l], t[o]]); else if (n) throw new V(`Provided weight data has no target variable: ${o}`); delete a[l] } if (n) { let o = []; for (let l in a) o.push(l); if (o.length > 0) throw new V(`${o.length} of ${r} weights are not set: ${o}`) } b0(i) } parseWeights(t) { for (let n in Object.keys(t)) { let a = n.split("/"), r = ["vars", "layer_checkpoint_dependencies"], s = a.map(i => i.startsWith("_") ? i.slice(1) : i).filter(i => !r.includes(i)).join("/"); s !== n && (t[s] = t[n], delete t[n]) } } updatedConfig() { let t = this.getConfig(), n = {}; return n.className = this.getClassName(), n.config = t, n.kerasVersion = `tfjs-layers ${E0}`, n.backend = "TensorFlow.js", n } toJSON(t, n = !0) { let a = Jx(this.updatedConfig()); return n ? JSON.stringify(a) : a } call(t, n) { return O(() => { t = it(t); let a = new Wl; for (let r = 0; r < this.inputs.length; ++r)a.add(this.inputs[r], t[r]); return oc(this.outputs, a, n) }) } computeMask(t, n) { return O(() => { t = it(t); let a; return n == null ? a = xi(null, t.length) : a = it(n), this.runInternalGraph(t, a)[1] }) } computeOutputShape(t) { let n = cm(t); if (n.length !== this.inputLayers.length) throw new V(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`); let a = {}; for (let o = 0; o < n.length; o++) { let l = this.inputLayers[o], u = n[o], p = l.name + "_0_0"; a[p] = u } let r = Object.keys(this.nodesByDepth).map(o => parseInt(o, 10)).sort(Mh); if (r.length > 1) for (let o of r) { let l = this.nodesByDepth[o]; for (let u of l) { let p = u.outboundLayer; if (this.inputLayers.map(f => f.id).indexOf(p.id) !== -1) continue; let d = []; for (let f = 0; f < u.inboundLayers.length; f++) { let g = u.inboundLayers[f], b = u.nodeIndices[f], y = u.tensorIndices[f], x = `${g.name}_${b}_${y}`, v = a[x]; d.push(v) } let c = p.computeOutputShape(Rn(d)), h = cm(c), m = p.inboundNodes.indexOf(u); for (let f = 0; f < h.length; f++) { let g = `${p.name}_${m}_${f}`; a[g] = h[f] } } } let s = [], i = []; for (let o = 0; o < this.outputLayers.length; o++) { let l = this.outputLayers[o], u = this.outputLayersNodeIndices[o], p = this.outputLayersTensorIndices[o], d = `${l.name}_${u}_${p}`; i.push(d) } for (let o = 0; o < i.length; o++) { let l = i[o]; ar(l in a), s.push(a[l]) } return Rn(s) } runInternalGraph(t, n) { n == null && (n = xi(null, t.length)); let a = {}; for (let l = 0; l < this.inputs.length; ++l) { let u = this.inputs[l], p = t[l], d = n[l]; a[u.id] = [p, d] } let r = Object.keys(this.nodesByDepth).map(l => parseInt(l, 10)).sort(Mh); for (let l of r) { let u = this.nodesByDepth[l]; for (let p of u) { let d = p.outboundLayer, c = p.inputTensors, h = p.outputTensors, m = new Array; for (let f of c) f.id in a && m.push(a[f.id]); if (m.length === c.length) { let f = {}, g, b, y, x; if (p.callArgs != null && (f = p.callArgs), m.length === 1) { let [v, I] = m[0]; f.mask == null && (f.mask = I), y = it(d.call(v, f)), x = it(d.computeMask(v, I)), g = [v], b = [I] } else g = m.map(v => v[0]), b = m.map(v => v[1]), f.mask == null && (f.mask = b), y = it(d.call(g, f)), x = it(d.computeMask(g, b)); if (d.activityRegularizer) throw new ze("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet."); for (let v = 0; v < h.length; ++v) { let I = h[v], N = y[v], C = x[v]; a[I.id] = [N, C] } } } } let s = [], i = [], o = []; for (let l of this.outputs) { ar(l.id in a, `Could not compute output ${l.name} : ${l.id}`); let [u, p] = a[l.id]; o.push(u.shape), s.push(u), i.push(p) } return [s, i, o] } buildNodeConversionMap(t) { let n = {}, a; for (let r of this.layers) { a = r instanceof tr ? 1 : 0; for (let s = 0; s < r.inboundNodes.length; s++) { let i = tr.nodeKey(r, s); this.containerNodes.has(i) && (n[i] = a, a += 1) } } return n } getLayer(t, n) { if (n != null) return this.findLayer(n); if (t == null) throw new V("Provide either a layer name or layer index"); if (typeof t == "number") return this.findLayer(t); for (let a of this.layers) if (a.name === t) return a; throw new V(`No such layer: ${t}`) } findLayer(t) { if (this.layers.length <= t) throw new V(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`); return this.layers[t] } calculateLosses() { return O(() => { let t = []; for (let n of this.layers) for (let a = 0; a < n.inboundNodes.length; ++a) { let r = tr.nodeKey(n, a); this.containerNodes.has(r) && t.push(...n.calculateLosses()) } return t }) } getConfig() { let t = { name: this.name }, n = this.buildNodeConversionMap(this.layers), a = []; for (let i of this.layers) { let o = i.getClassName(), l = i.getConfig(), u = []; for (let d = 0; d < i.inboundNodes.length; d++) { let c = i.inboundNodes[d], h = tr.nodeKey(i, d), m = {}; if (this.containerNodes.has(h)) { if (c.callArgs) try { JSON.stringify(c.callArgs), m = c.callArgs } catch (f) { console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${c.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), m = {} } if (c.inboundLayers.length > 0) { let f = []; for (let g = 0; g < c.inboundLayers.length; g++) { let b = c.inboundLayers[g], y = c.nodeIndices[g], x = c.tensorIndices[g], v = tr.nodeKey(b, y), I = n[v]; I == null && (I = 0), f.push([b.name, I, x, m]) } u.push(f) } } } let p = {}; p.name = i.name, p.className = o, p.config = l, p.inboundNodes = u, a.push(p) } t.layers = a; let r = []; for (let i = 0; i < this.inputLayers.length; i++) { let o = this.inputLayers[i], l = this.inputLayersNodeIndices[i], u = tr.nodeKey(o, l); if (!this.containerNodes.has(u)) continue; let p = n[u]; p == null && (p = 0); let d = this.inputLayersTensorIndices[i]; r.push([o.name, p, d]) } t.inputLayers = r; let s = []; for (let i = 0; i < this.outputLayers.length; i++) { let o = this.outputLayers[i], l = this.outputLayersNodeIndices[i], u = tr.nodeKey(o, l); if (!this.containerNodes.has(u)) continue; let p = n[u]; p == null && (p = 0); let d = this.outputLayersTensorIndices[i]; s.push([o.name, p, d]) } return t.outputLayers = s, t } static fromConfig(t, n, a = {}, r = !1) { let s = {}, i = {}; function o(g, b) { g.name in i ? i[g.name].push(b) : i[g.name] = [b] } function l(g, b) { let y = [], x; for (let v of b) { let I = v[0], N = v[1], C = v[2]; if (x = v[3] == null ? {} : v[3], !(I in s)) { o(g, b); return } let _ = s[I]; if (_.inboundNodes.length <= N) { o(g, b); return } let F = _.inboundNodes[N]; y.push(F.outputTensors[C]) } y.length > 0 && g.apply(Rn(y), x) } function u(g) { let b = g.name, y = Ba(g, n.customObjects != null ? n.customObjects : {}); y.setFastWeightInitDuringBuild(r), s[b] = y, g.inboundNodes.forEach(x => { if (!(x instanceof Array)) throw new V(`Corrupted configuration, expected array for nodeData: ${x}`); o(y, x) }) } let p = n.name, d = n.layers; for (let g of d) u(g); for (; !NG(i);)for (let g of d) { let b = s[g.name]; if (b.name in i) { let y = i[b.name]; delete i[b.name]; for (let x of y) l(b, x) } } let c = [], h = [], m = n.inputLayers; for (let g of m) { let b = g[0], y = g[1], x = g[2]; ar(b in s); let v = s[b].inboundNodes[y].outputTensors; c.push(v[x]) } let f = n.outputLayers; for (let g of f) { let b = g[0], y = g[1], x = g[2]; ar(b in s); let v = s[b].inboundNodes[y].outputTensors; h.push(v[x]) } return new t({ inputs: c, outputs: h, name: p }) } get stateful() { if (this._stateful) throw new V("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false."); for (let t of this.layers) if (t.stateful) return !0; return !1 } resetStates() { O(() => { this.layers.forEach(t => { t.stateful && t.resetStates() }) }) } }; function t6(e, t, n) { let a = t.length; if (e == null || Array.isArray(e) && e.length === 0) return t.map(r => null); if (a === 1) return Array.isArray(e) && e.length === 1 ? e : typeof e == "object" && t[0] in e ? [e[t[0]]] : [e]; if (Array.isArray(e)) { if (e.length !== a) throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${a} outputs. Make sure a set of weights is provided for each model output.`); return e } else if (typeof e == "object" && Object.keys(e).length > 0 && typeof e[Object.keys(e)[0]] == "object") { let r = []; return t.forEach(s => { s in e ? r.push(e[s]) : r.push(null) }), r } else throw new Error(`The model has multiple (${a}) outputs, so ${n} must be either an array with ${a} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`) } function uC(e, t) { return t6(e, t, "classWeight") } async function pC(e, t, n, a) { if (t != null || a != null) throw new Error("Support sampleWeight is not implemented yet"); if (n != null) { let r = O(() => { if (e.shape.length === 1) return or(e); if (e.shape.length === 2) { if (e.shape[1] > 1) return hi(e, 1); if (e.shape[1] === 1) return W(e, [e.shape[0]]); throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`) } else throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`) }), s = Array.from(await r.data()); Ee(r); let i = []; return s.forEach(o => { if (n[o] == null) throw new Error(`classWeight must contain all classes in the training data. The class ${o} exists in the data but not in classWeight`); i.push(n[o]) }), qe(i, "float32") } else return null } function n6(e, t) { return z(e, t) } var a6 = 32; function cC(e, t) { let n, a, r = t; n = r.xs, a = r.ys, w.assert(n != null && a != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`); let s = KI("input", e.inputNames, n), i = KI("output", e.outputNames, a), o = s[0].shape[0]; w.assert(s.length === e.inputs.length, () => `LayersModel has ${e.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`), w.assert(i.length === e.outputs.length, () => `LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`); for (let l = 0; l < s.length; l++)w.assert(s[l].shape[0] === o, () => `Batch size mismatch: input ${e.inputNames[l]} has ${s[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`); for (let l = 0; l < i.length; l++)w.assert(i[l].shape[0] === o, () => `Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`); return { xs: s, ys: i } } function KI(e, t, n) { if (n instanceof Ce) return [n]; if (Array.isArray(n)) return w.assert(n.length === t.length, () => `Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`), n; { let a = []; for (let r of t) { if (n[r] == null) throw new V(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`); a.push(n[r]) } return a } } function r6(e) { if (e.length === 3) throw new ze("Validation with sample weights is not implemented yet."); return { xs: e[0], ys: e[1] } } async function s6(e, t, n) { let a = n.batchesPerEpoch != null; if (w.assert(e.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), w.assert(n != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), w.assert(n.epochs != null && n.epochs > 0 && Number.isInteger(n.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`), w.assert(!a || n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`), w.assert(n.validationSplit == null, () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), e.isTraining) throw new Error("Cannot start training because another fit() call is ongoing."); e.isTraining = !0; try { let r = n.validationData != null, s, i; if (r) if (XI(n.validationData)) w.assert(n.validationBatches == null || n.validationBatches > 0 && Number.isInteger(n.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`); else { let g = r6(n.validationData); s = g.xs, i = g.ys } let o = e.makeTrainFunction(), l = e.getDedupedMetricsNames(), u; r ? u = l.slice().concat(l.map(g => "val_" + g)) : u = l.slice(); let p = tC(n.callbacks, n.yieldEvery), d = n.verbose == null ? 1 : n.verbose, { callbackList: c, history: h } = nC(p, d, n.epochs, null, null, i6(t, n), null, r, u); c.setModel(e), e.history = h, await c.onTrainBegin(), e.stopTraining_ = !1; let m = n.initialEpoch == null ? 0 : n.initialEpoch, f = await t.iterator(); for (; m < n.epochs;) { let g = {}; await c.onEpochBegin(m); let b = 0, y = 0; for (a || (f = await t.iterator()); !a || b < n.batchesPerEpoch;) { let x = await f.next(); if (a && x.done) { console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch * n.epochs} batches). You may need to use the repeat() function when building your dataset.`); break } if (x.value != null) { let { xs: v, ys: I } = cC(e, x.value), N = {}; N.batch = y, N.size = v[0].shape[0], await c.onBatchBegin(y, N); let C = []; if (n.classWeight != null) { let D = uC(n.classWeight, e.outputNames); for (let $ = 0; $ < D.length; ++$)C.push(await pC(I[$], null, D[$])) } let _ = v.concat(I).concat(C), F = o(_); Ee(_); for (let D = 0; D < l.length; ++D) { let $ = l[D], S = F[D]; N[$] = S, Ht(S) } await c.onBatchEnd(y, N), Z2(N), y++, b++ } if (a ? b >= n.batchesPerEpoch : x.done) { if (r) { let v; XI(n.validationData) ? v = it(await e.evaluateDataset(n.validationData, { batches: n.validationBatches })) : v = it(e.evaluate(s, i, { batchSize: n.validationBatchSize == null ? a6 : n.validationBatchSize, verbose: 0 })); for (let I = 0; I < e.metricsNames.length; ++I)g[`val_${e.metricsNames[I]}`] = v[I] } break } if (e.stopTraining_) break } if (await c.onEpochEnd(m, g), m++, e.stopTraining_) break } return await c.onTrainEnd(), await e.history.syncData(), e.history } finally { e.isTraining = !1 } } function i6(e, t) { let n = null; return t.batchesPerEpoch != null ? n = t.batchesPerEpoch : Number.isFinite(e.size) && (n = e.size), n } function XI(e) { return typeof e.iterator == "function" } function o6(e) { return typeof e.next == "function" } async function l6(e, t, n) { n = n || {}; let a = n.batches != null, r = e.testFunction, s = []; if (n.verbose > 0) throw new ze("Verbose mode is not implemented yet."); w.assert(!a || n.batches > 0 && Number.isInteger(n.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`); let i = o6(t) ? t : await t.iterator(), o = 0, l = 0; for (; !a || l < n.batches;) { let u = await i.next(); if (s = O(() => { if (u.value) { let { xs: p, ys: d } = cC(e, u.value), c = p.concat(d), h = O(() => r(c)); if (Ee(c), l === 0) for (let f = 0; f < h.length; ++f)s.push(ve(0)); let m = c[0].shape[0]; for (let f = 0; f < h.length; ++f) { let g = h[f], b = s[f]; s[f] = O(() => X(s[f], z(m, g))), l > 0 && Ee(b) } Ee(h), o += m, ++l } return s }), u.done) { a && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`); break } } for (let u = 0; u < s.length; ++u) { let p = s[u]; s[u] = he(s[u], o), Ee(p) } return Rn(s) } function vx(e) { w.assert(e > 0 && Number.isInteger(e), () => `batchSize is required to be a positive integer, but got ${e}`) } function tc(e, t, n) { return e == null ? [null] : Array.isArray(e) ? e.map(a => ii(a, t, n - t)) : ii(e, t, n - t) } function Qx(e, t) { return O(() => e == null ? null : Array.isArray(e) ? e.map(n => Qx(n, t)) : V2(e, t.dtype === "int32" ? t : re(t, "int32"))) } function wx(e, t) { let n = [], a = 0, r = null; for (; a < e;)r = a + t, r >= e && (r = e), n.push([a, r]), a = r; return n } function dC(e) { let t = []; e instanceof Ce && (e = [e]); for (let n = 0; n < e.length; ++n) { let a = e[n]; if (a.rank === 1) t.push(Cd(a, 1)); else { if (a.rank === 0) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar)."); t.push(a) } } return t } function Pa(e, t) { if (e == null) return; let n = []; if (t instanceof Ce) n.push(t.id); else if (Array.isArray(t)) t.forEach(r => n.push(r.id)); else if (t != null) for (let r in t) { let s = t[r]; n.push(s.id) } let a = []; if (e instanceof Ce) n.indexOf(e.id) === -1 && a.push(e); else if (Array.isArray(e)) e.forEach(r => { n.indexOf(r.id) === -1 && a.push(r) }); else if (e != null) for (let r in e) { let s = e[r]; n.indexOf(s.id) === -1 && a.push(s) } a.forEach(r => { r.isDisposed || r.dispose() }) } function u6(e) { return e instanceof Ce } function ev(e) { return Array.isArray(e) } function YI(e) { return !u6(e) && !ev(e) } function ZI(e, t, n, a = !0, r = "") { if (t == null || t.length === 0) { if (e != null) { let i = !1; if (ev(e) && e.length > 0) i = !0; else if (YI(e)) { for (let o in e) if (e.hasOwnProperty(o)) { i = !0; break } } else i = !0; if (i) throw new V(`Error when checking model ${r} expected no data, but got ${e}`) } return [] } if (e == null) return t.map(i => null); let s; if (YI(e)) { e = e, s = []; for (let i of t) { if (e[i] == null) throw new V(`No data provided for "${i}". Need data for each key in: ${t}`); s.push(e[i]) } } else if (ev(e)) { if (e = e, e.length !== t.length) throw new V(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`); s = e } else { if (e = e, t.length > 1) throw new V(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`); s = [e] } if (s = dC(s), n != null) for (let i = 0; i < t.length; ++i) { if (n[i] == null) continue; let o = s[i]; if (o.shape.length !== n[i].length) throw new V(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${o.shape}`); for (let l = 0; l < n[i].length; ++l) { if (l === 0 && !a) continue; let u = o.shape[l], p = n[i][l]; if (p != null && p >= 0 && u !== p) throw new V(`${r} expected a batch of elements where each example has shape [${n[i].slice(1, n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1, n[i].length)}]) but the ${r} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1, o.shape.length)}] (tensor shape [${o.shape}])`) } } return s } function p6(e, t, n) { let a = os(e.map(s => s.shape[0])); a.sort(); let r = os(t.map(s => s.shape[0])); if (r.sort(), a.length > 1) throw new V(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(s => s.shape))}`); if (r.length > 1) throw new V(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s => s.shape))}`); if (a.length > 0 && r.length > 0 && !w.arraysEqual(a, r)) throw new V(`Input Tensors should have the same number of samples as target Tensors. Found ${a[0]} input sample(s) and ${r[0]} target sample(s).`) } function c6(e, t, n) { let a = [Zo, Wf, Ec]; for (let r = 0; r < e.length; ++r) { let s = e[r], i = t[r], o = n[r]; if (i != null) { if (i === Ec && s.shape[s.shape.length - 1] === 1) throw new V(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`); if (a.indexOf(i) !== -1) { let l = s.shape.slice(1), u = o.slice(1); for (let p = 0; p < l.length; ++p) { let d = l[p], c = u[p]; if (c != null && d !== c) throw new V(`A target Tensor with shape ${s.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`) } } } } } function JI(e, t, n, a = !0, r = "") { let s; if (Array.isArray(e)) { if (e.length !== t.length) throw new V(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`); s = e } else { if (t.length > 1) throw new V(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`); s = [e] } if (n != null) for (let i = 0; i < t.length; ++i) { if (n[i] == null) continue; let o = s[i]; if (o.shape.length !== n[i].length) throw new V(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`); for (let l = 0; l < n[i].length; ++l) { if (l === 0 && !a) continue; let u = o.shape[l], p = n[i][l]; if (p != null && p !== u) throw new V(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(o.shape)}.`) } } } function d6(e, t) { if (e == null || Array.isArray(e) && e.length === 0) return t.map(a => []); let n; if (typeof e == "string" || typeof e == "function") n = [e]; else if (Array.isArray(e) || typeof e == "object") n = e; else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`); if (Array.isArray(n)) return t.map(a => n); { let a = []; for (let r of t) { let s = n.hasOwnProperty(r) ? n[r] : []; Array.isArray(s) || (s = [s]), a.push(s) } return a } } var h6 = "layers-model", _r = class extends e6 { constructor(e) { super(e), this.isTraining = !1 } summary(e, t, n = console.log) { if (!this.built) throw new V("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data)."); KH(this, e, t, n) } compile(e) { if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string") this.optimizer_ = jH(e.optimizer), this.isOptimizerOwned = !0; else { if (!(e.optimizer instanceof Or)) throw new V("User-defined optimizer must be an instance of tf.Optimizer."); this.optimizer_ = e.optimizer, this.isOptimizerOwned = !1 } let t = []; if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") { e.loss = e.loss; for (let s in e.loss) if (this.outputNames.indexOf(s) === -1) throw new V(`Unknown entry in loss dictionary: "${s}". Only expected the following keys: ${this.outputNames}`); for (let s of this.outputNames) e.loss[s] == null && console.warn(`Output "${s}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${s} during training`), t.push(xx(e.loss[s])) } else if (Array.isArray(e.loss)) { if (e.loss.length !== this.outputs.length) throw new V(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`); t = e.loss.map(s => xx(s)) } else { let s = xx(e.loss); this.outputs.forEach(i => { t.push(s) }) } this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = []; for (let s = 0; s < this.outputs.length; ++s) { let i = this.internalOutputShapes[s], o = this.outputNames[s]; this.feedOutputNames.push(o), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[s]) } let n = []; this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], si("loss", () => { for (let s = 0; s < this.outputs.length; ++s) { if (n.indexOf(s) !== -1) continue; let i = this.lossFunctions[s]; this.outputs.length > 1 && (this.metricsTensors.push([i, s]), this.metricsNames.push(this.outputNames[s] + "_loss")) } }); let a = d6(e.metrics, this.outputNames), r = (s, i, o) => { this.outputNames.length > 1 && (i = this.outputNames[s] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([o, s]) }; si("metric", () => { for (let s = 0; s < this.outputs.length; ++s) { if (n.indexOf(s) !== -1) continue; let i = a[s]; (o => { let l = "", u, p, d; for (let c of o) { if (typeof c == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(c) !== -1) { let m = this.internalOutputShapes[s]; m[m.length - 1] === 1 || this.lossFunctions[s] === Wf ? ["accuracy", "acc"].indexOf(c) !== -1 ? p = N0 : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = sC) : this.lossFunctions[s] === gm ? ["accuracy", "acc"].indexOf(c) !== -1 ? p = iC : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = oC) : ["accuracy", "acc"].indexOf(c) !== -1 ? p = T0 : ["crossentropy", "ce"].indexOf(c) !== -1 && (p = C0); let f;["accuracy", "acc"].indexOf(c) !== -1 ? f = "acc" : ["crossentropy", "ce"].indexOf(c) !== -1 && (f = "ce"), d = p, u = l + f } else d = qH(c), u = l + Lh(c); let h; si(u, () => { h = d }), r(s, u, h) } })(i) } }), this.collectedTrainableWeights = this.trainableWeights } checkTrainableWeightsConsistency() { this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?") } evaluate(e, t, n = {}) { let a = n.batchSize == null ? 32 : n.batchSize; vx(a); let r = this.standardizeUserDataXY(e, t, !0, a); try { let s = r[0].concat(r[1]); this.makeTestFunction(); let i = this.testFunction, o = this.testLoop(i, s, a, n.verbose, n.steps); return Rn(o) } finally { Pa(r[0], e), Pa(r[1], t) } } async evaluateDataset(e, t) { return this.makeTestFunction(), l6(this, e, t) } checkNumSamples(e, t, n, a = "steps") { let r; if (n != null) { if (r = null, t != null) throw new V(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${t}`) } else if (e != null) Array.isArray(e) ? r = e[0].shape[0] : r = e.shape[0]; else throw new V(`Either the input data should have a defined shape, or ${a} shoud be specified.`); return r } execute(e, t) { if (Array.isArray(t) && t.length === 0) throw new V("`outputs` is an empty Array, which is not allowed."); let n = Array.isArray(t), a = n ? t : [t], r = this.retrieveSymbolicTensors(a), s = new Wl; if (e instanceof Ce && (e = [e]), Array.isArray(e)) { if (e.length !== this.inputs.length) throw new V(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`); for (let o = 0; o < this.inputs.length; ++o)s.add(this.inputs[o], e[o]) } else for (let o of this.inputs) { let l = e[o.name]; if (l == null) throw new V(`No value is provided for the model's input ${o.name}`); s.add(o, l) } let i = oc(r, s); return n ? i : i[0] } retrieveSymbolicTensors(e) { let t = xi(null, e.length), n = e.length; for (let a of this.layers) { let r = Array.isArray(a.output) ? a.output : [a.output], s = r.map(i => i.name); for (let i = 0; i < e.length; ++i) { let o = s.indexOf(e[i]); if (o !== -1 && (t[i] = r[o], n--), n === 0) break } if (n === 0) break } if (n > 0) { let a = []; throw t.forEach((r, s) => { r == null && a.push(e[s]) }), new V(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(a)}`) } return t } predictLoop(e, t = 32, n = !1) { return O(() => { let a = this.checkNumSamples(e); if (n) throw new ze("Verbose predictLoop() is not implemented yet."); let r = wx(a, t), s = this.outputs.map(i => []); for (let i = 0; i < r.length; ++i)O(() => { let o = r[i][0], l = r[i][1], u = tc(e, o, l), p = []; if (Array.isArray(u)) for (let c = 0; c < u.length; ++c)p.push({ key: this.inputs[c], value: u[c] }); else p.push({ key: this.inputs[0], value: u }); let d = new Wl(p); return oc(this.outputs, d) }).forEach((o, l) => s[l].push(o)); return Rn(s.map(i => et(i, 0))) }) } predict(e, t = {}) { let n = dC(e); JI(n, this.inputNames, this.feedInputShapes, !1); try { let a = t.batchSize == null ? 32 : t.batchSize; return vx(a), this.predictLoop(n, a) } finally { Pa(n, e) } } predictOnBatch(e) { JI(e, this.inputNames, this.feedInputShapes, !0); let t = (Array.isArray(e) ? e[0] : e).shape[0]; return this.predictLoop(e, t) } standardizeUserDataXY(e, t, n = !0, a) { if (this.optimizer_ == null) throw new sr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs)."); let r = []; for (let s = 0; s < this.feedOutputShapes.length; ++s) { let i = this.feedOutputShapes[s]; this.feedLossFns[s] === gm ? r.push(i.slice(0, i.length - 1).concat([1])) : r.push(i) } if (e = ZI(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = ZI(t, this.feedOutputNames, r, !1, "target"), p6(e, t, null), c6(t, this.feedLossFns, this.feedOutputShapes), this.stateful && a != null && a > 0 && e[0].shape[0] % a !== 0) throw new V(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e[0].shape[0]} sample(s).`); return [e, t] } async standardizeUserData(e, t, n, a, r = !0, s) { let [i, o] = this.standardizeUserDataXY(e, t, r, s); if (n != null) throw new Error("sample weight is not supported yet."); let l = null; if (a != null) { let u = uC(a, this.outputNames); l = []; for (let p = 0; p < u.length; ++p)l.push(await pC(o[p], null, u[p])) } return [i, o, l] } testLoop(e, t, n, a = 0, r) { return O(() => { let s = this.checkNumSamples(t, n, r, "steps"), i = []; if (a > 0) throw new ze("Verbose mode is not implemented yet."); if (r != null) throw new ze("steps mode in testLoop() is not implemented yet"); { let o = wx(s, n), l = qe(Ua(0, s)); for (let u = 0; u < o.length; ++u) { let p = o[u][0], d = o[u][1], c = ii(l, p, d - p), h = Qx(t, c), m = e(h); if (u === 0) for (let f = 0; f < m.length; ++f)i.push(ve(0)); for (let f = 0; f < m.length; ++f) { let g = m[f]; i[f] = X(i[f], z(d - p, g)) } } for (let u = 0; u < i.length; ++u)i[u] = he(i[u], s) } return i }) } getDedupedMetricsNames() { let e = this.metricsNames, t = []; for (let n = 0; n < e.length; ++n) { let a = e[n], r = a; if (PI(e, a) > 1) { let s = PI(e.slice(0, n), a); r += `_${s}` } t.push(r) } return t } makeTrainFunction() { return e => { let t = [], n = e.slice(0, this.inputs.length), a = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), r = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), s = [], i = () => { let l = []; for (let c = 0; c < this.inputs.length; ++c)l.push({ key: this.inputs[c], value: n[c] }); let u = new Wl(l), p = oc(this.outputs, u, { training: !0 }), d; for (let c = 0; c < this.lossFunctions.length; ++c) { let h = this.lossFunctions[c], m = h(a[c], p[c]); r[c] != null && (m = n6(m, r[c])); let f = Et(m); t.push(f), c === 0 ? d = m : d = X(d, m) } for (let c = 0; c < this.metricsTensors.length; ++c) { let h; if (this.outputs.length > 1 && c < this.outputs.length) h = t[c]; else { let m = this.metricsTensors[c][0], f = this.metricsTensors[c][1]; h = Et(m(a[f], p[f])) } Ht(h), s.push(h) } return d = Et(d), this.calculateLosses().forEach(c => { d = X(d, c) }), d }, o = this.collectedTrainableWeights.map(l => l.read()); return [this.optimizer_.minimize(i, !0, o)].concat(s) } } makeTestFunction() { this.testFunction = e => O(() => { let t = [], n, a = e.slice(0, this.inputs.length), r = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), s = []; for (let l = 0; l < this.inputs.length; ++l)s.push({ key: this.inputs[l], value: a[l] }); let i = new Wl(s), o = oc(this.outputs, i); for (let l = 0; l < this.lossFunctions.length; ++l) { let u = this.lossFunctions[l], p = Et(u(r[l], o[l])); l === 0 ? n = p : n = X(n, p), t.push(n) } for (let l = 0; l < this.metricsTensors.length; ++l) { let u = this.metricsTensors[l][0], p = this.metricsTensors[l][1], d = Et(u(r[p], o[p])); t.push(d) } return t }) } async fit(e, t, n = {}) { if (this.isTraining) throw new Error("Cannot start training because another fit() call is ongoing."); this.isTraining = !0; let a, r, s, i, o, l, u, p, d; try { let c = n.batchSize == null ? 32 : n.batchSize; vx(c); let h = await this.standardizeUserData(e, t, n.sampleWeight, n.classWeight, !1, c); a = h[0], r = h[1], d = h[2]; let m = !1, f; if (n.validationData != null && n.validationData.length > 0) { if (m = !0, n.validationData.length === 2) o = n.validationData[0], l = n.validationData[1]; else throw n.validationData.length === 3 ? new ze("validationData including sample weights is not supported yet.") : new V(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`); let N = await this.standardizeUserData(o, l, null, null, !0, c); u = N[0], p = N[1], f = u.concat(p) } else if (n.validationSplit != null && n.validationSplit > 0 && n.validationSplit < 1) { m = !0; let N = Math.floor(a[0].shape[0] * (1 - n.validationSplit)), C = a[0].shape[0]; u = tc(a, N, C), s = a, a = tc(a, 0, N), p = tc(r, N, C), i = r, r = tc(r, 0, N), f = u.concat(p) } else n.validationSteps != null && (m = !0); let g = a.concat(r).concat(d); this.checkTrainableWeightsConsistency(); let b = this.makeTrainFunction(), y = this.getDedupedMetricsNames(), x, v; m ? (this.makeTestFunction(), x = this.testFunction, v = y.slice().concat(y.map(N => "val_" + N))) : (x = null, f = [], v = y.slice()); let I = tC(n.callbacks, n.yieldEvery); return await this.fitLoop(b, g, y, c, n.epochs, n.verbose, I, x, f, n.shuffle, v, n.initialEpoch, null, null) } finally { this.isTraining = !1, Pa(a, e), Pa(r, t), Pa(s, e), Pa(i, t), Pa(u, o), Pa(p, l), d != null && Ee(d) } } async fitLoop(e, t, n, a, r, s, i, o, l, u, p, d, c, h) { a == null && (a = 32), r == null && (r = 1), u == null && (u = !0), d == null && (d = 0); let m = !1; if (o != null && l != null && (m = !0), h != null && (m = !0, c == null)) throw new V("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set."); let f = this.checkNumSamples(t, a, c, "steps_per_epoch"), g; f != null && (g = Ua(0, f)), s == null && (s = 1); let { callbackList: b, history: y } = nC(i, s, r, d, f, c, a, m, p); b.setModel(this), this.history = y, await b.onTrainBegin(), this.stopTraining_ = !1; for (let x = d; x < r; ++x) { await b.onEpochBegin(x); let v = {}; if (c != null) throw new ze("stepsPerEpoch mode is not implemented yet."); { if (u === "batch") throw new ze("batch shuffling is not implemneted yet"); u && w.shuffle(g); let I = qe(g), N = wx(f, a); for (let C = 0; C < N.length; ++C) { let _ = {}; if (await b.onBatchBegin(C, _), O(() => { let F = N[C][0], D = N[C][1], $ = ii(I, F, D - F); _.batch = C, _.size = D - F; let S = Qx(t, $), M = e(S); for (let B = 0; B < n.length; ++B) { let U = n[B], H = M[B]; _[U] = H, Ht(H) } if (C === N.length - 1 && m) { let B = this.testLoop(o, l, a); for (let U = 0; U < n.length; ++U) { let H = n[U], j = B[U]; Ht(j), v["val_" + H] = j } } }), await b.onBatchEnd(C, _), Z2(_), this.stopTraining_) break } I.dispose() } if (await b.onEpochEnd(x, v), this.stopTraining_) break } return await b.onTrainEnd(), await this.history.syncData(), this.history } async fitDataset(e, t) { return s6(this, e, t) } async trainOnBatch(e, t) { let n = await this.standardizeUserData(e, t), a = n[0], r = n[1], s = this.makeTrainFunction()(a.concat(r)), i = []; for (let o of s) { let l = await o.data(); i.push(l[0]) } return Ee(s), Pa(n[0], e), Pa(n[1], t), Rn(i) } getNamedWeights(e) { let t = [], n = e != null && e.trainableOnly, a = n ? this.trainableWeights : this.weights, r = this.getWeights(n); for (let s = 0; s < a.length; ++s)n && !a[s].trainable || t.push({ name: a[s].originalName, tensor: r[s] }); return t } set stopTraining(e) { this.stopTraining_ = e } get stopTraining() { return this.stopTraining_ } get optimizer() { return this.optimizer_ } set optimizer(e) { this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = !1) } dispose() { let e = super.dispose(); if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) { let t = lm().numTensors; this.optimizer_.dispose(), e.numDisposedVariables += t - lm().numTensors } return e } getLossIdentifiers() { let e; if (typeof this.loss == "string") e = Sr(this.loss); else if (Array.isArray(this.loss)) { for (let t of this.loss) if (typeof t != "string") throw new Error("Serialization of non-string loss is not supported."); e = this.loss.map(t => Sr(t)) } else { let t = Object.keys(this.loss); e = {}; let n = this.loss; for (let a of t) if (typeof n[a] == "string") e[a] = Sr(n[a]); else throw new Error("Serialization of non-string loss is not supported.") } return e } getMetricIdentifiers() { if (typeof this.metrics == "string" || typeof this.metrics == "function") return [Sr(Lh(this.metrics))]; if (Array.isArray(this.metrics)) return this.metrics.map(e => Sr(Lh(e))); { let e = {}; for (let t in this.metrics) e[t] = Sr(Lh(this.metrics[t])); return e } } getTrainingConfig() { return { loss: this.getLossIdentifiers(), metrics: this.getMetricIdentifiers(), optimizer_config: { class_name: this.optimizer.getClassName(), config: this.optimizer.getConfig() } } } loadTrainingConfig(e) { if (e.weighted_metrics != null) throw new Error("Loading weight_metrics is not supported yet."); if (e.loss_weights != null) throw new Error("Loading loss_weights is not supported yet."); if (e.sample_weight_mode != null) throw new Error("Loading sample_weight_mode is not supported yet."); let t = _c(e.optimizer_config), n = Ba(t), a; if (typeof e.loss == "string") a = Qs(e.loss); else if (Array.isArray(e.loss)) a = e.loss.map(s => Qs(s)); else if (e.loss != null) { a = {}; for (let s in e.loss) a[s] = Qs(e.loss[s]) } let r; if (Array.isArray(e.metrics)) r = e.metrics.map(s => Qs(s)); else if (e.metrics != null) { r = {}; for (let s in e.metrics) r[s] = Qs(e.metrics[s]) } this.compile({ loss: a, metrics: r, optimizer: n }) } async save(e, t) { if (typeof e == "string") { let r = qt.getSaveHandlers(e); if (r.length === 0) throw new V(`Cannot find any save handlers for URL '${e}'`); if (r.length > 1) throw new V(`Found more than one (${r.length}) save handlers for URL '${e}'`); e = r[0] } if (e.save == null) throw new V("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined."); let n = await qt.encodeWeights(this.getNamedWeights(t)), a = { modelTopology: this.toJSON(null, !1), format: h6, generatedBy: `TensorFlow.js tfjs-layers v${E0}`, convertedBy: null }; if (t != null && t.includeOptimizer && this.optimizer != null) { a.trainingConfig = this.getTrainingConfig(); let r = "optimizer", { data: s, specs: i } = await qt.encodeWeights(await this.optimizer.getWeights(), r); n.specs.push(...i), n.data = qt.concatenateArrayBuffers([n.data, s]) } return this.userDefinedMetadata != null && (jI(this.userDefinedMetadata, this.name, !0), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = n.data, a.weightSpecs = n.specs, e.save(a) } setUserDefinedMetadata(e) { jI(e, this.name), this.userDefinedMetadata = e } getUserDefinedMetadata() { return this.userDefinedMetadata } }; _r.className = "Model"; ne.registerClass(_r); var hC = class extends _r { }; hC.className = "Functional"; ne.registerClass(hC); async function m6(e, t) { "modelTopology" in e || (e = { modelTopology: e }), e = e; let n = e.modelTopology; n.model_config != null && (n = n.model_config); let a = _c(n), r = Ba(a, t); if (e.weightsManifest != null) { let s = await qt.loadWeights(e.weightsManifest, e.pathPrefix, r.weights.map(o => o.originalName)), i = {}; for (let o of r.weights) i[o.originalName] = s[o.originalName]; r.loadWeights(i), Ee(s) } return r } async function f6(e, t) { if (t == null && (t = {}), typeof e == "string") { let n = qt.getLoadHandlers(e, t); if (n.length === 0) n.push(qt.browserHTTPRequest(e, t)); else if (n.length > 1) throw new V(`Found more than one (${n.length}) load handlers for URL '${e}'`); e = n[0] } return g6(e, void 0, t) } async function g6(e, t, n) { if (n == null && (n = {}), e.load == null) throw new V("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented."); let a = await e.load(), r = a.modelTopology; r.model_config != null && (r = r.model_config); let s = n.strict == null ? !0 : n.strict, i = a.weightData != null && a.weightSpecs != null && s, o = Ba(_c(r), t, i), l = a.trainingConfig; if (l != null && o.loadTrainingConfig(l), a.userDefinedMetadata != null && o.setUserDefinedMetadata(a.userDefinedMetadata), a.weightData != null) { if (a.weightSpecs == null) throw new V("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed."); let { modelWeights: u, optimizerWeights: p } = b6(a.weightData, a.weightSpecs); o.loadWeights(u, s), o.optimizer != null && p.length > 0 && await o.optimizer.setWeights(p), Ee(u), Ee(p.map(d => d.tensor)) } return o } function b6(e, t) { let n = qt.decodeWeights(e, t), a = {}, r = []; return t.forEach(s => { s.group === "optimizer" ? r.push({ name: s.name, tensor: n[s.name] }) : a[s.name] = n[s.name] }), { modelWeights: a, optimizerWeights: r } } var Bf = class tv extends _r { constructor(t) { if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = !0, this.built = !1, this.name = t.name != null ? t.name : _f("sequential_"), t.layers != null) for (let n of t.layers) this.add(n) } checkShape(t) { if (t.inboundNodes[0].outputTensors[0].shape.some(n => n < 0)) throw new V(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`) } add(t) { let n = t instanceof tv || t instanceof _r, a; if (n) { if (a = t, a.outputs.length !== 1) throw new V("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."); if (a.inputs.length !== 1) throw new V("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.") } if (this.outputs.length === 0) { if (t.inboundNodes.length === 0) { if (t.batchInputShape == null) throw new V("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument."); let r = q2({ batchShape: t.batchInputShape, dtype: t.dtype, name: t.name + "_input" }); t.apply(r) } if (n) this.outputs = a.outputs, this.inputs = a.inputs; else { if (t.inboundNodes.length !== 1) throw new V(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`); if (t.inboundNodes[0].outputTensors.length !== 1) throw new V("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."); this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = H2(this.outputs[0]) } this.inboundNodes = [], new Lf({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: xi(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map(r => r.shape), outputShapes: this.outputs[0].shape }) } else { let r = t.apply(this.outputs[0]); if (Array.isArray(r)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API."); this.checkShape(t), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape] } this.layers.push(t), this.built = !1 } pop() { if (this.layers.length === 0) throw new TypeError("There are no layers in the model."); if (this.layers.pop(), this.layers.length === 0) this.outputs = [], this.inboundNodes = [], this.outboundNodes = []; else { let t = this.layers.length - 1; this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape] } } call(t, n) { return this.model == null && this.build(), this.model.call(t, n) } build(t) { if (Je(t), this.inputs.length === 0 || this.outputs.length === 0) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first."); this.model = new _r({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0 } countParams() { return this.built || this.build(), super.countParams() } summary(t, n, a = console.log) { this.built || this.build(), super.summary(t, n, a) } setWeights(t) { this.model == null && this.build(), this.model.setWeights(t) } evaluate(t, n, a = {}) { if (!this.built) throw new sr("The model needs to be compiled before being used."); return this.model.evaluate(t, n, a) } async evaluateDataset(t, n) { if (!this.built) throw new sr("The model needs to be compiled before being used."); return this.model.evaluateDataset(t, n) } predict(t, n = {}) { return this.model == null && this.build(), this.model.predict(t, n) } predictOnBatch(t) { return this.model == null && this.build(), this.model.predictOnBatch(t) } compile(t) { this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames } get optimizer() { return this.model == null ? void 0 : this.model.optimizer } set optimizer(t) { this.model.optimizer = t } async fit(t, n, a = {}) { if (!this.built) throw new sr("The model needs to be compiled before being used."); return this.model.fit(t, n, a) } async fitDataset(t, n) { if (!this.built) throw new sr("The model needs to be compiled before being used."); return this.model.fitDataset(t, n) } async trainOnBatch(t, n) { return this.model.trainOnBatch(t, n) } static fromConfig(t, n, a = {}, r = !1) { let s, i = {}; if (n instanceof Array) { if (n[0].className == null || n[0].className === "Merge") throw new V("Legacy serialization format not supported yet."); s = n } else w.assert(n.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), s = n.layers, delete n.layers, i = n; let o = new t(i); if (!(o instanceof tv)) throw new ze(`Sequential.fromConfig called on non-Sequential input: ${o}`); for (let l of s) { let u = Ba(l, void 0, r); r && u.setFastWeightInitDuringBuild(!0), o.add(u) } return o } set stopTraining(t) { if (this.model == null) throw new V("Cannot set the stopTraining property of a sequential model before it is compiled."); this.model.stopTraining = t } get stopTraining() { if (this.model == null) throw new V("Cannot get the stopTraining property of a sequential model before it is compiled."); return this.model.stopTraining } getConfig() { let t = []; for (let n of this.layers) { let a = {}; a.className = n.getClassName(), a.config = n.getConfig(), t.push(a) } return { name: this.name, layers: t } } }; Bf.className = "Sequential"; ne.registerClass(Bf); function y6(e) { return new _r(e) } function x6(e) { return new Bf(e) } function mC(e) { return q2(e) } function v6(e, t) { I0.registerCallbackConstructor(e, t) } var Vn = class extends ne.Serializable { getConfig() { return {} } }, fC = class extends Vn { apply(e, t = 1) { return WG(e, t) } }; fC.className = "elu"; ne.registerClass(fC); var gC = class extends Vn { apply(e) { return hf(e) } }; gC.className = "selu"; ne.registerClass(gC); var bC = class extends Vn { apply(e) { return Ke(e) } }; bC.className = "relu"; ne.registerClass(bC); var yC = class extends Vn { apply(e) { return O(() => fs(6, Ke(e))) } }; yC.className = "relu6"; ne.registerClass(yC); var xC = class extends Vn { apply(e) { return e } }; xC.className = "linear"; ne.registerClass(xC); var vC = class extends Vn { apply(e) { return ma(e) } }; vC.className = "sigmoid"; ne.registerClass(vC); var wC = class extends Vn { apply(e) { return VG(e) } }; wC.className = "hardSigmoid"; ne.registerClass(wC); var kC = class extends Vn { apply(e) { return qo(e) } }; kC.className = "softplus"; ne.registerClass(kC); var IC = class extends Vn { apply(e) { return BG(e) } }; IC.className = "softsign"; ne.registerClass(IC); var SC = class extends Vn { apply(e) { return fi(e) } }; SC.className = "tanh"; ne.registerClass(SC); var _0 = class extends Vn { apply(e, t = -1) { return ja(e, t) } }; _0.className = "softmax"; ne.registerClass(_0); var NC = class extends Vn { apply(e, t = -1) { return sf(e, t) } }; NC.className = "logSoftmax"; ne.registerClass(NC); var TC = class extends Vn { apply(e, t = 1) { return O(() => z(ma(z(e, t)), e)) } }; TC.className = "swish"; ne.registerClass(TC); var CC = class extends Vn { apply(e) { return O(() => z(e, fi(qo(e)))) } }; CC.className = "mish"; ne.registerClass(CC); function bs(e) { return e.getClassName() } function kx(e, t = {}) { return Td(e, ne.SerializationMap.getMap().classNameMap, t, "activation") } function ys(e) { if (e == null) { let t = {}; return t.className = "linear", t.config = {}, kx(t) } if (typeof e == "string") { let t = {}; return t.className = e, t.config = {}, kx(t) } else return e instanceof Vn ? e : kx(e) } function A0(e) { if (e != null && typeof e != "object") throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`) } var EC = class extends ne.Serializable { }, Fd = class extends EC { constructor(e) { super(), A0(e), this.l1 = e == null || e.l1 == null ? .01 : e.l1, this.l2 = e == null || e.l2 == null ? .01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0 } apply(e) { return O(() => { let t = It([1]); return this.hasL1 && (t = X(t, fe(z(this.l1, Lt(e))))), this.hasL2 && (t = X(t, fe(z(this.l2, Ed(e))))), W(t, []) }) } getConfig() { return { l1: this.l1, l2: this.l2 } } static fromConfig(e, t) { return new e({ l1: t.l1, l2: t.l2 }) } }; Fd.className = "L1L2"; ne.registerClass(Fd); function w6(e) { return A0(e), new Fd({ l1: e != null ? e.l1 : null, l2: 0 }) } function k6(e) { return A0(e), new Fd({ l2: e != null ? e.l2 : null, l1: 0 }) } var QI = { l1l2: "L1L2" }; function ft(e) { return o0(e) } function eS(e, t = {}) { return Td(e, ne.SerializationMap.getMap().classNameMap, t, "regularizer") } function Nt(e) { if (e == null) return null; if (typeof e == "string") { let t = { className: e in QI ? QI[e] : e, config: {} }; return eS(t) } else return e instanceof EC ? e : eS(e) } var F0 = class extends We { constructor(e) { super(e == null ? {} : e), this.supportsMasking = !0, e != null && (this.maxValue = e.maxValue) } call(e, t) { e = Te(e); let n = Ke(e); return this.maxValue != null && (n = an(n, 0, this.maxValue)), n } computeOutputShape(e) { return e } getConfig() { let e = { maxValue: this.maxValue }, t = super.getConfig(); return Object.assign(e, t), e } }; F0.className = "ReLU"; ne.registerClass(F0); var $0 = class extends We { constructor(e) { super(e == null ? {} : e), this.DEFAULT_ALPHA = .3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha } call(e, t) { let n = Te(e); return fd(n, this.alpha) } computeOutputShape(e) { return e } getConfig() { let e = { alpha: this.alpha }, t = super.getConfig(); return Object.assign(e, t), e } }; $0.className = "LeakyReLU"; ne.registerClass($0); var D0 = class extends We { constructor(e) { if (super(e == null ? {} : e), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = !0, this.alphaInitializer = St(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = Nt(e.alphaRegularizer), this.alphaConstraint = Yt(e.alphaConstraint), e.sharedAxes == null) this.sharedAxes = null; else if (Array.isArray(e.sharedAxes)) this.sharedAxes = e.sharedAxes; else if (typeof e.sharedAxes == "number") this.sharedAxes = [e.sharedAxes]; else throw new V(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`) } build(e) { e = Je(e); let t = e.slice(1); if (this.sharedAxes != null) for (let a of this.sharedAxes) t[a - 1] = 1; this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint); let n = {}; if (this.sharedAxes != null) for (let a = 1; a < e.length; ++a)n[a] = e[a]; this.inputSpec = [new zt({ ndim: e.length, axes: n })], this.built = !0 } call(e, t) { return e = Te(e), wd(e, this.alpha.read()) } getConfig() { let e = { alphaInitializer: _t(this.alphaInitializer), alphaRegularizer: ft(this.alphaRegularizer), alphaConstraint: Xt(this.alphaConstraint), sharedAxes: this.sharedAxes }, t = super.getConfig(); return Object.assign(e, t), e } }; D0.className = "PReLU"; ne.registerClass(D0); var R0 = class extends We { constructor(e) { if (super(e == null ? {} : e), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA) throw new ze(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`); this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha } call(e, t) { let n = Te(e); return dp(n) } computeOutputShape(e) { return e } getConfig() { let e = { alpha: this.alpha }, t = super.getConfig(); return Object.assign(e, t), e } }; R0.className = "ELU"; ne.registerClass(R0); var M0 = class extends We { constructor(e) { super(e == null ? {} : e), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta } call(e, t) { let n = Te(e); return z(n, re(Tn(n, this.theta), "float32")) } computeOutputShape(e) { return e } getConfig() { let e = { theta: this.theta }, t = super.getConfig(); return Object.assign(e, t), e } }; M0.className = "ThresholdedReLU"; ne.registerClass(M0); var O0 = class extends We { constructor(e) { super(e == null ? {} : e), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new _0().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis } call(e, t) { return O(() => { let n = Te(e), a = t.mask; if (a != null) { let r = z(pe(On(n.shape), re(a, n.dtype)), ve(-1e9)); n = X(n, r) } return this.axis instanceof Array ? this.axis.length > 1 ? mn(pe(n, bd(n, this.axis, !0))) : this.softmax(n, this.axis[0]) : this.softmax(n, this.axis) }) } computeOutputShape(e) { return e } getConfig() { let e = { axis: this.axis }, t = super.getConfig(); return Object.assign(e, t), e } }; O0.className = "Softmax"; ne.registerClass(O0); function Gl(e, t, n) { if (typeof e == "number") return xi(e, t); if (e.length !== t) throw new V(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`); for (let a = 0; a < t; ++a) { let r = e[a]; if (!OG(r)) throw new V(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`) } return e } function Va(e, t, n, a, r = 1) { if (e == null) return e; let s = t + (t - 1) * (r - 1), i; return n === "same" ? i = e : i = e - s + 1, Math.floor((i + a - 1) / a) } function rr(e, t, n, a) { if (e == null) return null; if (a === "valid") e = e * t + gs([n - t, 0]); else if (a === "same") e = e * t; else throw new V(`Unsupport padding mode: ${a}.`); return e } function P0(e, t) { return O(() => (Rt(t), t === "channelsFirst" ? De(e, [0, 2, 3, 1]) : e)) } function _C(e, t) { return O(() => (Rt(t), t === "channelsFirst" ? De(e, [0, 2, 3, 4, 1]) : e)) } function I6(e, t, n, a = 1, r = "valid", s, i = 1) { return O(() => { if (s == null && (s = Ga()), Rt(s), e.shape.length !== 3) throw new V(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`); if (t.shape.length !== 3) throw new V(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`); if (n != null && n.shape.length !== 1) throw new V(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`); if (s === "channelsFirst" && (e = De(e, [0, 2, 1])), r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."); let o = Qm(e, t, a, r === "same" ? "same" : "valid", "NWC", i); return n != null && (o = Ka(o, n)), o }) } function tS(e, t, n, a = [1, 1], r = "valid", s, i, o = null) { return O(() => { if (s == null && (s = Ga()), Rt(s), e.rank !== 3 && e.rank !== 4) throw new V(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`); if (t.rank !== 3 && t.rank !== 4) throw new V(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`); let l = P0(e, s); if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet."); return l = tu.conv2d({ x: l, filter: t, strides: a, pad: r === "same" ? "same" : "valid", dilations: i, dataFormat: "NHWC", bias: n, activation: o }), s === "channelsFirst" && (l = De(l, [0, 3, 1, 2])), l }) } function S6(e, t, n, a = [1, 1, 1], r = "valid", s, i) { return O(() => { if (s == null && (s = Ga()), Rt(s), e.rank !== 4 && e.rank !== 5) throw new V(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`); if (t.rank !== 4 && t.rank !== 5) throw new V(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`); let o = _C(e, s); if (r === "causal") throw new ze("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet."); return o = pw(o, t, a, r === "same" ? "same" : "valid", "NDHWC", i), n != null && (o = Ka(o, n)), s === "channelsFirst" && (o = De(o, [0, 4, 1, 2, 3])), o }) } var AC = class FC extends We { constructor(t, n) { if (super(n), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", FC.verifyArgs(n), this.rank = t, tn(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3) throw new ze(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`); if (this.kernelSize = Gl(n.kernelSize, t, "kernelSize"), this.strides = Gl(n.strides == null ? 1 : n.strides, t, "strides"), this.padding = n.padding == null ? "valid" : n.padding, wa(this.padding), this.dataFormat = n.dataFormat == null ? "channelsLast" : n.dataFormat, Rt(this.dataFormat), this.activation = ys(n.activation), this.useBias = n.useBias == null ? !0 : n.useBias, this.biasInitializer = St(n.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Yt(n.biasConstraint), this.biasRegularizer = Nt(n.biasRegularizer), this.activityRegularizer = Nt(n.activityRegularizer), this.dilationRate = Gl(n.dilationRate == null ? 1 : n.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) throw new V(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`); if (this.rank === 2) { if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate]; else if (this.dilationRate.length !== 2) throw new V(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`) } else if (this.rank === 3) { if (typeof this.dilationRate == "number") this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate]; else if (this.dilationRate.length !== 3) throw new V(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`) } } static verifyArgs(t) { if (ar("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !l0(t.kernelSize, "number", 1, 3)) throw new V(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`) } getConfig() { let t = { kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: bs(this.activation), useBias: this.useBias, biasInitializer: _t(this.biasInitializer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), biasConstraint: Xt(this.biasConstraint) }, n = super.getConfig(); return Object.assign(t, n), t } }, Vf = class $C extends AC { constructor(t, n) { super(t, n), this.kernel = null, $C.verifyArgs(n), this.filters = n.filters, tn(this.filters, "filters"), this.kernelInitializer = St(n.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Yt(n.kernelConstraint), this.kernelRegularizer = Nt(n.kernelRegularizer) } build(t) { t = Je(t); let n = this.dataFormat === "channelsFirst" ? 1 : t.length - 1; if (t[n] == null) throw new V(`The channel dimension of the input should be defined. Found ${t[n]}`); let a = t[n], r = this.kernelSize.concat([a, this.filters]); this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [n]: a } }], this.built = !0 } call(t, n) { return O(() => { t = Te(t); let a, r = this.bias == null ? null : this.bias.read(), s = O2(this.activation.getClassName()); if (s != null && this.rank === 2) a = tS(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, s); else { if (this.rank === 1) a = I6(t, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]); else if (this.rank === 2) a = tS(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate); else if (this.rank === 3) a = S6(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate); else throw new ze("convolutions greater than 3D are not implemented yet."); this.activation != null && (a = this.activation.apply(a)) } return a }) } computeOutputShape(t) { t = Je(t); let n = [], a = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2); for (let s = 0; s < a.length; ++s) { let i = Va(a[s], this.kernelSize[s], this.padding, this.strides[s], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[s]); n.push(i) } let r = [t[0]]; return this.dataFormat === "channelsLast" ? (r = r.concat(n), r.push(this.filters)) : (r.push(this.filters), r = r.concat(n)), r } getConfig() { let t = { filters: this.filters, kernelInitializer: _t(this.kernelInitializer), kernelRegularizer: ft(this.kernelRegularizer), kernelConstraint: Xt(this.kernelConstraint) }, n = super.getConfig(); return Object.assign(t, n), t } static verifyArgs(t) { if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1) throw new V(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`) } }, Uf = class DC extends Vf { constructor(t) { super(2, t), DC.verifyArgs(t) } getConfig() { let t = super.getConfig(); return delete t.rank, t } static verifyArgs(t) { if (typeof t.kernelSize != "number" && !l0(t.kernelSize, "number", 1, 2)) throw new V(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`) } }; Uf.className = "Conv2D"; ne.registerClass(Uf); var Gf = class RC extends Vf { constructor(t) { super(3, t), RC.verifyArgs(t) } getConfig() { let t = super.getConfig(); return delete t.rank, t } static verifyArgs(t) { if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3))) throw new V(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`) } }; Gf.className = "Conv3D"; ne.registerClass(Gf); var L0 = class extends Uf { constructor(e) { if (super(e), this.inputSpec = [new zt({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid") throw new V(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`) } build(e) { if (e = Je(e), e.length !== 4) throw new V("Input should have rank 4; Received input shape: " + JSON.stringify(e)); let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1; if (e[t] == null) throw new V("The channel dimension of the inputs should be defined. Found `None`."); let n = e[t], a = this.kernelSize.concat([this.filters, n]); this.kernel = this.addWeight("kernel", a, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new zt({ ndim: 4, axes: { [t]: n } })], this.built = !0 } call(e, t) { return O(() => { let n = Te(e); if (n.shape.length !== 4) throw new V(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`); let a = n.shape, r = a[0], s, i; this.dataFormat === "channelsFirst" ? (s = 2, i = 3) : (s = 1, i = 2); let o = a[s], l = a[i], u = this.kernelSize[0], p = this.kernelSize[1], d = this.strides[0], c = this.strides[1], h = rr(o, d, u, this.padding), m = rr(l, c, p, this.padding), f = [r, h, m, this.filters]; this.dataFormat !== "channelsLast" && (n = De(n, [0, 2, 3, 1])); let g = ef(n, this.kernel.read(), f, this.strides, this.padding); return this.dataFormat !== "channelsLast" && (g = De(g, [0, 3, 1, 2])), this.bias != null && (g = Ka(g, this.bias.read(), this.dataFormat)), this.activation != null && (g = this.activation.apply(g)), g }) } computeOutputShape(e) { e = Je(e); let t = e.slice(), n, a, r; this.dataFormat === "channelsFirst" ? (n = 1, a = 2, r = 3) : (n = 3, a = 1, r = 2); let s = this.kernelSize[0], i = this.kernelSize[1], o = this.strides[0], l = this.strides[1]; return t[n] = this.filters, t[a] = rr(t[a], o, s, this.padding), t[r] = rr(t[r], l, i, this.padding), t } getConfig() { let e = super.getConfig(); return delete e.dilationRate, e } }; L0.className = "Conv2DTranspose"; ne.registerClass(L0); var z0 = class extends Gf { constructor(e) { if (super(e), this.inputSpec = [new zt({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid") throw new V(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`) } build(e) { if (e = Je(e), e.length !== 5) throw new V("Input should have rank 5; Received input shape: " + JSON.stringify(e)); let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1; if (e[t] == null) throw new V("The channel dimension of the inputs should be defined. Found `None`."); let n = e[t], a = this.kernelSize.concat([this.filters, n]); this.kernel = this.addWeight("kernel", a, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new zt({ ndim: 5, axes: { [t]: n } })], this.built = !0 } call(e, t) { return O(() => { let n = Te(e); if (n.shape.length !== 5) throw new V(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`); let a = n.shape, r = a[0], s, i, o; this.dataFormat === "channelsFirst" ? (o = 2, s = 3, i = 4) : (o = 1, s = 2, i = 3); let l = a[o], u = a[s], p = a[i], d = this.kernelSize[0], c = this.kernelSize[1], h = this.kernelSize[2], m = this.strides[0], f = this.strides[1], g = this.strides[2], b = rr(l, m, d, this.padding), y = rr(u, f, c, this.padding), x = rr(p, g, h, this.padding), v = [r, b, y, x, this.filters]; this.dataFormat !== "channelsLast" && (n = De(n, [0, 2, 3, 4, 1])); let I = cw(n, this.kernel.read(), v, this.strides, this.padding); return this.dataFormat !== "channelsLast" && (I = De(I, [0, 4, 1, 2, 3])), this.bias !== null && (I = Ka(I, this.bias.read(), this.dataFormat)), this.activation !== null && (I = this.activation.apply(I)), I }) } computeOutputShape(e) { e = Je(e); let t = e.slice(), n, a, r, s; this.dataFormat === "channelsFirst" ? (n = 1, a = 2, r = 3, s = 4) : (n = 4, a = 1, r = 2, s = 3); let i = this.kernelSize[0], o = this.kernelSize[1], l = this.kernelSize[2], u = this.strides[0], p = this.strides[1], d = this.strides[2]; return t[n] = this.filters, t[a] = rr(t[a], u, i, this.padding), t[r] = rr(t[r], p, o, this.padding), t[s] = rr(t[s], d, l, this.padding), t } getConfig() { let e = super.getConfig(); return delete e.dilationRate, e } }; z0.className = "Conv3DTranspose"; ne.registerClass(z0); var MC = class extends Vf { constructor(e, t) { if (super(e, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null) throw new V("The `filters` configuration field is required by SeparableConv, but is unspecified."); if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null) throw new V("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead."); if (t.padding != null && t.padding !== "same" && t.padding !== "valid") throw new V(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`); this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = St(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = Nt(t.depthwiseRegularizer), this.depthwiseConstraint = Yt(t.depthwiseConstraint), this.pointwiseInitializer = St(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = Nt(t.pointwiseRegularizer), this.pointwiseConstraint = Yt(t.pointwiseConstraint) } build(e) { if (e = Je(e), e.length < this.rank + 2) throw new V(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`); let t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1; if (e[t] == null || e[t] < 0) throw new V(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`); let n = e[t], a = this.kernelSize.concat([n, this.depthMultiplier]), r = []; for (let i = 0; i < this.rank; ++i)r.push(1); r.push(n * this.depthMultiplier, this.filters); let s = !0; this.depthwiseKernel = this.addWeight("depthwise_kernel", a, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, s, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", r, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, s, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, s, this.biasConstraint) : this.bias = null, this.inputSpec = [new zt({ ndim: this.rank + 2, axes: { [t]: n } })], this.built = !0 } call(e, t) { return O(() => { e = Te(e); let n; if (this.rank === 1) throw new ze("1D separable convolution is not implemented yet."); return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = De(e, [0, 2, 3, 1])), n = $s(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (n = Ka(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), this.dataFormat === "channelsFirst" && (n = De(n, [0, 3, 1, 2])), n }) } getConfig() { let e = super.getConfig(); return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = _t(this.depthwiseInitializer), e.pointwiseInitializer = _t(this.pointwiseInitializer), e.depthwiseRegularizer = ft(this.depthwiseRegularizer), e.pointwiseRegularizer = ft(this.pointwiseRegularizer), e.depthwiseConstraint = Xt(this.depthwiseConstraint), e.pointwiseConstraint = Xt(this.pointwiseConstraint), e } }; MC.className = "SeparableConv"; var W0 = class extends MC { constructor(e) { super(2, e) } }; W0.className = "SeparableConv2D"; ne.registerClass(W0); var B0 = class OC extends Vf { constructor(t) { super(1, t), OC.verifyArgs(t), this.inputSpec = [{ ndim: 3 }] } getConfig() { let t = super.getConfig(); return delete t.rank, delete t.dataFormat, t } static verifyArgs(t) { if (typeof t.kernelSize != "number" && !l0(t.kernelSize, "number", 1, 1)) throw new V(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`) } }; B0.className = "Conv1D"; ne.registerClass(B0); var V0 = class extends We { constructor(e) { super(e), typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [[e.cropping[0], e.cropping[0]], [e.cropping[1], e.cropping[1]]] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }] } computeOutputShape(e) { return this.dataFormat === "channelsFirst" ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[3] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]] } call(e, t) { return O(() => { if (e = Te(e), this.dataFormat === "channelsLast") { let n = Ph(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2); return Ph(n, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3) } else { let n = Ph(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3); return Ph(n, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4) } }) } getConfig() { let e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig(); return Object.assign(e, t), e } }; V0.className = "Cropping2D"; ne.registerClass(V0); var U0 = class extends We { constructor(e) { super(e), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, DG(this.interpolation) } computeOutputShape(e) { if (this.dataFormat === "channelsFirst") { let t = e[2] == null ? null : this.size[0] * e[2], n = e[3] == null ? null : this.size[1] * e[3]; return [e[0], e[1], t, n] } else { let t = e[1] == null ? null : this.size[0] * e[1], n = e[2] == null ? null : this.size[1] * e[2]; return [e[0], t, n, e[3]] } } call(e, t) { return O(() => { let n = Te(e), a = n.shape; if (this.dataFormat === "channelsFirst") { n = De(n, [0, 2, 3, 1]); let r = this.size[0] * a[2], s = this.size[1] * a[3], i = this.interpolation === "nearest" ? Qn.resizeNearestNeighbor(n, [r, s]) : Qn.resizeBilinear(n, [r, s]); return De(i, [0, 3, 1, 2]) } else { let r = this.size[0] * a[1], s = this.size[1] * a[2]; return this.interpolation === "nearest" ? Qn.resizeNearestNeighbor(n, [r, s]) : Qn.resizeBilinear(n, [r, s]) } }) } getConfig() { let e = { size: this.size, dataFormat: this.dataFormat, interpolation: this.interpolation }, t = super.getConfig(); return Object.assign(e, t), e } }; U0.className = "UpSampling2D"; ne.registerClass(U0); function N6(e, t, n = [1, 1], a = "valid", r, s) { return O(() => { r == null && (r = Ga()), Rt(r); let i = P0(e, r); if (e.rank !== 4) throw new V(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`); if (t.rank !== 4) throw new V(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`); return i = _s(i, t, n, a === "same" ? "same" : "valid", "NHWC", s), r === "channelsFirst" && (i = De(i, [0, 3, 1, 2])), i }) } var G0 = class extends AC { constructor(e) { super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = St(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Yt(e.depthwiseConstraint), this.depthwiseRegularizer = Nt(e.depthwiseRegularizer) } build(e) { if (e = Je(e), e.length < 4) throw new V(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`); let t = this.dataFormat === "channelsFirst" ? 1 : 3; if (e[t] == null || e[t] < 0) throw new V(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`); let n = e[t], a = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier]; this.depthwiseKernel = this.addWeight("depthwise_kernel", a, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0 } call(e, t) { return O(() => { e = Te(e); let n = N6(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null); return this.useBias && (n = Ka(n, this.bias.read(), this.dataFormat)), this.activation != null && (n = this.activation.apply(n)), n }) } computeOutputShape(e) { e = Je(e); let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], a = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, r = Va(t, this.kernelSize[0], this.padding, this.strides[0]), s = Va(n, this.kernelSize[1], this.padding, this.strides[1]); return this.dataFormat === "channelsFirst" ? [e[0], a, r, s] : [e[0], r, s, a] } getConfig() { let e = super.getConfig(); return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = _t(this.depthwiseInitializer), e.depthwiseRegularizer = ft(this.depthwiseRegularizer), e.depthwiseConstraint = Xt(this.depthwiseRegularizer), e } }; G0.className = "DepthwiseConv2D"; ne.registerClass(G0); function PC(e, t, n, a) { if (Array.isArray(e)) { if (t != null || n != null) throw new V("When inputs is an array, neither initialState or constants should be provided"); a != null && (n = e.slice(e.length - a, e.length), e = e.slice(0, e.length - a)), e.length > 1 && (t = e.slice(1, e.length)), e = e[0] } function r(s) { return s == null || Array.isArray(s) ? s : [s] } return t = r(t), n = r(n), { inputs: e, initialState: t, constants: n } } function LC(e, t, n, a = !1, r, s, i = !1, o = !1) { return O(() => { let l = t.shape.length; if (l < 3) throw new V(`Input should be at least 3D, but is ${l}D.`); let u = [1, 0].concat(Ua(2, l)); if (t = De(t, u), s != null) throw new ze("The rnn() functoin of the deeplearn.js backend does not support constants yet."); i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = re(re(r, "bool"), "float32"), r.rank === l - 1 && (r = Gt(r, -1)), r = De(r, u)), a && (t = ya(t, 0), r != null && (r = ya(r, 0))); let p = [], d, c = n, h = t.shape[0], m = dt(t), f; r != null && (f = dt(r)); for (let b = 0; b < h; ++b) { let y = m[b], x = O(() => e(y, c)); if (r == null) d = x[0], c = x[1]; else { let v = O(() => { let I = f[b], N = pe(na(I), I), C = X(z(x[0], I), z(c[0], N)), _ = c.map((F, D) => X(z(x[1][D], I), z(F, N))); return { output: C, newStates: _ } }); d = v.output, c = v.newStates } o && p.push(d) } let g; return o && (g = Ft(p, 1)), [d, g, c] }) } var Pr = class zC extends We { constructor(t) { super(t); let n; if (t.cell == null) throw new V("cell property is missing for the constructor of RNN."); if (Array.isArray(t.cell) ? n = new jf({ cells: t.cell }) : n = t.cell, n.stateSize == null) throw new V("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state)."); this.cell = n, this.returnSequences = t.returnSequences == null ? !1 : t.returnSequences, this.returnState = t.returnState == null ? !1 : t.returnState, this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards, this._stateful = t.stateful == null ? !1 : t.stateful, this.unroll = t.unroll == null ? !1 : t.unroll, this.supportsMasking = !0, this.inputSpec = [new zt({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [] } getStates() { if (this.states_ == null) { let t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1; return Ua(0, t).map(n => null) } else return this.states_ } setStates(t) { this.states_ = t } computeOutputShape(t) { Xx(t) && (t = t[0]), t = t; let n = this.cell.stateSize; Array.isArray(n) || (n = [n]); let a = n[0], r; if (this.returnSequences ? r = [t[0], t[1], a] : r = [t[0], a], this.returnState) { let s = []; for (let i of n) s.push([t[0], i]); return [r].concat(s) } else return r } computeMask(t, n) { return O(() => { Array.isArray(n) && (n = n[0]); let a = this.returnSequences ? n : null; if (this.returnState) { let r = this.states.map(s => null); return [a].concat(r) } else return a }) } get states() { if (this.states_ == null) { let t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, n = []; for (let a = 0; a < t; ++a)n.push(null); return n } else return this.states_ } set states(t) { this.states_ = t } build(t) { if (this.numConstants != null) throw new ze("Constants support is not implemented in RNN yet."); Xx(t) && (t = t[0]), t = t; let n = this.stateful ? t[0] : null, a = t.slice(2); this.inputSpec[0] = new zt({ shape: [n, null, ...a] }); let r = [t[0]].concat(t.slice(2)); this.cell.build(r); let s; if (Array.isArray(this.cell.stateSize) ? s = this.cell.stateSize : s = [this.cell.stateSize], this.stateSpec != null) { if (!w.arraysEqual(this.stateSpec.map(i => i.shape[i.shape.length - 1]), s)) throw new V(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`) } else this.stateSpec = s.map(i => new zt({ shape: [null, i] })); this.stateful && this.resetStates() } resetStates(t, n = !1) { O(() => { if (!this.stateful) throw new Qr("Cannot call resetStates() on an RNN Layer that is not stateful."); let a = this.inputSpec[0].shape[0]; if (a == null) throw new V("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer."); if (this.states_ == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(r => It([a, r])) : this.states_ = [It([a, this.cell.stateSize])]; else if (t == null) Ee(this.states_), this.keptStates != null && (Ee(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(r => It([a, r])) : this.states_[0] = It([a, this.cell.stateSize]); else { if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length) throw new V(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`); n === !0 ? this.keptStates.push(this.states_.slice()) : Ee(this.states_); for (let r = 0; r < this.states_.length; ++r) { let s = t[r], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, o = [a, i]; if (!w.arraysEqual(s.shape, o)) throw new V(`State ${r} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${s.shape}`); this.states_[r] = s } } this.states_ = this.states_.map(r => Ht(r.clone())) }) } apply(t, n) { let a = n == null ? null : n.initialState, r = n == null ? null : n.constants; n == null && (n = {}); let s = PC(t, a, r, this.numConstants); t = s.inputs, a = s.initialState, r = s.constants; let i = [], o = []; if (a != null) { n.initialState = a, i = i.concat(a), this.stateSpec = []; for (let l of a) this.stateSpec.push(new zt({ shape: l.shape })); o = o.concat(this.stateSpec) } if (r != null && (n.constants = r, i = i.concat(r), this.numConstants = r.length), i[0] instanceof Ha) { let l = [t].concat(i), u = this.inputSpec.concat(o), p = this.inputSpec; this.inputSpec = u; let d = super.apply(l, n); return this.inputSpec = p, d } else return super.apply(t, n) } call(t, n) { return O(() => { let a = n == null ? null : n.mask, r = n == null ? null : n.training, s = n == null ? null : n.initialState; t = Te(t), s == null && (this.stateful ? s = this.states_ : s = this.getInitialState(t)); let i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1; if (s.length !== i) throw new V(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`); this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend."); let o = { training: r }, l = LC((h, m) => { let f = this.cell.call([h].concat(m), o); return [f[0], f.slice(1)] }, t, s, this.goBackwards, a, null, this.unroll, this.returnSequences), u = l[0], p = l[1], d = l[2]; this.stateful && this.resetStates(d, r); let c = this.returnSequences ? p : u; return this.returnState ? [c].concat(d) : c }) } getInitialState(t) { return O(() => { let n = It(t.shape); return n = fe(n, [1, 2]), n = Cd(n), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map(a => a > 1 ? jx(n, [1, a]) : n) : this.cell.stateSize > 1 ? [jx(n, [1, this.cell.stateSize])] : [n] }) } get trainableWeights() { return this.trainable ? this.cell.trainableWeights : [] } get nonTrainableWeights() { return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights } setFastWeightInitDuringBuild(t) { super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t) } getConfig() { let t = super.getConfig(), n = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll }; this.numConstants != null && (n.numConstants = this.numConstants); let a = this.cell.getConfig(); return this.getClassName() === zC.className && (n.cell = { className: this.cell.getClassName(), config: a }), Object.assign(Object.assign(Object.assign({}, a), t), n) } static fromConfig(t, n, a = {}) { let r = n.cell, s = Ba(r, a); return new t(Object.assign(n, { cell: s })) } }; Pr.className = "RNN"; ne.registerClass(Pr); var $d = class extends We { }, Hf = class extends $d { constructor(e) { super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, tn(this.units, "units"), this.activation = ys(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = St(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Nt(e.kernelRegularizer), this.recurrentRegularizer = Nt(e.recurrentRegularizer), this.biasRegularizer = Nt(e.biasRegularizer), this.kernelConstraint = Yt(e.kernelConstraint), this.recurrentConstraint = Yt(e.recurrentConstraint), this.biasConstraint = Yt(e.biasConstraint), this.dropout = nu([1, gs([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = nu([1, gs([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null } build(e) { e = Je(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0 } call(e, t) { return O(() => { if (e = e, e.length !== 2) throw new V(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`); let n = e[1]; e = e[0]; let a = t.training == null ? !1 : t.training; 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xs({ ones: () => na(e), rate: this.dropout, training: a, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xs({ ones: () => na(n), rate: this.recurrentDropout, training: a, dropoutFunc: this.dropoutFunc })); let r, s = this.dropoutMask, i = this.recurrentDropoutMask; s != null ? r = ur(z(e, s), this.kernel.read()) : r = ur(e, this.kernel.read()), this.bias != null && (r = Ka(r, this.bias.read())), i != null && (n = z(n, i)); let o = X(r, ur(n, this.recurrentKernel.read())); return this.activation != null && (o = this.activation.apply(o)), [o, o] }) } getConfig() { let e = super.getConfig(), t = { units: this.units, activation: bs(this.activation), useBias: this.useBias, kernelInitializer: _t(this.kernelInitializer), recurrentInitializer: _t(this.recurrentInitializer), biasInitializer: _t(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout }; return Object.assign(Object.assign({}, e), t) } }; Hf.className = "SimpleRNNCell"; ne.registerClass(Hf); var H0 = class extends Pr { constructor(e) { e.cell = new Hf(e), super(e) } call(e, t) { return O(() => { this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null); let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState; return super.call(e, { mask: n, training: a, initialState: r }) }) } static fromConfig(e, t) { return new e(t) } }; H0.className = "SimpleRNN"; ne.registerClass(H0); var qf = class extends $d { constructor(e) { if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter) throw new V("GRUCell does not support reset_after parameter set to true."); this.units = e.units, tn(this.units, "units"), this.activation = ys(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = ys(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = St(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = Nt(e.kernelRegularizer), this.recurrentRegularizer = Nt(e.recurrentRegularizer), this.biasRegularizer = Nt(e.biasRegularizer), this.kernelConstraint = Yt(e.kernelConstraint), this.recurrentConstraint = Yt(e.recurrentConstraint), this.biasConstraint = Yt(e.biasConstraint), this.dropout = nu([1, gs([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = nu([1, gs([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null } build(e) { e = Je(e); let t = e[e.length - 1]; this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0 } call(e, t) { return O(() => { if (e = e, e.length !== 2) throw new V(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`); let n = t.training == null ? !1 : t.training, a = e[1]; e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xs({ ones: () => na(e), rate: this.dropout, training: n, count: 3, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xs({ ones: () => na(a), rate: this.recurrentDropout, training: n, count: 3, dropoutFunc: this.dropoutFunc })); let r = this.dropoutMask, s = this.recurrentDropoutMask, i, o, l; 0 < this.dropout && this.dropout < 1 && (e = z(e, r[0])); let u = ur(e, this.kernel.read()); this.useBias && (u = Ka(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (a = z(a, s[0])); let p = this.recurrentKernel.read(), [d, c] = Pn(p, [2 * this.units, this.units], p.rank - 1), h = ur(a, d), [m, f, g] = Pn(u, 3, u.rank - 1), [b, y] = Pn(h, 2, h.rank - 1); i = this.recurrentActivation.apply(X(m, b)), o = this.recurrentActivation.apply(X(f, y)); let x = ur(z(o, a), c); l = this.activation.apply(X(g, x)); let v = X(z(i, a), z(X(1, yt(i)), l)); return [v, v] }) } getConfig() { let e = super.getConfig(), t = { units: this.units, activation: bs(this.activation), recurrentActivation: bs(this.recurrentActivation), useBias: this.useBias, kernelInitializer: _t(this.kernelInitializer), recurrentInitializer: _t(this.recurrentInitializer), biasInitializer: _t(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation, resetAfter: !1 }; return Object.assign(Object.assign({}, e), t) } }; qf.className = "GRUCell"; ne.registerClass(qf); var q0 = class extends Pr { constructor(e) { e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new qf(e), super(e) } call(e, t) { return O(() => { this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null); let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState; return super.call(e, { mask: n, training: a, initialState: r }) }) } static fromConfig(e, t) { return t.implmentation === 0 && (t.implementation = 1), new e(t) } }; q0.className = "GRU"; ne.registerClass(q0); var Dd = class extends $d { constructor(e) { super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, tn(this.units, "units"), this.activation = ys(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = ys(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = St(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = St(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = St(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = Nt(e.kernelRegularizer), this.recurrentRegularizer = Nt(e.recurrentRegularizer), this.biasRegularizer = Nt(e.biasRegularizer), this.kernelConstraint = Yt(e.kernelConstraint), this.recurrentConstraint = Yt(e.recurrentConstraint), this.biasConstraint = Yt(e.biasConstraint), this.dropout = nu([1, gs([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = nu([1, gs([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null } build(e) { var t; e = Je(e); let n = e[e.length - 1]; this.kernel = this.addWeight("kernel", [n, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint); let a; if (this.useBias) { if (this.unitForgetBias) { let r = this.biasInitializer, s = this.units; a = new (t = class extends Ra { apply(i, o) { let l = r.apply([s]), u = new Ff().apply([s]), p = r.apply([s * 2]); return zI(zI(l, u), p) } }, t.className = "CustomInit", t) } else a = this.biasInitializer; this.bias = this.addWeight("bias", [this.units * 4], null, a, this.biasRegularizer, !0, this.biasConstraint) } else this.bias = null; this.built = !0 } call(e, t) { return O(() => { let n = t.training == null ? !1 : t.training; if (e = e, e.length !== 3) throw new V(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`); let a = e[1], r = e[2]; e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xs({ ones: () => na(e), rate: this.dropout, training: n, count: 4, dropoutFunc: this.dropoutFunc })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xs({ ones: () => na(a), rate: this.recurrentDropout, training: n, count: 4, dropoutFunc: this.dropoutFunc })); let s = this.dropoutMask, i = this.recurrentDropoutMask, o, l, u, p; 0 < this.dropout && this.dropout < 1 && (e = z(e, s[0])); let d = ur(e, this.kernel.read()); 0 < this.recurrentDropout && this.recurrentDropout < 1 && (a = z(a, i[0])), d = X(d, ur(a, this.recurrentKernel.read())), this.useBias && (d = Ka(d, this.bias.read())); let [c, h, m, f] = Pn(d, 4, d.rank - 1); o = this.recurrentActivation.apply(c), l = this.recurrentActivation.apply(h), u = X(z(l, r), z(o, this.activation.apply(m))), p = this.recurrentActivation.apply(f); let g = z(p, this.activation.apply(u)); return [g, g, u] }) } getConfig() { let e = super.getConfig(), t = { units: this.units, activation: bs(this.activation), recurrentActivation: bs(this.recurrentActivation), useBias: this.useBias, kernelInitializer: _t(this.kernelInitializer), recurrentInitializer: _t(this.recurrentInitializer), biasInitializer: _t(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: ft(this.kernelRegularizer), recurrentRegularizer: ft(this.recurrentRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), recurrentConstraint: Xt(this.recurrentConstraint), biasConstraint: Xt(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation }; return Object.assign(Object.assign({}, e), t) } }; Dd.className = "LSTMCell"; ne.registerClass(Dd); var j0 = class extends Pr { constructor(e) { e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Dd(e), super(e) } call(e, t) { return O(() => { this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null); let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState; return super.call(e, { mask: n, training: a, initialState: r }) }) } static fromConfig(e, t) { return t.implmentation === 0 && (t.implementation = 1), new e(t) } }; j0.className = "LSTM"; ne.registerClass(j0); var jf = class extends $d { constructor(e) { super(e), this.cells = e.cells } get stateSize() { let e = []; for (let t of this.cells.slice().reverse()) Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize); return e } call(e, t) { return O(() => { e = e; let n = e.slice(1), a = []; for (let i of this.cells.slice().reverse()) Array.isArray(i.stateSize) ? a.push(n.splice(0, i.stateSize.length)) : a.push(n.splice(0, 1)); a.reverse(); let r = [], s; for (let i = 0; i < this.cells.length; ++i) { let o = this.cells[i]; n = a[i], i === 0 ? s = [e[0]].concat(n) : s = [s[0]].concat(n), s = o.call(s, t), r.push(s.slice(1)) } n = []; for (let i of r.slice().reverse()) n.push(...i); return [s[0]].concat(n) }) } build(e) { Xx(e) && (e = e[0]), e = e; let t; this.cells.forEach((n, a) => { si(`RNNCell_${a}`, () => { n.build(e), Array.isArray(n.stateSize) ? t = n.stateSize[0] : t = n.stateSize, e = [e[0], t] }) }), this.built = !0 } getConfig() { let e = super.getConfig(), t = a => ({ className: a.getClassName(), config: a.getConfig() }), n = { cells: this.cells.map(t) }; return Object.assign(Object.assign({}, e), n) } static fromConfig(e, t, n = {}) { let a = []; for (let r of t.cells) a.push(Ba(r, n)); return new e({ cells: a }) } get trainableWeights() { if (!this.trainable) return []; let e = []; for (let t of this.cells) e.push(...t.trainableWeights); return e } get nonTrainableWeights() { let e = []; for (let t of this.cells) e.push(...t.nonTrainableWeights); if (!this.trainable) { let t = []; for (let n of this.cells) t.push(...n.trainableWeights); return t.concat(e) } return e } getWeights() { let e = []; for (let t of this.cells) e.push(...t.weights); return Yx(e) } setWeights(e) { let t = []; for (let n of this.cells) { let a = n.weights.length, r = e.splice(a); for (let s = 0; s < n.weights.length; ++s)t.push([n.weights[s], r[s]]) } b0(t) } }; jf.className = "StackedRNNCells"; ne.registerClass(jf); function xs(e) { let { ones: t, rate: n, training: a = !1, count: r = 1, dropoutFunc: s } = e, i = () => s != null ? s(t(), n) : U2(t(), n), o = () => _d(i, t, a); return !r || r <= 1 ? Ht(o().clone()) : Array(r).fill(void 0).map(o).map(l => Ht(l.clone())) } var T6 = function (e, t) { var n = {}; for (var a in e) Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (n[a] = e[a]); if (e != null && typeof Object.getOwnPropertySymbols == "function") for (var r = 0, a = Object.getOwnPropertySymbols(e); r < a.length; r++)t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[r]) && (n[a[r]] = e[a[r]]); return n }, WC = class extends Pr { constructor(e) { if (e.unroll) throw new ze("Unrolling is not possible with convolutional RNNs."); if (Array.isArray(e.cell)) throw new ze("It is not possible at the moment to stack convolutional cells."); super(e), this.inputSpec = [new zt({ ndim: 5 })] } call(e, t) { return O(() => { if (this.cell.dropoutMask != null && (Ee(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Ee(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants) throw new V("ConvRNN2D cell does not support constants"); let n = t == null ? null : t.mask, a = t == null ? null : t.training, r = t == null ? null : t.initialState; return super.call(e, { mask: n, training: a, initialState: r }) }) } computeOutputShape(e) { let t = this.computeSingleOutputShape(e); return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t } getInitialState(e) { return O(() => { let { stateSize: t } = this.cell, n = e.shape, a = this.computeSingleOutputShape(n), r = [a[0], ...a.slice(2)], s = It(r); return Array.isArray(t) ? Array(t.length).fill(s) : [s] }) } resetStates(e, t = !1) { O(() => { if (!this.stateful) throw new Qr("Cannot call resetStates() on an RNN Layer that is not stateful."); let n = this.inputSpec[0].shape, a = this.computeSingleOutputShape(n), r = [a[0], ...a.slice(2)]; if (n[0] == null) throw new V("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer."); if (this.getStates() == null) Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => It(r)) : this.states_ = [It(r)]; else if (e == null) Ee(this.states_), this.keptStates != null && (Ee(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => It(r)) : this.states_[0] = It(r); else { if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length) throw new V(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`); t ? this.keptStates.push(this.states_.slice()) : Ee(this.states_); for (let s = 0; s < this.states_.length; ++s) { let i = e[s], o = r; if (!w.arraysEqual(i.shape, o)) throw new V(`State ${s} is incompatible with layer ${this.name}: expected shape=${o}, received shape=${i.shape}`); this.states_[s] = i } } this.states_ = this.states_.map(s => Ht(s.clone())) }) } computeSingleOutputShape(e) { let { dataFormat: t, filters: n, kernelSize: a, padding: r, strides: s, dilationRate: i } = this.cell, o = t === "channelsFirst", l = e[o ? 3 : 2], u = e[o ? 4 : 3], p = Va(l, a[0], r, s[0], i[0]), d = Va(u, a[1], r, s[1], i[1]); return [...e.slice(0, 2), ...o ? [n, p, d] : [p, d, n]] } }; WC.className = "ConvRNN2D"; var Kf = class extends Dd { constructor(e) { let { filters: t, kernelSize: n, strides: a, padding: r, dataFormat: s, dilationRate: i } = e; super(Object.assign(Object.assign({}, e), { units: t })), this.filters = t, tn(this.filters, "filters"), this.kernelSize = Gl(n, 2, "kernelSize"), this.kernelSize.forEach(o => tn(o, "kernelSize")), this.strides = Gl(a || 1, 2, "strides"), this.strides.forEach(o => tn(o, "strides")), this.padding = r || "valid", wa(this.padding), this.dataFormat = s || "channelsLast", Rt(this.dataFormat), this.dilationRate = Gl(i || 1, 2, "dilationRate"), this.dilationRate.forEach(o => tn(o, "dilationRate")) } build(e) { var t; e = Je(e); let n = this.dataFormat === "channelsFirst" ? 1 : e.length - 1; if (e[n] == null) throw new V(`The channel dimension of the input should be defined. Found ${e[n]}`); let a = e[n], r = 4, s = this.kernelSize.concat([a, this.filters * r]); this.kernel = this.addWeight("kernel", s, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint); let i = this.kernelSize.concat([this.filters, this.filters * r]); if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) { let o; if (this.unitForgetBias) { let l = this.biasInitializer, u = this.filters; o = new (t = class extends Ra { apply(p, d) { let c = l.apply([u]), h = On([u]), m = l.apply([u * 2]); return u0([c, h, m]) } }, t.className = "CustomInit", t) } else o = this.biasInitializer; this.bias = this.addWeight("bias", [this.filters * r], null, o, this.biasRegularizer, !0, this.biasConstraint) } this.built = !0 } call(e, t) { return O(() => { if (e.length !== 3) throw new V(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`); let n = t.training || !1, a = e[0], r = e[1], s = e[2], i = 4; 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = xs({ ones: () => na(a), rate: this.dropout, training: n, count: i, dropoutFunc: this.dropoutFunc })); let o = this.dropoutMask, l = (Z, J, ee) => !J || !J[ee] ? Z : z(J[ee], Z), u = l(a, o, 0), p = l(a, o, 1), d = l(a, o, 2), c = l(a, o, 3); 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = xs({ ones: () => na(r), rate: this.recurrentDropout, training: n, count: i, dropoutFunc: this.dropoutFunc })); let h = this.recurrentDropoutMask, m = l(r, h, 0), f = l(r, h, 1), g = l(r, h, 2), b = l(r, h, 3), y = 3, [x, v, I, N] = Pn(this.kernel.read(), i, y), [C, _, F, D] = this.useBias ? Pn(this.bias.read(), i) : [null, null, null, null]; u = this.inputConv(u, x, C, this.padding), p = this.inputConv(p, v, _, this.padding), d = this.inputConv(d, I, F, this.padding), c = this.inputConv(c, N, D, this.padding); let [$, S, M, B] = Pn(this.recurrentKernel.read(), i, y); m = this.recurrentConv(m, $), f = this.recurrentConv(f, S), g = this.recurrentConv(g, M), b = this.recurrentConv(b, B); let U = this.recurrentActivation.apply(X(u, m)), H = this.recurrentActivation.apply(X(p, f)), j = X(z(H, s), z(U, this.activation.apply(X(d, g)))), K = z(this.recurrentActivation.apply(X(c, b)), this.activation.apply(j)); return [K, K, j] }) } getConfig() { let e = super.getConfig(), { units: t } = e, n = T6(e, ["units"]), a = { filters: this.filters, kernelSize: this.kernelSize, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, strides: this.strides }; return Object.assign(Object.assign({}, n), a) } inputConv(e, t, n, a) { let r = $t(e, t, this.strides, a || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate); return n ? Ka(r, n, this.dataFormat) : r } recurrentConv(e, t) { return $t(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC") } }; Kf.className = "ConvLSTM2DCell"; ne.registerClass(Kf); var K0 = class extends WC { constructor(e) { let t = new Kf(e); super(Object.assign(Object.assign({}, e), { cell: t })) } static fromConfig(e, t) { return new e(t) } }; K0.className = "ConvLSTM2D"; ne.registerClass(K0); var Xf = class extends We { constructor(e) { super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = !0 } getNoiseShape(e) { if (this.noiseShape == null) return this.noiseShape; let t = e.shape, n = []; for (let a = 0; a < this.noiseShape.length; ++a)n.push(this.noiseShape[a] == null ? t[a] : this.noiseShape[a]); return n } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); if (0 < this.rate && this.rate < 1) { let a = t.training == null ? !1 : t.training, r = this.getNoiseShape(n); return _d(() => U2(n, this.rate, r, this.seed), () => n, a) } return e }) } getConfig() { let e = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed }, t = super.getConfig(); return Object.assign(e, t), e } dispose() { return super.dispose() } }; Xf.className = "Dropout"; ne.registerClass(Xf); var X0 = class extends Xf { constructor(e) { super(e), this.inputSpec = [{ ndim: 3 }] } getNoiseShape(e) { let t = e.shape; return [t[0], 1, t[2]] } }; X0.className = "SpatialDropout1D"; ne.registerClass(X0); var Y0 = class extends We { constructor(e) { if (super(e), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) { let t = null; e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim] } this.units = e.units, tn(this.units, "units"), this.activation = ys(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = St(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = St(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Yt(e.kernelConstraint), this.biasConstraint = Yt(e.biasConstraint), this.kernelRegularizer = Nt(e.kernelRegularizer), this.biasRegularizer = Nt(e.biasRegularizer), this.activityRegularizer = Nt(e.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }] } build(e) { e = Je(e); let t = e[e.length - 1]; this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = !0 } computeOutputShape(e) { e = Je(e); let t = e.slice(); return t[t.length - 1] = this.units, t } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e), a = O2(this.activation.getClassName()), r; return a != null ? r = ur(n, this.kernel.read(), a, this.bias ? this.bias.read() : null) : (r = ur(n, this.kernel.read()), this.bias != null && (r = Ka(r, this.bias.read())), this.activation != null && (r = this.activation.apply(r))), r }) } getConfig() { let e = { units: this.units, activation: bs(this.activation), useBias: this.useBias, kernelInitializer: _t(this.kernelInitializer), biasInitializer: _t(this.biasInitializer), kernelRegularizer: ft(this.kernelRegularizer), biasRegularizer: ft(this.biasRegularizer), activityRegularizer: ft(this.activityRegularizer), kernelConstraint: Xt(this.kernelConstraint), biasConstraint: Xt(this.biasConstraint) }, t = super.getConfig(); return Object.assign(e, t), e } }; Y0.className = "Dense"; ne.registerClass(Y0); var Z0 = class extends We { constructor(e) { e = e || {}, super(e), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat } computeOutputShape(e) { e = Je(e); for (let t of e.slice(1)) if (t == null) throw new V(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`); return [e[0], ls(e, 1)] } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); if (this.dataFormat === "channelsFirst" && n.rank > 1) { let a = [0]; for (let r = 2; r < n.rank; ++r)a.push(r); a.push(1), n = De(n, a) } return zG(n) }) } getConfig() { let e = {}; this.dataFormat != null && (e.dataFormat = this.dataFormat); let t = super.getConfig(); return Object.assign(e, t), e } }; Z0.className = "Flatten"; ne.registerClass(Z0); var J0 = class extends We { constructor(e) { super(e), this.supportsMasking = !0, this.activation = ys(e.activation) } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); return this.activation.apply(n) }) } getConfig() { let e = { activation: bs(this.activation) }, t = super.getConfig(); return Object.assign(e, t), e } }; J0.className = "Activation"; ne.registerClass(J0); var Q0 = class extends We { constructor(e) { super(e), this.n = e.n, this.inputSpec = [{ ndim: 2 }] } computeOutputShape(e) { return [e[0], this.n, e[1]] } call(e, t) { return O(() => (e = Te(e), PG(e, this.n))) } getConfig() { let e = { n: this.n }, t = super.getConfig(); return Object.assign(e, t), e } }; Q0.className = "RepeatVector"; ne.registerClass(Q0); var e1 = class extends We { constructor(e) { super(e), this.targetShape = e.targetShape; for (let t = 0; t < this.targetShape.length; ++t)this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null) } isUnknown(e) { return e < 0 || e == null } fixUnknownDimension(e, t) { let n = "Total size of new array must be unchanged.", a = t.slice(), r = 1, s = null; for (let o = 0; o < a.length; ++o) { let l = a[o]; if (this.isUnknown(l)) if (s === null) s = o; else throw new V("Can only specifiy one unknown dimension."); else r *= l } let i = ls(e); if (s !== null) { if (r === 0 || i % r !== 0) throw new V(n); a[s] = i / r } else if (i !== r) throw new V(n); return a } computeOutputShape(e) { let t = !1; for (let n = 0; n < e.length; ++n)if (this.isUnknown(e[n])) { t = !0; break } return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape)) } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e), a = n.shape, r = a.slice(0, 1).concat(this.fixUnknownDimension(a.slice(1), this.targetShape)); return W(n, r) }) } getConfig() { let e = { targetShape: this.targetShape }, t = super.getConfig(); return Object.assign(e, t), e } }; e1.className = "Reshape"; ne.registerClass(e1); var t1 = class extends We { constructor(e) { if (super(e), e.dims == null) throw new Error("Required configuration field `dims` is missing during Permute constructor call."); if (!Array.isArray(e.dims)) throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`); let t = Ua(1, e.dims.length + 1); if (!w.arraysEqual(e.dims.slice().sort(), t)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1."); this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new zt({ ndim: this.dims.length + 1 })] } computeOutputShape(e) { e = Je(e); let t = e.slice(); return this.dims.forEach((n, a) => { t[a + 1] = e[n] }), t } call(e, t) { return De(Te(e), this.dimsIncludingBatch) } getConfig() { let e = { dims: this.dims }, t = super.getConfig(); return Object.assign(e, t), e } }; t1.className = "Permute"; ne.registerClass(t1); var n1 = class extends We { constructor(e) { super(e == null ? {} : e), this.supportsMasking = !0, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0 } computeOutputShape(e) { return e } getConfig() { let e = super.getConfig(), t = { maskValue: this.maskValue }; return Object.assign(t, e), t } computeMask(e, t) { let n = Te(e); return Sc(bi(n, this.maskValue), -1) } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e), a = Sc(bi(n, this.maskValue), -1, !0); return z(n, re(a, n.dtype)) }) } }; n1.className = "Masking"; ne.registerClass(n1); var a1 = class extends We { constructor(e) { if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) { let t = null; e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(it(e.inputLength)) } this.inputDim = e.inputDim, tn(this.inputDim, "inputDim"), this.outputDim = e.outputDim, tn(this.outputDim, "outputDim"), this.embeddingsInitializer = St(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = Nt(e.embeddingsRegularizer), this.activityRegularizer = Nt(e.activityRegularizer), this.embeddingsConstraint = Yt(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength } build(e) { this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0 } warnOnIncompatibleInputShape(e) { } computeMask(e, t) { return O(() => this.maskZero ? (e = Te(e), bi(e, je(e))) : null) } computeOutputShape(e) { if (e = Je(e), this.inputLength == null) return [...e, this.outputDim]; let t = it(this.inputLength); if (t.length !== e.length - 1) throw new V(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`); { let n = 0; for (let a = 0; a < t.length; ++a) { let r = t[a], s = e[a + 1]; if (r != null && s != null && r !== s) throw new V(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`); r == null && (t[n] = s), n++ } } return [e[0], ...t, this.outputDim] } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); n.dtype !== "int32" && (n = lr(n, "int32")); let a = V2(this.embeddings.read(), W(n, [n.size])); return W(a, Je(this.computeOutputShape(n.shape))) }) } getConfig() { let e = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: _t(this.embeddingsInitializer), embeddingsRegularizer: ft(this.embeddingsRegularizer), activityRegularizer: ft(this.activityRegularizer), embeddingsConstraint: Xt(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength }, t = super.getConfig(); return Object.assign(e, t), e } }; a1.className = "Embedding"; ne.registerClass(a1); var Jo = class extends We { constructor(e) { super(e || {}), this.supportsMasking = !0 } mergeFunction(e) { throw new ze } computeElementwiseOpOutputShape(e, t) { if (e == null || t == null) return null; if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e); if (t.length === 0) return e; let n = e.slice(0, e.length - t.length); for (let a = 0; a < t.length; ++a) { let r = e[e.length - t.length + a], s = t[a]; if (r == null || s == null || r < 0 || s < 0) n.push(null); else if (r === 1) n.push(s); else if (s === 1) n.push(r); else { if (r !== s) throw new V("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t)); n.push(r) } } return n } build(e) { if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [Je(e)]), e = e, e.length < 2) throw new V(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`); let t = []; for (let r of e) r != null && r[0] !== null && t.push(r[0]); if (t = os(t), t.length > 1) throw new V(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`); let n = e[0] == null ? null : e[0].slice(1); for (let r = 1; r < e.length; ++r) { let s = e[r] == null ? null : e[r].slice(1); n = this.computeElementwiseOpOutputShape(n, s) } let a = e.map(r => r.length); e.indexOf(null) === -1 && os(a).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0 } call(e, t) { return O(() => { if (e = e, this.reshapeRequired) { let n = [], a = e.map(r => r.rank); if (a.indexOf(null) === -1) { let r = gs(a); for (let s of e) { let i = s.rank; for (let o = 0; o < r - i; ++o)s = Cd(s, 1); n.push(s) } return this.mergeFunction(n) } else { let r = !1; for (let o of e) { let l = o.rank; if (l == null) { let u = o.shape, p = u[0], d = u.slice(1).concat([p]), c = W(o, [p].concat(ls(u.slice(1)))); c = De(c, [1, 0]), c = W(c, d), n.push(c), r = !0 } else if (l > 1) { let u = Ua(1, l).concat([0]); n.push(De(o, u)), r = !0 } else n.push(o) } let s = this.mergeFunction(n), i = s.rank; if (r) { if (i == null) { let o = s.shape, l = o.length, u = o[l - 1], p = [u].concat(o.slice(0, o.length - 1)); s = W(De(W(s, [-1, u]), [1, 0]), p) } else if (i > 1) { let o = [i - 1].concat(Ua(0, i - 1)); s = De(s, o) } } return s } } else return this.mergeFunction(e) }) } computeOutputShape(e) { e = e; let t; e[0] == null ? t = null : t = e[0].slice(1); for (let a = 1; a < e.length; ++a) { let r = e[a] == null ? null : e[a].slice(1); t = this.computeElementwiseOpOutputShape(t, r) } let n = []; for (let a of e) a != null && a[0] !== null && n.push(a[0]); return n = os(n), n.length === 1 ? t = n.concat(t) : t = [null].concat(t), t } computeMask(e, t) { return O(() => { if (t == null) return null; if (!Array.isArray(t)) throw new V("`mask` should be an Array"); if (!Array.isArray(e)) throw new V("`inputs` should be an Array"); if (t.length !== e.length) throw new V(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`); if (t.every(a => a == null)) return null; t = t.map(a => a == null ? a : Gt(a, 0)); let n = t[0]; for (let a = 1; a < t.length - 1; ++a)n = Fa(n, t[a]); return n }) } }, r1 = class extends Jo { constructor(e) { super(e) } mergeFunction(e) { return O(() => { let t = e[0].clone(); for (let n = 1; n < e.length; ++n)t = X(t, e[n]); return t }) } }; r1.className = "Add"; ne.registerClass(r1); var s1 = class extends Jo { constructor(e) { super(e) } mergeFunction(e) { return O(() => { let t = e[0].clone(); for (let n = 1; n < e.length; ++n)t = z(t, e[n]); return t }) } }; s1.className = "Multiply"; ne.registerClass(s1); var i1 = class extends Jo { constructor(e) { super(e) } mergeFunction(e) { return O(() => { let t = e[0].clone(); for (let n = 1; n < e.length; ++n)t = X(t, e[n]); return z(1 / e.length, t) }) } }; i1.className = "Average"; ne.registerClass(i1); var o1 = class extends Jo { constructor(e) { super(e) } mergeFunction(e) { return O(() => { let t = e[0]; for (let n = 1; n < e.length; ++n)t = mr(t, e[n]); return t }) } }; o1.className = "Maximum"; ne.registerClass(o1); var l1 = class extends Jo { constructor(e) { super(e) } mergeFunction(e) { return O(() => { let t = e[0]; for (let n = 1; n < e.length; ++n)t = fs(t, e[n]); return t }) } }; l1.className = "Minimum"; ne.registerClass(l1); var u1 = class extends Jo { constructor(e) { super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = !0, this.reshapeRequired = !1 } build(e) { if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1) throw new V("A `Concatenate` layer should be called on a list of at least 2 inputs"); e = e; let t = !0; for (let a of e) if (a != null) { t = !1; break } if (t) return; let n = []; for (let a = 0; a < e.length; ++a) { let r = e[a].slice(); r.splice(this.axis, 1); let s = !1; for (let i of n) if (w.arraysEqual(i, r)) { s = !0; break } s || n.push(r) } if (n.length > 1) throw new V("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e)) } mergeFunction(e) { return O(() => u0(e, this.axis)) } computeOutputShape(e) { if (!(Array.isArray(e) && Array.isArray(e[0]))) throw new V("A `Concatenate` layer should be called on a list of inputs."); let t = e, n = t[0].slice(), a = this.axis < 0 ? n.length + this.axis : this.axis; for (let r of t.slice(1)) { if (n[a] == null || r[a] == null) { n[a] = null; break } n[a] += r[a] } return n } computeMask(e, t) { if (t == null) return null; if (!Array.isArray(t)) throw new V("`mask` should be an array for Concatenate"); if (!Array.isArray(e)) throw new V("`inputs` should be an array for Concatenate"); if (t.length !== e.length) throw new V(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`); return O(() => { let n = !0; if (t.forEach(s => { if (s != null) { n = !1; return } }), n) return null; let a = []; for (let s = 0; s < e.length; ++s)t[s] == null ? a.push(re(na(e[s]), "bool")) : t[s].rank < e[s].rank ? a.push(Gt(t[s], -1)) : a.push(t[s]); let r = et(a, this.axis); return Jm(r, -1, !1) }) } getConfig() { let e = { axis: this.axis }, t = super.getConfig(); return Object.assign(e, t), e } }; u1.className = "Concatenate"; ne.registerClass(u1); function nc(e, t) { for (; e < 0;)e += t; return e } function C6(e, t, n) { if (e.shape.length > 3 || t.shape.length > 3) throw new ze("batchDot is not implemented for tensors of 4D or higher rank yet"); if (w.assert(e.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`), w.assert(e.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof n == "number" && (n = [n, n]), e.dtype === "complex64" || t.dtype === "complex64") throw new ze("batchDot is not implemented for complex64-type Tensors yet."); let a = e.shape.length, r = t.shape.length; n == null && (n = [a - 1, r - 2]); let s = n; return O(() => { let i; if (a > r) { i = a - r; let l = []; for (let u = 0; u < i; ++u)l.push(1); t = W(t, t.shape.concat(l)) } else if (r > a) { i = r - a; let l = []; for (let u = 0; u < i; ++u)l.push(1); e = W(e, e.shape.concat(l)) } else i = 0; let o; if (e.shape.length === 2 && t.shape.length === 2) s[0] === s[1] ? o = fe(z(e, t), s[0]) : o = fe(z(De(e, [1, 0]), t), s[1]); else { let l = s[0] !== e.shape.length - 1, u = s[1] === t.shape.length - 1; o = $e(e, t, l, u) } if (i > 0) { let l; a > r ? l = a + r - 3 : l = a - 1; let u = []; for (let p = l; p < l + i; ++p)u.push(p); o = Ds(o, u) } return o.shape.length === 1 && (o = Gt(o, 1)), o }) } var p1 = class extends Jo { constructor(e) { super(e), this.axes = e.axes, this.normalize = e.normalize == null ? !1 : e.normalize, this.supportsMasking = !0, this.reshapeRequired = !1 } build(e) { w.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs."); let t = e[0], n = e[1]; if (t.length > 3 || n.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet."); let a = this.interpretAxes(t, n); if (t[a[0]] !== n[a[1]]) throw new V(`Dimension incompatibility: ${t[a[0]]} !== ${n[a[1]]}`) } mergeFunction(e) { if (e.length !== 2) throw new V(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`); let t = e[0], n = e[1], a; return Array.isArray(this.axes) ? a = this.axes.map((r, s) => nc(r, e[s].shape.length)) : a = [nc(this.axes, t.shape.length), nc(this.axes, n.shape.length)], this.normalize && (t = fm(t, a[0]), n = fm(n, a[1])), C6(t, n, a) } interpretAxes(e, t) { let n; return Array.isArray(this.axes) ? n = this.axes : n = [nc(this.axes, e.length), nc(this.axes, t.length)], n } computeOutputShape(e) { w.assert(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs."); let t = e[0].slice(), n = e[1].slice(); if (t.length > 3 || n.length > 3) throw new ze("Dot layer does not support tensors of 4D or higher rank yet."); let a = this.interpretAxes(t, n); t.splice(a[0], 1), n.splice(a[1], 1), n.splice(0, 1); let r = t.concat(n); return r.length === 1 && r.push(1), r } computeMask(e, t) { return null } getConfig() { let e = { axes: this.axes, normalize: this.normalize }, t = super.getConfig(); return Object.assign(e, t), e } }; p1.className = "Dot"; ne.registerClass(p1); var c1 = class extends We { constructor(e) { super(e), this.supportsMasking = !0, this.stddev = e.stddev } computeOutputShape(e) { return e } getConfig() { let e = super.getConfig(), t = { stddev: this.stddev }; return Object.assign(t, e), t } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); return _d(() => X(Af(n.shape, 0, this.stddev), n), () => n, t.training || !1) }) } }; c1.className = "GaussianNoise"; ne.registerClass(c1); var d1 = class extends We { constructor(e) { super(e), this.supportsMasking = !0, this.rate = e.rate } computeOutputShape(e) { return e } getConfig() { let e = super.getConfig(), t = { rate: this.rate }; return Object.assign(t, e), t } call(e, t) { return O(() => { this.invokeCallHook(e, t); let n = Te(e); return this.rate > 0 && this.rate < 1 ? _d(() => { let a = Math.sqrt(this.rate / (1 - this.rate)); return z(n, Af(n.shape, 1, a)) }, () => n, t.training || !1) : n }) } }; d1.className = "GaussianDropout"; ne.registerClass(d1); var h1 = class extends We { constructor(e) { super(e), this.supportsMasking = !0, this.rate = e.rate, this.noiseShape = e.noiseShape } _getNoiseShape(e) { return this.noiseShape || Te(e).shape } computeOutputShape(e) { return e } getConfig() { let e = super.getConfig(), t = { rate: this.rate }; return Object.assign(t, e), t } call(e, t) { return O(() => { if (this.rate < 1 && this.rate > 0) { let n = this._getNoiseShape(e); return _d(() => { let a = Te(e), r = -1.6732632423543772 * 1.0507009873554805, s = Rr(Fs(n), this.rate); s = lr(s, "float32"); let i = ((1 - this.rate) * (1 + this.rate * r ** 2)) ** -.5, o = -i * r * this.rate, l = X(z(a, s), z(X(s, -1), r)); return X(z(l, i), o) }, () => Te(e), t.training || !1) } return e }) } }; h1.className = "AlphaDropout"; ne.registerClass(h1); function Ac(e, t, n, a, r, s = .001) { let i; if (e.rank === 2) i = ew(e, t, n, a, r, s); else if (e.rank === 3) i = tw(e, t, n, a, r, s); else if (e.rank === 4) i = nw(e, t, n, a, r, s); else throw new ze(`batchNormalization is not implemented for array of rank ${e.rank} yet`); return i } function E6(e, t, n, a, r = .001) { return O(() => { let s = xd(e, a), i = s.mean, o = s.variance; return [Ac(e, i, o, n, t, r), i, o] }) } function _6(e, t, n, a, r = .001) { return O(() => { let s = xd(e, a), i = s.mean, o = s.variance, l = []; for (let h of Ua(0, e.rank)) a.indexOf(h) !== -1 ? l.push(1) : l.push(e.shape[h]); let u = W(i, l), p = W(o, l), d = t == null ? null : W(t, l), c = n == null ? null : W(n, l); return [Ac(e, u, p, c, d, r), i, o] }) } function A6(e, t, n, a, r = .001) { return w.arraysEqual(a.slice().sort(), Ua(0, e.rank - 1)) ? E6(e, t, n, a, r) : _6(e, t, n, a, r) } var m1 = class extends We { constructor(e) { e == null && (e = {}), super(e), this.supportsMasking = !0, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? .99 : e.momentum, this.epsilon = e.epsilon == null ? .001 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = St(e.betaInitializer || "zeros"), this.gammaInitializer = St(e.gammaInitializer || "ones"), this.movingMeanInitializer = St(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = St(e.movingVarianceInitializer || "ones"), this.betaConstraint = Yt(e.betaConstraint), this.gammaConstraint = Yt(e.gammaConstraint), this.betaRegularizer = Nt(e.betaRegularizer), this.gammaRegularizer = Nt(e.gammaRegularizer) } build(e) { e = Je(e); let t = this.axis >= 0 ? this.axis : this.axis + e.length, n = e[t]; if (n == null) throw new V(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`); this.inputSpec = [new zt({ ndim: e.length, axes: { [t]: n } })]; let a = [n]; this.scale && (this.gamma = this.addWeight("gamma", a, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", a, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", a, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", a, null, this.movingVarianceInitializer, null, !1), this.built = !0 } call(e, t) { return O(() => { let n = t.training == null ? !1 : t.training, a = Te(e), r = a.shape, s = r.length, i = Ua(0, s), o = this.axis >= 0 ? this.axis : this.axis + s; i.splice(o, 1); let l = xi(1, s); l[o] = r[o]; let u = i.slice(); u.sort(); let p = !w.arraysEqual(u, Ua(0, s).slice(0, s - 1)), d = () => { if (p) { let g = W(this.movingMean.read(), l), b = W(this.movingVariance.read(), l), y = this.center ? W(this.beta.read(), l) : null, x = this.scale ? W(this.gamma.read(), l) : null; return Ac(a, g, b, y, x, this.epsilon) } else return Ac(a, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon) }; if (!n) return d(); let [c, h, m] = A6(a, this.gamma.read(), this.beta.read(), i, this.epsilon), f = (g, b, y) => { O(() => { let x = 1 - y, v = g.read(), I = z(pe(v, b), x); g.write(pe(v, I)) }) }; return f(this.movingMean, h, this.momentum), f(this.movingVariance, m, this.momentum), c }) } getConfig() { let e = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: _t(this.betaInitializer), gammaInitializer: _t(this.gammaInitializer), movingMeanInitializer: _t(this.movingMeanInitializer), movingVarianceInitializer: _t(this.movingVarianceInitializer), betaRegularizer: ft(this.betaRegularizer), gammaRegularizer: ft(this.gammaRegularizer), betaConstraint: Xt(this.betaConstraint), gammaConstraint: Xt(this.gammaConstraint) }, t = super.getConfig(); return Object.assign(e, t), e } }; m1.className = "BatchNormalization"; ne.registerClass(m1); var f1 = class extends We { constructor(e) { if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") { if (!Number.isInteger(this.axis)) throw new Error(`Expected axis to be an integer, but received ${this.axis}`) } else if (Array.isArray(this.axis)) { for (let t of this.axis) if (!Number.isInteger(t)) throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`) } else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`); this.epsilon = e.epsilon == null ? .001 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = St(e.betaInitializer || "zeros"), this.gammaInitializer = St(e.gammaInitializer || "ones"), this.betaRegularizer = Nt(e.betaRegularizer), this.gammaRegularizer = Nt(e.gammaRegularizer), this.supportsMasking = !0 } build(e) { e = Je(e); let t = e.length; typeof this.axis == "number" && (this.axis = [this.axis]); for (let r = 0; r < this.axis.length; ++r)this.axis[r] < 0 && (this.axis[r] += t); for (let r of this.axis) if (r < 0 || r >= t) throw new Error(`Invalid axis: ${r}`); if (this.axis.length !== os(this.axis).length) throw new Error(`Found duplicate axes in: ${this.axis}`); let n = this.axis.map(r => e[r]), a = !0; this.scale ? this.gamma = this.addWeight("gamma", n, "float32", this.gammaInitializer, this.gammaRegularizer, a) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", n, "float32", this.betaInitializer, this.betaRegularizer, a) : this.beta = null, this.built = !0 } call(e, t) { let n = Te(e), a = n.shape, r = a.length; return O(() => { let { mean: s, variance: i } = xd(n, this.axis, !0), o = xi(1, r); for (let h of this.axis) o[h] = a[h]; let l = h => h != null && h.shape.length !== r ? W(h, o) : h, u = this.scale ? l(this.gamma.read()) : null, p = this.center ? l(this.beta.read()) : null, d = [], c = []; for (let h = 0; h < r; ++h)this.axis.indexOf(h) !== -1 ? (d.push(a[h]), c.push(1)) : (d.push(1), c.push(a[h])); return s = Mn(s, d), i = Mn(i, d), u != null && (u = Mn(u, c)), p != null && (p = Mn(p, c)), Ac(n, s, i, p, u, this.epsilon) }) } getConfig() { let e = { axis: this.axis, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: _t(this.betaInitializer), gammaInitializer: _t(this.gammaInitializer), betaRegularizer: ft(this.betaRegularizer), gammaRegularizer: ft(this.gammaRegularizer) }, t = super.getConfig(); return Object.assign(e, t), e } }; f1.className = "LayerNormalization"; ne.registerClass(f1); function F6(e, t, n) { return O(() => { if (e.rank !== 4) throw new V(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`); if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2) throw new V("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers."); if (n == null && (n = Ga()), n !== "channelsLast" && n !== "channelsFirst") throw new V(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`); let a; return n === "channelsFirst" ? a = [[0, 0], [0, 0], t[0], t[1]] : a = [[0, 0], t[0], t[1], [0, 0]], va(e, a) }) } var g1 = class extends We { constructor(e) { if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? Ga() : e.dataFormat, e.padding == null) this.padding = [[1, 1], [1, 1]]; else if (typeof e.padding == "number") this.padding = [[e.padding, e.padding], [e.padding, e.padding]]; else { if (e.padding = e.padding, e.padding.length !== 2) throw new V(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`); let t, n; if (typeof e.padding[0] == "number") t = [e.padding[0], e.padding[0]], n = [e.padding[1], e.padding[1]]; else { if (e.padding = e.padding, e.padding[0].length !== 2) throw new V(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`); if (t = e.padding[0], e.padding[1].length !== 2) throw new V(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`); n = e.padding[1] } this.padding = [t, n] } this.inputSpec = [new zt({ ndim: 4 })] } computeOutputShape(e) { e = Je(e); let t, n; return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? n = e[3] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], e[1], t, n]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? n = e[2] + this.padding[1][0] + this.padding[1][1] : n = null, [e[0], t, n, e[3]]) } call(e, t) { return O(() => F6(Te(e), this.padding, this.dataFormat)) } getConfig() { let e = { padding: this.padding, dataFormat: this.dataFormat }, t = super.getConfig(); return Object.assign(e, t), e } }; g1.className = "ZeroPadding2D"; ne.registerClass(g1); function Yf(e, t, n, a, r, s) { return O(() => { Rt(r), L2(s), wa(a), n == null && (n = [1, 1]), a == null && (a = "valid"), r == null && (r = Ga()), s == null && (s = "max"), e = P0(e, r); let i, o = a === "same" ? "same" : "valid"; return s === "max" ? i = Dt(e, t, n, o) : i = xa(e, t, n, o), r === "channelsFirst" && (i = De(i, [0, 3, 1, 2])), i }) } function BC(e, t, n, a, r, s) { return O(() => { Rt(r), L2(s), wa(a), n == null && (n = [1, 1, 1]), a == null && (a = "valid"), r == null && (r = Ga()), s == null && (s = "max"), e = _C(e, r); let i, o = a === "same" ? "same" : "valid"; return s === "max" ? i = Cw(e, t, n, o) : i = Qv(e, t, n, o), r === "channelsFirst" && (i = De(i, [0, 4, 1, 2, 3])), i }) } var VC = class extends We { constructor(e) { if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number") this.poolSize = [e.poolSize]; else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number") this.poolSize = e.poolSize; else throw new V(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`); if (tn(this.poolSize, "poolSize"), e.strides == null) this.strides = this.poolSize; else if (typeof e.strides == "number") this.strides = [e.strides]; else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number") this.strides = e.strides; else throw new V(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`); tn(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, wa(this.padding), this.inputSpec = [new zt({ ndim: 3 })] } computeOutputShape(e) { e = Je(e); let t = Va(e[1], this.poolSize[0], this.padding, this.strides[0]); return [e[0], t, e[2]] } call(e, t) { return O(() => { this.invokeCallHook(e, t), e = Cd(Te(e), 2); let n = this.poolingFunction(Te(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast"); return Ds(n, [2]) }) } getConfig() { let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides }, t = super.getConfig(); return Object.assign(e, t), e } }, b1 = class extends VC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), Yf(e, t, n, a, r, "max") } }; b1.className = "MaxPooling1D"; ne.registerClass(b1); var y1 = class extends VC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), Yf(e, t, n, a, r, "avg") } }; y1.className = "AveragePooling1D"; ne.registerClass(y1); var UC = class extends We { constructor(e) { if (e.poolSize == null && (e.poolSize = [2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null) this.strides = this.poolSize; else if (Array.isArray(e.strides)) { if (e.strides.length !== 2) throw new V(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`); this.strides = e.strides } else this.strides = [e.strides, e.strides]; tn(this.poolSize, "poolSize"), tn(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), wa(this.padding), this.inputSpec = [new zt({ ndim: 4 })] } computeOutputShape(e) { e = Je(e); let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2]; return t = Va(t, this.poolSize[0], this.padding, this.strides[0]), n = Va(n, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n] : [e[0], t, n, e[3]] } call(e, t) { return O(() => (this.invokeCallHook(e, t), this.poolingFunction(Te(e), this.poolSize, this.strides, this.padding, this.dataFormat))) } getConfig() { let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig(); return Object.assign(e, t), e } }, x1 = class extends UC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), Yf(e, t, n, a, r, "max") } }; x1.className = "MaxPooling2D"; ne.registerClass(x1); var v1 = class extends UC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), Yf(e, t, n, a, r, "avg") } }; v1.className = "AveragePooling2D"; ne.registerClass(v1); var GC = class extends We { constructor(e) { if (e.poolSize == null && (e.poolSize = [2, 2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null) this.strides = this.poolSize; else if (Array.isArray(e.strides)) { if (e.strides.length !== 3) throw new V(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`); this.strides = e.strides } else this.strides = [e.strides, e.strides, e.strides]; tn(this.poolSize, "poolSize"), tn(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), wa(this.padding), this.inputSpec = [new zt({ ndim: 5 })] } computeOutputShape(e) { e = Je(e); let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], n = this.dataFormat === "channelsFirst" ? e[3] : e[2], a = this.dataFormat === "channelsFirst" ? e[4] : e[3]; return t = Va(t, this.poolSize[0], this.padding, this.strides[0]), n = Va(n, this.poolSize[1], this.padding, this.strides[1]), a = Va(a, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, n, a] : [e[0], t, n, a, e[4]] } call(e, t) { return O(() => (this.invokeCallHook(e, t), this.poolingFunction(Te(e), this.poolSize, this.strides, this.padding, this.dataFormat))) } getConfig() { let e = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat }, t = super.getConfig(); return Object.assign(e, t), e } }, w1 = class extends GC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), BC(e, t, n, a, r, "max") } }; w1.className = "MaxPooling3D"; ne.registerClass(w1); var k1 = class extends GC { constructor(e) { super(e) } poolingFunction(e, t, n, a, r) { return Rt(r), wa(a), BC(e, t, n, a, r, "avg") } }; k1.className = "AveragePooling3D"; ne.registerClass(k1); var HC = class extends We { constructor(e) { super(e), this.inputSpec = [new zt({ ndim: 3 })] } computeOutputShape(e) { return [e[0], e[2]] } call(e, t) { throw new ze } }, I1 = class extends HC { constructor(e) { super(e || {}) } call(e, t) { return O(() => { let n = Te(e); return Et(n, 1) }) } }; I1.className = "GlobalAveragePooling1D"; ne.registerClass(I1); var S1 = class extends HC { constructor(e) { super(e || {}) } call(e, t) { return O(() => { let n = Te(e); return fa(n, 1) }) } }; S1.className = "GlobalMaxPooling1D"; ne.registerClass(S1); var qC = class extends We { constructor(e) { super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Rt(this.dataFormat), this.inputSpec = [new zt({ ndim: 4 })] } computeOutputShape(e) { return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]] } call(e, t) { throw new ze } getConfig() { let e = { dataFormat: this.dataFormat }, t = super.getConfig(); return Object.assign(e, t), e } }, N1 = class extends qC { call(e, t) { return O(() => { let n = Te(e); return this.dataFormat === "channelsLast" ? Et(n, [1, 2]) : Et(n, [2, 3]) }) } }; N1.className = "GlobalAveragePooling2D"; ne.registerClass(N1); var T1 = class extends qC { call(e, t) { return O(() => { let n = Te(e); return this.dataFormat === "channelsLast" ? fa(n, [1, 2]) : fa(n, [2, 3]) }) } }; T1.className = "GlobalMaxPooling2D"; ne.registerClass(T1); var jC = class extends We { constructor(e) { super(e), this.layer = e.layer } build(e) { this.built = !0 } get trainable() { return this.layer != null ? this.layer.trainable : !1 } set trainable(e) { this.layer != null && (this.layer.trainable = e) } get trainableWeights() { return this.layer.trainableWeights } get nonTrainableWeights() { return this.layer.nonTrainableWeights } get updates() { return this.layer._updates } get losses() { return this.layer.losses } getWeights() { return this.layer.getWeights() } setWeights(e) { this.layer.setWeights(e) } getConfig() { let e = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } }, t = super.getConfig(); return Object.assign(e, t), e } setFastWeightInitDuringBuild(e) { super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e) } static fromConfig(e, t, n = {}) { let a = t.layer, r = Ba(a, n); delete t.layer; let s = { layer: r }; return Object.assign(s, t), new e(s) } }, C1 = class extends jC { constructor(e) { super(e), this.supportsMasking = !0 } build(e) { if (e = Je(e), e.length < 3) throw new V(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`); this.inputSpec = [{ shape: e }]; let t = [e[0]].concat(e.slice(2)); this.layer.built || (this.layer.build(t), this.layer.built = !0), super.build(e) } computeOutputShape(e) { e = Je(e); let t = [e[0]].concat(e.slice(2)), n = this.layer.computeOutputShape(t), a = e[1]; return [n[0], a].concat(n.slice(1)) } call(e, t) { return O(() => (e = Te(e), LC((n, a) => [Te(this.layer.call(n, t)), []], e, [], !1, null, null, !1, !0)[1])) } }; C1.className = "TimeDistributed"; ne.registerClass(C1); function $6(e) { Yo($G, "BidirectionalMergeMode", e) } var D6 = "concat", E1 = class extends jC { constructor(e) { super(e); let t = e.layer.getConfig(), n = {}; n.className = e.layer.getClassName(), n.config = t, this.forwardLayer = Ba(n), t.goBackwards = t.goBackwards !== !0; let a = {}; if (a.className = e.layer.getClassName(), a.config = t, this.backwardLayer = Ba(a), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? D6 : e.mergeMode, $6(this.mergeMode), e.weights) throw new ze("weights support is not implemented for Bidirectional layer yet."); this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = e.layer.inputSpec, this.numConstants = null } get trainable() { return this._trainable } set trainable(e) { this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e) } getWeights() { return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights()) } setWeights(e) { let t = e.length, n = Math.floor(t / 2); this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n)) } computeOutputShape(e) { let t = this.forwardLayer.computeOutputShape(e); Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t; let n, a, r; return this.returnState && (r = t.slice(1)), n = t[0], n = n, this.mergeMode === "concat" ? (n[n.length - 1] *= 2, a = [n]) : this.mergeMode == null ? a = [n, n.slice()] : a = [n], this.returnState ? this.mergeMode == null ? a.concat(r).concat(r.slice()) : [n].concat(r).concat(r.slice()) : Rn(a) } apply(e, t) { let n = t == null ? null : t.initialState, a = t == null ? null : t.constants; t == null && (t = {}); let r = PC(e, n, a, this.numConstants); if (e = r.inputs, n = r.initialState, a = r.constants, Array.isArray(e) && (n = e.slice(1), e = e[0]), (n == null || n.length === 0) && a == null) return super.apply(e, t); let s = [], i = []; if (n != null) { let l = n.length; if (l % 2 > 0) throw new V("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs."); t.initialState = n, s.push(...n); let u = n.map(p => new zt({ shape: p.shape })); this.forwardLayer.stateSpec = u.slice(0, l / 2), this.backwardLayer.stateSpec = u.slice(l / 2), i.push(...u) } if (a != null) throw new ze("Support for constants in Bidirectional layers is not implemented yet."); let o = s[0] instanceof Ha; for (let l of s) if (l instanceof Ha !== o) throw new V("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors"); if (o) { let l = [e].concat(s), u = this.inputSpec.concat(i), p = this.inputSpec; this.inputSpec = u; let d = super.apply(l, t); return this.inputSpec = p, d } else return super.apply(e, t) } call(e, t) { return O(() => { let n = t.initialState, a, r; if (n == null) a = this.forwardLayer.call(e, t), r = this.backwardLayer.call(e, t); else { let o = n.slice(0, n.length / 2), l = n.slice(n.length / 2); a = this.forwardLayer.call(e, Object.assign(t, { initialState: o })), r = this.backwardLayer.call(e, Object.assign(t, { initialState: l })) } let s; this.returnState && (Array.isArray(a) && (s = a.slice(1).concat(r.slice(1))), a = a[0], r = r[0]), this.returnSequences && (r = ya(r, 1)); let i; return this.mergeMode === "concat" ? i = u0([a, r]) : this.mergeMode === "sum" ? i = X(a, r) : this.mergeMode === "ave" ? i = z(.5, X(a, r)) : this.mergeMode === "mul" ? i = z(a, r) : this.mergeMode == null && (i = [a, r]), this.returnState ? this.mergeMode == null ? i.concat(s) : [i].concat(s) : i }) } resetStates(e) { this.forwardLayer.resetStates(), this.backwardLayer.resetStates() } build(e) { si(this.forwardLayer.name, () => { this.forwardLayer.build(e) }), si(this.backwardLayer.name, () => { this.backwardLayer.build(e) }), this.built = !0 } computeMask(e, t) { Array.isArray(t) && (t = t[0]); let n; if (this.returnSequences ? this.mergeMode == null ? n = [t, t] : n = t : this.mergeMode == null ? n = [null, null] : n = null, this.returnState) { let a = this.forwardLayer.states.map(r => null); return Array.isArray(n) ? n.concat(a).concat(a) : [n].concat(a).concat(a) } else return n } get trainableWeights() { return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights) } get nonTrainableWeights() { return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights) } setFastWeightInitDuringBuild(e) { super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e) } getConfig() { let e = { mergeMode: this.mergeMode }, t = super.getConfig(); return Object.assign(e, t), e } static fromConfig(e, t) { let n = Ba(t.layer); if (delete t.layer, t.numConstants != null) throw new ze("Deserialization of a Bidirectional layer with numConstants present is not supported yet."); let a = t; return a.layer = n, new e(a) } }; E1.className = "Bidirectional"; ne.registerClass(E1); var _1 = class extends We { constructor(e) { super(e), this.scale = e.scale, e.offset ? this.offset = e.offset : this.offset = 0 } getConfig() { let e = { scale: this.scale, offset: this.offset }, t = super.getConfig(); return Object.assign(e, t), e } call(e, t) { return O(() => (e = Te(e), e.dtype !== "float32" && (e = lr(e, "float32")), X(z(e, this.scale), this.offset))) } }; _1.className = "Rescaling"; ne.registerClass(_1); var { resizeBilinear: R6, cropAndResize: M6 } = Qn, A1 = class extends We { constructor(e) { super(e), this.height = e.height, this.width = e.width } centerCrop(e, t, n, a, r, s, i, o) { return O(() => { let l, u = !1, p = t / s, d = n / i, c = (a + t) / s, h = (r + n) / i, m = [p, d, c, h], f = []; e.rank === 3 ? (u = !0, l = Ft([e])) : l = e; for (let x = 0; x < l.shape[0]; x++)f.push(m); let g = bn(f, [f.length, 4]), b = yi(0, f.length, 1, "int32"), y = M6(l, g, b, [a, r], "nearest"); return lr(u ? Te(dt(y)) : y, o) }) } upsize(e, t, n, a) { return O(() => { let r = R6(e, [t, n]); return lr(r, a) }) } call(e, t) { return O(() => { let n = Te(e), a = n.dtype, r = n.shape, s = r[r.length - 3], i = r[r.length - 2], o = 0; s !== this.height && (o = Math.floor((s - this.height) / 2)); let l = 0; return i !== this.width && (l = Math.floor((i - this.width) / 2), l === 0 && (l = 1)), o >= 0 && l >= 0 ? this.centerCrop(n, o, l, this.height, this.width, s, i, a) : this.upsize(e, this.height, this.width, a) }) } getConfig() { let e = { height: this.height, width: this.width }, t = super.getConfig(); return Object.assign(e, t), e } computeOutputShape(e) { e = Je(e); let t = e.length - 3, n = e.length - 2; return e[t] = this.height, e[n] = this.width, e } }; A1.className = "CenterCrop"; ne.registerClass(A1); function O6(e, t, n, a) { let r = Te(e); if (r.dtype !== "int32" && (r = lr(r, "int32")), t === "int") return r; let s = r.shape; if (r.rank === 0 && (r = Gt(r, -1)), t === "oneHot" && r.shape[r.shape.length - 1] !== 1 && (r = Gt(r, -1)), r.rank > 2) throw new V(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${s} which would result in output rank ${r.rank}.`); let i = ["multiHot", "oneHot"].includes(t), o = r, l; if (typeof a != "undefined" && t === "count" ? l = um(o, a, n, i) : l = um(o, [], n, i), t !== "tfIdf") return l; if (a) return z(l, a); throw new V("When outputMode is 'tfIdf', weights must be provided.") } var F1 = class extends We {
        constructor(e) { super(e), this.numTokens = e.numTokens, e.outputMode ? this.outputMode = e.outputMode : this.outputMode = "multiHot" } getConfig() { let e = { numTokens: this.numTokens, outputMode: this.outputMode }, t = super.getConfig(); return Object.assign(e, t), e } computeOutputShape(e) { return e = Je(e), e == null ? [this.numTokens] : this.outputMode === "oneHot" && e[e.length - 1] !== 1 ? (e.push(this.numTokens), e) : (e[e.length - 1] = this.numTokens, e) } call(e, t) {
            return O(() => {
                e = Te(e), e.dtype !== "int32" && (e = lr(e, "int32")); let n; if (typeof t.countWeights != "undefined") {
                    if (this.outputMode !== "count") throw new V(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`); n = Te(t.countWeights)
                } let a = fa(e), r = Xl(e), s = Tn(this.numTokens, a).bufferSync().get(0), i = Rr(r, 0).bufferSync().get(0); if (!(s && i)) throw new V(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`); return O6(e, this.outputMode, this.numTokens, n)
            })
        }
    }; F1.className = "CategoryEncoding"; ne.registerClass(F1); var P6 = ["bilinear", "nearest"], nS = new Set(P6), $1 = class extends We { constructor(e) { if (super(e), this.height = e.height, this.width = e.width, e.interpolation) if (nS.has(e.interpolation)) this.interpolation = e.interpolation; else throw new V(`Invalid interpolation parameter: ${e.interpolation} is not implemented`); else this.interpolation = "bilinear"; this.cropToAspectRatio = !!e.cropToAspectRatio } computeOutputShape(e) { e = Je(e); let t = e[2]; return [this.height, this.width, t] } getConfig() { let e = { height: this.height, width: this.width, interpolation: this.interpolation, cropToAspectRatio: this.cropToAspectRatio }, t = super.getConfig(); return Object.assign(e, t), e } call(e, t) { return O(() => { let n = [this.height, this.width]; if (this.interpolation === "bilinear") return Qn.resizeBilinear(e, n, !this.cropToAspectRatio); if (this.interpolation === "nearest") return Qn.resizeNearestNeighbor(e, n, !this.cropToAspectRatio); throw new Error(`Interpolation is ${this.interpolation} but only ${[...nS]} are supported`) }) } }; $1.className = "Resizing"; ne.registerClass($1); var KC = class { constructor(e) { this.seed = e } next() { if (this.seed !== void 0) return this.seed++ } }; KC.className = "RandomSeed"; var XC = class extends We { constructor(e) { super(e), this.randomGenerator = new KC(e.seed) } getConfig() { let e = { seed: this.randomGenerator.seed }, t = super.getConfig(); return Object.assign(e, t), e } }; XC.className = "BaseRandomLayer"; var L6 = ["bilinear", "nearest"], aS = new Set(L6), D1 = class extends XC {
        constructor(e) {
            super(e); let { factor: t, interpolation: n = "bilinear" } = e; if (this.factor = t, Array.isArray(this.factor) && this.factor.length === 2) this.widthLower = this.factor[0], this.widthUpper = this.factor[1]; else if (!Array.isArray(this.factor) && this.factor > 0) this.widthLower = -this.factor, this.widthUpper = this.factor; else throw new V(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`); if (this.widthLower < -1 || this.widthUpper < -1) throw new V(`factor must have values larger than -1. Got: ${this.factor}`); if (this.widthUpper < this.widthLower) throw new V(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `); if (n) if (aS.has(n)) this.interpolation = n; else throw new V(`Invalid interpolation parameter: ${n} is not implemented`)
        } getConfig() { let e = { factor: this.factor, interpolation: this.interpolation }, t = super.getConfig(); return Object.assign(e, t), e } computeOutputShape(e) { e = Je(e); let t = e[2]; return [this.imgHeight, -1, t] } call(e, t) {
            return O(() => {
                let n = Te(e); this.imgHeight = n.shape[n.shape.length - 3]; let a = n.shape[n.shape.length - 2]; this.widthFactor = Fs([1], 1 + this.widthLower, 1 + this.widthUpper, "float32", this.randomGenerator.next()); let r = this.widthFactor.dataSync()[0] * a; r = Math.round(r); let s = [this.imgHeight, r]; switch (this.interpolation) {
                    case "bilinear": return Qn.resizeBilinear(e, s); case "nearest": return Qn.resizeNearestNeighbor(e, s); default: throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...aS]} are supported`)
                }
            })
        }
    }; D1.className = "RandomWidth"; ne.registerClass(D1); function z6(e) { return new bp(e) } function W6(e) { return new R0(e) } function B6(e) { return new F0(e) } function V6(e) { return new $0(e) } function U6(e) { return new D0(e) } function G6(e) { return new O0(e) } function H6(e) { return new M0(e) } function q6(e) { return new B0(e) } function j6(e) { return new Uf(e) } function K6(e) { return new L0(e) } function X6(e) { return new Gf(e) } function Y6(e) { return new z0(e) } function Z6(e) { return new W0(e) } function J6(e) { return new V0(e) } function Q6(e) { return new U0(e) } function eq(e) { return new G0(e) } function tq(e) { return new J0(e) } function nq(e) { return new Y0(e) } function aq(e) { return new Xf(e) } function rq(e) { return new X0(e) } function sq(e) { return new Z0(e) } function iq(e) { return new Q0(e) } function oq(e) { return new e1(e) } function lq(e) { return new t1(e) } function uq(e) { return new a1(e) } function pq(e) { return new r1(e) } function cq(e) { return new i1(e) } function dq(e) { return new u1(e) } function hq(e) { return new o1(e) } function mq(e) { return new l1(e) } function fq(e) { return new s1(e) } function gq(e) { return new p1(e) } function bq(e) { return new m1(e) } function yq(e) { return new f1(e) } function xq(e) { return new g1(e) } function R1(e) { return new y1(e) } function vq(e) { return R1(e) } function wq(e) { return R1(e) } function M1(e) { return new v1(e) } function kq(e) { return M1(e) } function Iq(e) { return M1(e) } function O1(e) { return new k1(e) } function Sq(e) { return O1(e) } function Nq(e) { return O1(e) } function Tq(e) { return new I1(e) } function Cq(e) { return new N1(e) } function YC(e) { return new S1(e) } function ZC(e) { return new T1(e) } function JC(e) { return new b1(e) } function QC(e) { return new x1(e) } function Eq(e) { return new w1(e) } function _q(e) { return new q0(e) } function Aq(e) { return new qf(e) } function Fq(e) { return new j0(e) } function $q(e) { return new Dd(e) } function Dq(e) { return new H0(e) } function Rq(e) { return new Hf(e) } function Mq(e) { return new K0(e) } function Oq(e) { return new Kf(e) } function Pq(e) { return new Pr(e) } function Lq(e) { return new jf(e) } function zq(e) { return new E1(e) } function Wq(e) { return new C1(e) } var Bq = YC, Vq = ZC, Uq = JC, Gq = QC; function Hq(e) { return new c1(e) } function qq(e) { return new d1(e) } function jq(e) { return new h1(e) } function Kq(e) { return new n1(e) } function Xq(e) { return new _1(e) } function Yq(e) { return new A1(e) } function Zq(e) { return new $1(e) } function Jq(e) { return new F1(e) } function Qq(e) { return new D1(e) } var eE = {}; _e(eE, { MAPE: () => pj, MSE: () => hj, binaryAccuracy: () => ej, binaryCrossentropy: () => tj, categoricalAccuracy: () => aj, categoricalCrossentropy: () => rj, cosineProximity: () => oj, mape: () => cj, meanAbsoluteError: () => lj, meanAbsolutePercentageError: () => uj, meanSquaredError: () => dj, mse: () => mj, precision: () => sj, recall: () => ij, sparseCategoricalAccuracy: () => nj }); function ej(e, t) { return N0(e, t) } function tj(e, t) { return sC(e, t) } function nj(e, t) { return iC(e, t) } function aj(e, t) { return T0(e, t) } function rj(e, t) { return C0(e, t) } function sj(e, t) { return rC(e, t) } function ij(e, t) { return LH(e, t) } function oj(e, t) { return S0(e, t) } function lj(e, t) { return zf(e, t) } function uj(e, t) { return yp(e, t) } function pj(e, t) { return yp(e, t) } function cj(e, t) { return yp(e, t) } function dj(e, t) { return Zo(e, t) } function hj(e, t) { return Zo(e, t) } function mj(e, t) { return Zo(e, t) } var tE = {}; _e(tE, { modelFromJSON: () => m6 }); var nE = {}; _e(nE, { l1: () => gj, l1l2: () => fj, l2: () => bj }); function fj(e) { return new Fd(e) } function gj(e) { return w6(e) } function bj(e) { return k6(e) } var aE = class extends au { constructor() { super(...arguments), this.model = null } setModel(e) { if (!(e instanceof _r)) throw new Error("model must be a LayersModel, not some other Container"); this.model = e } }; function zh(e, t) { return e < t } function rS(e, t) { return e > t } var rE = class extends aE { constructor(e) { if (super(), e == null && (e = {}), e.restoreBestWeights) throw new ze("restoreBestWeights = True is not implemented in EarlyStopping yet."); this.monitor = e.monitor || "val_loss", this.minDelta = Math.abs(e.minDelta || 0), this.patience = e.patience || 0, this.verbose = e.verbose || 0, this.mode = e.mode || "auto", this.baseline = e.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = zh : this.mode === "max" ? this.monitorFunc = rS : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = rS : this.monitorFunc = zh, this.monitorFunc === zh && (this.minDelta *= -1) } async onTrainBegin(e) { this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === zh ? 1 / 0 : -1 / 0 } async onEpochEnd(e, t) { await Jr(t); let n = this.getMonitorValue(t); n != null && (this.monitorFunc(n - this.minDelta, this.best) ? (this.best = n, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = e, this.model.stopTraining = !0))) } async onTrainEnd(e) { this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`) } getMonitorValue(e) { e == null && (e = {}); let t = e[this.monitor]; return t == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`), t } }; function yj(e) { return new rE(e) } var xj = { earlyStopping: yj }, vj = G(); vj.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, e => { e && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.") }); var Xn; (function (e) { e[e.DT_INVALID = 0] = "DT_INVALID", e[e.DT_FLOAT = 1] = "DT_FLOAT", e[e.DT_DOUBLE = 2] = "DT_DOUBLE", e[e.DT_INT32 = 3] = "DT_INT32", e[e.DT_UINT8 = 4] = "DT_UINT8", e[e.DT_INT16 = 5] = "DT_INT16", e[e.DT_INT8 = 6] = "DT_INT8", e[e.DT_STRING = 7] = "DT_STRING", e[e.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e[e.DT_INT64 = 9] = "DT_INT64", e[e.DT_BOOL = 10] = "DT_BOOL", e[e.DT_QINT8 = 11] = "DT_QINT8", e[e.DT_QUINT8 = 12] = "DT_QUINT8", e[e.DT_QINT32 = 13] = "DT_QINT32", e[e.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e[e.DT_QINT16 = 15] = "DT_QINT16", e[e.DT_QUINT16 = 16] = "DT_QUINT16", e[e.DT_UINT16 = 17] = "DT_UINT16", e[e.DT_COMPLEX128 = 18] = "DT_COMPLEX128", e[e.DT_HALF = 19] = "DT_HALF", e[e.DT_RESOURCE = 20] = "DT_RESOURCE", e[e.DT_VARIANT = 21] = "DT_VARIANT", e[e.DT_UINT32 = 22] = "DT_UINT32", e[e.DT_UINT64 = 23] = "DT_UINT64", e[e.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e[e.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e[e.DT_INT32_REF = 103] = "DT_INT32_REF", e[e.DT_UINT8_REF = 104] = "DT_UINT8_REF", e[e.DT_INT16_REF = 105] = "DT_INT16_REF", e[e.DT_INT8_REF = 106] = "DT_INT8_REF", e[e.DT_STRING_REF = 107] = "DT_STRING_REF", e[e.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e[e.DT_INT64_REF = 109] = "DT_INT64_REF", e[e.DT_BOOL_REF = 110] = "DT_BOOL_REF", e[e.DT_QINT8_REF = 111] = "DT_QINT8_REF", e[e.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e[e.DT_QINT32_REF = 113] = "DT_QINT32_REF", e[e.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", e[e.DT_QINT16_REF = 115] = "DT_QINT16_REF", e[e.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", e[e.DT_UINT16_REF = 117] = "DT_UINT16_REF", e[e.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", e[e.DT_HALF_REF = 119] = "DT_HALF_REF", e[e.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", e[e.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", e[e.DT_UINT32_REF = 122] = "DT_UINT32_REF", e[e.DT_UINT64_REF = 123] = "DT_UINT64_REF" })(Xn || (Xn = {})); var sS; (function (e) { let t; (function (n) { n[n.LEGACY = 0] = "LEGACY", n[n.V1 = 1] = "V1", n[n.V2 = 2] = "V2" })(t = e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {})) })(sS || (sS = {})); var P1 = {}; function wj(e, t) { let n = { tfOpName: e, category: "custom", inputs: [], attrs: [], customExecutor: t }; P1[e] = n } function sE(e) { return P1[e] } function kj(e) { delete P1[e] } function k(e, t, n, a, r) { let s = t.inputParams[e]; if (s && s.inputIndexStart !== void 0) { let o = s.inputIndexStart, l = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? o + 1 : s.inputIndexEnd, u = o < 0 ? t.inputNames.length + o : o; if (s.type === "tensor") return cn(t.inputNames[u], n, a, r); if (s.type === "tensors") { let c = t.inputs.slice(o, l); return t.inputNames.slice(o, l).filter((h, m) => { var f; return ((f = c[m]) === null || f === void 0 ? void 0 : f.op) !== "NoOp" }).map(h => cn(h, n, a, r)) } let p = cn(t.inputNames[u], n, a, r), d = p.dataSync(); return s.type === "number" ? d[0] : w.toNestedArray(p.shape, d) } let i = t.attrParams[e]; return i && i.value } function cn(e, t, n, a) { let [r, s] = Zn(e, n); if (a != null) { let o = a.getHashTableHandleByName(r); if (o != null) return o } let i = n.currentContextIds.find(o => !!t[vm(r, o)]); return i !== void 0 ? t[vm(r, i)][s] : void 0 } function iS(e, t, n) { return t[vm(e, n.currentContextId)] } function Nr(e, t) { let [n, a, r] = Zn(e, t); return [vm(n, t && t.currentContextId), a, r] } function vm(e, t) { return t ? `${e}-${t}` : e } function Zn(e, t) { if (e === "") return ["", 0, void 0]; let n = t != null && t.parseNodeNameCache != null; if (n) { let s = t.parseNodeNameCache.get(e); if (s != null) return s } let a = e.split(":"), r; if (a.length === 1) r = [e, 0, void 0]; else { let s = a[0], i = a.length === 3 ? a[1] : void 0, o = Number(a[a.length - 1]); r = [s, o, i] } return n && t.parseNodeNameCache.set(e, r), r } function Xh(e, t, n) { let a = k("pad", e, t, n); if (a === "explicit") { a = k("explicitPaddings", e, t, n); let r = [[0, 0], [0, 0], [0, 0], [0, 0]]; for (let s = 0; s < 4; s++)r[s][0] = a[s * 2], r[s][1] = a[s * 2 + 1]; return r } return a } function Tr(e) { return e.kept ? e : or(e) } var iE = {}; _e(iE, { json: () => Ij }); var Ij = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }], oE = {}; _e(oE, { json: () => Sj }); var Sj = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: !0 }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: !0 }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: .2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "IsFinite", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "IsInf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }], lE = {}; _e(lE, { json: () => Nj }); var Nj = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: !0 }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcatV2", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }], uE = {}; _e(uE, { json: () => Tj }); var Tj = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: !0 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: !0 }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: .2 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: !0 }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }], pE = {}; _e(pE, { json: () => Cj }); var Cj = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: !0 }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomStandardNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: !0 }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 }, { tfName: "T", name: "T", type: "number", notSupported: !0 }] }, { tfOpName: "RandomUniformInt", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number" }, { tfName: "maxval", name: "maxval", type: "number" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: !0 }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }], cE = {}; _e(cE, { json: () => Ej }); var Ej = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: !0 }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }], dE = {}; _e(dE, { json: () => _j }); var _j = [{ tfOpName: "LowerBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "UpperBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }], hE = {}; _e(hE, { json: () => Aj }); var Aj = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: !0 }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }], mE = {}; _e(mE, { json: () => Fj }); var Fj = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: !0 }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: !0 }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: !0 }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: !0 }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: !0 }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "InitializeTable", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }, { tfOpName: "InitializeTableV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }], fE = {}; _e(fE, { json: () => $j }); var $j = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }], gE = {}; _e(gE, { json: () => Dj }); var Dj = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "BitwiseAnd", category: "logical", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }] }], bE = {}; _e(bE, { json: () => Rj }); var Rj = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: !1 }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: !1 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: .2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: !1 }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: !1 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: !1 }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: !1 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: !1 }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: !1 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "MatrixBandPart", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "numLower", type: "tensor" }, { start: 1, name: "numUpper", type: "tensor" }] }], yE = {}; _e(yE, { json: () => Mj }); var Mj = [{ tfOpName: "EuclideanNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", defaultValue: !1 }] }, { tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: .001 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: .001 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: .001 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: .5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }], xE = {}; _e(xE, { json: () => Oj }); var Oj = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }], vE = {}; _e(vE, { json: () => Pj }); var Pj = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: !0 }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: !0 }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: !1, notSupported: !0 }] }, { tfOpName: "TensorScatterUpdate", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }], wE = {}; _e(wE, { json: () => Lj }); var Lj = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }], kE = {}; _e(kE, { json: () => zj }); var zj = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: !0 }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: !0 }] }], IE = {}; _e(IE, { json: () => Wj }); var Wj = [{ tfOpName: "StaticRegexReplace", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "pattern", name: "pattern", type: "string" }, { tfName: "rewrite", name: "rewrite", type: "string" }, { tfName: "replace_global", name: "replaceGlobal", type: "bool" }] }, { tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }], SE = {}; _e(SE, { json: () => Bj }); var Bj = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: !0 }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "EnsureShape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }], oS = class { static get Instance() { return this._instance || (this._instance = new this) } constructor() { let e = [iE, oE, lE, uE, pE, cE, dE, hE, mE, fE, gE, bE, yE, xE, vE, wE, kE, IE, SE], t = [].concat(...e.map(n => n.json)); this.opMappers = t.reduce((n, a) => (n[a.tfOpName] = a, n), {}) } transformGraph(e, t = {}) { let n = e.node, a = [], r = [], s = [], i = n.reduce((m, f) => (m[f.name] = this.mapNode(f), f.op.startsWith("Placeholder") ? a.push(m[f.name]) : f.op === "Const" ? r.push(m[f.name]) : (f.input == null || f.input.length === 0) && s.push(m[f.name]), m), {}), o = [], l = [], u = {}, p = {}; t != null && (u = this.mapSignatureEntries(t.inputs), p = this.mapSignatureEntries(t.outputs)); let d = Object.keys(i); d.forEach(m => { let f = i[m]; f.inputNames.forEach((g, b) => { let [y, , x] = Nr(g), v = i[y]; if (v.outputs != null) { let I = v.outputs.indexOf(x); if (I !== -1) { let N = `${y}:${I}`; f.inputNames[b] = N } } f.inputs.push(v), v.children.push(f) }) }), Object.keys(p).length === 0 ? d.forEach(m => { let f = i[m]; f.children.length === 0 && l.push(f) }) : Object.keys(p).forEach(m => { let [f] = Nr(m), g = i[f]; g != null && (g.signatureKey = p[m], l.push(g)) }), Object.keys(u).length > 0 ? Object.keys(u).forEach(m => { let [f] = Nr(m), g = i[f]; g && (g.signatureKey = u[m], o.push(g)) }) : o = a; let c = {}; e.library != null && e.library.function != null && (c = e.library.function.reduce((m, f) => (m[f.signature.name] = this.mapFunction(f), m), {})); let h = { nodes: i, inputs: o, outputs: l, weights: r, placeholders: a, signature: t, functions: c }; return s.length > 0 && (h.initNodes = s), h } mapSignatureEntries(e) { return Object.keys(e || {}).reduce((t, n) => (t[e[n].name] = n, t), {}) } mapNode(e) { let t = sE(e.op) || this.opMappers[e.op] || {}; e.attr == null && (e.attr = {}); let n = { name: e.name, op: e.op, category: t.category, inputNames: (e.input || []).map(a => a.startsWith("^") ? a.slice(1) : a), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e.attr, outputs: t.outputs }; return t.inputs != null && (n.inputParams = t.inputs.reduce((a, r) => (a[r.name] = { type: r.type, inputIndexStart: r.start, inputIndexEnd: r.end }, a), {})), t.attrs != null && (n.attrParams = t.attrs.reduce((a, r) => { let s = r.type, i; switch (r.type) { case "string": i = nv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = nv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "string[]": i = uv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = uv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "number": i = rv(e.attr, r.tfName, r.defaultValue || 0), i === void 0 && r.tfDeprecatedName && (i = rv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "number[]": i = lv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = lv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "bool": i = av(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = av(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "bool[]": i = cv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = cv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "shape": i = ov(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = ov(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "shape[]": i = pv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = pv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "dtype": i = sv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = sv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "dtype[]": i = iv(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = iv(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "func": i = lS(e.attr, r.tfName, r.defaultValue), i === void 0 && r.tfDeprecatedName && (i = lS(e.attr, r.tfDeprecatedName, r.defaultValue)); break; case "tensor": case "tensors": break; default: throw new Error(`Unsupported param type: ${r.type} for op: ${e.op}`) }return a[r.name] = { value: i, type: s }, a }, {})), n } mapFunction(e) { let t = e.nodeDef, n = [], a = [], r = {}; t != null && (r = t.reduce((u, p) => (u[p.name] = this.mapNode(p), p.op === "Const" && a.push(u[p.name]), u), {})); let s = [], i = []; e.signature.inputArg.forEach(u => { let [p] = Nr(u.name), d = { name: p, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: L1(u.type), type: "dtype" } }, children: [] }; d.signatureKey = u.name, s.push(d), r[p] = d }), Object.keys(r).forEach(u => { let p = r[u]; p.inputNames.forEach((d, c) => { let [h, , m] = Nr(d), f = r[h]; if (f.outputs != null) { let g = f.outputs.indexOf(m); if (g !== -1) { let b = `${h}:${g}`; p.inputNames[c] = b } } p.inputs.push(f), f.children.push(p) }) }); let o = e.ret; e.signature.outputArg.forEach(u => { let [p, d] = Nr(o[u.name]), c = r[p]; c != null && (c.defaultOutput = d, i.push(c)) }); let l = this.mapArgsToSignature(e); return { nodes: r, inputs: s, outputs: i, weights: a, placeholders: n, signature: l } } mapArgsToSignature(e) { return { methodName: e.signature.name, inputs: e.signature.inputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n), t), {}), outputs: e.signature.outputArg.reduce((t, n) => (t[n.name] = this.mapArgToTensorInfo(n, e.ret), t), {}) } } mapArgToTensorInfo(e, t) { let n = e.name; return t != null && (n = t[n]), { name: n, dtype: e.type } } }; function Vj(e) { let t = G().global; if (typeof t.atob != "undefined") return t.atob(e); if (typeof Buffer != "undefined") return new Buffer(e, "base64").toString(); throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()") } function NE(e, t) { let n = Array.isArray(e) ? String.fromCharCode.apply(null, e) : Vj(e); return t ? n : n.toLowerCase() } function nv(e, t, n, a = !1) { let r = e[t]; return r != null ? NE(r.s, a) : n } function av(e, t, n) { let a = e[t]; return a ? a.b : n } function rv(e, t, n) { let a = e[t] || {}, r = a.i != null ? a.i : a.f != null ? a.f : n; return typeof r == "number" ? r : parseInt(r, 10) } function L1(e) { switch (typeof e == "string" && (e = Xn[e]), e) { case Xn.DT_FLOAT: case Xn.DT_HALF: return "float32"; case Xn.DT_INT32: case Xn.DT_INT64: case Xn.DT_INT8: case Xn.DT_UINT8: return "int32"; case Xn.DT_BOOL: return "bool"; case Xn.DT_DOUBLE: return "float32"; case Xn.DT_STRING: return "string"; case Xn.DT_COMPLEX64: case Xn.DT_COMPLEX128: return "complex64"; default: return null } } function lS(e, t, n) { let a = e[t]; return a && a.func ? a.func.name : n } function sv(e, t, n) { let a = e[t]; return a && a.type ? L1(a.type) : n } function iv(e, t, n) { let a = e[t]; return a && a.list && a.list.type ? a.list.type.map(r => L1(r)) : n } function TE(e) { if (!e.unknownRank) return e.dim != null ? e.dim.map(t => typeof t.size == "number" ? t.size : parseInt(t.size, 10)) : [] } function ov(e, t, n) { let a = e[t]; return a && a.shape ? TE(a.shape) : n } function lv(e, t, n) { let a = e[t]; return a ? ((a.list.f && a.list.f.length ? a.list.f : a.list.i) || []).map(r => typeof r == "number" ? r : parseInt(r, 10)) : n } function uv(e, t, n, a = !1) { let r = e[t]; return r && r.list && r.list.s ? r.list.s.map(s => NE(s, a)) : n } function pv(e, t, n) { let a = e[t]; return a && a.list && a.list.shape ? a.list.shape.map(r => TE(r)) : n } function cv(e, t, n) { let a = e[t]; return a && a.list && a.list.b ? a.list.b : n } var Uj = class { constructor(e, t, n) { this.node = e, this.tensorMap = t, this.context = n, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map(a => this.getInput(a)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((a, r) => (a[r] = this.getAttr(r), a), {})) } getInput(e) { return cn(e, this.tensorMap, this.context) } getAttr(e, t) { let n = this.node.rawAttrs[e]; if (n.tensor != null) return cn(e, this.tensorMap, this.context); if (n.i != null || n.f != null) return rv(this.node.rawAttrs, e, t); if (n.s != null) return nv(this.node.rawAttrs, e, t); if (n.b != null) return av(this.node.rawAttrs, e, t); if (n.shape != null) return ov(this.node.rawAttrs, e, t); if (n.type != null) return sv(this.node.rawAttrs, e, t); if (n.list != null) { if (n.list.i != null || n.list.f != null) return lv(this.node.rawAttrs, e, t); if (n.list.s != null) return uv(this.node.rawAttrs, e, t); if (n.list.shape != null) return pv(this.node.rawAttrs, e, t); if (n.list.b != null) return cv(this.node.rawAttrs, e, t); if (n.list.type != null) return iv(this.node.rawAttrs, e, t) } return t } }, sn = {}; _e(sn, { OP_SCOPE_SUFFIX: () => Lv, abs: () => Lt, acos: () => Gv, acosh: () => Hv, add: () => X, addN: () => VN, all: () => Jm, any: () => Sc, argMax: () => hi, argMin: () => qv, asin: () => jv, asinh: () => Kv, atan: () => Xv, atan2: () => Yv, atanh: () => Zv, avgPool: () => xa, avgPool3d: () => Qv, basicLSTMCell: () => qN, batchNorm: () => Es, batchNorm2d: () => ew, batchNorm3d: () => tw, batchNorm4d: () => nw, batchToSpaceND: () => dd, bincount: () => aw, bitwiseAnd: () => jN, booleanMaskAsync: () => OT, broadcastArgs: () => KN, broadcastTo: () => ri, buffer: () => Pe, cast: () => re, ceil: () => rw, clipByValue: () => an, clone: () => or, complex: () => Ar, concat: () => et, concat1d: () => sw, concat2d: () => iw, concat3d: () => ow, concat4d: () => lw, conv1d: () => Qm, conv2d: () => $t, conv2dTranspose: () => ef, conv3d: () => pw, conv3dTranspose: () => cw, cos: () => hd, cosh: () => tf, cosineWindow: () => If, cumprod: () => Cc, cumsum: () => nf, denseBincount: () => um, depthToSpace: () => dw, depthwiseConv2d: () => _s, diag: () => YN, dilation2d: () => hw, div: () => he, divNoNan: () => mw, dot: () => fw, dropout: () => Hw, einsum: () => Js, elu: () => dp, enclosingPowerOfTwo: () => qw, ensureShape: () => JN, equal: () => ea, erf: () => gw, euclideanNorm: () => xw, exp: () => mn, expandDims: () => Gt, expm1: () => vw, eye: () => af, fft: () => Id, fill: () => yn, floor: () => mp, floorDiv: () => Zm, fused: () => tu, gather: () => fp, gatherND: () => WT, greater: () => Tn, greaterEqual: () => Rr, ifft: () => eu, imag: () => md, image: () => Qn, inTopKAsync: () => BT, irfft: () => bf, isFinite: () => ww, isInf: () => kw, isNaN: () => Iw, leakyRelu: () => fd, less: () => Yl, lessEqual: () => As, linalg: () => Xw, linspace: () => aT, localResponseNormalization: () => Sw, log: () => ta, log1p: () => gd, logSigmoid: () => Nw, logSoftmax: () => sf, logSumExp: () => bd, logicalAnd: () => Fa, logicalNot: () => yd, logicalOr: () => of, logicalXor: () => Tw, losses: () => QT, lowerBound: () => sT, matMul: () => $e, max: () => fa, maxPool: () => Dt, maxPool3d: () => Cw, maxPoolWithArgmax: () => iT, maximum: () => mr, mean: () => Et, meshgrid: () => oT, min: () => Xl, minimum: () => fs, mirrorPad: () => Ew, mod: () => _w, moments: () => xd, movingAverage: () => PT, mul: () => z, multiRNNCell: () => lT, multinomial: () => uT, neg: () => yt, norm: () => hp, notEqual: () => bi, oneHot: () => Zl, ones: () => On, onesLike: () => na, op: () => L, outerProduct: () => pT, pad: () => va, pad1d: () => cT, pad2d: () => dT, pad3d: () => hT, pad4d: () => mT, pool: () => Aw, pow: () => Fr, prelu: () => wd, print: () => Uv, prod: () => Fw, raggedGather: () => fT, raggedRange: () => gT, raggedTensorToTensor: () => bT, rand: () => yT, randomGamma: () => kT, randomNormal: () => uf, randomStandardNormal: () => IT, randomUniform: () => Fs, randomUniformInt: () => ST, range: () => yi, real: () => Jl, reciprocal: () => Ow, relu: () => Ke, relu6: () => pf, reshape: () => W, reverse: () => ya, reverse1d: () => NT, reverse2d: () => TT, reverse3d: () => CT, reverse4d: () => ET, rfft: () => Sd, round: () => cf, rsqrt: () => df, scalar: () => ve, scatterND: () => LT, searchSorted: () => lf, selu: () => hf, separableConv2d: () => $s, setdiff1dAsync: () => _T, sigmoid: () => ma, sign: () => Pw, signal: () => JT, sin: () => mf, sinh: () => ff, slice: () => Ve, slice1d: () => kd, slice2d: () => gf, slice3d: () => jo, slice4d: () => Ql, softmax: () => ja, softplus: () => qo, spaceToBatchND: () => vd, sparse: () => e2, sparseToDense: () => zT, spectral: () => ZT, split: () => Pn, sqrt: () => hn, square: () => pt, squaredDifference: () => yf, squeeze: () => Ds, stack: () => Ft, step: () => Ko, stridedSlice: () => Lw, string: () => t2, sub: () => pe, sum: () => fe, tan: () => zw, tanh: () => fi, tensor: () => bn, tensor1d: () => qe, tensor2d: () => Aa, tensor3d: () => Nd, tensor4d: () => Da, tensor5d: () => AT, tensor6d: () => FT, tensorScatterUpdate: () => DT, tile: () => Mn, topk: () => Bw, transpose: () => De, truncatedNormal: () => wf, unique: () => Vw, unsortedSegmentSum: () => kf, unstack: () => dt, upperBound: () => RT, variable: () => Uw, where: () => nn, whereAsync: () => Gw, zeros: () => It, zerosLike: () => je }); var Gj = (e, t, n, a = sn) => { switch (e.op) { case "BiasAdd": case "AddV2": case "Add": return [a.add(k("a", e, t, n), k("b", e, t, n))]; case "AddN": return [a.addN(k("tensors", e, t, n))]; case "FloorMod": case "Mod": return [a.mod(k("a", e, t, n), k("b", e, t, n))]; case "Mul": return [a.mul(k("a", e, t, n), k("b", e, t, n))]; case "RealDiv": case "Div": return [a.div(k("a", e, t, n), k("b", e, t, n))]; case "DivNoNan": return [a.divNoNan(k("a", e, t, n), k("b", e, t, n))]; case "FloorDiv": return [a.floorDiv(k("a", e, t, n), k("b", e, t, n))]; case "Sub": return [a.sub(k("a", e, t, n), k("b", e, t, n))]; case "Minimum": return [a.minimum(k("a", e, t, n), k("b", e, t, n))]; case "Maximum": return [a.maximum(k("a", e, t, n), k("b", e, t, n))]; case "Pow": return [a.pow(k("a", e, t, n), k("b", e, t, n))]; case "SquaredDifference": return [a.squaredDifference(k("a", e, t, n), k("b", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, Hj = (e, t, n, a = sn) => { switch (e.op) { case "Abs": case "ComplexAbs": return [a.abs(k("x", e, t, n))]; case "Acos": return [a.acos(k("x", e, t, n))]; case "Acosh": return [a.acosh(k("x", e, t, n))]; case "Asin": return [a.asin(k("x", e, t, n))]; case "Asinh": return [a.asinh(k("x", e, t, n))]; case "Atan": return [a.atan(k("x", e, t, n))]; case "Atan2": return [a.atan2(k("x", e, t, n), k("y", e, t, n))]; case "Atanh": return [a.atanh(k("x", e, t, n))]; case "Ceil": return [a.ceil(k("x", e, t, n))]; case "Complex": return [a.complex(k("real", e, t, n), k("imag", e, t, n))]; case "Cos": return [a.cos(k("x", e, t, n))]; case "Cosh": return [a.cosh(k("x", e, t, n))]; case "Elu": return [a.elu(k("x", e, t, n))]; case "Erf": return [a.erf(k("x", e, t, n))]; case "Exp": return [a.exp(k("x", e, t, n))]; case "Expm1": return [a.expm1(k("x", e, t, n))]; case "Floor": return [a.floor(k("x", e, t, n))]; case "Log": return [a.log(k("x", e, t, n))]; case "Log1p": return [a.log1p(k("x", e, t, n))]; case "Imag": return [a.imag(k("x", e, t, n))]; case "Neg": return [a.neg(k("x", e, t, n))]; case "Reciprocal": return [a.reciprocal(k("x", e, t, n))]; case "Real": return [a.real(k("x", e, t, n))]; case "Relu": return [a.relu(k("x", e, t, n))]; case "Round": return [a.round(k("x", e, t, n))]; case "Selu": return [a.selu(k("x", e, t, n))]; case "Sigmoid": return [a.sigmoid(k("x", e, t, n))]; case "Sin": return [a.sin(k("x", e, t, n))]; case "Sign": return [a.sign(k("x", e, t, n))]; case "Sinh": return [a.sinh(k("x", e, t, n))]; case "Softplus": return [a.softplus(k("x", e, t, n))]; case "Sqrt": return [a.sqrt(k("x", e, t, n))]; case "Square": return [a.square(k("x", e, t, n))]; case "Tanh": return [a.tanh(k("x", e, t, n))]; case "Tan": return [a.tan(k("x", e, t, n))]; case "ClipByValue": return [a.clipByValue(k("x", e, t, n), k("clipValueMin", e, t, n), k("clipValueMax", e, t, n))]; case "Relu6": return [a.relu6(k("x", e, t, n))]; case "Rsqrt": return [a.rsqrt(cn(e.inputNames[0], t, n))]; case "LeakyRelu": return [a.leakyRelu(k("x", e, t, n), k("alpha", e, t, n))]; case "Prelu": return [a.prelu(k("x", e, t, n), k("alpha", e, t, n))]; case "IsNan": return [a.isNaN(cn(e.inputNames[0], t, n))]; case "IsInf": return [a.isInf(cn(e.inputNames[0], t, n))]; case "IsFinite": return [a.isFinite(cn(e.inputNames[0], t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }; function _a(e, t, n = "") { if (!(typeof e == "number" || typeof t == "number")) { w.assert(e.length === t.length, () => n + ` Shapes ${e} and ${t} must match`); for (let a = 0; a < e.length; a++) { let r = e[a], s = t[a]; w.assert(r < 0 || s < 0 || r === s, () => n + ` Shapes ${e} and ${t} must match`) } } } function uS(e) { return !(typeof e == "number" || e.some(t => t < 0)) } function ac(e, t, n) { let a = dv(e, n), r = !uS(a); if (r && t.length === 0) throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${a}`); if (r && t.forEach(s => { a = dv(s.shape, a) }), !uS(a)) throw new Error(`Non-fully-defined elementShape: ${a}`); return a } function dv(e, t) { if (typeof e == "number") return t; if (typeof t == "number") return e; if (e.length !== t.length) throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`); let n = []; for (let a = 0; a < e.length; ++a) { let r = e[a], s = t[a]; if (r >= 0 && s >= 0 && r !== s) throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`); n[a] = r >= 0 ? r : s } return n } var qj = class {
        constructor(e, t, n, a, r, s, i) { this.name = e, this.dtype = t, this.maxSize = n, this.elementShape = a, this.identicalElementShapes = r, this.dynamicSize = s, this.clearAfterRead = i, this.tensors = [], this.closed_ = !1, this.idTensor = ve(0), Ht(this.idTensor) } get id() { return this.idTensor.id } get closed() { return this.closed_ } clearAndClose(e) { this.tensors.forEach(t => { (e == null || !e.has(t.tensor.id)) && t.tensor.dispose() }), this.tensors = [], this.closed_ = !0, this.idTensor.dispose() } size() { return this.tensors.length } read(e) { if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`); if (e < 0 || e >= this.size()) throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`); let t = this.tensors[e]; if (t.cleared) throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`); return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor } readMany(e) { return e.map(t => this.read(t)) } write(e, t) {
            if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`); if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`); let n = this.tensors[e] || {}; if (t.dtype !== this.dtype) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`); if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), _a(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), n.read) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`); if (n.written) throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`); n.tensor = t, Ht(t), n.written = !0, this.tensors[e] = n
        } writeMany(e, t) { if (e.length !== t.length) throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`); e.forEach((n, a) => this.write(n, t[a])) } gather(e, t) { if (t && t !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`); if (e) e = e.slice(0, this.size()); else { e = []; for (let a = 0; a < this.size(); a++)e.push(a) } if (e.length === 0) return bn([], [0].concat(this.elementShape)); let n = this.readMany(e); return _a(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), Ft(n, 0) } concat(e) { if (e && e !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`); if (this.size() === 0) return bn([], [0].concat(this.elementShape)); let t = []; for (let a = 0; a < this.size(); a++)t.push(a); let n = this.readMany(t); return _a(this.elementShape, n[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`), et(n, 0) } scatter(e, t) { if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`); if (e.length !== t.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`); let n = Math.max(...e); if (!this.dynamicSize && n >= this.maxSize) throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`); this.writeMany(e, dt(t, 0)) } split(e, t) {
            if (t.dtype !== this.dtype) throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`); let n = 0, a = e.map(o => (n += o, n)); if (n !== t.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`); if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`); let r = n === 0 ? 0 : t.size / n, s = []; O(() => { t = W(t, [1, n, r]); for (let o = 0; o < e.length; ++o) { let l = [0, o === 0 ? 0 : a[o - 1], 0], u = [1, e[o], r]; s[o] = W(Ve(t, l, u), this.elementShape) } return s }); let i = []; for (let o = 0; o < e.length; o++)i[o] = o; this.writeMany(i, s)
        }
    }, Zf = class hv { get id() { return this.idTensor.id } constructor(t, n, a, r = -1) { this.tensors = t, this.elementShape = n, this.elementDtype = a, t != null && t.forEach(s => { if (a !== s.dtype) throw new Error(`Invalid data types; op elements ${a}, but list elements ${s.dtype}`); _a(n, s.shape, "TensorList shape mismatch: "), Ht(s) }), this.idTensor = ve(0), this.maxNumElements = r, Ht(this.idTensor) } copy() { return new hv([...this.tensors], this.elementShape, this.elementDtype) } clearAndClose(t) { this.tensors.forEach(n => { (t == null || !t.has(n.id)) && n.dispose() }), this.tensors.length = 0, this.idTensor.dispose() } size() { return this.tensors.length } stack(t, n, a = -1) { if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`); if (a !== -1 && this.tensors.length !== a) throw new Error(`Operation expected a list with ${a} elements but got a list with ${this.tensors.length} elements.`); _a(t, this.elementShape, "TensorList shape mismatch: "); let r = ac(this.elementShape, this.tensors, t); return O(() => { let s = this.tensors.map(i => W(i, r)); return Ft(s, 0) }) } popBack(t, n) { if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`); if (this.size() === 0) throw new Error("Trying to pop from an empty list."); let a = ac(this.elementShape, this.tensors, t), r = this.tensors.pop(); return r.kept = !1, _a(r.shape, t, "TensorList shape mismatch: "), W(r, a) } pushBack(t) { if (t.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`); if (_a(t.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size()) throw new Error("Trying to push element into a full list."); Ht(t), this.tensors.push(t) } resize(t) { if (t < 0) throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`); if (this.maxNumElements !== -1 && t > this.maxNumElements) throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`); let n = new hv([], this.elementShape, this.elementDtype, this.maxNumElements); n.tensors.length = t; for (let a = 0; a < Math.min(this.tensors.length, t); ++a)n.tensors[a] = this.tensors[a]; return n } getItem(t, n, a) { if (a !== this.elementDtype) throw new Error(`Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`); if (t < 0 || t > this.tensors.length) throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`); if (this.tensors[t] == null) throw new Error(`element at index ${t} is null.`); _a(this.tensors[t].shape, n, "TensorList shape mismatch: "); let r = ac(this.elementShape, this.tensors, n); return W(this.tensors[t], r) } setItem(t, n) { if (n.dtype !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${this.elementDtype}`); if (t < 0 || this.maxNumElements !== -1 && t >= this.maxNumElements) throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`); _a(this.elementShape, n.shape, "TensorList shape mismatch: "), Ht(n), this.tensors[t] != null && (this.tensors[t].kept = !1), this.tensors[t] = n } gather(t, n, a) { if (n !== this.elementDtype) throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`); _a(this.elementShape, a, "TensorList shape mismatch: "), t = t.slice(0, this.size()); let r = ac(this.elementShape, this.tensors, a); return t.length === 0 ? bn([], [0].concat(r)) : O(() => { let s = t.map(i => W(this.tensors[i], r)); return Ft(s, 0) }) } concat(t, n) { if (t && t !== this.elementDtype) throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`); _a(this.elementShape, n, "TensorList shape mismatch: "); let a = ac(this.elementShape, this.tensors, n); return this.size() === 0 ? bn([], [0].concat(a)) : O(() => { let r = this.tensors.map(s => W(s, a)); return et(r, 0) }) } }; function jj(e, t, n) { let a = e.dtype; if (e.shape.length < 1) throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`); if (e.dtype !== n) throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`); let r = e.shape.slice(1); _a(r, t, "TensorList shape mismatch: "); let s = dt(e); return new Zf(s, t, a) } function Kj(e, t, n, a) { return new Zf([], e, t, a) } function Xj(e, t, n, a) { if (t.length !== e.shape[0]) throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`); let r = Math.max(...t); if (a != null && a !== -1 && r >= a) throw new Error(`Max index must be < array size (${r}  vs. ${a})`); let s = new Zf([], n, e.dtype, a), i = dt(e, 0); return t.forEach((o, l) => { s.setItem(o, i[l]) }), s } function Yj(e, t, n) {
        let a = 0, r = t.map(p => (a += p, a)); if (a !== e.shape[0]) throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${a}, and tensor's shape is: ${e.shape}`); let s = e.shape.slice(1), i = dv(s, n), o = a === 0 ? 0 : e.size / a, l = O(() => { let p = []; e = W(e, [1, a, o]); for (let d = 0; d < t.length; ++d) { let c = [0, d === 0 ? 0 : r[d - 1], 0], h = [1, t[d], o]; p[d] = W(Ve(e, c, h), i) } return e.dispose(), p }), u = new Zf([], n, e.dtype, t.length); for (let p = 0; p < l.length; p++)u.setItem(p, l[p]); return u
    } var Zj = async (e, t, n) => { switch (e.op) { case "If": case "StatelessIf": { let a = k("thenBranch", e, t, n), r = k("elseBranch", e, t, n), s = k("cond", e, t, n), i = k("args", e, t, n); return (await s.data())[0] ? n.functionMap[a].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap) : n.functionMap[r].executeFunctionAsync(i, n.tensorArrayMap, n.tensorListMap) } case "While": case "StatelessWhile": { let a = k("body", e, t, n), r = k("cond", e, t, n), s = k("args", e, t, n), i = await n.functionMap[r].executeFunctionAsync(s, n.tensorArrayMap, n.tensorListMap), o = s.map(p => p.id), l = await i[0].data(); i.forEach(p => { !p.kept && o.indexOf(p.id) === -1 && p.dispose() }); let u = s; for (; l[0];) { let p = u; u = await n.functionMap[a].executeFunctionAsync(u, n.tensorArrayMap, n.tensorListMap); let d = u.map(h => h.id); p.forEach(h => { !h.kept && o.indexOf(h.id) === -1 && d.indexOf(h.id) === -1 && h.dispose() }); let c = await n.functionMap[r].executeFunctionAsync(u, n.tensorArrayMap, n.tensorListMap); l = await c[0].data(), c.forEach(h => { !h.kept && o.indexOf(h.id) === -1 && d.indexOf(h.id) === -1 && h.dispose() }) } return u } case "LoopCond": { let a = k("pred", e, t, n); return [Tr(a)] } case "Switch": { let a = k("pred", e, t, n), r = k("data", e, t, n); return r.kept || (r = Tr(r)), (await a.data())[0] ? [void 0, r] : [r, void 0] } case "Merge": { let a = e.inputNames.find(r => cn(r, t, n) !== void 0); if (a) { let r = cn(a, t, n); return [Tr(r)] } return } case "Enter": { let a = k("frameName", e, t, n), r = k("tensor", e, t, n); return n.enterFrame(a), [Tr(r)] } case "Exit": { let a = k("tensor", e, t, n); return n.exitFrame(), [Tr(a)] } case "NextIteration": { let a = k("tensor", e, t, n); return n.nextIteration(), [Tr(a)] } case "TensorArrayV3": { let a = k("size", e, t, n), r = k("dtype", e, t, n), s = k("elementShape", e, t, n), i = k("dynamicSize", e, t, n), o = k("clearAfterRead", e, t, n), l = k("identicalElementShapes", e, t, n), u = k("name", e, t, n), p = new qj(u, r, a, s, l, i, o); return n.addTensorArray(p), [p.idTensor, ve(1)] } case "TensorArrayWriteV3": { let a = k("tensorArrayId", e, t, n), r = k("index", e, t, n), s = k("tensor", e, t, n), i = n.getTensorArray(a.id); return i.write(r, s), [i.idTensor] } case "TensorArrayReadV3": { let a = k("tensorArrayId", e, t, n), r = k("index", e, t, n); return [n.getTensorArray(a.id).read(r)] } case "TensorArrayGatherV3": { let a = k("tensorArrayId", e, t, n), r = k("indices", e, t, n), s = k("dtype", e, t, n); return [n.getTensorArray(a.id).gather(r, s)] } case "TensorArrayScatterV3": { let a = k("tensorArrayId", e, t, n), r = k("indices", e, t, n), s = k("tensor", e, t, n), i = n.getTensorArray(a.id); return i.scatter(r, s), [i.idTensor] } case "TensorArrayConcatV3": { let a = k("tensorArrayId", e, t, n), r = n.getTensorArray(a.id), s = k("dtype", e, t, n); return [r.concat(s)] } case "TensorArraySplitV3": { let a = k("tensorArrayId", e, t, n), r = k("tensor", e, t, n), s = k("lengths", e, t, n), i = n.getTensorArray(a.id); return i.split(s, r), [i.idTensor] } case "TensorArraySizeV3": { let a = k("tensorArrayId", e, t, n), r = n.getTensorArray(a.id); return [ve(r.size(), "int32")] } case "TensorArrayCloseV3": { let a = k("tensorArrayId", e, t, n), r = n.getTensorArray(a.id); return r.clearAndClose(), [r.idTensor] } case "TensorListSetItem": { let a = k("tensorListId", e, t, n), r = k("index", e, t, n), s = k("tensor", e, t, n), i = n.getTensorList(a.id); return i.setItem(r, s), [i.idTensor] } case "TensorListGetItem": { let a = k("tensorListId", e, t, n), r = k("index", e, t, n), s = k("elementShape", e, t, n), i = k("elementDType", e, t, n); return [n.getTensorList(a.id).getItem(r, s, i)] } case "TensorListScatterV2": case "TensorListScatter": { let a = k("indices", e, t, n), r = k("tensor", e, t, n), s = k("elementShape", e, t, n), i = k("numElements", e, t, n), o = Xj(r, a, s, i); return n.addTensorList(o), [o.idTensor] } case "TensorListReserve": case "EmptyTensorList": { let a = k("elementShape", e, t, n), r = k("elementDType", e, t, n), s; e.op === "TensorListReserve" ? s = "numElements" : s = "maxNumElements"; let i = k(s, e, t, n), o = e.op === "TensorListReserve" ? -1 : i, l = Kj(a, r, i, o); return n.addTensorList(l), [l.idTensor] } case "TensorListGather": { let a = k("tensorListId", e, t, n), r = k("indices", e, t, n), s = k("elementShape", e, t, n), i = k("elementDType", e, t, n); return [n.getTensorList(a.id).gather(r, i, s)] } case "TensorListStack": { let a = k("tensorListId", e, t, n), r = k("elementShape", e, t, n), s = k("elementDType", e, t, n), i = k("numElements", e, t, n); return [n.getTensorList(a.id).stack(r, s, i)] } case "TensorListFromTensor": { let a = k("tensor", e, t, n), r = k("elementShape", e, t, n), s = k("elementDType", e, t, n), i = jj(a, r, s); return n.addTensorList(i), [i.idTensor] } case "TensorListConcat": case "TensorListConcatV2": { let a = k("tensorListId", e, t, n), r = n.getTensorList(a.id), s = k("dtype", e, t, n), i = k("elementShape", e, t, n); return [r.concat(s, i)] } case "TensorListPushBack": { let a = k("tensorListId", e, t, n), r = k("tensor", e, t, n), s = n.getTensorList(a.id); return s.pushBack(r), [s.idTensor] } case "TensorListPopBack": { let a = k("tensorListId", e, t, n), r = k("elementShape", e, t, n), s = k("elementDType", e, t, n); return [n.getTensorList(a.id).popBack(r, s)] } case "TensorListSplit": { let a = k("tensor", e, t, n), r = k("elementShape", e, t, n), s = k("lengths", e, t, n), i = Yj(a, s, r); return n.addTensorList(i), [i.idTensor] } case "TensorListLength": { let a = k("tensorListId", e, t, n), r = n.getTensorList(a.id); return [ve(r.size(), "int32")] } case "TensorListResize": { let a = k("tensorListId", e, t, n), r = k("size", e, t, n), s = n.getTensorList(a.id).resize(r); return n.addTensorList(s), [s.idTensor] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }; function pS(e, t, n) { let [a, r] = k("fusedOps", e, t, n), s = a === "biasadd", i = !s, o = r === "prelu", l = a === "fusedbatchnorm", u = k("numArgs", e, t, n); if (s) { if (o && u !== 2) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha."); if (!o && s && u !== 1) throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.") } if (l) throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported"); let p = k("strides", e, t, n), d = Xh(e, t, n), c = k("dataFormat", e, t, n).toUpperCase(), h = k("dilations", e, t, n), [m, f] = k("args", e, t, n); i && (f = m, m = void 0); let g = k("leakyreluAlpha", e, t, n); return { stride: p, pad: d, dataFormat: c, dilations: h, biasArg: m, preluArg: f, activationFunc: r, leakyreluAlpha: g } } var Jj = (e, t, n, a = sn) => { switch (e.op) { case "Conv1D": { let r = k("stride", e, t, n), s = k("pad", e, t, n), i = k("dataFormat", e, t, n).toUpperCase(), o = k("dilation", e, t, n); return [a.conv1d(k("x", e, t, n), k("filter", e, t, n), r, s, i, o)] } case "Conv2D": { let r = k("strides", e, t, n), s = Xh(e, t, n), i = k("dataFormat", e, t, n).toUpperCase(), o = k("dilations", e, t, n); return [a.conv2d(k("x", e, t, n), k("filter", e, t, n), [r[1], r[2]], s, i, [o[1], o[2]])] } case "_FusedConv2D": { let { stride: r, pad: s, dataFormat: i, dilations: o, biasArg: l, preluArg: u, activationFunc: p, leakyreluAlpha: d } = pS(e, t, n); return [a.fused.conv2d({ x: k("x", e, t, n), filter: k("filter", e, t, n), strides: [r[1], r[2]], pad: s, dataFormat: i, dilations: [o[1], o[2]], bias: l, activation: p, preluActivationWeights: u, leakyreluAlpha: d })] } case "FusedDepthwiseConv2dNative": { let { stride: r, pad: s, dataFormat: i, dilations: o, biasArg: l, preluArg: u, activationFunc: p, leakyreluAlpha: d } = pS(e, t, n); return [a.fused.depthwiseConv2d({ x: k("x", e, t, n), filter: k("filter", e, t, n), strides: [r[1], r[2]], pad: s, dataFormat: i, dilations: [o[1], o[2]], bias: l, activation: p, preluActivationWeights: u, leakyreluAlpha: d })] } case "Conv2DBackpropInput": case "Conv2dTranspose": { let r = k("outputShape", e, t, n), s = k("strides", e, t, n), i = Xh(e, t, n); return [a.conv2dTranspose(k("x", e, t, n), k("filter", e, t, n), r, [s[1], s[2]], i)] } case "DepthwiseConv2dNative": case "DepthwiseConv2d": { let r = k("strides", e, t, n), s = Xh(e, t, n), i = k("dilations", e, t, n), o = k("dataFormat", e, t, n).toUpperCase(); return [a.depthwiseConv2d(k("input", e, t, n), k("filter", e, t, n), [r[1], r[2]], s, o, [i[1], i[2]])] } case "Conv3D": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("dataFormat", e, t, n).toUpperCase(), o = k("dilations", e, t, n); return [a.conv3d(k("x", e, t, n), k("filter", e, t, n), [r[1], r[2], r[3]], s, i, [o[1], o[2], o[3]])] } case "AvgPool": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("kernelSize", e, t, n); return [a.avgPool(k("x", e, t, n), [i[1], i[2]], [r[1], r[2]], s)] } case "MaxPool": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("kernelSize", e, t, n); return [a.maxPool(k("x", e, t, n), [i[1], i[2]], [r[1], r[2]], s)] } case "MaxPoolWithArgmax": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("kernelSize", e, t, n), o = k("includeBatchInIndex", e, t, n), { result: l, indexes: u } = a.maxPoolWithArgmax(k("x", e, t, n), [i[1], i[2]], [r[1], r[2]], s, o); return [l, u] } case "AvgPool3D": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("kernelSize", e, t, n); return [a.avgPool3d(k("x", e, t, n), [i[1], i[2], i[3]], [r[1], r[2], r[3]], s)] } case "MaxPool3D": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("kernelSize", e, t, n); return [a.maxPool3d(k("x", e, t, n), [i[1], i[2], i[3]], [r[1], r[2], r[3]], s)] } case "Dilation2D": { let r = k("strides", e, t, n), s = k("pad", e, t, n), i = k("dilations", e, t, n), o = r[1], l = r[2], u = i[1], p = i[2]; return [a.dilation2d(k("x", e, t, n), k("filter", e, t, n), [o, l], s, [u, p], "NHWC")] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, Qj = (e, t, n, a = sn) => { switch (e.op) { case "Fill": { let r = k("shape", e, t, n), s = k("dtype", e, t, n), i = k("value", e, t, n); return [a.fill(r, i, s)] } case "LinSpace": { let r = k("start", e, t, n), s = k("stop", e, t, n), i = k("num", e, t, n); return [a.linspace(r, s, i)] } case "Multinomial": { let r = k("logits", e, t, n), s = k("numSamples", e, t, n), i = k("seed", e, t, n); return [a.multinomial(r, s, i)] } case "OneHot": { let r = k("indices", e, t, n), s = k("depth", e, t, n), i = k("onValue", e, t, n), o = k("offValue", e, t, n), l = k("dtype", e, t, n); return [a.oneHot(r, s, i, o, l)] } case "Ones": return [a.ones(k("shape", e, t, n), k("dtype", e, t, n))]; case "OnesLike": return [a.onesLike(k("x", e, t, n))]; case "RandomStandardNormal": return [a.randomStandardNormal(k("shape", e, t, n), k("dtype", e, t, n), k("seed", e, t, n))]; case "RandomUniform": return [a.randomUniform(k("shape", e, t, n), k("minval", e, t, n), k("maxval", e, t, n), k("dtype", e, t, n))]; case "RandomUniformInt": return [a.randomUniformInt(k("shape", e, t, n), k("minval", e, t, n), k("maxval", e, t, n), k("seed", e, t, n))]; case "Range": { let r = k("start", e, t, n), s = k("stop", e, t, n), i = k("step", e, t, n); return [a.range(r, s, i, k("dtype", e, t, n))] } case "TruncatedNormal": { let r = k("shape", e, t, n), s = k("mean", e, t, n), i = k("stdDev", e, t, n), o = k("seed", e, t, n); return [a.truncatedNormal(r, s, i, k("dtype", e, t, n), o)] } case "Zeros": return [a.zeros(k("shape", e, t, n), k("dtype", e, t, n))]; case "ZerosLike": return [a.zerosLike(k("x", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }; function Ix(e, t, n) { let a = k("boxes", e, t, n), r = k("scores", e, t, n), s = k("maxOutputSize", e, t, n), i = k("iouThreshold", e, t, n), o = k("scoreThreshold", e, t, n), l = k("softNmsSigma", e, t, n); return { boxes: a, scores: r, maxOutputSize: s, iouThreshold: i, scoreThreshold: o, softNmsSigma: l } } var e5 = async (e, t, n, a, r = sn) => { switch (e.op) { case "NonMaxSuppressionV5": { let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u, softNmsSigma: p } = Ix(e, t, n), d = await r.image.nonMaxSuppressionWithScoreAsync(s, i, o, l, u, p); return [d.selectedIndices, d.selectedScores] } case "NonMaxSuppressionV4": { let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u } = Ix(e, t, n), p = k("padToMaxOutputSize", e, t, n), d = await r.image.nonMaxSuppressionPaddedAsync(s, i, o, l, u, p); return [d.selectedIndices, d.validOutputs] } case "NonMaxSuppressionV3": case "NonMaxSuppressionV2": { let { boxes: s, scores: i, maxOutputSize: o, iouThreshold: l, scoreThreshold: u } = Ix(e, t, n); return [await r.image.nonMaxSuppressionAsync(s, i, o, l, u)] } case "Where": { let s = r.cast(k("condition", e, t, n), "bool"), i = [await r.whereAsync(s)]; return s.dispose(), i } case "ListDiff": return r.setdiff1dAsync(k("x", e, t, n), k("y", e, t, n)); default: throw TypeError(`Node type ${e.op} is not implemented`) } }, t5 = (e, t, n, a = sn) => { switch (e.op) { case "LowerBound": { let r = k("sortedSequence", e, t, n), s = k("values", e, t, n); return [a.lowerBound(r, s)] } case "TopKV2": { let r = k("x", e, t, n), s = k("k", e, t, n), i = k("sorted", e, t, n), o = a.topk(r, s, i); return [o.values, o.indices] } case "UpperBound": { let r = k("sortedSequence", e, t, n), s = k("values", e, t, n); return [a.upperBound(r, s)] } case "Unique": { let r = k("x", e, t, n), s = a.unique(r); return [s.values, s.indices] } case "UniqueV2": { let r = k("x", e, t, n), s = k("axis", e, t, n), i = a.unique(r, s); return [i.values, i.indices] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, n5 = (e, t, n, a = sn) => { switch (e.op) { case "Const": return t[e.name]; case "PlaceholderWithDefault": let r = k("default", e, t, n); return [cn(e.name, t, n) || r]; case "Placeholder": return [cn(e.name, t, n)]; case "Identity": case "StopGradient": case "FakeQuantWithMinMaxVars": { let p = k("x", e, t, n); return [Tr(p)] } case "IdentityN": return k("x", e, t, n).map(p => Tr(p)); case "Snapshot": let s = k("x", e, t, n); return [Tr(s)]; case "Shape": return [a.tensor1d(k("x", e, t, n).shape, "int32")]; case "ShapeN": return k("x", e, t, n).map(p => a.tensor1d(p.shape)); case "Size": return [a.scalar(k("x", e, t, n).size, "int32")]; case "Rank": return [a.scalar(k("x", e, t, n).rank, "int32")]; case "NoOp": return [a.scalar(1)]; case "Print": let i = k("x", e, t, n), o = k("data", e, t, n), l = k("message", e, t, n), u = k("summarize", e, t, n); console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l); for (let p = 0; p < o.length; p++)console.log(Array.prototype.slice.call(o[p].dataSync()).slice(0, u)); return [i]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, a5 = class { get id() { return this.handle.id } constructor(e, t) { this.keyDType = e, this.valueDType = t, this.handle = ve(0), this.tensorMap = new Map, Ht(this.handle) } clearAndClose() { this.tensorMap.forEach(e => e.dispose()), this.tensorMap.clear(), this.handle.dispose() } size() { return this.tensorMap.size } tensorSize() { return ve(this.size(), "int32") } async import(e, t) { this.checkKeyAndValueTensor(e, t); let n = await e.data(); return this.tensorMap.forEach(a => a.dispose()), this.tensorMap.clear(), O(() => { let a = dt(t), r = n.length, s = a.length; w.assert(r === s, () => `The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`); for (let i = 0; i < r; i++) { let o = n[i], l = a[i]; Ht(l), this.tensorMap.set(o, l) } return this.handle }) } async find(e, t) { this.checkKeyAndValueTensor(e, t); let n = await e.data(); return O(() => { let a = []; for (let r = 0; r < n.length; r++) { let s = n[r], i = this.findWithDefault(s, t); a.push(i) } return Ft(a) }) } findWithDefault(e, t) { let n = this.tensorMap.get(e); return n != null ? n : t } checkKeyAndValueTensor(e, t) { if (e.dtype !== this.keyDType) throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`); if (t.dtype !== this.valueDType) throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`) } }, r5 = async (e, t, n, a) => { switch (e.op) { case "HashTable": case "HashTableV2": { let r = a.getHashTableHandleByName(e.name); if (r != null) return [r]; { let s = k("keyDType", e, t, n), i = k("valueDType", e, t, n), o = new a5(s, i); return a.addHashTable(e.name, o), [o.handle] } } case "InitializeTable": case "InitializeTableV2": case "LookupTableImport": case "LookupTableImportV2": { let r = k("tableHandle", e, t, n, a), s = k("keys", e, t, n), i = k("values", e, t, n); return [await a.getHashTableById(r.id).import(s, i)] } case "LookupTableFind": case "LookupTableFindV2": { let r = k("tableHandle", e, t, n, a), s = k("keys", e, t, n), i = k("defaultValue", e, t, n); return [await a.getHashTableById(r.id).find(s, i)] } case "LookupTableSize": case "LookupTableSizeV2": { let r = k("tableHandle", e, t, n, a); return [a.getHashTableById(r.id).tensorSize()] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, s5 = (e, t, n, a = sn) => { switch (e.op) { case "ResizeBilinear": { let r = k("images", e, t, n), s = k("size", e, t, n), i = k("alignCorners", e, t, n), o = k("halfPixelCenters", e, t, n); return [a.image.resizeBilinear(r, [s[0], s[1]], i, o)] } case "ResizeNearestNeighbor": { let r = k("images", e, t, n), s = k("size", e, t, n), i = k("alignCorners", e, t, n), o = k("halfPixelCenters", e, t, n); return [a.image.resizeNearestNeighbor(r, [s[0], s[1]], i, o)] } case "CropAndResize": { let r = k("image", e, t, n), s = k("boxes", e, t, n), i = k("boxInd", e, t, n), o = k("cropSize", e, t, n), l = k("method", e, t, n), u = k("extrapolationValue", e, t, n); return [a.image.cropAndResize(r, s, i, o, l, u)] } case "ImageProjectiveTransformV3": { let r = k("images", e, t, n), s = k("transforms", e, t, n), i = k("outputShape", e, t, n), o = k("fillValue", e, t, n), l = k("interpolation", e, t, n), u = k("fillMode", e, t, n); return [a.image.transform(r, s, l.toLowerCase(), u.toLowerCase(), o, i)] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, i5 = (e, t, n, a = sn) => { switch (e.op) { case "Equal": return [a.equal(k("a", e, t, n), k("b", e, t, n))]; case "NotEqual": return [a.notEqual(k("a", e, t, n), k("b", e, t, n))]; case "Greater": return [a.greater(k("a", e, t, n), k("b", e, t, n))]; case "GreaterEqual": return [a.greaterEqual(k("a", e, t, n), k("b", e, t, n))]; case "Less": return [a.less(k("a", e, t, n), k("b", e, t, n))]; case "LessEqual": return [a.lessEqual(k("a", e, t, n), k("b", e, t, n))]; case "LogicalAnd": return [a.logicalAnd(k("a", e, t, n), k("b", e, t, n))]; case "LogicalNot": return [a.logicalNot(k("a", e, t, n))]; case "LogicalOr": return [a.logicalOr(k("a", e, t, n), k("b", e, t, n))]; case "Select": case "SelectV2": return [a.where(k("condition", e, t, n), k("a", e, t, n), k("b", e, t, n))]; case "BitwiseAnd": return [a.bitwiseAnd(k("a", e, t, n), k("b", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, o5 = (e, t, n, a = sn) => { switch (e.op) { case "BatchMatMul": case "BatchMatMulV2": case "MatMul": return [a.matMul(k("a", e, t, n), k("b", e, t, n), k("transposeA", e, t, n), k("transposeB", e, t, n))]; case "Einsum": return [a.einsum(k("equation", e, t, n), ...k("tensors", e, t, n))]; case "Transpose": return [a.transpose(k("x", e, t, n), k("perm", e, t, n))]; case "_FusedMatMul": let [r, s] = k("fusedOps", e, t, n), i = r === "biasadd", o = s === "prelu", l = k("numArgs", e, t, n), u = k("leakyreluAlpha", e, t, n); if (i) { if (o && l !== 2) throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha."); if (!o && l !== 1) throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.") } let [p, d] = k("args", e, t, n); return [a.fused.matMul({ a: k("a", e, t, n), b: k("b", e, t, n), transposeA: k("transposeA", e, t, n), transposeB: k("transposeB", e, t, n), bias: p, activation: s, preluActivationWeights: d, leakyreluAlpha: u })]; case "MatrixBandPart": return [a.linalg.bandPart(k("a", e, t, n), k("numLower", e, t, n), k("numUpper", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, l5 = (e, t, n, a = sn) => { switch (e.op) { case "EuclideanNorm": return [a.euclideanNorm(k("x", e, t, n), k("axis", e, t, n), k("keepDims", e, t, n))]; case "FusedBatchNorm": case "FusedBatchNormV2": return [a.batchNorm(k("x", e, t, n), k("mean", e, t, n), k("variance", e, t, n), k("offset", e, t, n), k("scale", e, t, n), k("epsilon", e, t, n))]; case "FusedBatchNormV3": return [a.batchNorm(k("x", e, t, n), k("mean", e, t, n), k("variance", e, t, n), k("offset", e, t, n), k("scale", e, t, n), k("epsilon", e, t, n))]; case "LRN": return [a.localResponseNormalization(k("x", e, t, n), k("radius", e, t, n), k("bias", e, t, n), k("alpha", e, t, n), k("beta", e, t, n))]; case "Softmax": return [a.softmax(k("x", e, t, n))]; case "LogSoftmax": return [a.logSoftmax(k("x", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, u5 = (e, t, n, a = sn) => { switch (e.op) { case "RaggedGather": { let { outputNestedSplits: r, outputDenseValues: s } = a.raggedGather(k("paramsNestedSplits", e, t, n), k("paramsDenseValues", e, t, n), k("indices", e, t, n), k("outputRaggedRank", e, t, n)); return r.concat(s) } case "RaggedRange": { let { rtNestedSplits: r, rtDenseValues: s } = a.raggedRange(k("starts", e, t, n), k("limits", e, t, n), k("splits", e, t, n)); return [r, s] } case "RaggedTensorToTensor": return [a.raggedTensorToTensor(k("shape", e, t, n), k("values", e, t, n), k("defaultValue", e, t, n), k("rowPartitionTensors", e, t, n), k("rowPartitionTypes", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, p5 = (e, t, n, a = sn) => { switch (e.op) { case "Max": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.max(k("x", e, t, n), o, l)] } case "Mean": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.mean(k("x", e, t, n), o, l)] } case "Min": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.min(k("x", e, t, n), o, l)] } case "Sum": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.sum(k("x", e, t, n), o, l)] } case "All": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.all(k("x", e, t, n), o, l)] } case "Any": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.any(k("x", e, t, n), o, l)] } case "ArgMax": { let o = k("axis", e, t, n); return [a.argMax(k("x", e, t, n), o)] } case "ArgMin": { let o = k("axis", e, t, n); return [a.argMin(k("x", e, t, n), o)] } case "Prod": { let o = k("axis", e, t, n), l = k("keepDims", e, t, n); return [a.prod(k("x", e, t, n), o, l)] } case "Cumprod": { let o = k("axis", e, t, n), l = k("exclusive", e, t, n), u = k("reverse", e, t, n); return [a.cumprod(k("x", e, t, n), o, l, u)] } case "Cumsum": { let o = k("axis", e, t, n), l = k("exclusive", e, t, n), u = k("reverse", e, t, n); return [a.cumsum(k("x", e, t, n), o, l, u)] } case "Bincount": let r = k("x", e, t, n), s = k("weights", e, t, n), i = k("size", e, t, n); return [a.bincount(r, s, i)]; case "DenseBincount": { let o = k("x", e, t, n), l = k("weights", e, t, n), u = k("size", e, t, n), p = k("binaryOutput", e, t, n); return [a.denseBincount(o, l, u, p)] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, c5 = (e, t, n, a = sn) => { switch (e.op) { case "ConcatV2": case "Concat": { let r = k("n", e, t, n), s = k("axis", e, t, n), i = k("tensors", e, t, n); return i = i.slice(0, r), [a.concat(i, s)] } case "Gather": { let r = k("x", e, t, n), s = k("indices", e, t, n); return [a.gather(r, a.cast(s, "int32"), 0)] } case "GatherV2": { let r = k("axis", e, t, n), s = k("batchDims", e, t, n), i = k("x", e, t, n), o = k("indices", e, t, n); return [a.gather(i, a.cast(o, "int32"), r, s)] } case "Reverse": { let r = k("dims", e, t, n), s = []; for (let o = 0; o < r.length; o++)r[o] && s.push(o); let i = k("x", e, t, n); return [a.reverse(i, s)] } case "ReverseV2": { let r = k("axis", e, t, n), s = k("x", e, t, n); return [a.reverse(s, r)] } case "Slice": { let r = k("begin", e, t, n), s = k("size", e, t, n); return [a.slice(k("x", e, t, n), r, s)] } case "StridedSlice": { let r = k("begin", e, t, n), s = k("end", e, t, n), i = k("strides", e, t, n), o = k("beginMask", e, t, n), l = k("endMask", e, t, n), u = k("ellipsisMask", e, t, n), p = k("newAxisMask", e, t, n), d = k("shrinkAxisMask", e, t, n), c = k("x", e, t, n); return [a.stridedSlice(c, r, s, i, o, l, u, p, d)] } case "Pack": return O(() => { let r = k("axis", e, t, n), s = k("tensors", e, t, n), i = s[0].shape, o = a.squeeze(s[0]).shape, l = s.map(u => { let p = w.arraysEqual(u.shape, i); if (!p && !w.arraysEqual(a.squeeze(u).shape, o)) throw new Error("the input tensors shape does not match"); return p ? u : a.reshape(u, i) }); return [a.stack(l, r)] }); case "Unpack": { let r = k("axis", e, t, n), s = k("tensor", e, t, n); return a.unstack(s, r) } case "Tile": { let r = k("reps", e, t, n); return [a.tile(k("x", e, t, n), r)] } case "Split": case "SplitV": { let r = k("axis", e, t, n), s = k("numOrSizeSplits", e, t, n), i = k("x", e, t, n); return a.split(i, s, r) } case "ScatterNd": { let r = k("indices", e, t, n), s = k("values", e, t, n), i = k("shape", e, t, n); return [a.scatterND(r, s, i)] } case "GatherNd": { let r = k("x", e, t, n), s = k("indices", e, t, n); return [a.gatherND(r, s)] } case "SparseToDense": { let r = k("sparseIndices", e, t, n), s = k("outputShape", e, t, n), i = k("sparseValues", e, t, n), o = k("defaultValue", e, t, n); return [a.sparseToDense(r, i, s, i.dtype === o.dtype ? o : a.cast(o, i.dtype))] } case "TensorScatterUpdate": { let r = k("indices", e, t, n), s = k("values", e, t, n), i = k("tensor", e, t, n); return [a.tensorScatterUpdate(i, r, s)] } default: throw TypeError(`Node type ${e.op} is not implemented`) } }, d5 = (e, t, n, a = sn) => { switch (e.op) { case "SparseFillEmptyRows": { let { outputIndices: r, outputValues: s, emptyRowIndicator: i, reverseIndexMap: o } = a.sparse.sparseFillEmptyRows(k("indices", e, t, n), k("values", e, t, n), k("denseShape", e, t, n), k("defaultValue", e, t, n)); return [r, s, i, o] } case "SparseReshape": { let { outputIndices: r, outputShape: s } = a.sparse.sparseReshape(k("inputIndices", e, t, n), k("inputShape", e, t, n), k("newShape", e, t, n)); return [r, s] } case "SparseSegmentMean": return [a.sparse.sparseSegmentMean(k("data", e, t, n), k("indices", e, t, n), k("segmentIds", e, t, n))]; case "SparseSegmentSum": return [a.sparse.sparseSegmentSum(k("data", e, t, n), k("indices", e, t, n), k("segmentIds", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, h5 = (e, t, n, a = sn) => { switch (e.op) { case "FFT": return [a.fft(k("x", e, t, n))]; case "IFFT": return [a.ifft(k("x", e, t, n))]; case "RFFT": return [a.rfft(k("x", e, t, n))]; case "IRFFT": return [a.irfft(k("x", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, m5 = (e, t, n, a = sn) => { switch (e.op) { case "StaticRegexReplace": return [a.string.staticRegexReplace(k("input", e, t, n), k("pattern", e, t, n), k("rewrite", e, t, n), k("replaceGlobal", e, t, n))]; case "StringNGrams": { let { nGrams: r, nGramsSplits: s } = a.string.stringNGrams(k("data", e, t, n), k("dataSplits", e, t, n), k("separator", e, t, n), k("nGramWidths", e, t, n), k("leftPad", e, t, n), k("rightPad", e, t, n), k("padWidth", e, t, n), k("preserveShortSequences", e, t, n)); return [r, s] } case "StringSplit": { let { indices: r, values: s, shape: i } = a.string.stringSplit(k("input", e, t, n), k("delimiter", e, t, n), k("skipEmpty", e, t, n)); return [r, s, i] } case "StringToHashBucketFast": return [a.string.stringToHashBucketFast(k("input", e, t, n), k("numBuckets", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }, f5 = (e, t, n, a = sn) => { switch (e.op) { case "Cast": return [a.cast(k("x", e, t, n), k("dtype", e, t, n))]; case "ExpandDims": { let r = k("axis", e, t, n); return [a.expandDims(k("x", e, t, n), r)] } case "Squeeze": { let r = k("axis", e, t, n); return [a.squeeze(k("x", e, t, n), r)] } case "Reshape": return [a.reshape(k("x", e, t, n), k("shape", e, t, n))]; case "EnsureShape": return [a.ensureShape(k("x", e, t, n), k("shape", e, t, n))]; case "MirrorPad": return [a.mirrorPad(k("x", e, t, n), k("padding", e, t, n), k("mode", e, t, n))]; case "PadV2": case "Pad": return [a.pad(k("x", e, t, n), k("padding", e, t, n), k("constantValue", e, t, n))]; case "SpaceToBatchND": { let r = k("blockShape", e, t, n), s = k("paddings", e, t, n); return [a.spaceToBatchND(k("x", e, t, n), r, s)] } case "BatchToSpaceND": { let r = k("blockShape", e, t, n), s = k("crops", e, t, n); return [a.batchToSpaceND(k("x", e, t, n), r, s)] } case "DepthToSpace": { let r = k("blockSize", e, t, n), s = k("dataFormat", e, t, n).toUpperCase(); return [a.depthToSpace(k("x", e, t, n), r, s)] } case "BroadcastTo": return [a.broadcastTo(k("x", e, t, n), k("shape", e, t, n))]; case "BroadcastArgs": return [a.broadcastArgs(k("s0", e, t, n), k("s1", e, t, n))]; default: throw TypeError(`Node type ${e.op} is not implemented`) } }; function cS(e, t, n, a, r = O) { let s = ((i, o, l) => { switch (i.category) { case "arithmetic": return r(() => Gj(i, o, l)); case "basic_math": return r(() => Hj(i, o, l)); case "control": return Zj(i, o, l); case "convolution": return r(() => Jj(i, o, l)); case "creation": return r(() => Qj(i, o, l)); case "dynamic": return e5(i, o, l); case "evaluation": return r(() => t5(i, o, l)); case "image": return r(() => s5(i, o, l)); case "graph": return r(() => n5(i, o, l)); case "logical": return r(() => i5(i, o, l)); case "matrices": return r(() => o5(i, o, l)); case "normalization": return r(() => l5(i, o, l)); case "ragged": return r(() => u5(i, o, l)); case "reduction": return r(() => p5(i, o, l)); case "slice_join": return r(() => c5(i, o, l)); case "sparse": return r(() => d5(i, o, l)); case "spectral": return r(() => h5(i, o, l)); case "string": return r(() => m5(i, o, l)); case "transformation": return r(() => f5(i, o, l)); case "hash_table": return r5(i, o, l, a); case "custom": let u = sE(i.op); if (u && u.customExecutor) return u.customExecutor(new Uj(i, o, l)); throw TypeError(`Custom op ${i.op} is not registered.`); default: throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`) } })(e, t, n); return w.isPromise(s) ? s.then(i => [].concat(i)) : [].concat(s) } var dS = class { constructor(e = {}, t = {}, n = {}, a = {}, r) { this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = n, this.functionMap = a, this.parseNodeNameCache = r, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds() } newFrame(e, t) { return { id: e, frameName: t, iterationId: 0 } } set currentContext(e) { this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds()) } get currentContext() { return this.contexts } get currentContextId() { return this._currentContextIds[0] } get currentContextIds() { return this._currentContextIds } generateCurrentContextIds() { let e = []; for (let t = 0; t < this.contexts.length - 1; t++) { let n = this.contexts.slice(0, this.contexts.length - t); e.push(this.contextIdforContexts(n)) } e.push(""), this._currentContextIds = e } contextIdforContexts(e) { return e ? e.map(t => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "" } enterFrame(e) { this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts))) } exitFrame() { if (this.contexts && this.contexts.length > 1) this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift(); else throw new Error("Cannot exit frame, the context is empty") } nextIteration() { if (this.contexts && this.contexts.length > 0) { this.contexts = this.contexts.slice(), this.lastId++; let e = Object.assign({}, this.contexts[this.contexts.length - 1]); e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts)) } else throw new Error("Cannot increase frame iteration, the context is empty") } getWeight(e) { return this.weightMap[e] } addTensorArray(e) { this.tensorArrayMap[e.id] = e } getTensorArray(e) { return this.tensorArrayMap[e] } addTensorList(e) { this.tensorListMap[e.id] = e } getTensorList(e) { return this.tensorListMap[e] } dispose(e) { for (let t in this.tensorArrayMap) this.tensorArrayMap[t].clearAndClose(e); for (let t in this.tensorListMap) this.tensorListMap[t].clearAndClose(e) } }; function hS(e, t, n, a) { let r = new Set, s = [], i = null, o = null, l = new Set, u = new Set(Object.keys(e).map(c => Zn(c)[0])); a = a || []; let p = new Set(a.map(c => Zn(c.name)[0])), d = [...t]; for (; d.length > 0;) { let c = d.pop(); if ((ei(c) || I5(c) || S5(c)) && i == null && (i = c, o = i.children.map(h => h.name).filter(h => r.has(h))), r.add(c.name), n[c.name] == null && !u.has(c.name) && !p.has(c.name)) { if (c.inputs.length === 0) { s.push(c.name); continue } c.inputs.forEach(h => { l.has(h.name) || (l.add(h.name), d.push(h)) }) } } return { inputs: e, outputs: t, usedNodes: r, missingInputs: s, dynamicNode: i, syncInputs: o } } function g5(e, t) { let { usedNodes: n, inputs: a } = t, r = Object.keys(a).map(g => Zn(g)[0]).map(g => e.nodes[g]), s = e.initNodes || [], i = g => n.has(typeof g == "string" ? g : g.name); function o(g) { return [...new Map(g.map(b => [b.name, b])).values()] } let l = o([...r, ...e.weights, ...s]).filter(i), u = o([...l, ...Object.values(e.nodes)]).filter(i), p = new Map(u.map(g => [g.name, g])), d = {}; for (let g of u) { d[g.name] = d[g.name] || 0; for (let b of g.children) i(b) || (d[b.name] = Number.POSITIVE_INFINITY), d[b.name] = (d[b.name] || 0) + 1 } let c = Object.entries(d).filter(([, g]) => g === 0).map(([g]) => g), h = [...c]; for (; c.length > 0;) { let g = c.pop(), b = p.get(g); for (let y of b.children.filter(i)) --d[y.name] === 0 && (h.push(y.name), c.push(y.name)) } let m = h.map(g => p.get(g)), f = b5(m, l); return y5(f, l), f } function b5(e, t) { let n = new Map(e.map(s => [s.name, s])), a = t.map(s => s.name), r = new Set(a); for (; a.length > 0;) { let s = a.pop(), i = n.get(s); for (let o of i.children) !n.has(o.name) || r.has(o.name) || (r.add(o.name), a.push(o.name)) } return e.filter(s => r.has(s.name)) } var Wh = class extends Error { constructor(e) { super(`NodesExecutionOrderError: ${e}`) } }; function y5(e, t) { let n = new Map(e.map((o, l) => [o.name, l])), a = new Set(t.map(o => o.name)), r = o => a.has(typeof o == "string" ? o : o.name), s = new Set(e.map(o => o.name)), i = o => s.has(typeof o == "string" ? o : o.name); for (let o of e) { for (let l of o.children.filter(i)) { if (!n.has(l.name)) throw new Wh(`Child ${l.name} of node ${o.name} is unreachable.`); if (n.get(o.name) > n.get(l.name)) throw new Wh(`Node ${o.name} is scheduled to run after its child ${l.name}.`) } if (!r(o)) for (let l of o.inputs) { if (!n.has(l.name)) throw new Wh(`Input ${l.name} of node ${o.name} is unreachable.`); if (n.get(l.name) > n.get(o.name)) throw new Wh(`Node ${o.name} is scheduled to run before its input ${l.name}.`) } } } function x5(e) { let t = new Map(e.map((o, l) => [o.name, l])), n = Number.MAX_SAFE_INTEGER, a = e.map((o, l) => ei(o) ? n : l), r = o => { let l = a[t.get(o.name)]; return l == null ? -1 : l }, s = e.map((o, l) => o.children.map(r).reduce((u, p) => Math.max(u, p), a[l])), i = new Map; for (let o = 0; o < e.length; ++o) { let l = s[o]; if (l === n) continue; let u = e[o], p = e[l]; i.has(p.name) || i.set(p.name, []), i.get(p.name).push(u) } return i } var v5 = new Set(["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"]), w5 = new Set(["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"]), k5 = new Set(["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"]); function ei(e) { return v5.has(e.op) } function I5(e) { return w5.has(e.op) } function S5(e) { return k5.has(e.op) } var mS = class CE { get weightIds() { return this.parent ? this.parent.weightIds : this._weightIds } get functionExecutorMap() { return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap } get weightMap() { return this.parent ? this.parent.weightMap : this._weightMap } set weightMap(t) { let n = Object.keys(t).map(a => t[a].map(r => r.id)); this._weightIds = [].concat(...n), this._weightMap = t } set resourceManager(t) { this._resourceManager = t } get inputs() { return this._inputs.map(t => ({ name: t.name, shape: t.attrParams.shape ? t.attrParams.shape.value : void 0, dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0 })) } get outputs() { return this._outputs.map(t => ({ name: t.name, shape: t.attrParams.shape ? t.attrParams.shape.value : void 0, dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0 })) } get inputNodes() { return this._inputs.map(t => t.signatureKey || t.name) } get outputNodes() { return this._outputs.map(t => { let n = t.signatureKey || t.name; return t.defaultOutput ? `${n}:${t.defaultOutput}` : n }) } get functions() { return Object.keys(this._functions).reduce((t, n) => (t[n] = this._functions[n].signature, t), {}) } constructor(t, n) { this.graph = t, this.parent = n, this.compiledMap = new Map, this.parseNodeNameCache = new Map, this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = !1, this._outputs = t.outputs, this._inputs = t.inputs, this._initNodes = t.initNodes, this._signature = t.signature, this._functions = t.functions, t.functions != null && Object.keys(t.functions).forEach(a => { this._functionExecutorMap[a] = new CE(t.functions[a], this) }) } getCompilationKey(t, n) { let a = t.map(s => s.name).sort(), r = n.map(s => s.name).sort(); return a.join(this.SEPARATOR) + "--" + r.join(this.SEPARATOR) } compile(t, n) { let a = hS(t, n, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: s, syncInputs: i } = a; if (s != null) throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`); if (r.length > 0) { let u = n.map(d => d.name), p = Object.keys(t); throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${p}]. Missing the following inputs: [${r}]`) } let o = g5(this.graph, a), l = x5(o); return { orderedNodes: o, nodeLiveUntilMap: l } } cloneAndKeepTensor(t) { if (t == null) return null; let n = t.clone(); return Ht(n), n } cloneTensorList(t) { return t ? t.map(n => this.cloneAndKeepTensor(n)) : null } cloneTensorMap(t) { return Object.fromEntries(Object.entries(t).map(([n, a]) => [n, this.cloneTensorList(a)])) } execute(t, n) { this.disposeIntermediateTensors(), t = this.mapInputs(t); let a = Object.keys(t).sort(); this.checkInputs(t), this.checkInputShapeAndType(t), n = this.mapOutputs(n), this.checkOutputs(n); let r = a.map(c => this.graph.nodes[Zn(c)[0]]), s = n.map(c => Zn(c)[0]), i = new Set(s), o = s.map(c => this.graph.nodes[c]); o.length === 0 && (o = this._outputs); let l = this.getCompilationKey(r, o), u = this.compiledMap.get(l); u == null && (u = this.compile(t, o), this.compiledMap.set(l, u)); try { this.keepIntermediateTensors = G().getBool("KEEP_INTERMEDIATE_TENSORS") } catch (c) { this.keepIntermediateTensors = !1, console.warn(c.message) } let p = {}, d = {}; return O(() => { let c = new dS(this.weightMap, p, d, this.functionExecutorMap, this.parseNodeNameCache), h = Object.assign({}, this.weightMap); this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(t).forEach(b => { let [y, x] = Zn(b, c), v = []; v[x] = t[b], h[y] = v, this.keepIntermediateTensors && (this.clonedTensorsMap[y] = this.cloneTensorList(v)) }); let m = this.getFrozenTensorIds(h), { orderedNodes: f, nodeLiveUntilMap: g } = u; for (let b of f) { if (h[b.name]) continue; let y = cS(b, h, c, this._resourceManager); if (w.isPromise(y)) throw new Error(`The execution of the op '${b.op}' returned a promise. Please use model.executeAsync() instead.`); h[b.name] = y, this.keepIntermediateTensors && (this.clonedTensorsMap[b.name] = this.cloneTensorList(y)), this.checkTensorForDisposalWithNodeLiveUntilInfo(b, h, c, m, i, g.get(b.name)) } return this.parent == null && c.dispose(m), n.map(b => cn(b, h, c)) }) } getFrozenTensorIds(t) { let n = [].concat.apply([], Object.keys(t).map(a => t[a]).map(a => a.map(r => r.id))); return new Set(n) } checkTensorForDisposal(t, n, a, r, s, i, o) { if (!(ei(n) || i.has(t))) { for (let l of a[t]) l != null && (o[l.id] = (o[l.id] || 0) + n.children.length); for (let l of n.inputs) { if (ei(l)) continue; let u = iS(l.name, a, r); if (u != null) for (let p of u) { if (!p || p.kept || s.has(p.id)) continue; let d = o[p.id]; d === 1 ? (p.dispose(), delete o[p.id]) : d != null && o[p.id]-- } } } } checkTensorForDisposalWithNodeLiveUntilInfo(t, n, a, r, s, i) { function o(l) { return ei(l) || s.has(l.name) } if (!(ei(t) || i == null)) for (let l of i) { if (o(l)) continue; let u = iS(l.name, n, a); for (let p of u) !p || p.kept || r.has(p.id) || p.dispose() } } async executeAsync(t, n) { return this._executeAsync(t, n) } disposeIntermediateTensors() { this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach(t => { for (let n of t) n && !n.isDisposed && n.dispose() }), this.clonedTensorsMap = null) } getIntermediateTensors() { return this.clonedTensorsMap } async _executeAsync(t, n, a = !1, r = {}, s = {}) { this.disposeIntermediateTensors(), a || (t = this.mapInputs(t), this.checkInputs(t), this.checkInputShapeAndType(t), n = this.mapOutputs(n), this.checkOutputs(n)); try { this.keepIntermediateTensors = G().getBool("KEEP_INTERMEDIATE_TENSORS") } catch (c) { this.keepIntermediateTensors = !1, console.warn(c.message) } let i = new dS(this.weightMap, r, s, this.functionExecutorMap, this.parseNodeNameCache); this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)); let o = await this.executeWithControlFlow(t, i, n, a), l = n.map(c => cn(c, o, i)), u = l.map(c => c.id), p = Object.keys(t).map(c => t[c].id), d = new Set([...u, ...p, ...this.weightIds]); return Object.values(o).forEach(c => { c.forEach(h => { h && !h.isDisposed && !d.has(h.id) && h.dispose() }) }), this.parent == null && i.dispose(d), l } async executeFunctionAsync(t, n, a) { let r = t.reduce((s, i, o) => (s[this.inputs[o].name] = i, s), {}); return this._executeAsync(r, this.outputNodes, !0, n, a) } async executeWithControlFlow(t, n, a, r) { let s = Object.keys(t), i = s.map(v => this.graph.nodes[Zn(v)[0]]), o = a.map(v => Zn(v)[0]), l = new Set(o), u = o.map(v => this.graph.nodes[v]); u.length === 0 && (u = this._outputs); let { usedNodes: p, missingInputs: d, dynamicNode: c, syncInputs: h } = hS(t, u, this.weightMap, this._initNodes), m = [...i, ...this.graph.weights, ...this._initNodes || []].map(v => ({ node: v, contexts: n.currentContext })), f = Object.assign({}, this.weightMap); Object.keys(t).forEach(v => { let [I, N] = Zn(v), C = []; C[N] = t[v], f[I] = C }); let g = {}, b = this.getFrozenTensorIds(f), y = {}; for (; m.length > 0;) { let v = this.processStack(i, m, n, f, y, b, l, g, p); await Promise.all(v) } c == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."); let x = u.filter(v => !ei(v) && !cn(v.name, f, n)).map(v => v.name); if (x.length > 0) { let v = ""; throw c != null && (v = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`), new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${d}]. ${v}`) } return f } processStack(t, n, a, r, s, i, o, l, u) { let p = []; for (; n.length > 0;) { let d = n.pop(); a.currentContext = d.contexts; let c = ""; if (d.node.op === "Enter" && k("isConstant", d.node, r, a) && ([c] = Nr(d.node.name, a)), r[d.node.name] == null) { let h = cS(d.node, r, a, this._resourceManager); c || ([c] = Nr(d.node.name, a)); let m = a.currentContext; w.isPromise(h) ? p.push(h.then(f => (r[c] = f, this.keepIntermediateTensors && (this.clonedTensorsMap[c] = this.cloneTensorList(f)), a.currentContext = m, this.checkTensorForDisposal(c, d.node, r, a, i, o, l), this.processChildNodes(d.node, n, a, r, s, u), f))) : (r[c] = h, this.keepIntermediateTensors && (this.clonedTensorsMap[c] = this.cloneTensorList(h)), this.checkTensorForDisposal(c, d.node, r, a, i, o, l), this.processChildNodes(d.node, n, a, r, s, u)) } else this.processChildNodes(d.node, n, a, r, s, u) } return p } processChildNodes(t, n, a, r, s, i) { t.children.forEach(o => { let [l] = Nr(o.name, a); s[l] || !i.has(o.name) || (o.op === "Merge" ? o.inputNames.some(u => !!cn(u, r, a)) && (s[l] = !0, n.push({ contexts: a.currentContext, node: o })) : o.inputNames.every(u => !!cn(u, r, a)) && (s[l] = !0, n.push({ contexts: a.currentContext, node: o }))) }) } dispose() { Object.keys(this.weightMap).forEach(t => this.weightMap[t].forEach(n => n.dispose())) } checkInputShapeAndType(t) { Object.keys(t).forEach(n => { let a = t[n], [r] = Zn(n), s = this.graph.nodes[r]; if (s.attrParams.shape && s.attrParams.shape.value) { let i = s.attrParams.shape.value, o = i.length === a.shape.length && a.shape.every((l, u) => i[u] === -1 || i[u] === l); w.assert(o, () => `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${a.shape}]`) } s.attrParams.dtype && s.attrParams.dtype.value && w.assert(a.dtype === s.attrParams.dtype.value, () => `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${a.dtype}`) }) } mapInputs(t) { var n, a; let r = {}; for (let s in t) { let i = (a = (n = this._signature) === null || n === void 0 ? void 0 : n.inputs) === null || a === void 0 ? void 0 : a[s]; i != null ? r[i.name] = t[s] : r[s] = t[s] } return r } checkInputs(t) { let n = Object.keys(t).filter(a => { let [r] = Zn(a); return this.graph.nodes[r] == null }); if (n.length > 0) throw new Error(`The dict provided in model.execute(dict) has keys: [${n}] that are not part of graph`) } mapOutputs(t) { return t.map(n => { var a, r; let s = (r = (a = this._signature) === null || a === void 0 ? void 0 : a.outputs) === null || r === void 0 ? void 0 : r[n]; return s != null ? s.name : n }, {}) } checkOutputs(t) { t.forEach(n => { let [a] = Zn(n); if (!this.graph.nodes[a]) throw new Error(`The output '${n}' is not found in the graph`) }) } }, N5 = class { constructor(e = {}, t = {}) { this.hashTableNameToHandle = e, this.hashTableMap = t } addHashTable(e, t) { this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t } getHashTableHandleByName(e) { return this.hashTableNameToHandle[e] } getHashTableById(e) { return this.hashTableMap[e] } dispose() { for (let e in this.hashTableMap) this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e]; for (let e in this.hashTableNameToHandle) this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e] } }, T5 = "?tfjs-format=file", C5 = "model.json", z1 = class { get modelVersion() { return this.version } get inputNodes() { return this.executor.inputNodes } get outputNodes() { return this.executor.outputNodes } get inputs() { return this.executor.inputs } get outputs() { return this.executor.outputs } get weights() { return this.executor.weightMap } get metadata() { return this.artifacts.userDefinedMetadata } get modelSignature() { return this.signature } get modelStructuredOutputKeys() { return this.structuredOutputKeys } constructor(e, t = {}, n = qt) { this.modelUrl = e, this.loadOptions = t, this.version = "n/a", this.io = n, t == null && (this.loadOptions = {}), this.resourceManager = new N5 } findIOHandler() { let e = this.modelUrl; if (e.load != null) this.handler = e; else if (this.loadOptions.requestInit != null) this.handler = this.io.browserHTTPRequest(e, this.loadOptions); else { let t = this.io.getLoadHandlers(e, this.loadOptions); if (t.length === 0) t.push(this.io.browserHTTPRequest(e, this.loadOptions)); else if (t.length > 1) throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`); this.handler = t[0] } } load() { if (this.findIOHandler(), this.handler.load == null) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented."); let e = this.handler.load(); return w.isPromise(e) ? e.then(t => t.getWeightStream == null ? this.loadSync(t) : this.loadStreaming(t)) : this.loadSync(e) } loadSync(e) { let t = this.io.decodeWeights(e.weightData, e.weightSpecs); return this.loadWithWeightMap(e, t) } async loadStreaming(e) { if (e.getWeightStream == null) throw new Error("Model artifacts missing streamWeights function"); let t = await $N(e.getWeightStream(), e.weightSpecs); return this.loadWithWeightMap(e, t) } loadWithWeightMap(e, t) { this.artifacts = e; let n = this.artifacts.modelTopology, a = this.artifacts.signature; if (this.artifacts.userDefinedMetadata != null) { let r = this.artifacts.userDefinedMetadata; r.signature != null && (a = r.signature), r.structuredOutputKeys != null && (this.structuredOutputKeys = r.structuredOutputKeys) } if (this.signature = a, this.version = `${n.versions.producer}.${n.versions.minConsumer}`, this.executor = new mS(oS.Instance.transformGraph(n, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(t), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) { let r = oS.Instance.transformGraph(e.modelInitializer); this.initializer = new mS(r), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e.initializerSignature } return !0 } async save(e, t) { if (typeof e == "string") { let n = this.io.getSaveHandlers(e); if (n.length === 0) throw new Error(`Cannot find any save handlers for URL '${e}'`); if (n.length > 1) throw new Error(`Found more than one (${n.length}) save handlers for URL '${e}'`); e = n[0] } if (e.save == null) throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined."); return e.save(this.artifacts) } addStructuredOutputNames(e) { if (this.structuredOutputKeys) { let t = e instanceof Ce ? [e] : e, n = {}; return t.forEach((a, r) => n[this.structuredOutputKeys[r]] = a), n } return e } predict(e, t) { let n = this.execute(e, this.outputNodes); return this.addStructuredOutputNames(n) } async predictAsync(e, t) { let n = await this.executeAsync(e, this.outputNodes); return this.addStructuredOutputNames(n) } normalizeInputs(e) { var t; if (!(e instanceof Ce) && !Array.isArray(e)) { let r = (t = this.signature) === null || t === void 0 ? void 0 : t.inputs; if (r != null) for (let s in r) { let i = r[s]; i.resourceId != null && (e[s] = this.resourceIdToCapturedInput[i.resourceId]) } return e } e = Array.isArray(e) ? e : [e]; let n = Object.keys(this.resourceIdToCapturedInput).length; if (e.length + n !== this.inputNodes.length) throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - n} non-resource placeholders, while there are ${e.length} input tensors provided.`); let a = 0; return this.inputNodes.reduce((r, s) => { var i, o, l; let u = (l = (o = (i = this.signature) === null || i === void 0 ? void 0 : i.inputs) === null || o === void 0 ? void 0 : o[s]) === null || l === void 0 ? void 0 : l.resourceId; return u != null ? r[s] = this.resourceIdToCapturedInput[u] : r[s] = e[a++], r }, {}) } normalizeOutputs(e) { return e = e || this.outputNodes, Array.isArray(e) ? e : [e] } executeInitializerGraph() { return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs)) } async executeInitializerGraphAsync() { return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs)) } setResourceIdToCapturedInput(e) { if (this.resourceIdToCapturedInput = {}, this.initializerSignature) { let t = this.initializerSignature.outputs, n = Object.keys(t); for (let a = 0; a < n.length; a++) { let r = n[a], s = t[r]; this.resourceIdToCapturedInput[s.resourceId] = e[a] } } } execute(e, t) { this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t); let n = this.executor.execute(e, t); return n.length > 1 ? n : n[0] } async executeAsync(e, t) { this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e = this.normalizeInputs(e), t = this.normalizeOutputs(t); let n = await this.executor.executeAsync(e, t); return n.length > 1 ? n : n[0] } getIntermediateTensors() { return this.executor.getIntermediateTensors() } disposeIntermediateTensors() { this.executor.disposeIntermediateTensors() } convertTensorMapToTensorsMap(e) { return Object.keys(e).reduce((t, n) => (t[n] = [e[n]], t), {}) } dispose() { this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Ee(this.resourceIdToCapturedInput)), this.resourceManager.dispose() } }; async function E5(e, t = {}, n = qt) { if (e == null) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model"); t == null && (t = {}), t.fromTFHub && typeof e == "string" && (e = A5(e)); let a = new z1(e, t, n); return await a.load(), a } function _5(e) { if (e == null) throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model"); let t; if (e instanceof Array) { let [a, r] = e; if (!a) throw new Error("modelJSON must be the first element of the array"); if (!r || !(r instanceof ArrayBuffer)) throw new Error("An ArrayBuffer of weights must be the second element of the array"); if (!("modelTopology" in a)) throw new Error("Model JSON is missing 'modelTopology'"); if (!("weightsManifest" in a)) throw new Error("Model JSON is missing 'weightsManifest'"); let s = qt.getWeightSpecs(a.weightsManifest), i = qt.getModelArtifactsForJSONSync(a, s, r); t = qt.fromMemorySync(i) } else if ("load" in e) t = e; else if ("modelTopology" in e && "weightSpecs" in e && "weightData" in e) t = qt.fromMemorySync(e); else throw new Error("Unknown model format"); let n = new z1(t); return n.load(), n } function A5(e) { return e.endsWith("/") || (e = e + "/"), `${e}${C5}${T5}` } var F5 = "4.16.0", EE = {}; _e(EE, { CSVDataset: () => zE, Dataset: () => xp, FileDataSource: () => qE, TextLineDataset: () => LE, URLDataSource: () => jE, array: () => eK, csv: () => hK, func: () => mK, generator: () => fK, microphone: () => bK, version_data: () => yK, webcam: () => gK, zip: () => tK }); var $5 = ks(Fm()), D5 = ks(Fm()); function R5(e, t) { return wm(e, t) } function wm(e, t, n = new Map, a = new Set) { if (e == null) return null; if (typeof Blob == "function" && e instanceof Blob) return e.slice(); if (a.has(e)) throw new Error("Circular references are not supported."); if (n.has(e)) return n.get(e); let r = t(e); if (r.recurse && r.value !== null) throw new Error("A deep map function may not return both a value and recurse=true."); if (r.recurse) if (ru(e)) { let s = Array.isArray(e) ? [] : {}; a.add(e); for (let i in e) { let o = e[i], l = wm(o, t, n, a); s[i] = l } return a.delete(e), e.__proto__ && (s.__proto__ = e.__proto__), s } else throw new Error(`Can't recurse into non-iterable type: ${e}`); else return n.set(e, r.value), r.value } function M5(e, t = AE) { return _E(e, t) } function _E(e, t, n = new Set) { let a = e[0]; if (n.has(a)) throw new Error("Circular references are not supported."); let r = t(e); if (r.recurse && r.value !== null) throw new Error("A deep zip function may not return both a value and recurse=true."); if (r.recurse) if (ru(a)) { let s = Array.isArray(a) ? [] : {}; n.add(a); for (let i in a) { let o = e.map(u => u[i]), l = _E(o, t, n); s[i] = l } return n.delete(a), s } else throw new Error(`Can't recurse into non-iterable type: ${a}`); else return r.value } function AE(e) { return e === null ? null : ru(e[0]) ? { value: null, recurse: !0 } : { value: e, recurse: !1 } } async function FE(e, t) { let n = new Map; wm(e, t, n); for (let a of Array.from(n.keys())) { let r = n.get(a); if (w.isPromise(r)) { let s = await r; n.set(a, s) } } return wm(e, t, n) } function ru(e) { let t = !1; if (G().get("IS_BROWSER")) t = e instanceof TextDecoder; else { let { StringDecoder: n } = QS(); t = e instanceof n } return e != null && !ArrayBuffer.isView(e) && (Array.isArray(e) || typeof e == "object" && !(e instanceof Ce) && !(e instanceof Promise) && !t) } function O5(e) { return e == null || P5(e) || Array.isArray(e) || typeof e == "object" && e instanceof Ce || w.isTypedArray(e) } function P5(e) { return e === null || typeof e != "object" && typeof e != "function" } function L5(e) { return R5(e, z5) } function z5(e) { return e instanceof Ce ? { value: e.clone(), recurse: !1 } : ru(e) ? { value: null, recurse: !0 } : { value: e, recurse: !1 } } var $E = class { constructor(e) { if (this.capacity = e, this.begin = 0, this.end = 0, e == null) throw new RangeError("Can't create a ring buffer of unknown capacity."); if (e < 1) throw new RangeError("Can't create ring buffer of capacity < 1."); this.data = new Array(e), this.doubledCapacity = 2 * e } wrap(e) { for (; e < 0;)e += this.doubledCapacity; return e % this.doubledCapacity } get(e) { if (e < 0) throw new RangeError("Can't get item at a negative index."); return this.data[e % this.capacity] } set(e, t) { if (e < 0) throw new RangeError("Can't set item at a negative index."); this.data[e % this.capacity] = t } length() { let e = this.end - this.begin; return e < 0 && (e = this.doubledCapacity + e), e } isFull() { return this.length() === this.capacity } isEmpty() { return this.length() === 0 } push(e) { if (this.isFull()) throw new RangeError("Ring buffer is full."); this.set(this.end, e), this.end = this.wrap(this.end + 1) } pushAll(e) { for (let t of e) this.push(t) } pop() { if (this.isEmpty()) throw new RangeError("Ring buffer is empty."); this.end = this.wrap(this.end - 1); let e = this.get(this.end); return this.set(this.end, void 0), e } unshift(e) { if (this.isFull()) throw new RangeError("Ring buffer is full."); this.begin = this.wrap(this.begin - 1), this.set(this.begin, e) } shift() { if (this.isEmpty()) throw new RangeError("Ring buffer is empty."); let e = this.get(this.begin); return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e } shuffleExcise(e) { if (this.isEmpty()) throw new RangeError("Ring buffer is empty."); let t = this.wrap(this.begin + e), n = this.get(t); return this.set(t, this.pop()), n } }, DE = class RE extends $E { constructor() { super(RE.INITIAL_CAPACITY) } isFull() { return !1 } push(t) { super.isFull() && this.expand(), super.push(t) } unshift(t) { super.isFull() && this.expand(), super.unshift(t) } expand() { let t = this.capacity * 2, n = new Array(t), a = this.length(); for (let r = 0; r < a; r++)n[r] = this.get(this.wrap(this.begin + r)); this.data = n, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = a } }; DE.INITIAL_CAPACITY = 32; function ME(e) { return new V5(e) } function W1(e) { return new U5(e) } function W5(e, t) { return new OE(e, t) } function B5(e, t = rs.FAIL) { return new J5(e, t) } var rn = class { async toArray() { let e = [], t = await this.next(); for (; !t.done;)e.push(t.value), t = await this.next(); return e } async toArrayForTest() { let e = this.prefetch(100), t = [], n = await e.next(); for (; !n.done;)t.push(n.value), n = await e.next(); return t } async resolveFully() { let e = await this.next(); for (; !e.done;)e = await this.next() } async resolveWhile(e) { let t = await this.next(), n = e(t.value); for (; !t.done && n;)t = await this.next(), n = e(t.value) } handleErrors(e) { return new Y5(this, e) } filter(e) { return new K5(this, e) } map(e) { return new X5(this, e) } mapAsync(e) { return new fS(this, e) } serialMapAsync(e) { return new fS(this, e).serial() } flatmap(e) { return new Z5(this, e) } async forEachAsync(e) { return this.map(e).resolveFully() } async serialForEach(e) { return this.serialMapAsync(e).resolveWhile(t => t === !0) } rowMajorBatch(e, t = !0) { return new j5(this, e, t) } columnMajorBatch(e, t = !0, n = AE) { return this.rowMajorBatch(e, t).map(a => M5(a, n)) } concatenate(e, t) { return new OE(ME([this, e]), t) } take(e) { return e < 0 || e == null ? this : new q5(this, e) } skip(e) { return e < 0 || e == null ? this : new H5(this, e) } prefetch(e) { return new PE(this, e) } shuffle(e, t) { return new Q5(this, e, t) } serial() { return new G5(this) } }, V5 = class extends rn { constructor(e) { super(), this.items = e, this.trav = 0 } summary() { return `Array of ${this.items.length} items` } async next() { if (this.trav >= this.items.length) return { value: null, done: !0 }; let e = this.items[this.trav]; return this.trav++, { value: L5(e), done: !1 } } }, U5 = class extends rn { constructor(e) { super(), this.nextFn = e } summary() { return "Function call" } async next() { try { return this.nextFn() } catch (e) { throw e.message = `Error thrown while iterating through a dataset: ${e.message}`, e } } }, G5 = class extends rn { constructor(e) { super(), this.upstream = e, this.lastRead = Promise.resolve({ value: null, done: !1 }) } summary() { return `${this.upstream.summary()} -> Serial` } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { return this.upstream.next() } }, H5 = class extends rn { constructor(e, t) { super(), this.upstream = e, this.maxCount = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 }) } summary() { return `${this.upstream.summary()} -> Skip` } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { for (; this.count++ < this.maxCount;) { let e = await this.upstream.next(); if (e.done) return e; Ee(e.value) } return this.upstream.next() } }, q5 = class extends rn { constructor(e, t) { super(), this.upstream = e, this.maxCount = t, this.count = 0 } summary() { return `${this.upstream.summary()} -> Take` } async next() { return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next() } }, j5 = class extends rn { constructor(e, t, n = !0) { super(), this.upstream = e, this.batchSize = t, this.enableSmallLastBatch = n, this.lastRead = Promise.resolve({ value: null, done: !1 }) } summary() { return `${this.upstream.summary()} -> RowMajorBatch` } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { let e = []; for (; e.length < this.batchSize;) { let t = await this.upstream.next(); if (t.done) return this.enableSmallLastBatch && e.length > 0 ? { value: e, done: !1 } : { value: null, done: !0 }; e.push(t.value) } return { value: e, done: !1 } } }, K5 = class extends rn { constructor(e, t) { super(), this.upstream = e, this.predicate = t, this.lastRead = Promise.resolve({ value: null, done: !1 }) } summary() { return `${this.upstream.summary()} -> Filter` } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { for (; ;) { let e = await this.upstream.next(); if (e.done || this.predicate(e.value)) return e; Ee(e.value) } } }, X5 = class extends rn { constructor(e, t) { super(), this.upstream = e, this.transform = t } summary() { return `${this.upstream.summary()} -> Map` } async next() { let e = await this.upstream.next(); if (e.done) return { value: null, done: !0 }; let t = Wa.getTensorsInContainer(e.value), n = this.transform(e.value), a = Wa.getTensorsInContainer(n); for (let r of t) Wa.isTensorInList(r, a) || r.dispose(); return { value: n, done: !1 } } }, Y5 = class extends rn { constructor(e, t) { super(), this.upstream = e, this.handler = t, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 }) } summary() { return `${this.upstream.summary()} -> handleErrors` } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { for (; ;)try { return await this.upstream.next() } catch (e) { if (!this.handler(e)) return { value: null, done: !0 } } } }, fS = class extends rn { constructor(e, t) { super(), this.upstream = e, this.transform = t } summary() { return `${this.upstream.summary()} -> AsyncMap` } async next() { let e = await this.upstream.next(); if (e.done) return { value: null, done: !0 }; let t = Wa.getTensorsInContainer(e.value), n = await this.transform(e.value), a = Wa.getTensorsInContainer(n); for (let r of t) Wa.isTensorInList(r, a) || r.dispose(); return { value: n, done: !1 } } }, B1 = class extends rn { constructor() { super(), this.outputQueue = new DE, this.lastRead = Promise.resolve({ value: null, done: !1 }) } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } async serialNext() { for (; this.outputQueue.length() === 0;)if (!await this.pump()) return { value: null, done: !0 }; return { value: this.outputQueue.shift(), done: !1 } } }, Z5 = class extends B1 { constructor(e, t) { super(), this.upstream = e, this.transform = t } summary() { return `${this.upstream.summary()} -> Flatmap` } async pump() { let e = await this.upstream.next(); if (e.done) return !1; let t = Wa.getTensorsInContainer(e.value), n = this.transform(e.value), a = Wa.getTensorsInContainer(n); this.outputQueue.pushAll(n); for (let r of t) Wa.isTensorInList(r, a) || r.dispose(); return !0 } }, OE = class extends rn { constructor(e, t) { super(), this.baseErrorHandler = t, this.lastRead = null, this.iterator = null, this.moreIterators = e } summary() { return "TODO: fill in upstream of chained summaries -> Chained" } async next() { return this.lastRead = this.readFromChain(this.lastRead), this.lastRead } async readFromChain(e) { if (await e, this.iterator == null) { let n = await this.moreIterators.next(); if (n.done) return { value: null, done: !0 }; this.iterator = n.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler)) } let t = await this.iterator.next(); return t.done ? (this.iterator = null, this.readFromChain(e)) : t } }, rs; (function (e) { e[e.FAIL = 0] = "FAIL", e[e.SHORTEST = 1] = "SHORTEST", e[e.LONGEST = 2] = "LONGEST" })(rs || (rs = {})); var J5 = class extends rn { constructor(e, t = rs.FAIL) { super(), this.iterators = e, this.mismatchMode = t, this.count = 0, this.currentPromise = null } summary() { return "{TODO: fill in upstream of zip summaries} -> Zip" } async nextState(e) { await e; let t = 0, n = 0; function a(s) { return s instanceof rn ? { value: s.next().then(i => (t++, i.done && n++, i.value)), recurse: !1 } : { value: null, recurse: !0 } } let r = await FE(this.iterators, a); if (t === n) return { value: null, done: !0 }; if (n > 0) switch (this.mismatchMode) { case rs.FAIL: throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`); case rs.SHORTEST: return { value: null, done: !0 }; case rs.LONGEST: default: }return this.count++, { value: r, done: !1 } } async next() { return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise } }, PE = class extends rn { constructor(e, t) { super(), this.upstream = e, this.bufferSize = t, this.buffer = new $E(t) } summary() { return `${this.upstream.summary()} -> Prefetch` } refill() { for (; !this.buffer.isFull();) { let e = this.upstream.next(); this.buffer.push(e) } } next() { return this.refill(), this.buffer.shift() } }, Q5 = class extends PE { constructor(e, t, n) { super(e, t), this.upstream = e, this.windowSize = t, this.upstreamExhausted = !1, this.random = D5.alea(n || w.now().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 }) } async next() { return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead } randomInt(e) { return Math.floor(this.random() * e) } chooseIndex() { return this.randomInt(this.buffer.length()) } async serialNext() { for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty();) { let e = this.chooseIndex(), t = await this.buffer.shuffleExcise(e); if (t.done) this.upstreamExhausted = !0; else return this.refill(), t } return { value: null, done: !0 } } }, xp = class {
        constructor() { this.size = null } batch(e, t = !0) {
            let n = this; w.assert(e > 0, () => `batchSize needs to be positive, but it is
      ${e}`); let a; return this.size === 1 / 0 || this.size == null ? a = this.size : t ? a = Math.ceil(this.size / e) : a = Math.floor(this.size / e), Yn(async () => (await n.iterator()).columnMajorBatch(e, t, nK), a)
        } concatenate(e) { let t = this, n; return this.size === 1 / 0 || e.size === 1 / 0 ? n = 1 / 0 : this.size != null && e.size != null ? n = this.size + e.size : n = null, Yn(async () => (await t.iterator()).concatenate(await e.iterator()), n) } filter(e) { let t = this, n; return this.size === 1 / 0 ? n = 1 / 0 : n = null, Yn(async () => (await t.iterator()).filter(a => O(() => e(a))), n) } async forEachAsync(e) { return (await this.iterator()).forEachAsync(e) } map(e) { let t = this; return Yn(async () => (await t.iterator()).map(n => O(() => e(n))), this.size) } mapAsync(e) { let t = this; return Yn(async () => (await t.iterator()).mapAsync(e), this.size) } prefetch(e) { if (e == null) throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified."); let t = this; return Yn(async () => (await t.iterator()).prefetch(e), this.size) } repeat(e) { let t = this, n; return this.size != null && e > 0 ? n = this.size * e : e === 0 ? n = 0 : this.size != null && (e === void 0 || e < 0) ? n = 1 / 0 : n = null, Yn(async () => { let a = W1(async () => ({ value: await t.iterator(), done: !1 })); return W5(a.take(e)) }, n) } skip(e) { let t = this, n; return this.size != null && e >= 0 && this.size >= e ? n = this.size - e : this.size != null && (this.size < e || e === void 0 || e < 0) ? n = 0 : n = null, Yn(async () => (await t.iterator()).skip(e), n) } shuffle(e, t, n = !0) { if (e == null || e < 0) throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`); let a = this, r = $5.alea(t || w.now().toString()); return Yn(async () => { let s = r.int32(); return n && (s += r.int32()), (await a.iterator()).shuffle(e, s.toString()) }, this.size) } take(e) { let t = this, n; return this.size != null && this.size > e ? n = e : this.size != null && this.size <= e ? n = this.size : n = null, Yn(async () => (await t.iterator()).take(e), n) } async toArray() { if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array."); return (await this.iterator()).toArray() } async toArrayForTest() { if (this.size === 1 / 0) throw new Error("Can not convert infinite data stream to array."); return (await this.iterator()).toArrayForTest() }
    }; xp.MAX_BUFFER_SIZE = 1e4; function Yn(e, t = null) { return new class extends xp { constructor() { super(...arguments), this.size = t } async iterator() { return e() } } } function eK(e) { return Yn(async () => ME(e), e.length) } function tK(e) { if (!ru(e)) throw new Error("The argument to zip() must be an object or array."); let t; if (Array.isArray(e)) for (let n = 0; n < e.length; n++)t = t == null ? e[n].size : Math.min(t, e[n].size); else if (e instanceof Object) for (let n in e) t = t == null ? e[n].size : Math.min(t, e[n].size); return Yn(async () => { let n = await FE(e, a => { if (a instanceof xp) return { value: a.iterator(), recurse: !1 }; if (ru(a)) return { value: null, recurse: !0 }; throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.") }); return B5(n, rs.SHORTEST) }, t) } function nK(e) { if (e === null) return null; let t = e[0]; return O5(t) ? { value: aK(e), recurse: !1 } : { value: null, recurse: !0 } } function aK(e) { if (e.length === 0) throw new Error("Can't make a batch of zero elements."); return e[0] instanceof Ce ? Ft(e) : bn(e) } var LE = class extends xp {
        constructor(e) { super(), this.input = e } async iterator() {
            return (await this.input.iterator()).decodeUTF8().split(`
`).map(e => (e.endsWith("\r") && (e = e.slice(0, -1)), e))
        }
    }, Bh = '"', rc = Symbol("out"), gS = Symbol("field"), Vh = Symbol("quote"), Sx = Symbol("quoteafterquote"), bS = Symbol("quoteinquote"), zE = class extends xp { async columnNames() { return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames } async setColumnNames() { let e = await this.maybeReadHeaderLine(); if (!this.fullColumnNames && !e) throw new Error("Column names must be provided if there is no header line."); this.fullColumnNames && e && w.assert(e.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e); let t = this.fullColumnNames.reduce((a, r) => (a[r] = a[r] + 1 || 1, a), {}), n = Object.keys(t).filter(a => t[a] > 1); if (w.assert(n.length === 0, () => "Duplicate column names found: " + n.toString()), this.columnConfigs) { for (let a of Object.keys(this.columnConfigs)) if (this.fullColumnNames.indexOf(a) === -1) throw new Error('The key "' + a + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").") } this.columnNamesValidated = !0 } async maybeReadHeaderLine() { if (this.hasHeader) { let e = await (await this.base.iterator()).next(); if (e.done) throw new Error("No data was found for CSV parsing."); let t = e.value; return this.parseRow(t, !1) } else return null } constructor(e, t) { super(), this.input = e, this.hasHeader = !0, this.fullColumnNames = null, this.columnNamesValidated = !1, this.columnConfigs = null, this.configuredColumnsOnly = !1, this.delimiter = ",", this.delimWhitespace = !1, this.base = new LE(e), t || (t = {}), this.hasHeader = t.hasHeader !== !1, this.fullColumnNames = t.columnNames, this.columnConfigs = t.columnConfigs, this.configuredColumnsOnly = t.configuredColumnsOnly, t.delimWhitespace ? (w.assert(t.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = !0, this.delimiter = " ") : this.delimiter = t.delimiter ? t.delimiter : "," } async iterator() { this.columnNamesValidated || await this.setColumnNames(); let e = await this.base.iterator(); return this.hasHeader && (e = e.skip(1)), e.map(t => this.makeDataElement(t)) } makeDataElement(e) { let t = this.parseRow(e), n = {}, a = {}; for (let r = 0; r < this.fullColumnNames.length; r++) { let s = this.fullColumnNames[r], i = this.columnConfigs ? this.columnConfigs[s] : null; if (!(this.configuredColumnsOnly && !i)) { let o = t[r], l = null; if (o === "") if (i && i.default !== void 0) l = i.default; else { if (i && (i.required || i.isLabel)) throw new Error(`Required column ${s} is empty in this line: ${e}`); l = void 0 } else { let u = Number(o); if (isNaN(u)) i && i.dtype === "bool" ? l = this.getBoolean(o) : l = o; else if (!i || !i.dtype) l = u; else switch (i.dtype) { case "float32": l = u; break; case "int32": l = Math.floor(u); break; case "bool": l = this.getBoolean(o); break; default: l = u } } i && i.isLabel ? a[s] = l : n[s] = l } } return Object.keys(a).length === 0 ? n : { xs: n, ys: a } } getBoolean(e) { return e === "1" || e.toLowerCase() === "true" ? 1 : 0 } parseRow(e, t = !0) { let n = [], a = 0, r = e.length, s = rc; for (let i = 0; i < r; i++)switch (s) { case rc: switch (e.charAt(i)) { case Bh: a = i + 1, s = Vh; break; case this.delimiter: if (a = i + 1, this.delimiter === " " && this.delimWhitespace) break; n.push(""), s = rc; break; default: s = gS, a = i; break }break; case gS: switch (e.charAt(i)) { case this.delimiter: n.push(e.substring(a, i)), s = rc, a = i + 1; break; default: }break; case Vh: switch (e.charAt(i)) { case Bh: s = Sx; break; default: }break; case Sx: switch (e.charAt(i)) { case this.delimiter: n.push(e.substring(a, i - 1)), s = rc, a = i + 1; break; case Bh: s = Vh; break; default: s = bS; break }break; case bS: switch (e.charAt(i)) { case Bh: s = Vh; break; default: }break; default: }if (s === Sx ? n.push(e.substring(a, r - 1)) : n.push(e.substring(a)), t && n.length !== this.fullColumnNames.length) throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`); return n } }, rK = class WE extends rn { constructor(t) { super(), this.microphoneConfig = t, this.isClosed = !1, this.fftSize = t.fftSize || 1024; let n = Math.log2(this.fftSize); if (this.fftSize < 0 || n < 4 || n > 14 || !Number.isInteger(n)) throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`); if (this.numFrames = t.numFramesPerSpectrogram || 43, this.sampleRateHz = t.sampleRateHz, this.columnTruncateLength = t.columnTruncateLength || this.fftSize, this.audioTrackConstraints = t.audioTrackConstraints, this.smoothingTimeConstant = t.smoothingTimeConstant || 0, this.includeSpectrogram = t.includeSpectrogram !== !1, this.includeWaveform = t.includeWaveform === !0, !this.includeSpectrogram && !this.includeWaveform) throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.") } summary() { return "microphone" } static async create(t = {}) { if (!G().get("IS_BROWSER")) throw new Error("microphone API is only supported in browser environment."); let n = new WE(t); return await n.start(), n } async start() { try { this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.audioTrackConstraints == null ? !0 : this.audioTrackConstraints, video: !1 }) } catch (a) { throw new Error(`Error thrown while initializing video stream: ${a.message}`) } if (!this.stream) throw new Error("Could not obtain audio from microphone."); let t = window.AudioContext || window.webkitAudioContext; if (this.audioContext = new t, !this.sampleRateHz) this.sampleRateHz = this.audioContext.sampleRate; else if (this.audioContext.sampleRate !== this.sampleRateHz) throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`); let n = this.audioContext.createMediaStreamSource(this.stream); this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, n.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize) } async next() { if (this.isClosed) return { value: null, done: !0 }; let t, n, a = await this.getAudioData(); if (this.includeSpectrogram) { let r = this.flattenQueue(a.freqDataQueue); t = this.getTensorFromAudioDataArray(r, [this.numFrames, this.columnTruncateLength, 1]) } if (this.includeWaveform) { let r = this.flattenQueue(a.timeDataQueue); n = this.getTensorFromAudioDataArray(r, [this.numFrames * this.fftSize, 1]) } return { value: { spectrogram: t, waveform: n }, done: !1 } } async capture() { return (await this.next()).value } async getAudioData() { let t = [], n = [], a = 0; return new Promise(r => { let s = setInterval(() => { this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({ freqDataQueue: t, timeDataQueue: n }), t.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), n.push(this.timeData.slice())), ++a === this.numFrames && (clearInterval(s), r({ freqDataQueue: t, timeDataQueue: n })) }, this.fftSize / this.sampleRateHz * 1e3) }) } stop() { this.isClosed || (this.isClosed = !0, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop()) } toArray() { throw new Error("Can not convert infinite audio stream to array.") } getSampleRate() { return this.sampleRateHz } flattenQueue(t) { let n = t[0].length, a = new Float32Array(t.length * n); return t.forEach((r, s) => a.set(r, s * n)), a } getTensorFromAudioDataArray(t, n) { let a = new Float32Array(w.sizeFromShape(n)); return a.set(t, a.length - t.length), bn(a, n) } }, sK = class BE extends rn { constructor(t, n) { if (super(), this.webcamVideoElement = t, this.webcamConfig = n, this.isClosed = !0, this.resize = !1, this.needToResize()) if (this.resize = !0, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = qe([0], "int32"), this.webcamConfig.centerCrop) { let a = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, s = (1 - a) / 2, i = (1 - r) / 2, o = s + a, l = r + i; this.cropBox = Aa([i, s, l, o], [1, 4]) } else this.cropBox = Aa([0, 0, 1, 1], [1, 4]) } summary() { return "webcam" } static async create(t, n = {}) { if (!G().get("IS_BROWSER")) throw new Error("tf.data.webcam is only supported in browser environment."); if (!t) { if (t = document.createElement("video"), !n.resizeWidth || !n.resizeHeight) throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element."); t.width = n.resizeWidth, t.height = n.resizeHeight } let a = new BE(t, n); return await a.start(), a } async start() { this.webcamConfig.facingMode && w.assert(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`); try { this.stream = await navigator.mediaDevices.getUserMedia({ video: { deviceId: this.webcamConfig.deviceId, facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user", width: this.webcamVideoElement.width, height: this.webcamVideoElement.height } }) } catch (t) { throw t.message = `Error thrown while initializing video stream: ${t.message}`, t } if (!this.stream) throw new Error("Could not obtain video from webcam."); try { this.webcamVideoElement.srcObject = this.stream } catch (t) { console.log(t), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream) } return this.webcamVideoElement.play(), this.isClosed = !1, new Promise(t => { this.webcamVideoElement.onloadedmetadata = () => { t() } }) } async next() { if (this.isClosed) return { value: null, done: !0 }; let t; try { t = Xo.fromPixels(this.webcamVideoElement) } catch (n) { throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(n)}`) } if (this.resize) try { return { value: this.cropAndResizeFrame(t), done: !1 } } catch (n) { throw new Error(`Error thrown cropping the video: ${n.message}`) } finally { t.dispose() } else return { value: t, done: !1 } } needToResize() { return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) } cropAndResizeFrame(t) { return O(() => { let n = Gt(re(t, "float32"), 0), a; a = Qn.cropAndResize(n, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear"); let r = a.shape; return W(a, r.slice(1)) }) } async capture() { return (await this.next()).value } stop() { this.stream.getTracks().forEach(t => t.stop()); try { this.webcamVideoElement.srcObject = null } catch (t) { console.log(t), this.webcamVideoElement.src = null } this.isClosed = !0 } toArray() { throw new Error("Can not convert infinite video stream to array.") } }, VE = class { }, UE = class extends rn { split(e) { return new iK(this, e) } }, iK = class extends UE { constructor(e, t) { super(), this.upstream = e, this.impl = new oK(e, t) } summary() { return this.impl.summary() } async next() { return this.impl.next() } }, oK = class extends B1 { constructor(e, t) { super(), this.upstream = e, this.separator = t, this.carryover = "" } summary() { return `${this.upstream.summary()} -> Split('${this.separator}')` } async pump() { let e = await this.upstream.next(); if (e.done) return this.carryover === "" ? !1 : (this.outputQueue.push(this.carryover), this.carryover = "", !0); let t = e.value.split(this.separator); t[0] = this.carryover + t[0]; for (let n of t.slice(0, -1)) this.outputQueue.push(n); return this.carryover = t[t.length - 1], !0 } }, lK = class extends rn { decodeUTF8() { return new uK(this) } }, uK = class extends UE { constructor(e) { super(), this.upstream = e, this.impl = new pK(e) } summary() { return this.impl.summary() } async next() { return this.impl.next() } }, pK = class extends B1 { constructor(e) { if (super(), this.upstream = e, G().get("IS_BROWSER")) this.decoder = new TextDecoder("utf-8"); else { let { StringDecoder: t } = QS(); this.decoder = new t("utf8") } } summary() { return `${this.upstream.summary()} -> Utf8` } async pump() { let e = await this.upstream.next(), t; if (e.done) return !1; t = e.value; let n; return G().get("IS_BROWSER") ? n = this.decoder.decode(t, { stream: !0 }) : n = this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(n), !0 } }, GE = class extends lK { constructor(e, t = {}) { super(), this.file = e, this.options = t, w.assert(e instanceof Uint8Array || (G().get("IS_BROWSER") ? e instanceof File || e instanceof Blob : !1), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = t.offset || 0, this.chunkSize = t.chunkSize || 1024 * 1024 } summary() { return `FileChunks ${this.file}` } async next() { return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: !0 } : { value: await new Promise((e, t) => { let n = this.offset + this.chunkSize; if (this.file instanceof Uint8Array) e(new Uint8Array(this.file.slice(this.offset, n))); else { let a = new FileReader; a.onload = s => { let i = a.result; if (i instanceof ArrayBuffer && (i = new Uint8Array(i)), !(i instanceof Uint8Array)) return t(new TypeError("FileReader returned unknown type.")); e(i) }, a.onabort = s => t(new Error("Aborted")), a.onerror = s => t(new Error(s.type)); let r = this.file.slice(this.offset, n); a.readAsArrayBuffer(r) } this.offset = n }), done: !1 } } }; async function cK(e, t = {}, n) { let a, r; typeof e == "string" ? a = e : (a = e.url, r = dK(e)); let s = await (n || w.fetch)(a, r); if (s.ok) { let i = new Uint8Array(await s.arrayBuffer()); return new GE(i, t) } else throw new Error(s.statusText) } var dK = e => ({ method: e.method, headers: e.headers, body: e.body, mode: e.mode, credentials: e.credentials, cache: e.cache, redirect: e.redirect, referrer: e.referrer, integrity: e.integrity }); function HE(e) { return typeof e == "string" && e.slice(0, 7) === "file://" } var qE = class extends VE { constructor(e, t = {}) { super(), this.input = e, this.options = t } async iterator() { if (HE(this.input) && G().get("IS_NODE")) { let e = Av(); this.input = e.readFileSync(this.input.slice(7)) } return new GE(this.input, this.options) } }, jE = class extends VE { constructor(e, t = {}) { super(), this.url = e, this.fileOptions = t } async iterator() { return HE(this.url) ? new qE(this.url, this.fileOptions).iterator() : cK(this.url, this.fileOptions) } }; function hK(e, t = {}) { return new zE(new jE(e), t) } function mK(e) { let t = W1(e); return Yn(async () => t) } function fK(e) { return Yn(async () => { let t = await e(); return W1(() => t.next()) }) } async function gK(e, t) { return sK.create(e, t) } async function bK(e) { return rK.create(e) } var yK = "4.16.0"; function ge(e, t) { Array.isArray(e) || (e = [e]), e.forEach(n => { n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`) }) } var xK = fr.whereImpl, V1 = class KE extends Pc {
        nextDataId() { return KE.nextDataId++ } constructor() { super(), this.blockSize = 48, this.firstUse = !0, this.data = new $m(this, Ea()) } write(t, n, a) {
            this.firstUse && (this.firstUse = !1, G().get("IS_NODE") && T.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`)); let r = { id: this.nextDataId() }; return this.data.set(r, { values: t, dtype: a, refCount: 1 }), r
        } makeTensorInfo(t, n, a) { let r; if (n === "string" && a != null && a.length > 0 && w.isString(a[0])) { let s = a.map(i => w.encodeString(i)); r = this.write(s, t, n) } else r = this.write(a, t, n); return { dataId: r, shape: t, dtype: n } } refCount(t) { return this.data.has(t) ? this.data.get(t).refCount : 0 } incRef(t) { let n = this.data.get(t); n.refCount++ } decRef(t) { if (this.data.has(t)) { let n = this.data.get(t); n.refCount-- } } move(t, n, a, r, s) { this.data.set(t, { values: n, dtype: r, refCount: s }) } numDataIds() { return this.data.numDataIds() } async read(t) { return this.readSync(t) } readSync(t) { let { dtype: n, complexTensorInfos: a } = this.data.get(t); if (n === "complex64") { let r = this.readSync(a.real.dataId), s = this.readSync(a.imag.dataId); return T.mergeRealAndImagArrays(r, s) } return w.convertBackendValuesAndArrayBuffer(this.data.get(t).values, n) } bufferSync(t) { let n = this.readSync(t.dataId); if (t.dtype === "string") try { let a = n.map(r => w.decodeString(r)); return Pe(t.shape, t.dtype, a) } catch (a) { throw new Error("Failed to decode encoded string bytes into utf-8") } return Pe(t.shape, t.dtype, n) } makeOutput(t, n, a) { return Ea().makeTensorFromTensorInfo(this.makeTensorInfo(n, a, t), this) } disposeData(t, n = !1) { if (this.data.has(t)) { if (this.data.get(t).refCount--, !n && this.data.get(t).refCount > 0) return !1; let { complexTensorInfos: a } = this.data.get(t); a != null && (this.disposeData(a.real.dataId, !0), this.disposeData(a.imag.dataId, !0)), this.data.delete(t) } return !0 } disposeIntermediateTensorInfo(t) { this.disposeData(t.dataId) } async time(t) { let n = w.now(); return t(), { kernelMs: w.now() - n } } memory() { return { unreliable: !0, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] } } where(t) { ge([t], "where"); let n = this.readSync(t.dataId); return xK(t.shape, n) } dispose() { } floatPrecision() { return 32 } epsilon() { return super.epsilon() }
    }; V1.nextDataId = 0; var U1 = {}; _e(U1, { addImpl: () => ZE, bincountImpl: () => H1, bincountReduceImpl: () => JE, bitwiseAndImpl: () => QE, castImpl: () => YE, ceilImpl: () => e_, concatImpl: () => q1, equalImpl: () => t_, expImpl: () => a_, expm1Impl: () => s_, floorDivImpl: () => o_, floorImpl: () => i_, gatherNdImpl: () => l_, gatherV2Impl: () => u_, greaterEqualImpl: () => c_, greaterImpl: () => p_, lessEqualImpl: () => h_, lessImpl: () => d_, linSpaceImpl: () => m_, logImpl: () => f_, maxImpl: () => g_, maximumImpl: () => b_, minimumImpl: () => y_, multiplyImpl: () => j1, negImpl: () => x_, notEqualImpl: () => v_, prodImpl: () => w_, raggedGatherImpl: () => k_, raggedRangeImpl: () => I_, raggedTensorToTensorImpl: () => S_, rangeImpl: () => X1, rsqrtImpl: () => N_, scatterImpl: () => ai, sigmoidImpl: () => y8, simpleAbsImpl: () => XE, sliceImpl: () => Im, sparseFillEmptyRowsImpl: () => C_, sparseReshapeImpl: () => E_, sparseSegmentReductionImpl: () => Y1, sqrtImpl: () => w8, squaredDifferenceImpl: () => __, staticRegexReplaceImpl: () => A_, stridedSliceImpl: () => F_, stringNGramsImpl: () => Z1, stringSplitImpl: () => J1, stringToHashBucketFastImpl: () => Q1, subImpl: () => $_, tileImpl: () => D_, topKImpl: () => M_, transposeImpl: () => K1, uniqueImpl: () => tk }); function XE(e) { let t = new Float32Array(e.length); for (let n = 0; n < e.length; ++n)t[n] = Math.abs(e[n]); return t } var vK = e => { let { x: t } = e.inputs, n = e.backend; ge(t, "abs"); let a = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId).values; return a = XE(r), n.makeOutput(a, t.shape, t.dtype) }, wK = { kernelName: uu, backendName: "cpu", kernelFunc: vK }; function Mt(e) { return (t, n, a, r, s) => { let i = T.assertAndGetBroadcastShape(t, n), o = i.length, l = w.computeStrides(i), u = w.sizeFromShape(i), p = w.getTypedArrayFromDType(s, u), d = t.length, c = n.length, h = w.computeStrides(t), m = w.computeStrides(n), f = T.getBroadcastDims(t, i), g = T.getBroadcastDims(n, i); if (f.length + g.length === 0) for (let b = 0; b < p.length; ++b)p[b] = e(a[b % a.length], r[b % r.length]); else for (let b = 0; b < p.length; ++b) { let y = w.indexToLoc(b, o, l), x = y.slice(-d); f.forEach(C => x[C] = 0); let v = w.locToIndex(x, d, h), I = y.slice(-c); g.forEach(C => I[C] = 0); let N = w.locToIndex(I, c, m); p[b] = e(a[v], r[N]) } return [p, i] } } function Jn(e) { let { inputs: t, backend: n } = e, { real: a, imag: r } = t, s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, o = n.makeTensorInfo(a.shape, "complex64"), l = n.data.get(o.dataId); return l.complexTensorInfos = { real: n.makeTensorInfo(a.shape, "float32", s), imag: n.makeTensorInfo(r.shape, "float32", i) }, o } var kK = { kernelName: Mm, backendName: "cpu", kernelFunc: Jn }; function km(e, t, n = "float32") { if (n === "complex64") { let r = km(e, t, "float32"), s = km(e, t, "float32"); return Jn({ inputs: { real: r, imag: s }, backend: e }) } let a = w.makeZerosTypedArray(w.sizeFromShape(t), n); return e.makeTensorInfo(t, n, a) } function dr(e) { let { inputs: t, backend: n } = e, { x: a } = t; return n.incRef(a.dataId), { dataId: a.dataId, shape: a.shape, dtype: a.dtype } } var IK = { kernelName: no, backendName: "cpu", kernelFunc: dr }; function vi(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = n.data.get(a.dataId).complexTensorInfos.real, s = n.data.get(r.dataId).values; return n.makeTensorInfo(r.shape, r.dtype, s) } var SK = { kernelName: jm, backendName: "cpu", kernelFunc: vi }; function YE(e, t, n, a) { if (a === "int32") { let r = Int32Array.from(e); return [t, "int32", r] } if (a === "bool") { let r = w.toTypedArray([0], n), [s, i] = Mt((o, l) => o !== l ? 1 : 0)(t, [], e, r, "bool"); return [i, "bool", s] } throw new Error(`Error in Cast: failed to cast ${n} to ${a}`) } function vs(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { dtype: s } = a; if (s === "complex64") { if (r.dtype === "complex64") return dr({ inputs: { x: r }, backend: n }); let p = km(n, r.shape, r.dtype), d = vs({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), c = Jn({ inputs: { real: d, imag: p }, backend: n }); return n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), c } if (r.dtype === "complex64") { let p = vi({ inputs: { input: r }, backend: n }), d = vs({ inputs: { x: p }, backend: n, attrs: { dtype: s } }); return n.disposeIntermediateTensorInfo(p), d } if (!w.hasEncodingLoss(r.dtype, s)) { let p = dr({ inputs: { x: r }, backend: n }); return { dataId: p.dataId, shape: p.shape, dtype: s } } let i = n.data.get(r.dataId).values, [o, l, u] = YE(i, r.shape, r.dtype, s); return n.makeTensorInfo(o, l, u) } var NK = { kernelName: Pi, backendName: "cpu", kernelFunc: vs }; function Zt(e, t, n, a) { return n == null ? ({ inputs: r, backend: s }) => { let { a: i, b: o } = r, l = s; ge([i, o], e); let u = l.data.get(i.dataId).values, p = l.data.get(o.dataId).values, d = i.dtype === "string" ? T.fromUint8ToStringArray(u) : u, c = i.dtype === "string" ? T.fromUint8ToStringArray(p) : p, h = a || i.dtype, [m, f] = t(i.shape, o.shape, d, c, h); return l.makeTensorInfo(f, h, m) } : ({ inputs: r, backend: s }) => { let { a: i, b: o } = r, l = s; if (i.dtype === "complex64" || o.dtype === "complex64") { let u = vs({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), p = l.data.get(u.dataId), d = p.complexTensorInfos.real, c = p.complexTensorInfos.imag, h = l.data.get(d.dataId).values, m = l.data.get(c.dataId).values, f = vs({ inputs: { x: o }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(f.dataId), b = g.complexTensorInfos.real, y = g.complexTensorInfos.imag, x = l.data.get(b.dataId).values, v = l.data.get(y.dataId).values, [I, N, C] = n(i.shape, o.shape, h, m, x, v), _ = l.makeTensorInfo(C, "float32", I), F = l.makeTensorInfo(C, "float32", N), D = Jn({ inputs: { real: _, imag: F }, backend: l }); return l.disposeIntermediateTensorInfo(u), l.disposeIntermediateTensorInfo(f), l.disposeIntermediateTensorInfo(_), l.disposeIntermediateTensorInfo(F), D } else { let u = l.data.get(i.dataId).values, p = l.data.get(o.dataId).values, d = a || i.dtype, [c, h] = t(i.shape, o.shape, u, p, d); return l.makeTensorInfo(h, d, c) } } } function G1(e) { return (t, n, a, r, s, i) => { let o = T.assertAndGetBroadcastShape(t, n), l = w.sizeFromShape(o), u = o.length, p = w.computeStrides(o), d = w.getTypedArrayFromDType("float32", l), c = w.getTypedArrayFromDType("float32", l), h = T.getBroadcastDims(t, o), m = T.getBroadcastDims(n, o), f = T.mergeRealAndImagArrays(a, r), g = T.mergeRealAndImagArrays(s, i), b = t.length, y = w.computeStrides(t), x = n.length, v = w.computeStrides(n); if (h.length + m.length === 0) for (let I = 0; I < d.length; I++) { let N = I % f.length, C = I % g.length, _ = e(f[N * 2], f[N * 2 + 1], g[C * 2], g[C * 2 + 1]); d[I] = _.real, c[I] = _.imag } else for (let I = 0; I < d.length; I++) { let N = w.indexToLoc(I, u, p), C = N.slice(-b); h.forEach(S => C[S] = 0); let _ = w.locToIndex(C, b, y), F = N.slice(-x); m.forEach(S => F[S] = 0); let D = w.locToIndex(F, x, v), $ = e(f[_ * 2], f[_ * 2 + 1], g[D * 2], g[D * 2 + 1]); d[I] = $.real, c[I] = $.imag } return [d, c, o] } } var ZE = Mt((e, t) => e + t), TK = G1((e, t, n, a) => ({ real: e + n, imag: t + a })), su = Zt(Is, ZE, TK), CK = { kernelName: Is, backendName: "cpu", kernelFunc: su }; function H1(e, t, n, a, r) { let s = w.sizeFromShape(a), i = w.makeZerosTypedArray(r, n); for (let o = 0; o < e.length; o++) { let l = e[o]; if (l < 0) throw new Error("Input x must be non-negative!"); l >= r || (s > 0 ? i[l] += t[o] : i[l] += 1) } return i } function JE(e, t, n, a = !1) { let r = e.shape[0], s = e.shape[1], i = Pe([r, n], t.dtype); for (let o = 0; o < r; o++)for (let l = 0; l < s; l++) { let u = e.get(o, l); if (u < 0) throw new Error("Input x must be non-negative!"); u >= n || (a ? i.set(1, o, u) : t.size > 0 ? i.set(i.get(o, u) + t.get(o, l), o, u) : i.set(i.get(o, u) + 1, o, u)) } return i } var QE = Mt((e, t) => e & t), EK = Zt(bu, QE), _K = { kernelName: bu, backendName: "cpu", kernelFunc: EK }; function gr(e) { return (t, n, a) => { let r = w.getArrayFromDType(n, t.length); for (let s = 0; s < t.length; ++s)r[s] = e(t[s], a); return r } } function lt(e, t, n) { let a = gr(t); return Rs(e, a, n) } function Rs(e, t, n) { return ({ inputs: a, attrs: r, backend: s }) => { let { x: i } = a; ge(i, e); let o = s, l = o.data.get(i.dataId).values, u; if (i.dtype === "string") { if (!Array.isArray(l)) throw new Error("String tensor's value was not an instance of Array"); u = T.fromUint8ToStringArray(l) } else u = l; let p = n || i.dtype, d = t(u, p, r); return o.makeTensorInfo(i.shape, p, d) } } var e_ = gr(e => Math.ceil(e)), AK = Rs(Li, e_), FK = { kernelName: Li, backendName: "cpu", kernelFunc: AK }; function q1(e, t, n, a) { let r = w.getArrayFromDType(n, w.sizeFromShape(t)); if (a && n !== "string") { let s = 0; e.forEach(i => { let o = w.sizeFromShape(i.shape); r.set(i.vals, s), s += o }) } else { let s = 0; e.forEach(i => { let o = n === "string" ? T.fromUint8ToStringArray(i.vals) : i.vals, l = 0; for (let u = 0; u < i.shape[0]; ++u) { let p = u * t[1] + s; for (let d = 0; d < i.shape[1]; ++d)r[p + d] = o[l++] } s += i.shape[1] }) } return r } var t_ = Mt((e, t) => e === t ? 1 : 0), n_ = Zt(Nu, t_, null, "bool"), $K = { kernelName: Nu, backendName: "cpu", kernelFunc: n_ }, a_ = gr(e => Math.exp(e)), r_ = Rs(Yi, a_, "float32"), DK = { kernelName: Yi, backendName: "cpu", kernelFunc: r_ }, s_ = gr(e => Math.expm1(e)), RK = Rs(Zi, s_), MK = { kernelName: Zi, backendName: "cpu", kernelFunc: RK }, i_ = gr(e => Math.floor(e)), OK = Rs(Ji, i_), PK = { kernelName: Ji, backendName: "cpu", kernelFunc: OK }, o_ = Mt((e, t) => Math.floor(e / t)), LK = Zt(Qi, o_, null, "int32"), zK = { kernelName: Qi, backendName: "cpu", kernelFunc: LK }; function l_(e, t, n, a, r, s, i, o, l) { let u = Pe([a, s], n); for (let p = 0; p < a; p++) { let d = [], c = 0; for (let h = 0; h < r; h++) { let m = e[p * r + h]; c += m * i[h], d.push(m) } if (c < 0 || c >= l / s) throw new Error(`Invalid indices: ${d} does not index into ${o}`); for (let h = 0; h < s; h++)u.values[p * s + h] = t.get(...t.indexToLoc(c * s + h)) } return u } function u_(e, t, n) { let a = Pe(n, e.dtype); for (let r = 0; r < a.size; ++r) { let s = a.indexToLoc(r).slice(), i = s[0], o = s[2], l = t.locToIndex([i, o]); s[2] = t.values[l]; let u = e.locToIndex(s); 0 <= u && u < e.values.length && (a.values[r] = e.values[u]) } return a } var p_ = Mt((e, t) => e > t ? 1 : 0), WK = Zt(Au, p_, null, "bool"), BK = { kernelName: Au, backendName: "cpu", kernelFunc: WK }, c_ = Mt((e, t) => e >= t ? 1 : 0), VK = Zt(to, c_, null, "bool"), UK = { kernelName: to, backendName: "cpu", kernelFunc: VK }, d_ = Mt((e, t) => e < t ? 1 : 0), GK = Zt(Fu, d_, null, "bool"), HK = { kernelName: Fu, backendName: "cpu", kernelFunc: GK }, h_ = Mt((e, t) => e <= t ? 1 : 0), qK = Zt($u, h_, null, "bool"), jK = { kernelName: $u, backendName: "cpu", kernelFunc: qK }; function m_(e, t, n) { let a = (t - e) / (n - 1), r = w.makeZerosTypedArray(n, "float32"); r[0] = e; for (let s = 1; s < r.length; s++)r[s] = r[s - 1] + a; return r } var f_ = gr(e => Math.log(e)), KK = Rs(oo, f_), XK = { kernelName: oo, backendName: "cpu", kernelFunc: KK }; function g_(e, t, n, a) { let r = w.getTypedArrayFromDType(a, w.sizeFromShape(n)); for (let s = 0; s < r.length; ++s) { let i = s * t, o = e[i]; for (let l = 0; l < t; ++l) { let u = e[i + l]; (Number.isNaN(u) || u > o) && (o = u) } r[s] = o } return r } var b_ = Mt((e, t) => Math.max(e, t)), YK = Zt(co, b_), ZK = { kernelName: co, backendName: "cpu", kernelFunc: YK }, y_ = Mt((e, t) => Math.min(e, t)), JK = Zt(go, y_), QK = { kernelName: go, backendName: "cpu", kernelFunc: JK }, j1 = Mt((e, t) => e * t), e8 = G1((e, t, n, a) => ({ real: e * n - t * a, imag: e * a + t * n })), Jf = Zt(xo, j1, e8), t8 = { kernelName: xo, backendName: "cpu", kernelFunc: Jf }; function x_(e, t, n) { let a = w.createScalarValue(-1, n); return j1([], t, a, e, n) } function n8(e) { let { inputs: t, backend: n } = e, { x: a } = t; ge(a, "neg"); let r = n.data.get(a.dataId).values, [s, i] = x_(r, a.shape, a.dtype); return n.makeTensorInfo(i, a.dtype, s) } var a8 = { kernelName: Wu, backendName: "cpu", kernelFunc: n8 }, v_ = Mt((e, t) => e !== t ? 1 : 0), r8 = Zt(Bu, v_, null, "bool"), s8 = { kernelName: Bu, backendName: "cpu", kernelFunc: r8 }; function K1(e, t, n, a, r) { let s = t.length, i = w.sizeFromShape(t), o = w.computeStrides(t), l = w.computeStrides(r), u = w.getTypedArrayFromDType(n, w.sizeFromShape(r)); for (let p = 0; p < i; ++p) { let d = w.indexToLoc(p, s, o), c = new Array(d.length); for (let m = 0; m < c.length; m++)c[m] = d[a[m]]; let h = w.locToIndex(c, s, l); u[h] = e[p] } return u } function Bn(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r } = t, { perm: s } = n; ge(r, "transpose"); let i = r.shape.length, o = new Array(i); for (let p = 0; p < o.length; p++)o[p] = r.shape[s[p]]; let l = a.data.get(r.dataId).values, u = K1(l, r.shape, r.dtype, s, o); return { dataId: a.write(u, o, r.dtype), shape: o, dtype: r.dtype } } var i8 = { kernelName: Er, backendName: "cpu", kernelFunc: Bn }; function w_(e, t, n, a) { let [r, s] = T.computeOutAndReduceShapes(e, a), i = ga(t, "int32"), o = w.makeZerosTypedArray(w.sizeFromShape(r), i), l = w.sizeFromShape(s); for (let u = 0; u < o.length; ++u) { let p = u * l, d = 1; for (let c = 0; c < l; ++c)d *= n[p + c]; o[u] = d } return { outVals: o, outShape: r, outDtype: i } } function o8(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; ge(r, "prod"); let o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = T.getAxesPermutation(l, o), p = l, d = r, c = []; u != null && (d = Bn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), c.push(d), p = T.getInnerMostAxes(p.length, o)); let h = n.data.get(d.dataId).values, { outVals: m, outShape: f, outDtype: g } = w_(d.shape, d.dtype, h, p), b = f; return i && (b = T.expandShapeToKeepDim(f, l)), c.forEach(y => n.disposeIntermediateTensorInfo(y)), n.makeTensorInfo(b, g, m) } var l8 = { kernelName: So, backendName: "cpu", kernelFunc: o8 }; function u8(e, t, n) { e.forEach((a, r) => { if (a < 0 || a >= n) { let s = w.indexToLoc(r, t.length, w.computeStrides(t)).join(","); throw new Error(`indices[${s}] = ${a} is not in [0, ${n})`) } }) } function p8(e, t) { for (let n = 0; n < e.length; ++n) { let a = e[n], r = n === e.length - 1 ? t : e[n + 1].length; if (a.length === 0) throw new Error("Ragged splits may not be empty"); if (a[0] < 0) throw new Error("Ragged splits must be non-negative"); if (a[a.length - 1] > r) throw new Error("Ragged splits must not point past values"); for (let s = 1; s < a.length; ++s)if (a[s - 1] > a[s]) throw new Error("Ragged splits must be sorted in ascending order") } } function c8(e, t, n, a) { let r = [], s = 0, i = t.length - 1 + n.length, o = new Array(i).fill(null).map(() => [0]); p8(n, a); let l = 1; for (let u = 0; u < t.length - 1; ++u) { l *= t[u]; let p = t[u + 1]; for (let d = 1; d < l + 1; ++d)o[u].push(d * p) } for (let u = 0; u < e.length; ++u) { let p = e[u], d = e[u] + 1; for (let c = 0; c < n.length; ++c) { let h = n[c], m = c + t.length - 1; if (m >= 0) { let f = o[m], g = f[f.length - 1] - h[p]; for (let b = p; b < d; ++b)o[m].push(h[b + 1] + g) } p = h[p], d = h[d] } d !== p && (r.push([p, d]), s += d - p) } return { outSplits: o, valueSlices: r, numValues: s } } function d8(e) { let t = []; for (let n = 0; n < e.length; ++n) { let a = e[n].length, r = w.getArrayFromDType("int32", a); t.push(r), e[n].forEach((s, i) => r[i] = s) } return t } function yS(e, t) { let n = e.slice(0, t); for (; n.length < t;)n.push(1); for (let a = t; a < e.length; a++)n[t - 1] *= e[a]; return n } function h8(e, t, n, a, r, s) { let i = yS(t, 2)[1], o = yS(s, 2)[1], l = 0; for (let u of n) for (let p = u[0]; p < u[1]; ++p) { for (let d = 0; d < a; ++d)r[l * o + d] = e[p * i + d]; ++l } } function m8(e, t, n, a, r) { let s = t.slice(); s[0] = r; let i = w.getArrayFromDType(n, w.sizeFromShape(s)), o = e.length, l = o === 0 ? 0 : o / t[0]; return h8(e, t, a, l, i, s), [i, s] } function k_(e, t, n, a, r, s, i, o) { if (e.length === 0) throw new Error("paramsNestedSplits must be non empty"); if (t[0].length === 0) throw new Error("Split tensors must not be scalars"); let l = t[0][0] - 1; if (u8(s, i, l), a.length === 0) throw new Error("params.rank must be nonzero"); let u = a[0], { outSplits: p, valueSlices: d, numValues: c } = c8(s, i, e, u), h = d8(p), m = m8(n, a, r, d, c); return [h, m[0], m[1]] } var xS = 2147483647; function I_(e, t, n, a, r, s, i) { if (t.length > 1) throw new Error("starts must be a scalar or vector"); if (r.length > 1) throw new Error("limits must be a scalar or vector"); if (i.length > 1) throw new Error("deltas must be a scalar or vector"); let o = t.length === 0, l = r.length === 0, u = i.length === 0, p = []; o || p.push(t[0]), l || p.push(r[0]), u || p.push(i[0]); for (let g = 1; g < p.length; ++g)if (p[g] !== p[g - 1]) throw new Error("starts, limits, and deltas must have the same shape"); let d = p.length === 0 ? 1 : p[0], c = w.getArrayFromDType("int32", d + 1); c[0] = 0; for (let g = 0; g < d; ++g) { let b = o ? e[0] : e[g], y = l ? a[0] : a[g], x = u ? s[0] : s[g]; if (x === 0) throw new Error("Requires delta != 0"); let v; if (x > 0 && y < b || x < 0 && y > b) v = 0; else if (v = Math.ceil(Math.abs((y - b) / x)), v > xS) throw new Error(`Requires ((limit - start) / delta) <= ${xS}`); c[g + 1] = c[g] + v } let h = c[d], m = w.getArrayFromDType(n, h), f = 0; for (let g = 0; g < d; ++g) { let b = c[g + 1] - c[g], y = o ? e[0] : e[g], x = u ? s[0] : s[g]; for (let v = 0; v < b; ++v)m[f++] = y, y += x } return [c, m] } var Ca = T.RowPartitionType, f8 = class mv { constructor(t, n, a, r, s, i, o, l, u, p) { this.shape = t, this.shapeShape = n, this.values = a, this.valuesShape = r, this.valuesDType = s, this.defaultValue = i, this.defaultValueShape = o, this.rowPartitionValues = l, this.rowPartitionValuesShapes = u, this.rowPartitionTypes = T.getRowPartitionTypesHelper(p), this.raggedRank = T.getRaggedRank(this.rowPartitionTypes) } getRowPartitionTypeByDimension(t) { return this.rowPartitionTypes[0] === Ca.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t] } getRowPartitionTensor(t) { return this.rowPartitionTypes[0] === Ca.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t] } getMaxWidth(t) { let n = this.getRowPartitionTensor(t - 1); switch (this.getRowPartitionTypeByDimension(t - 1)) { case Ca.VALUE_ROWIDS: return mv.getMaxWidthValueRowID(n); case Ca.ROW_SPLITS: return mv.getMaxWidthRowSplit(n); default: throw new Error(`Cannot handle partition type ${Ca[this.getRowPartitionTypeByDimension(t - 1)]}`) } } static getMaxWidthRowSplit(t) { let n = t.length; if (n === 0 || n === 1) return 0; let a = 0; for (let r = 0; r < n - 1; ++r) { let s = t[r + 1] - t[r]; s > a && (a = s) } return a } static getMaxWidthValueRowID(t) { let n = t.length; if (n === 0) return 0; let a = 0, r = t[0], s = 0; for (let i = 1; i < n; ++i) { let o = t[i]; o !== r && (r = o, s = Math.max(i - a, s), a = i) } return Math.max(n - a, s) } tensorShapeFromTensor(t, n, a = !0) { if (n.length === 0) { if (t[0] === -1) return []; throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.") } return wS(t, a) } calculateOutputSize(t) { let n = this.valuesShape, a = this.defaultValueShape; T.validateDefaultValueShape(a, n); let r = this.tensorShapeFromTensor(this.shape, this.shapeShape), s = T.combineRaggedTensorToTensorShapes(this.raggedRank, r, n); s[0] < 0 && (s[0] = t); for (let i = 1; i <= this.raggedRank; ++i)s[i] < 0 && (s[i] = this.getMaxWidth(i)); return s } calculateFirstParentOutputIndex(t, n, a) { let r = Math.min(t, a), s = [], i = 0; for (let o = 0; o < r; ++o, i += n)s.push(i); for (let o = r; o < t; ++o)s.push(-1); return w.assert(s.length === t, () => "Final length of result must be equal to firstDimension."), s } calculateOutputIndexRowSplit(t, n, a, r) { let s = t.length, i = []; for (let o = 0; o < s - 1; ++o) { let l = t[o + 1] - t[o], u = Math.min(r, l), p = n[o]; p === -1 && (u = 0); for (let d = 0; d < u; ++d)i.push(p), p += a; for (let d = 0; d < l - u; ++d)i.push(-1) } if (s > 0 && i.length !== t[s - 1]) throw new Error("Invalid row split size."); return i } calculateOutputIndexValueRowID(t, n, a, r) { let s = t.length, i = []; if (s === 0) return []; let o = 0, l = t[0]; if (l >= n.length) throw new Error(`Got currentValueRowId=${l}, which is not less than ${n.length}`); let u = n[l]; i.push(u); for (let p = 1; p < s; ++p) { let d = t[p]; if (d === l) u >= 0 && (++o, o < r ? u += a : u = -1); else { if (o = 0, l = d, d >= n.length) throw new Error(`Got nextValueRowId=${d} which is not less than ${n.length}`); u = n[d] } i.push(u) } if (i.length !== t.length) throw new Error("Invalid row ids."); return i } calculateOutputIndex(t, n, a, r) { let s = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t); switch (i) { case Ca.VALUE_ROWIDS: return this.calculateOutputIndexValueRowID(s, n, a, r); case Ca.ROW_SPLITS: if (s.length - 1 > n.length) throw new Error(`Row partition size is greater than output size: ${s.length - 1} > ${n.length}`); return this.calculateOutputIndexRowSplit(s, n, a, r); default: throw new Error(`Unsupported partition type: ${Ca[i]}`) } } getFirstDimensionSize() { let t = this.rowPartitionValues[0]; if (this.rowPartitionTypes.length === 0) throw new Error("No row_partition_types given."); let n = this.rowPartitionTypes[0]; switch (n) { case Ca.FIRST_DIM_SIZE: return t[0]; case Ca.VALUE_ROWIDS: throw new Error("Cannot handle VALUE_ROWIDS in first dimension."); case Ca.ROW_SPLITS: return this.rowPartitionValuesShapes[0][0] - 1; default: throw new Error(`Cannot handle type ${Ca[n]}`) } } compute() { if (this.rowPartitionValues[0].length <= 0) throw new Error("Invalid first partition input. Tensor requires at least one element."); let t = this.getFirstDimensionSize(), n = this.calculateOutputSize(t), a = new Array(this.raggedRank + 1); a[a.length - 1] = 1; for (let i = a.length - 2; i >= 0; --i)a[i] = a[i + 1] * n[i + 1]; let r = wS(n, !1), s = w.getArrayFromDType(this.valuesDType, w.sizeFromShape(r)); if (a[0] * n[0] > 0) { let i = this.calculateFirstParentOutputIndex(t, a[0], n[0]); for (let o = 1; o <= this.raggedRank; ++o)i = this.calculateOutputIndex(o - 1, i, a[o], n[o]); this.setOutput(this.raggedRank, i, s, r) } return [r, s] } setOutput(t, n, a, r) { if (a.length === 0) return; let s = this.values, i = a, o = r.slice(); o = o.slice(t + 1); let l = w.sizeFromShape(o), u = n.length, p = this.defaultValue; if (p.length !== l && p.length !== 1) { let m = this.defaultValueShape; O(() => { let f = W(p, m); p = ri(f, o).dataSync() }) } let d = 0, c = 0, h = 0; for (let m = 0; m <= u; ++m) { let f = m < u ? n[m] : -1; if (f === h) { ++h; continue } if (c < h) { let g = s.subarray(d * l), b = i.subarray(c * l), y = (h - c) * l; vS(b, g, y) } if (m >= u) { let g = a.length; f = Math.floor(g / l) } if (f > h) if (this.defaultValue.length === 1) i.subarray(h * l, f * l).fill(this.defaultValue[0]), h = f; else for (; f > h;) { let g = i.slice(h * l); vS(g, p, l), ++h } f < 0 ? (d = m + 1, c = h) : (d = m, c = h, h = c + 1) } } }; function vS(e, t, n) { for (let a = 0; a < n; a++)e[a] = t[a] } function wS(e, t) { let n = []; for (let a of e) { if (a < 0) { if (!t) throw new Error(`Dimension ${a} must be >= 0`); if (a < -1) throw new Error(`Dimension ${a} must be >= -1`); a = -1 } n.push(a) } return n } function S_(e, t, n, a, r, s, i, o, l, u) { return new f8(e, t, n, a, r, s, i, o, l, u).compute() } function X1(e, t, n, a) { let r = e === t, s = e < t && n < 0, i = t < e && n > 1; if (r || s || i) return w.makeZerosTypedArray(0, a); let o = Math.abs(Math.ceil((t - e) / n)), l = w.makeZerosTypedArray(o, a); t < e && n === 1 && (n = -1), l[0] = e; for (let u = 1; u < l.length; u++)l[u] = l[u - 1] + n; return l } var N_ = gr(e => 1 / Math.sqrt(e)), g8 = Rs($o, N_), b8 = { kernelName: $o, backendName: "cpu", kernelFunc: g8 }; function ai(e, t, n, a, r, s, i, o, l, u) { let p = [a / r, r], d = e.values, c = t.values; if (a === 0) return Pe(n, t.dtype); let h = l instanceof Wt ? l : Pe(p, t.dtype); typeof l == "string" || typeof l == "number" ? h.values.fill(l) : typeof l == "boolean" && h.values.fill(+l); for (let m = 0; m < s; m++) { let f = [], g = 0; for (let b = 0; b < i; b++) { let y = d[m * i + b]; f.push(y), g += y * o[b] } if (g < 0 || g >= a / r) throw new Error(`Invalid indices: ${f} does not index into ${n}`); for (let b = 0; b < r; b++)u ? h.values[g * r + b] += c[m * r + b] : h.values[g * r + b] = t.rank === 0 ? c[0] : c[m * r + b] } return h } var y8 = gr(e => 1 / (1 + Math.exp(-e))), T_ = lt(Po, e => 1 / (1 + Math.exp(-e))), x8 = { kernelName: Po, backendName: "cpu", kernelFunc: T_ }; function Im(e, t, n, a, r) { let s = Kt.isSliceContinous(a, t, n), i = w.sizeFromShape(n), o = w.computeStrides(a); if (s) { let d = Kt.computeFlatOffset(t, o); return r === "string" ? e.slice(d, d + i) : e.subarray(d, d + i) } let l = r === "string" ? T.fromUint8ToStringArray(e) : e, u = Pe(a, r, l), p = Pe(n, r); for (let d = 0; d < p.size; ++d) { let c = p.indexToLoc(d), h = c.map((m, f) => m + t[f]); p.set(u.get(...h), ...c) } return r === "string" ? T.fromStringArrayToUint8(p.values) : p.values } function wi(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { begin: s, size: i } = a; ge(r, "slice"); let [o, l] = Kt.parseSliceParams(r, s, i); Kt.assertParamsValid(r, o, l); let u = n.data.get(r.dataId).values, p = Im(u, o, l, r.shape, r.dtype); return n.makeTensorInfo(l, r.dtype, p) } var v8 = { kernelName: ep, backendName: "cpu", kernelFunc: wi }; function C_(e, t, n, a, r, s, i) { let o = t[0], l = s[0], u = new Array(l), p = new Array(o), d = t[1]; if (l === 0) { if (o !== 0) throw new Error(T.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o)); let g = w.getArrayFromDType(n, 0), b = w.getArrayFromDType(r, 0); return [g, [0, d], b, u, p] } let c = !0, h = 0, m = new Array(l).fill(0); for (let g = 0; g < o; ++g) { let b = e[g * d]; if (b < 0) throw new Error(T.getSparseFillEmptyRowsNegativeIndexErrorMessage(g, b)); if (b >= l) throw new Error(T.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g, b, l)); ++m[b], c = c && b >= h, h = b } let f = !0; for (let g = 0; g < l; ++g) { let b = m[g] === 0; u[g] = b, f = f && !b, m[g] = Math.max(m[g], 1), g > 0 && (m[g] += m[g - 1]) } if (f && c) { let g = e, b = a; for (let y = 0; y < o; ++y)p[y] = y; return [g, [o, d], b, u, p] } else { let g = m[l - 1], b = w.getArrayFromDType(n, g * d), y = w.getArrayFromDType(r, g), x = new Array(l).fill(0); for (let v = 0; v < o; ++v) { let I = e[v * d], N = x[I], C = (I === 0 ? 0 : m[I - 1]) + N; x[I]++; for (let _ = 0; _ < d; ++_)b[C * d + _] = e[v * d + _]; y[C] = a[v], p[v] = C } for (let v = 0; v < l; ++v)if (x[v] === 0) { let I = v === 0 ? 0 : m[v - 1]; b[I * d + 0] = v; for (let N = 1; N < d; ++N)b[I * d + N] = 0; y[I] = i } return [b, [g, d], y, u, p] } } function E_(e, t, n, a, r) { let s = w.sizeFromShape(a), i = t[0], o = r.length, l = [], u = 1, p = -1; for (let f = 0; f < o; ++f) { let g = r[f]; if (g === -1) { if (p !== -1) throw new Error(T.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(p, f)); p = f, l.push(1) } else { if (g < 0) throw new Error(T.getSparseReshapeNegativeOutputDimErrorMessage(f, g)); u *= g, l.push(g) } } if (p !== -1) { if (u <= 0) throw new Error(T.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage()); let f = Math.trunc(s / u); if (u * f !== s) throw new Error(T.getSparseReshapeInputOutputMultipleErrorMessage(a, l)); l[p] = f } if (w.sizeFromShape(l) !== s) throw new Error(T.getSparseReshapeInputOutputMismatchErrorMessage(a, l)); let d = a.length, c = []; if (d > 0) { c[d - 1] = 1; for (let f = d - 2; f >= 0; --f)c[f] = c[f + 1] * a[f + 1] } let h = []; if (o > 0) { h[o - 1] = 1; for (let f = o - 2; f >= 0; --f)h[f] = h[f + 1] * l[f + 1] } let m = w.getArrayFromDType(n, i * o); for (let f = 0; f < i; ++f) { let g = 0; for (let b = 0; b < d; ++b)g += e[f * d + b] * c[b]; for (let b = 0; b < o; ++b)m[f * o + b] = Math.trunc(g / h[b]), g %= h[b] } return [m, [i, o], l] } function Y1(e, t, n, a, r, s = !1, i = 0) { let o = a.length, l = [t[0], e.length / t[0]], u = l[1], p = o > 0 ? r[o - 1] + 1 : 0; if (p < 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage()); let d = t.slice(); d[0] = p; let c = d.reduce((y, x) => y * x, 1), h = w.getArrayFromDType(n, c); if (o === 0) return p > 0 && h.fill(i), [h, d]; if (p <= 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage()); let m = 0, f = 1, g = 0, b = r[m]; for (; ;) { let y = 0; if (f < o) { if (y = r[f], b === y) { ++f; continue } if (b >= y) throw new Error(T.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage()) } if (b < 0 || b >= p) throw new Error(T.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b, p)); b > g && h.fill(i, g * u, b * u); for (let x = m; x < f; ++x) { let v = a[x]; if (v < 0 || v >= l[0]) throw new Error(T.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(x, a[x], l[0])); for (let I = 0; I < u; I++)h[b * u + I] += e[v * u + I] } if (s) for (let x = 0; x < u; x++)h[b * u + x] /= f - m; if (m = f, ++f, g = b + 1, b = y, f > o) break } return g < p && h.fill(i, g * u, p * u), [h, d] } var w8 = gr(e => Math.sqrt(e)), k8 = lt(zo, e => Math.sqrt(e)), I8 = { kernelName: zo, backendName: "cpu", kernelFunc: k8 }, __ = Mt((e, t) => { let n = e - t; return n * n }), S8 = Zt(Vo, __), N8 = { kernelName: Vo, backendName: "cpu", kernelFunc: S8 }, A_ = gr((e, t) => { let { pattern: n, replaceGlobal: a, rewrite: r } = t; return e.replace(new RegExp(n, a ? "g" : ""), r) }), T8 = Rs(ed, A_), C8 = { kernelName: ed, backendName: "cpu", kernelFunc: T8 }; function F_(e, t, n, a) { let r = Pe(e, t.dtype); for (let s = 0; s < r.size; s++) { let i = r.indexToLoc(s), o = new Array(i.length); for (let l = 0; l < o.length; l++)o[l] = i[l] * n[l] + a[l]; r.set(t.get(...o), ...i) } return r } var E8 = class { constructor(e, t, n, a, r, s) { this.separator = w.encodeString(e), this.nGramWidths = t, this.leftPad = w.encodeString(n), this.rightPad = w.encodeString(a), this.padWidth = r, this.preserveShort = s } getPadWidth(e) { return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1) } getNumNGrams(e, t) { let n = this.getPadWidth(t); return Math.max(0, e + 2 * n - t + 1) } createNGrams(e, t, n, a, r, s) { for (let i = 0; i < r; ++i) { let o = this.getPadWidth(s), l = Math.max(0, o - i), u = Math.max(0, o - (r - (i + 1))), p = s - (l + u), d = t + (l > 0 ? 0 : i - o), c = 0; c += l * this.leftPad.length; for (let b = 0; b < p; ++b)c += e[d + b].length; c += u * this.rightPad.length; let h = l + u + p - 1; c += h * this.separator.length, n[a + i] = new Uint8Array(c); let m = n[a + i], f = 0, g = b => b.forEach(y => m[f++] = y); for (let b = 0; b < l; ++b)g(this.leftPad), g(this.separator); for (let b = 0; b < p - 1; ++b)g(e[d + b]), g(this.separator); if (p > 0) { g(e[d + p - 1]); for (let b = 0; b < u; ++b)g(this.separator), g(this.rightPad) } else { for (let b = 0; b < u - 1; ++b)g(this.rightPad), g(this.separator); g(this.rightPad) } } } compute(e, t) { let n = e.length, a = t.length; if (a > 0) { let o = t[0]; if (o !== 0) throw new Error(`First split value must be 0, got ${o}`); for (let l = 1; l < a; ++l) { let u = t[l] >= o; if (u = u && t[l] <= n, !u) throw new Error(`Invalid split value ${t[l]}, must be in [${o}, ${n}]`); o = t[l] } if (o !== n) throw new Error(`Last split value must be data size. Expected ${n}, got ${o}`) } let r = a - 1, s = w.getArrayFromDType("int32", a); if (n === 0 || a === 0) { let o = new Array(n); for (let l = 0; l <= r; ++l)s[l] = 0; return [o, s] } s[0] = 0; for (let o = 1; o <= r; ++o) { let l = t[o] - t[o - 1], u = 0; this.nGramWidths.forEach(p => { u += this.getNumNGrams(l, p) }), this.preserveShort && l > 0 && u === 0 && (u = 1), s[o] = s[o - 1] + u } let i = new Array(s[r]); for (let o = 0; o < r; ++o) { let l = t[o], u = s[o]; if (this.nGramWidths.forEach(p => { let d = t[o + 1] - t[o], c = this.getNumNGrams(d, p); this.createNGrams(e, l, i, u, c, p), u += c }), this.preserveShort && u === s[o]) { let p = t[o + 1] - t[o]; if (p === 0) continue; let d = p + 2 * this.padWidth; this.createNGrams(e, l, i, u, 1, d) } } return [i, s] } }; function Z1(e, t, n, a, r, s, i, o) { return new E8(n, a, r, s, i, o).compute(e, t) } function _8(e, t, n, a) { if (!e.length) return; if (t.length === 0) { for (let s = 0; s < e.length; ++s)a.push(e.subarray(s, s + 1)); return } if (t.length === 1) { let s = t[0], i = e.indexOf(s); for (; i !== -1;) { let o = e.subarray(0, i); (!n || o.length !== 0) && a.push(o), e = e.subarray(i + 1), i = e.indexOf(s) } (!n || e.length !== 0) && a.push(e); return } let r = 0; for (let s = 0; s < e.length + 1; s++)if (s === e.length || t.indexOf(e[s]) !== -1) { let i = e.subarray(r, s); (!n || i.length !== 0) && a.push(i), r = s + 1 } } function J1(e, t, n) { let a = e.length, r = [], s = 0, i = 0, o = new Array(a); for (let c = 0; c < a; ++c) { let h = r.length; _8(e[c], t, n, r); let m = r.length - h; o[c] = m, s += m, i = Math.max(i, m) } let l = w.getArrayFromDType("int32", s * 2), u = new Array(s), p = [a, i], d = 0; for (let c = 0; c < a; ++c)for (let h = 0; h < o[c]; ++h)l[d * 2] = c, l[d * 2 + 1] = h, u[d] = r[d], ++d; return [l, u, p] } function Q1(e, t) { let n = w.getArrayFromDType("int32", e.length); for (let a = 0; a < e.length; ++a)n[a] = w.fingerPrint64(e[a]).modulo(t).getLowBitsUnsigned(); return n } var $_ = Mt((e, t) => e - t), A8 = G1((e, t, n, a) => ({ real: e - n, imag: t - a })), ek = Zt(Uo, $_, A8), F8 = { kernelName: Uo, backendName: "cpu", kernelFunc: ek }; function D_(e, t) { let n = new Array(e.rank); for (let r = 0; r < n.length; r++)n[r] = e.shape[r] * t[r]; let a = Pe(n, e.dtype); for (let r = 0; r < a.values.length; ++r) { let s = a.indexToLoc(r), i = new Array(e.rank); for (let l = 0; l < i.length; l++)i[l] = s[l] % e.shape[l]; let o = e.locToIndex(i); a.values[r] = e.values[o] } return a } var lc = (e, t) => { let n = t.value - e.value; return n === 0 ? e.index - t.index : n }; function R_(e, t, n = 0, a = e.length - 1) { for (; a > n;) { if (a - n > 600) { let o = a - n + 1, l = t - n + 1, u = Math.log(o), p = .5 * Math.exp(2 * u / 3), d = .5 * Math.sqrt(u * p * (o - p) / o) * Math.sign(l - o / 2), c = Math.max(n, Math.floor(t - l * p / o + d)), h = Math.min(a, Math.floor(t + (o - l) * p / o + d)); R_(e, t, c, h) } let r = e[t], s = n, i = a; for (w.swap(e, n, t), lc(e[a], r) > 0 && w.swap(e, n, a); s < i;) { for (w.swap(e, s, i), s++, i--; lc(e[s], r) < 0;)s = s + 1; for (; lc(e[i], r) > 0;)i = i - 1 } lc(e[n], r) === 0 ? w.swap(e, n, i) : (i = i + 1, w.swap(e, i, a)), i <= t && (n = i + 1), t <= i && (a = i - 1) } } function M_(e, t, n, a, r) { let s = t[t.length - 1], [i, o] = [e.length / s, s], l = w.getTypedArrayFromDType(n, i * a), u = w.getTypedArrayFromDType("int32", i * a); for (let d = 0; d < i; d++) { let c = d * o, h = e.subarray(c, c + o), m = new Array(h.length); h.forEach((y, x) => m[x] = { value: y, index: x }), a < m.length && (R_(m, a), m = m.slice(0, a)), r && m.sort(lc); let f = d * a, g = l.subarray(f, f + a), b = u.subarray(f, f + a); for (let y = 0; y < a; y++)g[y] = m[y].value, b[y] = m[y].index } let p = t.slice(); return p[p.length - 1] = a, [Pe(p, n, l), Pe(p, "int32", u)] } function tk(e, t, n, a) { let r = w.parseAxisParam(t, n)[0], s = [1, n[0], 1]; for (let m = 0; m < r; m++)s[0] *= n[m]; s[1] = n[r]; for (let m = r + 1; m < n.length; m++)s[2] *= n[m]; let i = new Map, o = new Int32Array(n[r]), l = new Wt(s, a, e), u = [], p = s[0] === 1 && s[2] === 1; for (let m = 0; m < n[r]; m++) { let f; if (p) f = e[m].toString(); else { let b = []; for (let y = 0; y < s[0]; y++)for (let x = 0; x < s[2]; x++)b.push(l.get(y, m, x)); f = b.join(",") } let g = i.get(f); if (g != null) o[m] = g; else { let b = i.size; i.set(f, b), o[m] = b, u.push(m) } } let d = s.slice(); d[1] = i.size; let c = new Wt(d, a); u.forEach((m, f) => { for (let g = 0; g < s[0]; g++)for (let b = 0; b < s[2]; b++)c.set(l.get(g, m, b), g, f, b) }); let h = n.slice(); return h[r] = d[1], { outputValues: c.values, outputShape: h, indices: o } } var $8 = "4.16.0"; Ym("cpu", () => new V1, 1); var O_ = lt(Ki, e => e >= 0 ? e : Math.exp(e) - 1), D8 = { kernelName: Ki, backendName: "cpu", kernelFunc: O_ }; function P_(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { alpha: s } = a; ge([r], "leakyRelu"); let i = w.sizeFromShape(r.shape), o = n.data.get(r.dataId).values, l = w.getTypedArrayFromDType("float32", i); for (let u = 0; u < o.length; u++)l[u] = o[u] < 0 ? s * o[u] : o[u]; return n.makeTensorInfo(r.shape, "float32", l) } var R8 = { kernelName: io, backendName: "cpu", kernelFunc: P_ }, M8 = Mt((e, t) => e < 0 ? t * e : e); function L_(e) { let { inputs: t, backend: n } = e, { x: a, alpha: r } = t; ge([a, r], "prelu"); let s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, [o, l] = M8(a.shape, r.shape, s, i, "float32"); return n.makeTensorInfo(l, "float32", o) } var O8 = { kernelName: Io, backendName: "cpu", kernelFunc: L_ }, z_ = lt(To, e => Math.max(0, e)), P8 = { kernelName: To, backendName: "cpu", kernelFunc: z_ }, W_ = lt(_o, e => Math.min(Math.max(0, e), 6)), L8 = { kernelName: _o, backendName: "cpu", kernelFunc: W_ }; function Sm(e, t, n, a, r) { if (n === "linear") return dr({ inputs: { x: t }, backend: e }); if (n === "relu") return z_({ inputs: { x: t }, backend: e }); if (n === "elu") return O_({ inputs: { x: t }, backend: e }); if (n === "relu6") return W_({ inputs: { x: t }, backend: e }); if (n === "prelu") return L_({ inputs: { x: t, alpha: a }, backend: e }); if (n === "leakyrelu") return P_({ inputs: { x: t }, backend: e, attrs: { alpha: r } }); if (n === "sigmoid") return T_({ inputs: { x: t }, backend: e }); throw new Error(`Activation ${n} has not been implemented for the CPU backend.`) } function xt(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { shape: s } = a, i = w.sizeFromShape(r.shape), o = w.inferFromImplicitShape(s, i), l = w.sizeFromShape(o); w.assert(i === l, () => `The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), n.incRef(r.dataId); let u = n.data.get(r.dataId); if (u.complexTensorInfos != null) { let p = u.complexTensorInfos.real, d = u.complexTensorInfos.imag; p.shape = o, d.shape = o } return { dataId: r.dataId, shape: o, dtype: r.dtype } } var z8 = { kernelName: ju, backendName: "cpu", kernelFunc: xt }; function B_(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a; ge([r, s], "matMul"); let l = r.shape.length, u = s.shape.length, p = i ? r.shape[l - 2] : r.shape[l - 1], d = o ? s.shape[u - 1] : s.shape[u - 2], c = i ? r.shape[l - 1] : r.shape[l - 2], h = o ? s.shape[u - 2] : s.shape[u - 1], m = r.shape.slice(0, -2), f = s.shape.slice(0, -2), g = w.sizeFromShape(m), b = w.sizeFromShape(f), y = cp.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)).concat([c, h]); w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`); let x = i ? [g, p, c] : [g, c, p], v = o ? [b, h, d] : [b, d, h], I = xt({ inputs: { x: r }, backend: n, attrs: { shape: x } }), N = xt({ inputs: { x: s }, backend: n, attrs: { shape: v } }), C = i ? I.shape[1] : I.shape[2], _ = i ? I.shape[2] : I.shape[1], F = o ? N.shape[1] : N.shape[2], D = Math.max(g, b), $ = n.data.get(I.dataId).values, S = n.data.get(N.dataId).values, M = w.computeStrides(I.shape), B = w.computeStrides(N.shape), [U, H, j] = i ? [M[0], 1, M[1]] : [M[0], M[1], 1], [K, Z, J] = o ? [1, B[1], B[0]] : [B[1], 1, B[0]], ee = _ * F, ae = Pe([D, _, F], I.dtype), te = ae.values, se = n.blockSize; for (let ie = 0; ie < D; ie++) { let xe = ie % g, ue = ie % b; for (let ye = 0; ye < _; ye += se) { let ke = Math.min(ye + se, _); for (let Se = 0; Se < F; Se += se) { let Le = Math.min(Se + se, F); for (let Ge = 0; Ge < C; Ge += se) { let mt = Math.min(Ge + se, C); for (let st = ye; st < ke; st++)for (let at = Se; at < Le; at++) { let rt = 0; for (let Re = Ge; Re < mt; Re++) { let gt = $[xe * U + st * H + Re * j], qn = S[Re * K + at * Z + ue * J]; rt += gt * qn } te[ie * ee + (st * F + at)] += rt } } } } } return n.disposeIntermediateTensorInfo(I), n.disposeIntermediateTensorInfo(N), n.makeTensorInfo(y, ae.dtype, ae.values) } var W8 = { kernelName: Oi, backendName: "cpu", kernelFunc: B_ }; function B8(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s, bias: i, preluActivationWeights: o } = t, { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a, c, h, m, f = []; c = B_({ inputs: { a: r, b: s }, attrs: { transposeA: l, transposeB: u }, backend: n }), i && (h = su({ inputs: { a: c, b: i }, backend: n }), f.push(c), c = h), p && (m = Sm(n, c, p, o, d), f.push(c), c = m); for (let g of f) n.disposeIntermediateTensorInfo(g); return c } var V8 = { kernelName: oi, backendName: "cpu", kernelFunc: B8 }, U8 = lt(Ci, e => Math.acos(e)), G8 = { kernelName: Ci, backendName: "cpu", kernelFunc: U8 }, H8 = lt(Ei, e => Math.acosh(e)), q8 = { kernelName: Ei, backendName: "cpu", kernelFunc: H8 }; function j8(e) { let { inputs: t, backend: n } = e, a = t; ge(t, "addN"); let r = a.map(o => n.data.get(o.dataId).values), s = Pe(a[0].shape, a[0].dtype), i = s.values; for (let o = 0; o < a.length; o++) { let l = r[o]; for (let u = 0; u < i.length; u++)i[u] += l[u] } return n.makeTensorInfo(s.shape, s.dtype, s.values) } var K8 = { kernelName: _i, backendName: "cpu", kernelFunc: j8 }; function X8(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; ge(r, "all"); let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r; u != null && (p = Bn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("all", l, p.shape.length); let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values; for (let b = 0; b < m.length; ++b) { let y = b * h, x = f[y]; for (let v = 0; v < h; ++v) { let I = f[y + v]; x = x && I } m[b] = x } u != null && n.disposeIntermediateTensorInfo(p); let g = n.makeTensorInfo(d, p.dtype, m); if (i) { let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } }); return n.disposeIntermediateTensorInfo(g), y } return g } var Y8 = { kernelName: pu, backendName: "cpu", kernelFunc: X8 }; function Z8(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; ge(r, "any"); let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r; u != null && (p = Bn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("any", l, p.shape.length); let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values; for (let b = 0; b < m.length; ++b) { let y = b * h, x = f[y]; for (let v = 0; v < h; ++v) { let I = f[y + v]; x = x || I } m[b] = x } u != null && n.disposeIntermediateTensorInfo(p); let g = n.makeTensorInfo(d, p.dtype, m); if (i) { let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } }); return n.disposeIntermediateTensorInfo(g), y } return g } var J8 = { kernelName: cu, backendName: "cpu", kernelFunc: Z8 }; function Q8(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s } = a; ge(r, "argMax"); let i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = []; o != null && (l = Bn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), i = [i[0]], T.assertAxesAreInnerMostDims("argMax", i, l.shape.length); let [p, d] = T.computeOutAndReduceShapes(l.shape, i), c = w.sizeFromShape(p), h = w.makeZerosTypedArray(c, "int32"), m = w.sizeFromShape(d), f = n.data.get(l.dataId).values; for (let g = 0; g < h.length; ++g) { let b = g * m, y = f[b], x = 0; for (let v = 0; v < m; ++v) { let I = f[b + v]; I > y && (y = I, x = v) } h[g] = x } return u.forEach(g => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(p, "int32", h) } var eX = { kernelName: du, backendName: "cpu", kernelFunc: Q8 }; function tX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s } = a; ge(r, "argMin"); let i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = []; o != null && (l = Bn({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), i = [i[0]], T.assertAxesAreInnerMostDims("argMin", i, l.shape.length); let [p, d] = T.computeOutAndReduceShapes(l.shape, i), c = w.sizeFromShape(p), h = w.makeZerosTypedArray(c, "int32"), m = w.sizeFromShape(d), f = n.data.get(l.dataId).values; for (let g = 0; g < h.length; ++g) { let b = g * m, y = f[b], x = 0; for (let v = 0; v < m; ++v) { let I = f[b + v]; I < y && (y = I, x = v) } h[g] = x } return u.forEach(g => n.disposeIntermediateTensorInfo(g)), n.makeTensorInfo(p, "int32", h) } var nX = { kernelName: hu, backendName: "cpu", kernelFunc: tX }, aX = lt(Ai, e => Math.asin(e)), rX = { kernelName: Ai, backendName: "cpu", kernelFunc: aX }, sX = lt(Fi, e => Math.asinh(e)), iX = { kernelName: Fi, backendName: "cpu", kernelFunc: sX }, oX = lt($i, e => Math.atan(e)), lX = { kernelName: $i, backendName: "cpu", kernelFunc: oX }, uX = Mt((e, t) => Math.atan2(e, t)), pX = Zt(Ri, uX), cX = { kernelName: Ri, backendName: "cpu", kernelFunc: pX }, dX = lt(Di, e => Math.atanh(e)), hX = { kernelName: Di, backendName: "cpu", kernelFunc: dX }; function nk(e, t, n, a, r, s) { let i = r.strideHeight, o = r.strideWidth, l = r.dilationHeight, u = r.dilationWidth, p = r.effectiveFilterHeight, d = r.effectiveFilterWidth, c = r.padInfo.top, h = r.padInfo.left, m = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, f = Pe(r.outShape, n), g = f.values, b = r.outShape[1] * r.outShape[2] * r.outShape[3], y = r.outShape[2] * r.outShape[3], x = r.outShape[3]; for (let v = 0; v < r.batchSize; ++v) { let I = v * b, N = v * a[0]; for (let C = 0; C < r.inChannels; ++C)for (let _ = 0; _ < r.outHeight; ++_) { let F = _ * i - c, D = Math.max(0, F), $ = Math.min(r.inHeight, p + F), S = I + _ * y; for (let M = 0; M < r.outWidth; ++M) { let B = M * o - h, U = Math.max(0, B), H = Math.min(r.inWidth, d + B), j = m, K = 0, Z = 0; for (let ee = D; ee < $; ee += l) { let ae = N + ee * a[1]; for (let te = U; te < H; te += u) { let se = ae + te * a[2], ie = e[se + C]; s === "max" && ie > j ? j = ie : s === "avg" && (K += ie, Z++) } if (isNaN(j)) break } let J = S + M * x + C; g[J] = s === "avg" ? K / Z : j } } } return f } function V_(e, t, n, a, r = !1, s = !1) { let i = Pe(a.outShape, "int32"), o = a.strideHeight, l = a.strideWidth, u = a.dilationHeight, p = a.dilationWidth, d = a.effectiveFilterHeight, c = a.effectiveFilterWidth, h = a.padInfo.top, m = a.padInfo.left, f = Pe(t, n, e); for (let g = 0; g < a.batchSize; ++g)for (let b = 0; b < a.inChannels; ++b)for (let y = 0; y < a.outHeight; ++y) { let x = y * o - h, v = x; for (; v < 0;)v += u; let I = Math.min(a.inHeight, d + x); for (let N = 0; N < a.outWidth; ++N) { let C = N * l - m, _ = C; for (; _ < 0;)_ += p; let F = Math.min(a.inWidth, c + C), D = Number.NEGATIVE_INFINITY, $ = -1; for (let S = v; S < I; S += u) { let M = S - x; for (let B = _; B < F; B += p) { let U = B - C, H = f.get(g, S, B, b); H > D && (D = H, r ? $ = s ? ((g * a.inHeight + S) * a.inWidth + B) * a.inChannels + b : (S * a.inWidth + B) * a.inChannels + b : $ = M * c + U) } } i.set($, g, y, N, b) } } return i } function U_(e, t, n, a, r, s) { let i = r.strideDepth, o = r.strideHeight, l = r.strideWidth, u = r.dilationDepth, p = r.dilationHeight, d = r.dilationWidth, c = r.effectiveFilterDepth, h = r.effectiveFilterHeight, m = r.effectiveFilterWidth, f = r.padInfo.front, g = r.padInfo.top, b = r.padInfo.left, y = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, x = Pe(r.outShape, n), v = x.values, I = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], N = r.outShape[2] * r.outShape[3] * r.outShape[4], C = r.outShape[3] * r.outShape[4], _ = r.outShape[4]; for (let F = 0; F < r.batchSize; ++F) { let D = F * I, $ = F * a[0]; for (let S = 0; S < r.inChannels; ++S)for (let M = 0; M < r.outDepth; ++M) { let B = M * i - f, U = B; for (; U < 0;)U += u; let H = Math.min(r.inDepth, c + B), j = D + M * N; for (let K = 0; K < r.outHeight; ++K) { let Z = K * o - g, J = Z; for (; J < 0;)J += p; let ee = Math.min(r.inHeight, h + Z), ae = j + K * C; for (let te = 0; te < r.outWidth; ++te) { let se = te * l - b, ie = se; for (; ie < 0;)ie += d; let xe = Math.min(r.inWidth, m + se), ue = ae + te * _, ye = y, ke = 0, Se = 0; for (let Ge = U; Ge < H; Ge += u) { let mt = $ + Ge * a[1]; for (let st = J; st < ee; st += p) { let at = mt + st * a[2]; for (let rt = ie; rt < xe; rt += d) { let Re = at + rt * a[3], gt = e[Re + S]; if (s === "max" && gt > ye ? ye = gt : s === "avg" && (ke += gt, Se++), isNaN(ye)) break } if (isNaN(ye)) break } if (isNaN(ye)) break } let Le = ue + S; v[Le] = s === "avg" ? ke / Math.max(Se, 1) : ye } } } } return x } function mX(e, t) { let n = Pe(t.outShape, "int32"), a = t.strideDepth, r = t.strideHeight, s = t.strideWidth, i = t.dilationDepth, o = t.dilationHeight, l = t.dilationWidth, u = t.effectiveFilterDepth, p = t.effectiveFilterHeight, d = t.effectiveFilterWidth, c = t.padInfo.front, h = t.padInfo.top, m = t.padInfo.left; for (let f = 0; f < t.batchSize; ++f)for (let g = 0; g < t.inChannels; ++g)for (let b = 0; b < t.outDepth; ++b) { let y = b * a - c, x = y; for (; x < 0;)x += i; let v = Math.min(t.inDepth, u + y); for (let I = 0; I < t.outHeight; ++I) { let N = I * r - h, C = N; for (; C < 0;)C += o; let _ = Math.min(t.inHeight, p + N); for (let F = 0; F < t.outWidth; ++F) { let D = F * s - m, $ = D; for (; $ < 0;)$ += l; let S = Math.min(t.inWidth, d + D), M = Number.NEGATIVE_INFINITY, B = -1; for (let U = x; U < v; U += i) { let H = U - y; for (let j = C; j < _; j += o) { let K = j - N; for (let Z = $; Z < S; Z += l) { let J = Z - D, ee = e.get(f, U, j, Z, g); ee >= M && (M = ee, B = H * p * d + K * p + J) } } } n.set(B, f, b, I, F, g) } } } return n } function fX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t; ge(r, "avgPool"); let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1; w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`); let p = T.computePool2DInfo(r.shape, s, i, u, o, l), d; if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) d = dr({ inputs: { x: r }, backend: n }); else { let c = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), m = nk(c, r.shape, r.dtype, h, p, "avg"); d = n.makeTensorInfo(p.outShape, r.dtype, m.values) } return d } var gX = { kernelName: Mi, backendName: "cpu", kernelFunc: fX }; function bX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a; ge(r, "avgPool3d"); let p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.data.get(r.dataId).values, c = U_(d, r.shape, r.dtype, w.computeStrides(r.shape), p, "avg"); return n.makeTensorInfo(c.shape, "float32", c.values) } var yX = { kernelName: mu, backendName: "cpu", kernelFunc: bX }; function xX(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a; ge([r, s], "avgPool3DGrad"); let p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = p.strideDepth, c = p.strideHeight, h = p.strideWidth, m = p.filterDepth, f = p.filterHeight, g = p.filterWidth, b = p.dilationDepth, y = p.dilationHeight, x = p.dilationWidth, v = p.effectiveFilterDepth, I = p.effectiveFilterHeight, N = p.effectiveFilterWidth, C = v - 1 - p.padInfo.front, _ = N - 1 - p.padInfo.left, F = I - 1 - p.padInfo.top, D = Pe(s.shape, "float32"), $ = 1 / (m * f * g), S = n.bufferSync(r); for (let M = 0; M < p.batchSize; ++M)for (let B = 0; B < p.inChannels; ++B)for (let U = 0; U < p.inDepth; ++U)for (let H = 0; H < p.inHeight; ++H)for (let j = 0; j < p.inWidth; ++j) { let K = U - C, Z = H - F, J = j - _, ee = 0; for (let ae = 0; ae < v; ae += b) { let te = (K + ae) / d; if (!(te < 0 || te >= p.outDepth || Math.floor(te) !== te)) for (let se = 0; se < I; se += y) { let ie = (Z + se) / c; if (!(ie < 0 || ie >= p.outHeight || Math.floor(ie) !== ie)) for (let xe = 0; xe < N; xe += x) { let ue = (J + xe) / h; if (ue < 0 || ue >= p.outWidth || Math.floor(ue) !== ue) continue; let ye = S.get(M, te, ie, ue, B); ee += ye } } } D.set(ee * $, M, U, H, j, B) } return n.makeTensorInfo(D.shape, D.dtype, D.values) } var vX = { kernelName: Wc, backendName: "cpu", kernelFunc: xX }; function wX(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, i = s; ge([r, s], "avgPoolGrad"); let { filterSize: o, strides: l, pad: u } = a, p = T.computePool2DInfo(i.shape, o, l, 1, u), d = p.strideHeight, c = p.strideWidth, h = p.filterHeight, m = p.filterWidth, f = p.dilationHeight, g = p.dilationWidth, b = p.effectiveFilterHeight, y = p.effectiveFilterWidth, x = y - 1 - p.padInfo.left, v = b - 1 - p.padInfo.top, I = Pe(i.shape, "float32"), N = 1 / (h * m), C = n.data.get(r.dataId).values, _ = Pe(r.shape, "float32", C); for (let F = 0; F < p.batchSize; ++F)for (let D = 0; D < p.inChannels; ++D)for (let $ = 0; $ < p.inHeight; ++$)for (let S = 0; S < p.inWidth; ++S) { let M = $ - v, B = S - x, U = 0; for (let H = 0; H < b; H += f) { let j = (M + H) / d; if (!(j < 0 || j >= p.outHeight || Math.floor(j) !== j)) for (let K = 0; K < y; K += g) { let Z = (B + K) / c; if (Z < 0 || Z >= p.outWidth || Math.floor(Z) !== Z) continue; let J = _.get(F, j, Z, D); U += J } } I.set(U * N, F, $, S, D) } return n.makeTensorInfo(I.shape, I.dtype, I.values) } var kX = { kernelName: zc, backendName: "cpu", kernelFunc: wX }; function IX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, scale: s, offset: i, mean: o, variance: l } = t; w.assert(o.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(s == null || o.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), ge([r, o, l, s, i], "batchNorm"); let { varianceEpsilon: u } = a; u == null && (u = .001); let p = n.data.get(r.dataId).values, d = n.data.get(o.dataId).values, c = n.data.get(l.dataId).values, h = s ? n.data.get(s.dataId).values : new Float32Array([1]), m = i ? n.data.get(i.dataId).values : new Float32Array([0]), f = new Float32Array(p.length), g = m.length, b = h.length, y = c.length, x = d.length, v = 0, I = 0, N = 0, C = 0; for (let _ = 0; _ < p.length; ++_)f[_] = m[v++] + (p[_] - d[I++]) * h[N++] / Math.sqrt(c[C++] + u), v >= g && (v = 0), I >= x && (I = 0), N >= b && (N = 0), C >= y && (C = 0); return n.makeTensorInfo(r.shape, r.dtype, f) } var SX = { kernelName: eo, backendName: "cpu", kernelFunc: IX }; function NX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, crops: i } = a; ge([r], "batchToSpaceND"); let o = s.reduce((b, y) => b * y), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = xt({ inputs: { x: r }, backend: n, attrs: { shape: l } }), m = Bn({ inputs: { x: h }, backend: n, attrs: { perm: u } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = wi({ inputs: { x: f }, backend: n, attrs: { begin: d, size: c } }); return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), g } var TX = { kernelName: fu, backendName: "cpu", kernelFunc: NX }; function CX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, weights: s } = t, { size: i } = a, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, u = H1(o, l, s.dtype, s.shape, i); return n.makeTensorInfo([i], s.dtype, u) } var EX = { kernelName: gu, backendName: "cpu", kernelFunc: CX }; function _X(e) { let { inputs: t, backend: n } = e, { s0: a, s1: r } = t, s = n.data.get(a.dataId).values, i = n.data.get(r.dataId).values, o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i)); return n.makeTensorInfo([o.length], "int32", Int32Array.from(o)) } var AX = { kernelName: Bc, backendName: "cpu", kernelFunc: _X }, FX = lt(Ss, (e, t) => { let n = t; return e > n.clipValueMax ? n.clipValueMax : e < n.clipValueMin ? n.clipValueMin : e }), $X = { kernelName: Ss, backendName: "cpu", kernelFunc: FX }, DX = e => { let { x: t } = e.inputs, n = e.backend, a = new Float32Array(w.sizeFromShape(t.shape)), r = n.data.get(t.dataId), s = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, o = n.data.get(s.dataId).values, l = n.data.get(i.dataId).values; for (let u = 0; u < o.length; u++) { let p = o[u], d = l[u]; a[u] = Math.hypot(p, d) } return n.makeOutput(a, t.shape, "float32") }, RX = { kernelName: Vc, backendName: "cpu", kernelFunc: DX }; function iu(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = n.data.get(a.dataId).complexTensorInfos.imag, s = n.data.get(r.dataId).values; return n.makeTensorInfo(r.shape, r.dtype, s) } var MX = { kernelName: Um, backendName: "cpu", kernelFunc: iu }; function ou(e) { let { inputs: t, backend: n, attrs: a } = e, { axis: r } = a, s = w.parseAxisParam(r, t[0].shape)[0], i = t.map(f => f.shape); T.assertParamsConsistent(i, s); let o = T.computeOutShape(t.map(f => f.shape), s); if (w.sizeFromShape(o) === 0) return n.makeTensorInfo(o, t[0].dtype, []); let l = t.filter(f => w.sizeFromShape(f.shape) > 0); if (l.length === 1) return dr({ inputs: { x: l[0] }, backend: n }); if (l[0].dtype === "complex64") { let f = l.map(v => vi({ inputs: { input: v }, backend: n })), g = l.map(v => iu({ inputs: { input: v }, backend: n })), b = ou({ inputs: f, backend: n, attrs: { axis: s } }), y = ou({ inputs: g, backend: n, attrs: { axis: s } }), x = Jn({ inputs: { real: b, imag: y }, backend: n }); return f.forEach(v => n.disposeIntermediateTensorInfo(v)), g.forEach(v => n.disposeIntermediateTensorInfo(v)), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), x } let u = l.map(f => { let g = [-1, w.sizeFromShape(f.shape.slice(s))]; return xt({ inputs: { x: f }, backend: n, attrs: { shape: g } }) }), p = u.map(f => ({ vals: n.data.get(f.dataId).values, shape: f.shape })); o = T.computeOutShape(u.map(f => f.shape), 1); let d = u[0].shape[0] === 1, c = q1(p, o, t[0].dtype, d), h = T.computeOutShape(l.map(f => f.shape), s), m = n.makeTensorInfo(h, t[0].dtype, c); return u.forEach(f => n.disposeIntermediateTensorInfo(f)), m } var OX = { kernelName: yu, backendName: "cpu", kernelFunc: ou }; function G_(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dataFormat: l, dilations: u, dimRoundingMode: p } = a; ge([r, s], "conv2d"); let d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, s.shape, i, u, o, p, !1, d), h = c.filterHeight, m = c.filterWidth, f = c.dilationHeight, g = c.dilationWidth, b = c.padInfo.left, y = c.padInfo.top, x = c.dataFormat === "channelsLast", v = new Wt(c.outShape, r.dtype), I = w.computeStrides(r.shape), N = w.computeStrides(s.shape), C = I[0], _ = x ? I[1] : I[2], F = x ? I[2] : 1, D = x ? 1 : I[1], $ = v.strides[0], S = x ? v.strides[1] : v.strides[2], M = x ? v.strides[2] : 1, B = x ? 1 : v.strides[1], U = n.data.get(r.dataId).values, H = n.data.get(s.dataId).values, j = v.values; for (let K = 0; K < c.batchSize; ++K) { let Z = K * C, J = K * $; for (let ee = 0; ee < c.outHeight; ++ee) { let ae = J + ee * S, te = ee * c.strideHeight - y; for (let se = 0; se < h; ++se) { let ie = te + se * f; if (ie < 0 || ie >= c.inHeight) continue; let xe = se * N[0], ue = Z + ie * _; for (let ye = 0; ye < c.outWidth; ++ye) { let ke = ae + ye * M, Se = ye * c.strideWidth - b; for (let Le = 0; Le < m; ++Le) { let Ge = Se + Le * g; if (Ge < 0 || Ge >= c.inWidth) continue; let mt = xe + Le * N[1], st = ue + Ge * F, at = mt; for (let rt = 0; rt < c.inChannels; ++rt) { let Re = U[st + rt * D]; for (let gt = 0; gt < c.outChannels; ++gt)j[ke + gt * B] += Re * H[at + gt]; at += c.outChannels } } } } } } return n.makeTensorInfo(v.shape, v.dtype, j) } var PX = { kernelName: zi, backendName: "cpu", kernelFunc: G_ }; function LX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, filterShape: p } = a; ge([r, s], "conv2dBackpropFilter"); let d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, p, i, 1, o, u, !1, d), { strideHeight: h, strideWidth: m, filterHeight: f, filterWidth: g } = c, b = c.dataFormat === "channelsLast", y = new Wt(c.filterShape, "float32"), x = c.padInfo.left, v = c.padInfo.top, I = n.data.get(r.dataId).values, N = n.data.get(s.dataId).values, C = new Wt(r.shape, r.dtype, I), _ = new Wt(s.shape, s.dtype, N); for (let F = 0; F < f; ++F) { let D = Math.max(0, Math.ceil((v - F) / h)), $ = Math.min(c.outHeight, (c.inHeight + v - F) / h); for (let S = 0; S < g; ++S) { let M = Math.max(0, Math.ceil((x - S) / m)), B = Math.min(c.outWidth, (c.inWidth + x - S) / m); for (let U = 0; U < c.inChannels; ++U)for (let H = 0; H < c.outChannels; ++H) { let j = 0; for (let K = 0; K < c.batchSize; ++K)for (let Z = D; Z < $; ++Z) { let J = F + Z * h - v; for (let ee = M; ee < B; ++ee) { let ae = S + ee * m - x; b ? j += C.get(K, J, ae, U) * _.get(K, Z, ee, H) : j += C.get(K, U, J, ae) * _.get(K, H, Z, ee) } } y.set(j, F, S, U, H) } } } return n.makeTensorInfo(y.shape, y.dtype, y.values) } var zX = { kernelName: Om, backendName: "cpu", kernelFunc: LX }; function WX(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { inputShape: i, strides: o, pad: l, dataFormat: u, dimRoundingMode: p } = a; ge([r, s], "conv2dBackpropInput"); let d = w.computeStrides(s.shape), c = w.computeStrides(r.shape), h = T.convertConv2DDataFormat(u), m = T.computeConv2DInfo(i, s.shape, o, 1, l, p, !1, h), f = new Wt(m.inShape, "float32"), g = f.values, b = n.data.get(r.dataId).values, y = n.data.get(s.dataId).values, [x, v, I] = d, { batchSize: N, filterHeight: C, filterWidth: _, inChannels: F, inHeight: D, inWidth: $, outChannels: S, outHeight: M, outWidth: B, strideHeight: U, strideWidth: H } = m; h = m.dataFormat; let j = C - 1 - m.padInfo.top, K = _ - 1 - m.padInfo.left, Z = h === "channelsLast", J = f.strides[0], ee = Z ? f.strides[1] : f.strides[2], ae = Z ? f.strides[2] : 1, te = Z ? 1 : f.strides[1], se = c[0], ie = Z ? c[1] : c[2], xe = Z ? c[2] : 1, ue = Z ? 1 : c[1]; for (let ye = 0; ye < N; ++ye)for (let ke = 0; ke < F; ++ke)for (let Se = 0; Se < D; ++Se) { let Le = Se - j, Ge = Math.max(0, Math.ceil(Le / U)), mt = Math.min(M, (C + Le) / U); for (let st = 0; st < $; ++st) { let at = st - K, rt = Math.max(0, Math.ceil(at / H)), Re = Math.min(B, (_ + at) / H), gt = 0; for (let Ot = Ge; Ot < mt; ++Ot) { let oa = Ot * U - Le; for (let pn = rt; pn < Re; ++pn) { let An = pn * H - at, la = se * ye + ie * Ot + xe * pn, Fn = x * (C - 1 - oa) + v * (_ - 1 - An) + I * ke; for (let ut = 0; ut < S; ++ut) { let $n = b[la + ue * ut], jn = y[Fn + ut]; gt += $n * jn } } } let qn = J * ye + ee * Se + ae * st + te * ke; g[qn] = gt } } return n.makeTensorInfo(f.shape, f.dtype, f.values) } var BX = { kernelName: Wi, backendName: "cpu", kernelFunc: WX }; function VX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a; ge([r, s], "conv3d"); let u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), { filterDepth: p, filterHeight: d, filterWidth: c, dilationDepth: h, dilationHeight: m, dilationWidth: f, padInfo: g } = u, b = g.front, y = g.left, x = g.top, v = new Wt(u.outShape, r.dtype), I = n.data.get(r.dataId).values, N = n.data.get(s.dataId).values, C = v.values, _ = w.computeStrides(r.shape), F = w.computeStrides(s.shape); for (let D = 0; D < u.batchSize; ++D) { let $ = D * _[0], S = D * v.strides[0]; for (let M = 0; M < u.outDepth; ++M) { let B = S + M * v.strides[1], U = M * u.strideDepth - b; for (let H = 0; H < p; ++H) { let j = U + H * h; if (j < 0 || j >= u.inDepth) continue; let K = H * F[0], Z = $ + j * _[1]; for (let J = 0; J < u.outHeight; ++J) { let ee = B + J * v.strides[2], ae = J * u.strideHeight - x; for (let te = 0; te < d; ++te) { let se = ae + te * m; if (se < 0 || se >= u.inHeight) continue; let ie = K + te * F[1], xe = Z + se * _[2]; for (let ue = 0; ue < u.outWidth; ++ue) { let ye = ee + ue * u.outChannels, ke = ue * u.strideWidth - y; for (let Se = 0; Se < c; ++Se) { let Le = ke + Se * f; if (Le < 0 || Le >= u.inWidth) continue; let Ge = ie + Se * F[2], mt = xe + Le * u.inChannels, st = Ge; for (let at = 0; at < u.inChannels; ++at) { let rt = I[mt + at]; for (let Re = 0; Re < u.outChannels; ++Re)C[ye + Re] += rt * N[st + Re]; st += u.outChannels } } } } } } } } return n.makeTensorInfo(v.shape, v.dtype, v.values) } var UX = { kernelName: Bi, backendName: "cpu", kernelFunc: VX }; function GX(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a; ge([r, s], "conv3dBackpropFilterV2"); let u = w.computeStrides(r.shape), p = w.computeStrides(s.shape), d = T.computeConv3DInfo(r.shape, l, i, 1, o), c = d.strideDepth, h = d.strideHeight, m = d.strideWidth, f = d.filterDepth, g = d.filterHeight, b = d.filterWidth, y = new Wt(d.filterShape, "float32"), x = y.values, [v, I, N, C] = y.strides, _ = n.data.get(s.dataId).values, [F, D, $, S] = p, M = n.data.get(r.dataId).values, [B, U, H, j] = u, K = d.padInfo.front, Z = d.padInfo.left, J = d.padInfo.top; for (let ee = 0; ee < f; ++ee) { let ae = Math.max(0, Math.ceil((K - ee) / c)), te = Math.min(d.outDepth, (d.inDepth + K - ee) / c), se = ee * v; for (let ie = 0; ie < g; ++ie) { let xe = Math.max(0, Math.ceil((J - ie) / h)), ue = Math.min(d.outHeight, (d.inHeight + J - ie) / h), ye = ie * I + se; for (let ke = 0; ke < b; ++ke) { let Se = Math.max(0, Math.ceil((Z - ke) / m)), Le = Math.min(d.outWidth, (d.inWidth + Z - ke) / m), Ge = ke * N + ye; for (let mt = 0; mt < d.inChannels; ++mt) { let st = mt * C + Ge; for (let at = 0; at < d.outChannels; ++at) { let rt = 0; for (let Re = 0; Re < d.batchSize; ++Re) { let gt = Re * B, qn = Re * F; for (let Ot = ae; Ot < te; ++Ot) { let oa = (ee + Ot * c - K) * U + gt, pn = Ot * D + qn; for (let An = xe; An < ue; ++An) { let la = (ie + An * h - J) * H + oa, Fn = An * $ + pn; for (let ut = Se; ut < Le; ++ut) { let $n = (ke + ut * m - Z) * j + la, jn = ut * S + Fn; rt += M[$n + mt] * _[jn + at] } } } } x[st + at] = rt } } } } } return n.makeTensorInfo(y.shape, y.dtype, y.values) } var HX = { kernelName: xu, backendName: "cpu", kernelFunc: GX }; function qX(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a; ge([r], "conv3dBackpropInputV2"); let u = w.computeStrides(r.shape), p = w.computeStrides(s.shape), d = T.computeConv3DInfo(l, s.shape, o, 1, i), c = new Wt(d.inShape, "float32"), h = c.values, [m, f, g, b] = c.strides, y = n.data.get(r.dataId).values, [x, v, I, N] = u, C = n.data.get(s.dataId).values, [_, F, D, $] = p, { batchSize: S, filterDepth: M, filterHeight: B, filterWidth: U, inChannels: H, inDepth: j, inHeight: K, inWidth: Z, outChannels: J, outDepth: ee, outHeight: ae, outWidth: te, strideDepth: se, strideHeight: ie, strideWidth: xe } = d, ue = M - 1 - d.padInfo.front, ye = B - 1 - d.padInfo.top, ke = U - 1 - d.padInfo.left; for (let Se = 0; Se < S; ++Se)for (let Le = 0; Le < H; ++Le)for (let Ge = 0; Ge < j; ++Ge) { let mt = Ge - ue, st = Math.max(0, Math.ceil(mt / se)), at = Math.min(ee, (M + mt) / se); for (let rt = 0; rt < K; ++rt) { let Re = rt - ye, gt = Math.max(0, Math.ceil(Re / ie)), qn = Math.min(ae, (B + Re) / ie); for (let Ot = 0; Ot < Z; ++Ot) { let oa = Ot - ke, pn = Math.max(0, Math.ceil(oa / xe)), An = Math.min(te, (U + oa) / xe), la = 0; for (let Fn = st; Fn < at; ++Fn) { let ut = Fn * se - mt; for (let $n = gt; $n < qn; ++$n) { let jn = $n * ie - Re; for (let vr = pn; vr < An; ++vr) { let Cl = vr * xe - oa, Qa = x * Se + v * Fn + I * $n + N * vr, qp = _ * (M - 1 - ut) + F * (B - 1 - jn) + D * (U - 1 - Cl) + $ * Le; for (let Na = 0; Na < J; ++Na) { let jr = y[Qa + Na], Jt = C[qp + Na]; la += jr * Jt } } } } h[m * Se + f * Ge + g * rt + b * Ot + Le] = la } } } return n.makeTensorInfo(c.shape, c.dtype, c.values) } var jX = { kernelName: vu, backendName: "cpu", kernelFunc: qX }, KX = lt(Vi, e => Math.cos(e)), XX = { kernelName: Vi, backendName: "cpu", kernelFunc: KX }, YX = lt(Ui, e => Math.cosh(e)), ZX = { kernelName: Ui, backendName: "cpu", kernelFunc: YX }; function JX(e) { let { inputs: t, backend: n, attrs: a } = e, { image: r, boxes: s, boxInd: i } = t, { cropSize: o, method: l, extrapolationValue: u } = a, [p, d, c, h] = r.shape, m = s.shape[0], [f, g] = o, b = Pe([m, f, g, h], "float32"), y = n.data.get(s.dataId).values, x = n.data.get(i.dataId).values, v = n.data.get(r.dataId).values, I = w.computeStrides(r.shape), N = w.computeStrides(b.shape); for (let C = 0; C < m; C++) { let _ = C * 4, F = y[_], D = y[_ + 1], $ = y[_ + 2], S = y[_ + 3], M = x[C]; if (M >= p) continue; let B = f > 1 ? ($ - F) * (d - 1) / (f - 1) : 0, U = g > 1 ? (S - D) * (c - 1) / (g - 1) : 0; for (let H = 0; H < f; H++) { let j = f > 1 ? F * (d - 1) + H * B : .5 * (F + $) * (d - 1); if (j < 0 || j > d - 1) { for (let K = 0; K < g; K++)for (let Z = 0; Z < h; Z++) { let J = Z + K * N[2] + H * N[1] + C * N[0]; b.values[J] = u } continue } if (l === "bilinear") { let K = Math.floor(j), Z = Math.ceil(j), J = j - K; for (let ee = 0; ee < g; ee++) { let ae = g > 1 ? D * (c - 1) + ee * U : .5 * (D + S) * (c - 1); if (ae < 0 || ae > c - 1) { for (let xe = 0; xe < h; xe++) { let ue = xe + ee * N[2] + H * N[1] + C * N[0]; b.values[ue] = u } continue } let te = Math.floor(ae), se = Math.ceil(ae), ie = ae - te; for (let xe = 0; xe < h; xe++) { let ue = xe + te * I[2] + K * I[1] + M * I[0], ye = v[ue]; ue = xe + se * I[2] + K * I[1] + M * I[0]; let ke = v[ue]; ue = xe + te * I[2] + Z * I[1] + M * I[0]; let Se = v[ue]; ue = xe + se * I[2] + Z * I[1] + M * I[0]; let Le = v[ue], Ge = ye + (ke - ye) * ie, mt = Se + (Le - Se) * ie; ue = xe + ee * N[2] + H * N[1] + C * N[0], b.values[ue] = Ge + (mt - Ge) * J } } } else for (let K = 0; K < g; ++K) { let Z = g > 1 ? D * (c - 1) + K * U : .5 * (D + S) * (c - 1); if (Z < 0 || Z > c - 1) { for (let ae = 0; ae < h; ae++) { let te = ae + K * N[2] + H * N[1] + C * N[0]; b.values[te] = u } continue } let J = Math.round(Z), ee = Math.round(j); for (let ae = 0; ae < h; ae++) { let te = ae + J * I[2] + ee * I[1] + M * I[0], se = ae + K * N[2] + H * N[1] + C * N[0]; b.values[se] = v[te] } } } } return n.makeTensorInfo(b.shape, b.dtype, b.values) } var QX = { kernelName: ku, backendName: "cpu", kernelFunc: JX }; function eY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a; ge(r, "cumprod"); let l = T.getAxesPermutation([s], r.shape.length), u = r; l != null && (u = Bn({ inputs: { x: r }, backend: n, attrs: { perm: l } })); let p = T.getInnerMostAxes(1, r.shape.length)[0]; if (p !== u.shape.length - 1) throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${p}`); let d = ga(u.dtype, "int32"), c = w.makeOnesTypedArray(w.sizeFromShape(u.shape), d), h = n.data.get(u.dataId).values, m = u.shape[u.shape.length - 1], f = o ? (b, y) => b + m - y - 1 : (b, y) => b + y; for (let b = 0; b < h.length; b += m)for (let y = 0; y < m; y++) { let x = f(b, y); if (y === 0) c[x] = i ? 1 : h[x]; else { let v = f(b, y - 1); c[x] = i ? h[v] * c[v] : h[x] * c[v] } } let g = n.makeTensorInfo(u.shape, d, c); if (l != null) { let b = T.getUndoAxesPermutation(l), y = Bn({ inputs: { x: g }, backend: n, attrs: { perm: b } }); return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(u), y } return g } var tY = { kernelName: wu, backendName: "cpu", kernelFunc: eY }; function nY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a; ge(r, "cumsum"); let l = T.getAxesPermutation([s], r.shape.length), u = r; l != null && (u = Bn({ inputs: { x: r }, backend: n, attrs: { perm: l } })); let p = T.getInnerMostAxes(1, r.shape.length)[0]; if (p !== u.shape.length - 1) throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${p}`); let d = ga(u.dtype, "int32"), c = w.makeZerosTypedArray(w.sizeFromShape(u.shape), d), h = n.data.get(u.dataId).values, m = u.shape[u.shape.length - 1], f = o ? (b, y) => b + m - y - 1 : (b, y) => b + y; for (let b = 0; b < h.length; b += m)for (let y = 0; y < m; y++) { let x = f(b, y); if (y === 0) c[x] = i ? 0 : h[x]; else { let v = f(b, y - 1); c[x] = i ? h[v] + c[v] : h[x] + c[v] } } let g = n.makeTensorInfo(u.shape, d, c); if (l != null) { let b = T.getUndoAxesPermutation(l), y = Bn({ inputs: { x: g }, backend: n, attrs: { perm: b } }); return n.disposeIntermediateTensorInfo(g), n.disposeIntermediateTensorInfo(u), y } return g } var aY = { kernelName: Gi, backendName: "cpu", kernelFunc: nY }; function rY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, weights: s } = t, { size: i, binaryOutput: o } = a; if (r.shape.length === 1) { let l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = H1(l, u, s.dtype, s.shape, i); return n.makeTensorInfo([i], s.dtype, p) } else if (r.shape.length === 2) { let l = n.bufferSync(r), u = n.bufferSync(s), p = JE(l, u, i, o); return n.makeTensorInfo(p.shape, s.dtype, p.values) } throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`) } var sY = { kernelName: Uc, backendName: "cpu", kernelFunc: rY }; function iY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockSize: s, dataFormat: i } = a; w.assert(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`); let o = r.shape[0], l = r.shape[1], u = r.shape[2], p = r.shape[3], d = l * s, c = u * s, h = p / (s * s), m = n.data.get(r.dataId).values, f = new Float32Array(o * d * c * h), g = 0; for (let b = 0; b < o; ++b)for (let y = 0; y < d; ++y) { let x = Math.floor(y / s), v = y % s; for (let I = 0; I < c; ++I) { let N = Math.floor(I / s), C = I % s, _ = (v * s + C) * h; for (let F = 0; F < h; ++F) { let D = F + _ + p * (N + u * (x + l * b)); f[g++] = m[D] } } } return n.makeTensorInfo([o, d, c, h], r.dtype, f) } var oY = { kernelName: Iu, backendName: "cpu", kernelFunc: iY }; function H_(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l, dimRoundingMode: u } = a; ge([r, s], "depthwiseConv2DNative"); let p = w.computeStrides(r.shape), d = w.computeStrides(s.shape), c = l; c == null && (c = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(i, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`); let h = T.computeConv2DInfo(r.shape, s.shape, i, c, o, u, !0), { filterHeight: m, filterWidth: f, dilationHeight: g, dilationWidth: b, padInfo: y } = h, x = y.left, v = y.top, I = h.outChannels / h.inChannels, N = new Wt(h.outShape, r.dtype), C = n.data.get(r.dataId).values, _ = n.data.get(s.dataId).values, F = N.values; for (let D = 0; D < h.batchSize; ++D) { let $ = D * p[0], S = D * N.strides[0]; for (let M = 0; M < h.outHeight; ++M) { let B = S + M * N.strides[1], U = M * h.strideHeight - v; for (let H = 0; H < m; ++H) { let j = U + H * g; if (j < 0 || j >= h.inHeight) continue; let K = H * d[0], Z = $ + j * p[1]; for (let J = 0; J < h.outWidth; ++J) { let ee = B + J * N.strides[2], ae = J * h.strideWidth - x; for (let te = 0; te < f; ++te) { let se = ae + te * b; if (se < 0 || se >= h.inWidth) continue; let ie = K + te * d[1], xe = Z + se * h.inChannels, ue = ee, ye = ie; for (let ke = 0; ke < h.inChannels; ++ke) { let Se = C[xe + ke]; for (let Le = 0; Le < I; ++Le)F[ue + Le] += Se * _[ye + Le]; ue += I, ye += I } } } } } } return n.makeTensorInfo(N.shape, N.dtype, N.values) } var lY = { kernelName: Hi, backendName: "cpu", kernelFunc: H_ }; function uY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, filterShape: p } = a; ge([r, s], "depthwiseConv2dNativeBackpropFilter"); let d = T.computeConv2DInfo(r.shape, p, i, o, l, u, !0), { strideHeight: c, strideWidth: h, filterHeight: m, filterWidth: f } = d, g = new Wt(d.filterShape, "float32"), b = d.padInfo.left, y = d.padInfo.top, x = d.outChannels / d.inChannels, v = n.data.get(r.dataId).values, I = new Wt(r.shape, r.dtype, v), N = n.data.get(s.dataId).values, C = new Wt(s.shape, s.dtype, N); for (let _ = 0; _ < m; ++_) { let F = Math.max(0, Math.ceil((y - _) / c)), D = Math.min(d.outHeight, (d.inHeight + y - _) / c); for (let $ = 0; $ < f; ++$) { let S = Math.max(0, Math.ceil((b - $) / h)), M = Math.min(d.outWidth, (d.inWidth + b - $) / h); for (let B = 0; B < d.outChannels; ++B) { let U = Math.trunc(B / x), H = B % x, j = 0; for (let K = 0; K < d.batchSize; ++K)for (let Z = F; Z < D; ++Z) { let J = _ + Z * c - y; for (let ee = S; ee < M; ++ee) { let ae = $ + ee * h - b; j += I.get(K, J, ae, U) * C.get(K, Z, ee, B) } } g.set(j, _, $, U, H) } } } return n.makeTensorInfo(g.shape, g.dtype, g.values) } var pY = { kernelName: Pm, backendName: "cpu", kernelFunc: uY }; function cY(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, inputShape: p } = a; ge([r, s], "depthwiseConv2DNativeBackpropInput"); let d = w.computeStrides(r.shape), c = w.computeStrides(s.shape), h = T.computeConv2DInfo(p, s.shape, i, o, l, u, !0), m = new Wt(h.inShape, "float32"), f = m.values, [g, b, y] = m.strides, x = n.data.get(r.dataId).values, [v, I, N] = d, C = n.data.get(s.dataId).values, [_, F, D] = c, { batchSize: $, filterHeight: S, filterWidth: M, inChannels: B, inHeight: U, inWidth: H, outChannels: j, outHeight: K, outWidth: Z, strideHeight: J, strideWidth: ee } = h, ae = S - 1 - h.padInfo.top, te = M - 1 - h.padInfo.left, se = j / B; for (let ie = 0; ie < $; ++ie)for (let xe = 0; xe < B; ++xe)for (let ue = 0; ue < U; ++ue) { let ye = ue - ae, ke = Math.max(0, Math.ceil(ye / J)), Se = Math.min(K, (S + ye) / J); for (let Le = 0; Le < H; ++Le) { let Ge = Le - te, mt = Math.max(0, Math.ceil(Ge / ee)), st = Math.min(Z, (M + Ge) / ee), at = 0; for (let rt = ke; rt < Se; ++rt) { let Re = rt * J - ye; for (let gt = mt; gt < st; ++gt) { let qn = gt * ee - Ge, Ot = v * ie + I * rt + N * gt, oa = _ * (S - 1 - Re) + F * (M - 1 - qn) + D * xe; for (let pn = 0; pn < se; ++pn) { let An = xe * se + pn, la = x[Ot + An], Fn = C[oa + pn]; at += la * Fn } } } f[g * ie + b * ue + y * Le + xe] = at } } return n.makeTensorInfo(m.shape, m.dtype, m.values) } var dY = { kernelName: Lm, backendName: "cpu", kernelFunc: cY }; function hY(e) { let { inputs: t, backend: n } = e, { x: a } = t, r = w.sizeFromShape(a.shape), s = n.data.get(a.dataId).values, i = Pe([r, r], a.dtype), o = i.values; for (let u = 0; u < s.length; u++)o[u * r + u] = s[u]; let l = [...a.shape, ...a.shape]; return n.makeTensorInfo(l, i.dtype, i.values) } var mY = { kernelName: Gc, backendName: "cpu", kernelFunc: hY }, fY = { kernelName: qi, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => { let { x: a, filter: r } = e, { strides: s, pad: i, dilations: o } = n, l = t, u = l.data.get(a.dataId).values, p = a.shape.length, d = l.data.get(r.dataId).values, c = r.shape.length, { batchSize: h, inHeight: m, inWidth: f, inChannels: g, outHeight: b, outWidth: y, padInfo: x, strideHeight: v, strideWidth: I, filterHeight: N, filterWidth: C, dilationHeight: _, dilationWidth: F, outShape: D } = T.computeDilation2DInfo(a.shape, r.shape, s, i, "NHWC", o), $ = w.sizeFromShape(D), S = D.length, M = w.getArrayFromDType(a.dtype, $); for (let B = 0; B < h; ++B)for (let U = 0; U < b; ++U) { let H = U * v - x.top; for (let j = 0; j < y; ++j) { let K = j * I - x.left; for (let Z = 0; Z < g; ++Z) { let J = Number.MIN_SAFE_INTEGER; for (let ae = 0; ae < N; ++ae) { let te = H + ae * _; if (te >= 0 && te < m) for (let se = 0; se < C; ++se) { let ie = K + se * F; if (ie >= 0 && ie < f) { let xe = w.locToIndex([B, te, ie, Z], p, w.computeStrides(a.shape)), ue = w.locToIndex([ae, se, Z], c, w.computeStrides(r.shape)), ye = u[xe] + d[ue]; ye > J && (J = ye) } } } let ee = w.locToIndex([B, U, j, Z], S, w.computeStrides(D)); M[ee] = J } } } return { dataId: l.write(w.toTypedArray(M, a.dtype), D, a.dtype), shape: D, dtype: a.dtype } } }, gY = { kernelName: jl, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => { let { x: a, filter: r, dy: s } = e, { strides: i, pad: o, dilations: l } = n, u = t, p = w.toNestedArray(a.shape, u.data.get(a.dataId).values), d = w.toNestedArray(r.shape, u.data.get(r.dataId).values), { batchSize: c, inHeight: h, inWidth: m, inChannels: f, outHeight: g, outWidth: b, padInfo: y, strideHeight: x, strideWidth: v, filterHeight: I, filterWidth: N, dilationHeight: C, dilationWidth: _, outShape: F } = T.computeDilation2DInfo(a.shape, r.shape, i, o, "NHWC", l); w.assert(s.rank === F.length, () => `Error in ${jl}, dy must have the same rank as output ${F.length}, but got ${s.rank}`); let D = w.toNestedArray(F, u.data.get(s.dataId).values), $ = w.makeZerosNestedTypedArray(r.shape, r.dtype); for (let S = 0; S < c; ++S)for (let M = 0; M < g; ++M) { let B = M * x - y.top; for (let U = 0; U < b; ++U) { let H = U * v - y.left; for (let j = 0; j < f; ++j) { let K = Number.MIN_SAFE_INTEGER, Z = 0, J = 0; for (let ee = 0; ee < I; ++ee) { let ae = B + ee * C; if (ae >= 0 && ae < h) for (let te = 0; te < N; ++te) { let se = H + te * _; if (se >= 0 && se < m) { let ie = p[S][ae][se][j] + d[ee][te][j]; ie > K && (K = ie, Z = ee, J = te) } } } $[Z][J][j] += D[S][M][U][j] } } } return { dataId: u.write(w.toTypedArray($, a.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype } } }, bY = { kernelName: ql, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t, attrs: n }) => { let { x: a, filter: r, dy: s } = e, { strides: i, pad: o, dilations: l } = n, u = t, p = w.toNestedArray(a.shape, u.data.get(a.dataId).values), d = w.toNestedArray(r.shape, u.data.get(r.dataId).values), { batchSize: c, inHeight: h, inWidth: m, inChannels: f, outHeight: g, outWidth: b, padInfo: y, strideHeight: x, strideWidth: v, filterHeight: I, filterWidth: N, dilationHeight: C, dilationWidth: _, outShape: F } = T.computeDilation2DInfo(a.shape, r.shape, i, o, "NHWC", l); w.assert(s.rank === F.length, () => `Error in ${ql}, dy must have the same rank as output ${F.length}, but got ${s.rank}`); let D = w.toNestedArray(F, u.data.get(s.dataId).values), $ = w.makeZerosNestedTypedArray(a.shape, a.dtype); for (let S = 0; S < c; ++S)for (let M = 0; M < g; ++M) { let B = M * x - y.top; for (let U = 0; U < b; ++U) { let H = U * v - y.left; for (let j = 0; j < f; ++j) { let K = Number.MIN_SAFE_INTEGER, Z = B < 0 ? 0 : B, J = H < 0 ? 0 : H; for (let ee = 0; ee < I; ++ee) { let ae = B + ee * C; if (ae >= 0 && ae < h) for (let te = 0; te < N; ++te) { let se = H + te * _; if (se >= 0 && se < m) { let ie = p[S][ae][se][j] + d[ee][te][j]; ie > K && (K = ie, Z = ae, J = se) } } } $[S][Z][J][j] += D[S][M][U][j] } } } return { dataId: u.write(w.toTypedArray($, a.dtype), a.shape, a.dtype), shape: a.shape, dtype: a.dtype } } }; function yY(e) { let { inputs: t, backend: n, attrs: a } = e, { image: r } = t, { canvas: s, options: i } = a, { contextOptions: o, imageOptions: l } = i || {}, u = (l == null ? void 0 : l.alpha) || 1, p = (o == null ? void 0 : o.contextType) || "2d"; if (p !== "2d") throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`); let d = s.getContext(p, (o == null ? void 0 : o.contextAttributes) || {}); if (d == null) throw new Error(`Could not get the context with ${p} type.`); let [c, h] = r.shape.slice(0, 2), m = r.shape.length === 2 ? 1 : r.shape[2], f = n.data.get(r.dataId).values, g = r.dtype === "float32" ? 255 : 1, b = new Uint8ClampedArray(h * c * 4); for (let x = 0; x < c * h; ++x) { let v = [0, 0, 0, 255 * u]; for (let N = 0; N < m; N++) { let C = f[x * m + N]; if (r.dtype === "float32") { if (C < 0 || C > 1) throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${C}.`) } else if (r.dtype === "int32" && (C < 0 || C > 255)) throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${C}.`); m === 1 ? (v[0] = C * g, v[1] = C * g, v[2] = C * g) : v[N] = C * g } let I = x * 4; b[I + 0] = Math.round(v[0]), b[I + 1] = Math.round(v[1]), b[I + 2] = Math.round(v[2]), b[I + 3] = Math.round(v[3]) } s.width = h, s.height = c; let y = new ImageData(b, h, c); return d.putImageData(y, 0, 0), r } var xY = { kernelName: zm, backendName: "cpu", kernelFunc: yY }; function Rd(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; ge(r, "sum"); let o; r.dtype === "bool" ? o = vs({ inputs: { x: r }, backend: n, attrs: { dtype: "int32" } }) : o = dr({ inputs: { x: r }, backend: n }); let l = o.shape.length, u = w.parseAxisParam(s, o.shape), p = T.getAxesPermutation(u, l), d = u, c = o; p != null && (c = Bn({ inputs: { x: o }, backend: n, attrs: { perm: p } }), d = T.getInnerMostAxes(d.length, l)), T.assertAxesAreInnerMostDims("sum", d, c.shape.length); let [h, m] = T.computeOutAndReduceShapes(c.shape, d), f = T.upcastType(c.dtype, "int32"), g = km(n, h, f), b = w.sizeFromShape(m), y = n.data.get(g.dataId).values, x = n.data.get(c.dataId).values; for (let v = 0; v < y.length; ++v) { let I = v * b, N = 0; for (let C = 0; C < b; ++C)N += x[I + C]; y[v] = N } if (i) { let v = T.expandShapeToKeepDim(g.shape, u), I = g; g = xt({ inputs: { x: g }, backend: n, attrs: { shape: v } }), n.disposeIntermediateTensorInfo(I) } return n.disposeIntermediateTensorInfo(o), p != null && n.disposeIntermediateTensorInfo(c), g } var vY = { kernelName: Wo, backendName: "cpu", kernelFunc: Rd }; function wY(e) { let { inputs: t, backend: n, attrs: a } = e, { equation: r } = a, s = t, { allDims: i, summedDims: o, idDims: l } = T.decodeEinsumEquation(r, s.length); T.checkEinsumDimSizes(i.length, l, s); let { path: u, steps: p } = T.getEinsumComputePath(o, l), d = p.length, c = null, h = i.length, m = []; for (let f = 0; f < d; ++f) { for (let g of p[f]) { let { permutationIndices: b, expandDims: y } = T.getEinsumPermutation(h, l[g]), x; T.isIdentityPermutation(b) ? x = s[g] : (x = Bn({ inputs: { x: s[g] }, backend: n, attrs: { perm: b } }), m.push(x)); let v = x.shape.slice(); for (let I = 0; I < y.length; ++I)v.splice(y[I], 0, 1); w.arraysEqual(x.shape, v) || (x = xt({ inputs: { x }, backend: n, attrs: { shape: v } }), m.push(x)), c === null ? c = x : (c = Jf({ inputs: { a: x, b: c }, backend: n }), m.push(c)) } f < d - 1 && (u[f] >= 0 && (c = Rd({ inputs: { x: c }, backend: n, attrs: { axis: u[f] - (i.length - h), keepDims: !1 } }), m.push(c)), h--) } for (let f of m) f !== c && n.disposeIntermediateTensorInfo(f); return c } var kY = { kernelName: Wm, backendName: "cpu", kernelFunc: wY }; function IY(e) { let { inputs: t, backend: n } = e, { dy: a, y: r } = t; ge([a, r], "eluGrad"); let s = new Float32Array(w.sizeFromShape(r.shape)), i = n.data.get(r.dataId).values, o = n.data.get(a.dataId).values; for (let l = 0; l < i.length; ++l) { let u = i[l]; u >= 0 ? s[l] = o[l] : s[l] = o[l] * (u + 1) } return n.makeTensorInfo(r.shape, "float32", s) } var SY = { kernelName: Su, backendName: "cpu", kernelFunc: IY }, NY = T.ERF_P, TY = T.ERF_A1, CY = T.ERF_A2, EY = T.ERF_A3, _Y = T.ERF_A4, AY = T.ERF_A5, FY = lt(Xi, e => { let t = Math.sign(e), n = Math.abs(e), a = 1 / (1 + NY * n); return t * (1 - ((((AY * a + _Y) * a + EY) * a + CY) * a + TY) * a * Math.exp(-n * n)) }), $Y = { kernelName: Xi, backendName: "cpu", kernelFunc: FY }; function Nm(e) { let { inputs: t, backend: n, attrs: a } = e, { input: r } = t, { dim: s } = a, i = r.shape.length, o = r.shape.slice(), l = s; return s < 0 && (w.assert(-(i + 1) <= s, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + s + 1), o.splice(l, 0, 1), xt({ inputs: { x: r }, backend: n, attrs: { shape: o } }) } var DY = { kernelName: Tu, backendName: "cpu", kernelFunc: Nm }, RY = Mt((e, t) => e / t), ak = Zt(ji, RY), fv = { kernelName: ji, backendName: "cpu", kernelFunc: ak }; function q_(e, t, n) { let a = e.shape, r = a[0], s = a[1], i = n.data.get(e.dataId), o = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, u = [r, s], p = w.sizeFromShape(u), d = w.getTypedArrayFromDType("float32", p), c = w.getTypedArrayFromDType("float32", p); for (let g = 0; g < r; g++) { let b = wi({ inputs: { x: o }, backend: n, attrs: { begin: [g, 0], size: [1, s] } }), y = wi({ inputs: { x: l }, backend: n, attrs: { begin: [g, 0], size: [1, s] } }), x = Jn({ inputs: { real: b, imag: y }, backend: n }), { real: v, imag: I } = MY(x, t, n), N = T.mergeRealAndImagArrays(v, I); for (let C = 0; C < s; C++) { let _ = T.getComplexWithIndex(N, C); d[g * s + C] = _.real, c[g * s + C] = _.imag } n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(y), n.disposeIntermediateTensorInfo(x) } let h = n.makeTensorInfo(u, "float32", d), m = n.makeTensorInfo(u, "float32", c), f = Jn({ inputs: { real: h, imag: m }, backend: n }); return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), f } function MY(e, t, n) { let a = w.sizeFromShape(e.shape), r = n.data.get(e.dataId), s = n.data.get(r.complexTensorInfos.real.dataId).values, i = n.data.get(r.complexTensorInfos.imag.dataId).values; if (OY(a)) { let o = gv(s, i, a, t, n), l = [e.shape[0], e.shape[1]]; if (t) { let u = n.makeTensorInfo(l, "float32", o.real), p = n.makeTensorInfo(l, "float32", o.imag), d = n.makeTensorInfo([], "float32", w.createScalarValue(a, "float32")), c = dr({ inputs: { x: d }, backend: n }), h = fv.kernelFunc({ inputs: { a: u, b: d }, backend: n }), m = fv.kernelFunc({ inputs: { a: p, b: c }, backend: n }), f = n.data.get(h.dataId).values, g = n.data.get(m.dataId).values; return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), { real: f, imag: g } } return o } else { let o = T.mergeRealAndImagArrays(s, i), l = PY(o, a, t); return T.splitRealAndImagArrays(l) } } function OY(e) { return (e & e - 1) === 0 } function gv(e, t, n, a, r) { if (n === 1) return { real: e, imag: t }; let s = T.mergeRealAndImagArrays(e, t), i = n / 2, o = T.complexWithEvenIndex(s), l = o.real, u = o.imag, p = [l.length], d = r.makeTensorInfo(p, "float32", l), c = r.makeTensorInfo(p, "float32", u), h = Jn({ inputs: { real: d, imag: c }, backend: r }), m = T.complexWithOddIndex(s), f = m.real, g = m.imag, b = [f.length], y = r.makeTensorInfo(b, "float32", f), x = r.makeTensorInfo(b, "float32", g), v = Jn({ inputs: { real: y, imag: x }, backend: r }), I = gv(l, u, i, a, r), N = I.real, C = I.imag, _ = [N.length], F = r.makeTensorInfo(_, "float32", N), D = r.makeTensorInfo(_, "float32", C), $ = Jn({ inputs: { real: F, imag: D }, backend: r }), S = gv(f, g, i, a, r), M = S.real, B = S.imag, U = [M.length], H = r.makeTensorInfo(U, "float32", M), j = r.makeTensorInfo(U, "float32", B), K = Jn({ inputs: { real: H, imag: j }, backend: r }), Z = T.exponents(n, a), J = [Z.real.length], ee = r.makeTensorInfo(J, "float32", Z.real), ae = r.makeTensorInfo(J, "float32", Z.imag), te = Jn({ inputs: { real: ee, imag: ae }, backend: r }), se = Jf({ inputs: { a: te, b: K }, backend: r }), ie = su({ inputs: { a: $, b: se }, backend: r }), xe = ek({ inputs: { a: $, b: se }, backend: r }), ue = vi({ inputs: { input: ie }, backend: r }), ye = vi({ inputs: { input: xe }, backend: r }), ke = iu({ inputs: { input: ie }, backend: r }), Se = iu({ inputs: { input: xe }, backend: r }), Le = ou({ inputs: [ue, ye], backend: r, attrs: { axis: 0 } }), Ge = ou({ inputs: [ke, Se], backend: r, attrs: { axis: 0 } }), mt = r.data.get(Le.dataId).values, st = r.data.get(Ge.dataId).values; return r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(c), r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(y), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(v), r.disposeIntermediateTensorInfo(F), r.disposeIntermediateTensorInfo(D), r.disposeIntermediateTensorInfo($), r.disposeIntermediateTensorInfo(H), r.disposeIntermediateTensorInfo(j), r.disposeIntermediateTensorInfo(K), r.disposeIntermediateTensorInfo(ee), r.disposeIntermediateTensorInfo(ae), r.disposeIntermediateTensorInfo(te), r.disposeIntermediateTensorInfo(se), r.disposeIntermediateTensorInfo(ie), r.disposeIntermediateTensorInfo(xe), r.disposeIntermediateTensorInfo(ue), r.disposeIntermediateTensorInfo(ke), r.disposeIntermediateTensorInfo(ye), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(Le), r.disposeIntermediateTensorInfo(Ge), { real: mt, imag: st } } function PY(e, t, n) { let a = new Float32Array(t * 2); for (let r = 0; r < t; r++) { let s = 0, i = 0; for (let o = 0; o < t; o++) { let l = T.exponent(r * o, t, n), u = T.getComplexWithIndex(e, o); s += u.real * l.real - u.imag * l.imag, i += u.real * l.imag + u.imag * l.real } n && (s /= t, i /= t), T.assignToTypedArray(a, s, i, r) } return a } function LY(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = w.sizeFromShape(a.shape), s = a.shape[a.shape.length - 1], i = r / s, o = xt({ inputs: { x: a }, backend: n, attrs: { shape: [i, s] } }), l = q_(o, !1, n), u = xt({ inputs: { x: l }, backend: n, attrs: { shape: a.shape } }); return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(l), u } var zY = { kernelName: Bm, backendName: "cpu", kernelFunc: LY }; function rk(e) { let { backend: t, attrs: n } = e, { shape: a, value: r, dtype: s } = n, i = s || w.inferDtype(r), o = w.getArrayFromDType(i, w.sizeFromShape(a)); return BY(o, r, i), t.makeTensorInfo(a, i, o) } var WY = { kernelName: Hc, backendName: "cpu", kernelFunc: rk }; function BY(e, t, n) { e.fill(t) } var VY = { kernelName: Cu, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { image: a } = e, r = n, s = w.getTypedArrayFromDType(a.dtype, w.sizeFromShape(a.shape)), [i, o, l, u] = a.shape, p = r.data.get(a.dataId).values; for (let d = 0; d < i; d++) { let c = d * l * o * u; for (let h = 0; h < o; h++) { let m = h * (l * u); for (let f = 0; f < l; f++) { let g = f * u; for (let b = 0; b < u; b++) { let y = Math.round(l - f - 1), x = c + m + g + b, v = p[x]; if (y >= 0 && y < l) { let I = y * u, N = c + m + I + b; v = p[N] } s[x] = v } } } } return { dataId: r.write(s, a.shape, a.dtype), shape: a.shape, dtype: a.dtype } } }; function UY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = G_({ inputs: { x: r, filter: s }, backend: n, attrs: { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c } }); if (i) { let g = f; if (p === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) { let b = xt({ inputs: { x: i }, backend: n, attrs: { shape: [i.shape[0], 1, 1] } }); f = su({ inputs: { a: f, b }, backend: n }), n.disposeIntermediateTensorInfo(b) } else f = su({ inputs: { a: f, b: i }, backend: n }); n.disposeIntermediateTensorInfo(g) } if (h) { let g = f; if (p === "NCHW" && h === "prelu" && o.shape.length === 1 && o.shape[0] !== 1) { let b = xt({ inputs: { x: o }, backend: n, attrs: { shape: [o.shape[0], 1, 1] } }); f = Sm(n, f, h, b, m), n.disposeIntermediateTensorInfo(b) } else f = Sm(n, f, h, o, m); n.disposeIntermediateTensorInfo(g) } return f } var GY = { kernelName: li, backendName: "cpu", kernelFunc: UY }; function HY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = H_({ inputs: { x: r, filter: s }, backend: n, attrs: { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c } }); if (i) { let g = f; f = su({ inputs: { a: f, b: i }, backend: n }), n.disposeIntermediateTensorInfo(g) } if (h) { let g = f; f = Sm(n, f, h, o, m), n.disposeIntermediateTensorInfo(g) } return f } var qY = { kernelName: ui, backendName: "cpu", kernelFunc: HY }; function jY(e) { let { inputs: t, backend: n } = e, { params: a, indices: r } = t, s = w.sizeFromShape(a.shape), i = r.shape, o = i[i.length - 1], [l, u, p, d] = T.prepareAndValidate(a, r); if (u === 0) return n.makeTensorInfo(l, a.dtype, []); let c = n.data.get(r.dataId).values, h = n.bufferSync(a), m = l_(c, h, a.dtype, u, o, p, d, a.shape, s); return n.makeTensorInfo(l, a.dtype, m.values) } var KY = { kernelName: _u, backendName: "cpu", kernelFunc: jY }; function XY(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, indices: s } = t, { axis: i, batchDims: o } = a; ge([r, s], "gatherV2"); let l = w.parseAxisParam(i, r.shape)[0], u = n.data.get(s.dataId).values, p = r.shape[l]; for (let v = 0; v < u.length; ++v) { let I = u[v]; w.assert(I <= p - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${p - 1}]`) } let d = o; o == null && (d = 0); let c = w.sizeFromShape(s.shape), h = T.segment_util.collectGatherOpShapeInfo(r, s, l, d), m = xt({ inputs: { x: r }, backend: n, attrs: { shape: [h.batchSize, h.outerSize, h.dimSize, h.sliceSize] } }), f = xt({ inputs: { x: s }, backend: n, attrs: { shape: [h.batchSize, c / h.batchSize] } }), g = [h.batchSize, h.outerSize, c / h.batchSize, h.sliceSize], b = n.bufferSync(f), y = n.bufferSync(m), x = u_(y, b, g); return n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), n.makeTensorInfo(h.outputShape, x.dtype, x.values) } var YY = { kernelName: Eu, backendName: "cpu", kernelFunc: XY }; function ZY(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = w.sizeFromShape(a.shape), s = a.shape[a.shape.length - 1], i = r / s, o = xt({ inputs: { x: a }, backend: n, attrs: { shape: [i, s] } }), l = q_(o, !0, n), u = xt({ inputs: { x: l }, backend: n, attrs: { shape: a.shape } }); return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(l), u } var JY = { kernelName: Vm, backendName: "cpu", kernelFunc: ZY }, QY = lt(ao, e => Number.isFinite(e) ? 1 : 0, "bool"), e7 = { kernelName: ao, backendName: "cpu", kernelFunc: QY }, t7 = lt(ro, e => Math.abs(e) === 1 / 0 ? 1 : 0, "bool"), n7 = { kernelName: ro, backendName: "cpu", kernelFunc: t7 }, a7 = lt(so, e => Number.isNaN(e) ? 1 : 0, "bool"), r7 = { kernelName: so, backendName: "cpu", kernelFunc: a7 }; function s7(e) { let { backend: t, attrs: n } = e, { start: a, stop: r, num: s } = n, i = m_(a, r, s); return t.makeTensorInfo([i.length], "float32", i) } var i7 = { kernelName: Du, backendName: "cpu", kernelFunc: s7 }, o7 = lt(lo, e => Math.log1p(e)), l7 = { kernelName: lo, backendName: "cpu", kernelFunc: o7 }, u7 = Mt((e, t) => e && t), p7 = Zt(Ru, u7, null, "bool"), c7 = { kernelName: Ru, backendName: "cpu", kernelFunc: p7 }, d7 = lt(Mu, e => e ? 0 : 1, "bool"), h7 = { kernelName: Mu, backendName: "cpu", kernelFunc: d7 }, m7 = Mt((e, t) => e || t), f7 = Zt(Ou, m7, null, "bool"), g7 = { kernelName: Ou, backendName: "cpu", kernelFunc: f7 }; function b7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a; ge(r, "LRN"); let u = r.shape[3], p = u - 1, d = n.data.get(r.dataId).values, c = w.sizeFromShape(r.shape), h = new Float32Array(c); function m(f) { let g = f % u, b = f - g + Math.max(0, g - s), y = f - g + Math.min(g + s, p), x = 0; for (; b <= y; b++) { let v = d[b]; x += v * v } return x } for (let f = 0; f < c; f++) { let g = m(f), b = d[f] * Math.pow(i + o * g, -l); h[f] = b } return n.makeTensorInfo(r.shape, r.dtype, h) } var y7 = { kernelName: uo, backendName: "cpu", kernelFunc: b7 }; function x7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a; ge(i, "LRNGrad"); let d = w.sizeFromShape(i.shape), c = i.shape[3], h = n.data.get(i.dataId).values, m = n.data.get(r.dataId).values, f = n.data.get(s.dataId).values, g = new Float32Array(d), b = d; for (let y = 0; y < b; y++) { let x = y % c, v = y - x + Math.max(0, x - o), I = y - x + Math.min(c, x + o + 1), N = 0; for (let C = v; C < I; C++)N += Math.pow(m[C], 2); N = u * N + l; for (let C = v; C < I; C++) { let _ = -2 * u * p * m[C] * f[y] / N; y === C && (_ += Math.pow(N, -p)), _ *= h[y], g[C] += _ } } return n.makeTensorInfo(i.shape, r.dtype, g) } var v7 = { kernelName: Pu, backendName: "cpu", kernelFunc: x7 }; function j_(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { reductionIndices: s, keepDims: i } = a, o = n, l = r.shape, u = l.length, p = w.parseAxisParam(s, l), d = p, c = T.getAxesPermutation(d, u), h = o.data.get(r.dataId).values; if (c != null) { let v = new Array(u); for (let I = 0; I < v.length; I++)v[I] = l[c[I]]; h = K1(h, l, r.dtype, c, v), d = T.getInnerMostAxes(d.length, u), l = v } ge(r, "max"), T.assertAxesAreInnerMostDims("max", d, u); let [m, f] = T.computeOutAndReduceShapes(l, d), g = w.sizeFromShape(f), b = g_(h, g, m, r.dtype), y = o.write(b, m, r.dtype), x = m; return i && (x = T.expandShapeToKeepDim(m, p)), { dataId: y, shape: x, dtype: r.dtype } } var w7 = { kernelName: po, backendName: "cpu", kernelFunc: j_ }; function k7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t; ge(r, "maxPool"); let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1; w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`); let p = T.computePool2DInfo(r.shape, s, i, u, o, l), d; if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) d = dr({ inputs: { x: r }, backend: n }); else { let c = n.data.get(r.dataId).values, h = w.computeStrides(r.shape), m = nk(c, r.shape, r.dtype, h, p, "max"); d = n.makeTensorInfo(p.outShape, r.dtype, m.values) } return d } var I7 = { kernelName: ho, backendName: "cpu", kernelFunc: k7 }; function S7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a; ge(r, "maxPool3d"); let p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.data.get(r.dataId).values, c = U_(d, r.shape, r.dtype, w.computeStrides(r.shape), p, "max"); return n.makeTensorInfo(c.shape, "float32", c.values) } var N7 = { kernelName: Lu, backendName: "cpu", kernelFunc: S7 }; function T7(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a; ge([r, s], "maxPool3DGrad"); let p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.bufferSync(s), c = mX(d, p), h = p.strideDepth, m = p.strideHeight, f = p.strideWidth, g = p.dilationDepth, b = p.dilationHeight, y = p.dilationWidth, x = p.effectiveFilterDepth, v = p.effectiveFilterHeight, I = p.effectiveFilterWidth, N = x - 1 - p.padInfo.front, C = I - 1 - p.padInfo.left, _ = v - 1 - p.padInfo.top, F = Pe(s.shape, "float32"), D = n.bufferSync(r); for (let $ = 0; $ < p.batchSize; ++$)for (let S = 0; S < p.inChannels; ++S)for (let M = 0; M < p.inDepth; ++M)for (let B = 0; B < p.inHeight; ++B)for (let U = 0; U < p.inWidth; ++U) { let H = M - N, j = B - _, K = U - C, Z = 0; for (let J = 0; J < x; J += g) { let ee = (H + J) / h; if (!(ee < 0 || ee >= p.outDepth || Math.floor(ee) !== ee)) for (let ae = 0; ae < v; ae += b) { let te = (j + ae) / m; if (!(te < 0 || te >= p.outHeight || Math.floor(te) !== te)) for (let se = 0; se < I; se += y) { let ie = (K + se) / f; if (ie < 0 || ie >= p.outWidth || Math.floor(ie) !== ie) continue; let xe = x * v * I - 1 - c.get($, ee, te, ie, S), ue = J * v * I + ae * I + se, ye = xe === ue ? 1 : 0; if (ye === 0) continue; let ke = D.get($, ee, te, ie, S); Z += ke * ye } } } F.set(Z, $, M, B, U, S) } return n.makeTensorInfo(F.shape, F.dtype, F.values) } var C7 = { kernelName: jc, backendName: "cpu", kernelFunc: T7 }; function E7(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s, output: i } = t, o = s; ge([s, i], "maxPoolGrad"); let { filterSize: l, strides: u, pad: p, dimRoundingMode: d } = a, c = T.computePool2DInfo(o.shape, l, u, 1, p, d), h = n.data.get(o.dataId).values, m = Pe(c.outShape, o.dtype, V_(h, o.shape, o.dtype, c).values), f = c.strideHeight, g = c.strideWidth, b = c.dilationHeight, y = c.dilationWidth, x = c.effectiveFilterHeight, v = c.effectiveFilterWidth, I = v - 1 - c.padInfo.left, N = x - 1 - c.padInfo.top, C = Pe(o.shape, "float32"), _ = n.data.get(r.dataId).values, F = Pe(r.shape, "float32", _); for (let D = 0; D < c.batchSize; ++D)for (let $ = 0; $ < c.inChannels; ++$)for (let S = 0; S < c.inHeight; ++S)for (let M = 0; M < c.inWidth; ++M) { let B = S - N, U = M - I, H = 0; for (let j = 0; j < x; j += b) { let K = (B + j) / f; if (!(K < 0 || K >= c.outHeight || Math.floor(K) !== K)) for (let Z = 0; Z < v; Z += y) { let J = (U + Z) / g; if (J < 0 || J >= c.outWidth || Math.floor(J) !== J) continue; let ee = x * v - 1 - m.get(D, K, J, $), ae = j * v + Z, te = ee === ae ? 1 : 0; if (te === 0) continue; let se = F.get(D, K, J, $); H += se * te } } C.set(H, D, S, M, $) } return n.makeTensorInfo(C.shape, C.dtype, C.values) } var _7 = { kernelName: qc, backendName: "cpu", kernelFunc: E7 }; function A7(e, t, n, a, r) { let s = w.computeStrides(t), i = nk(e, t, n, s, r, "max"), o = V_(e, t, n, r, !0, a); return [i.values, o.values] } var F7 = { kernelName: Kc, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { x: a } = e, { filterSize: r, strides: s, pad: i, includeBatchInIndex: o } = t, l = n; ge(a, "MaxPoolWithArgmax"); let u = l.data.get(a.dataId).values, p = T.computePool2DInfo(a.shape, r, s, [1, 1], i), [d, c] = A7(u, a.shape, a.dtype, o, p), h = l.write(d, p.outShape, a.dtype), m = l.write(c, p.outShape, a.dtype); return [{ dataId: h, shape: p.outShape, dtype: a.dtype }, { dataId: m, shape: p.outShape, dtype: "int32" }] } }; function $7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a, o = w.parseAxisParam(s, r.shape), l = T.computeOutAndReduceShapes(r.shape, o)[1], u = w.sizeFromShape(l), p = [], d = n.makeTensorInfo([], "float32", new Float32Array([u])); p.push(d); let c = vs({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }); p.push(c); let h = ak({ inputs: { a: c, b: d }, backend: n }); p.push(h); let m = Rd({ inputs: { x: h }, backend: n, attrs: { axis: s, keepDims: i } }); return p.forEach(f => n.disposeIntermediateTensorInfo(f)), m } var D7 = { kernelName: mo, backendName: "cpu", kernelFunc: $7 }; function R7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; ge(r, "min"); let o = w.parseAxisParam(s, r.shape), l = o, u = T.getAxesPermutation(l, r.shape.length), p = r; u != null && (p = Bn({ inputs: { x: r }, backend: n, attrs: { perm: u } }), l = T.getInnerMostAxes(l.length, r.shape.length)), T.assertAxesAreInnerMostDims("min", l, p.shape.length); let [d, c] = T.computeOutAndReduceShapes(p.shape, l), h = w.sizeFromShape(c), m = w.makeZerosTypedArray(w.sizeFromShape(d), p.dtype), f = n.data.get(p.dataId).values; for (let b = 0; b < m.length; ++b) { let y = b * h, x = f[y]; for (let v = 0; v < h; ++v) { let I = f[y + v]; (Number.isNaN(I) || I < x) && (x = I) } m[b] = x } u != null && n.disposeIntermediateTensorInfo(p); let g = n.makeTensorInfo(d, p.dtype, m); if (i) { let b = T.expandShapeToKeepDim(d, o), y = xt({ inputs: { x: g }, backend: n, attrs: { shape: b } }); return n.disposeIntermediateTensorInfo(g), y } return g } var M7 = { kernelName: fo, backendName: "cpu", kernelFunc: R7 }; function O7(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { paddings: s, mode: i } = a; ge(r, "mirrorPad"); let o = s.map((y, x) => y[0] + r.shape[x] + y[1]), l = s.map(y => y[0]), u = s.map((y, x) => y[0] + r.shape[x]), p = i === "reflect" ? 0 : 1, d = n.data.get(r.dataId).values, c = r.shape.length, h = w.computeStrides(r.shape), m = w.sizeFromShape(o), f = o.length, g = w.computeStrides(o), b = w.getTypedArrayFromDType(r.dtype, m); for (let y = 0; y < m; y++) { let x = w.indexToLoc(y, f, g); for (let I = 0; I < f; I++)x[I] < l[I] ? x[I] = l[I] * 2 - x[I] - p : x[I] >= u[I] && (x[I] = (u[I] - 1) * 2 - x[I] + p); x = x.map((I, N) => I - l[N]); let v = w.locToIndex(x, c, h); b[y] = d[v] } return { dataId: n.write(b, o, r.dtype), shape: o, dtype: r.dtype } } var P7 = { kernelName: bo, backendName: "cpu", kernelFunc: O7 }, L7 = Mt((e, t) => { let n = e % t; return e < 0 && t < 0 || e >= 0 && t >= 0 ? n : (n + t) % t }), z7 = Zt(yo, L7), W7 = { kernelName: yo, backendName: "cpu", kernelFunc: z7 }, B7 = ks(Fm()); function K_(e) { let { inputs: t, backend: n, attrs: a } = e, { logits: r } = t, { dim: s } = a, i = r.shape.length, o = s; if (o === -1 && (o = i - 1), o !== i - 1) throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`); let l = w.parseAxisParam([o], r.shape), u = j_({ inputs: { x: r }, backend: n, attrs: { reductionIndices: l, keepDims: !1 } }), p = T.expandShapeToKeepDim(u.shape, l), d = xt({ inputs: { x: u }, backend: n, attrs: { shape: p } }), c = ek({ inputs: { a: r, b: d }, backend: n }), h = r_({ inputs: { x: c }, backend: n }), m = Rd({ inputs: { x: h }, backend: n, attrs: { axis: l, keepDims: !1 } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = ak({ inputs: { a: h, b: f }, backend: n }); return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), g } var V7 = { kernelName: Bo, backendName: "cpu", kernelFunc: K_ }; function U7(e) { let { inputs: t, backend: n, attrs: a } = e, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a; ge(r, "multinomial"); let l = o ? r : K_({ inputs: { logits: r }, backend: n, attrs: { dim: -1 } }), u = l.shape[0], p = l.shape[1], d = n.data.get(l.dataId).values, c = [u, s], h = w.makeZerosTypedArray(w.sizeFromShape(c), "int32"); for (let m = 0; m < u; ++m) { let f = m * p, g = new Float32Array(p - 1); g[0] = d[f]; for (let x = 1; x < g.length; ++x)g[x] = g[x - 1] + d[f + x]; let b = B7.alea(i.toString()), y = m * s; for (let x = 0; x < s; ++x) { let v = b(); h[y + x] = g.length; for (let I = 0; I < g.length; I++)if (v < g[I]) { h[y + x] = I; break } } } return o || n.disposeIntermediateTensorInfo(l), n.makeTensorInfo(c, "int32", h) } var G7 = { kernelName: zu, backendName: "cpu", kernelFunc: U7 }, H7 = fr.nonMaxSuppressionV3Impl; function q7(e) { let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = a; ge(r, "NonMaxSuppression"); let u = n.data.get(r.dataId).values, p = n.data.get(s.dataId).values, { selectedIndices: d } = H7(u, p, i, o, l); return n.makeTensorInfo([d.length], "int32", new Int32Array(d)) } var j7 = { kernelName: Vu, backendName: "cpu", kernelFunc: q7 }, K7 = fr.nonMaxSuppressionV4Impl; function X7(e) { let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, padToMaxOutputSize: u } = a; ge(r, "NonMaxSuppressionPadded"); let p = n.data.get(r.dataId).values, d = n.data.get(s.dataId).values, { selectedIndices: c, validOutputs: h } = K7(p, d, i, o, l, u); return [n.makeTensorInfo([c.length], "int32", new Int32Array(c)), n.makeTensorInfo([], "int32", new Int32Array([h]))] } var Y7 = { kernelName: Uu, backendName: "cpu", kernelFunc: X7 }, Z7 = fr.nonMaxSuppressionV5Impl; function J7(e) { let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, softNmsSigma: u } = a; ge(r, "NonMaxSuppressionWithScore"); let p = n.data.get(r.dataId).values, d = n.data.get(s.dataId).values, c = i, h = o, m = l, f = u, { selectedIndices: g, selectedScores: b } = Z7(p, d, c, h, m, f); return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))] } var Q7 = { kernelName: Gu, backendName: "cpu", kernelFunc: J7 }; function eZ(e) { let { inputs: t, backend: n, attrs: a } = e, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a; ge(r, "oneHot"); let u = w.sizeFromShape(r.shape), p = new Float32Array(u * i); p.fill(l); let d = n.data.get(r.dataId).values; for (let c = 0; c < u; ++c)d[c] >= 0 && d[c] < i && (p[c * i + d[c]] = o); return n.makeTensorInfo([...r.shape, i], s, p) } var tZ = { kernelName: vo, backendName: "cpu", kernelFunc: eZ }; function Tm(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (a.dtype === "string") throw new Error("zerosLike is not supported for string tensors"); if (a.dtype === "complex64") { let r = vi({ inputs: { input: a }, backend: n }), s = Tm({ inputs: { x: r }, backend: n }), i = iu({ inputs: { input: a }, backend: n }), o = Tm({ inputs: { x: i }, backend: n }), l = Jn({ inputs: { real: s, imag: o }, backend: n }); return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l } else return rk({ backend: n, attrs: { shape: a.shape, value: 0, dtype: a.dtype } }) } var nZ = { kernelName: up, backendName: "cpu", kernelFunc: Tm }; function X_(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (a.dtype === "string") throw new Error("onesLike is not supported for string tensors"); if (a.dtype === "complex64") { let r = vi({ inputs: { input: a }, backend: n }), s = X_({ inputs: { x: r }, backend: n }), i = iu({ inputs: { input: a }, backend: n }), o = Tm({ inputs: { x: i }, backend: n }), l = Jn({ inputs: { real: s, imag: o }, backend: n }); return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l } else return rk({ backend: n, attrs: { shape: a.shape, value: 1, dtype: a.dtype } }) } var aZ = { kernelName: Hu, backendName: "cpu", kernelFunc: X_ }; function Y_(e) { let { inputs: t, backend: n, attrs: a } = e, { axis: r } = a; if (t.length === 1) return Nm({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } }); let s = t[0].shape, i = t[0].dtype; t.forEach(p => { w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes") }); let o = [], l = t.map(p => { let d = Nm({ inputs: { input: p }, backend: n, attrs: { dim: r } }); return o.push(d), d }), u = ou({ inputs: l, backend: n, attrs: { axis: r } }); return o.forEach(p => n.disposeIntermediateTensorInfo(p)), u } var rZ = { kernelName: qu, backendName: "cpu", kernelFunc: Y_ }; function sZ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { paddings: s, constantValue: i } = a; ge(r, "pad"); let o = s.map((b, y) => b[0] + r.shape[y] + b[1]), l = s.map(b => b[0]), u = n.data.get(r.dataId).values, p = w.sizeFromShape(r.shape), d = r.shape.length, c = w.computeStrides(r.shape), h = w.sizeFromShape(o), m = o.length, f = w.computeStrides(o), g = w.getTypedArrayFromDType(r.dtype, h); i !== 0 && g.fill(i); for (let b = 0; b < p; b++) { let y = w.indexToLoc(b, d, c).map((v, I) => v + l[I]), x = w.locToIndex(y, m, f); g[x] = u[b] } return { dataId: n.write(g, o, r.dtype), shape: o, dtype: r.dtype } } var Z_ = { kernelName: wo, backendName: "cpu", kernelFunc: sZ }, iZ = Mt((e, t) => Math.pow(e, t)), oZ = Zt(ko, iZ), lZ = { kernelName: ko, backendName: "cpu", kernelFunc: oZ }; function uZ(e) { let { inputs: t, backend: n, attrs: a } = e, { paramsNestedSplits: r, paramsDenseValues: s, indices: i } = t, { outputRaggedRank: o } = a, l = r.map(b => n.data.get(b.dataId).values), u = r.map(b => b.shape), p = n.data.get(s.dataId).values, d = n.data.get(i.dataId).values, [c, h, m] = k_(l, u, p, s.shape, s.dtype, d, i.shape, o), f = c.map(b => n.makeTensorInfo([b.length], "int32", b)), g = n.makeTensorInfo(m, s.dtype, h); return f.concat([g]) } var pZ = { kernelName: Gm, backendName: "cpu", kernelFunc: uZ }; function cZ(e) { let { inputs: t, backend: n } = e, { starts: a, limits: r, deltas: s } = t, i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = I_(i, a.shape, a.dtype, o, r.shape, l, s.shape), d = n.makeTensorInfo([u.length], "int32", u), c = n.makeTensorInfo([p.length], a.dtype, p); return [d, c] } var dZ = { kernelName: Hm, backendName: "cpu", kernelFunc: cZ }; function hZ(e) { let { inputs: t, backend: n, attrs: a } = e, { shape: r, values: s, defaultValue: i, rowPartitionTensors: o } = t, { rowPartitionTypes: l } = a, u = n.data.get(r.dataId).values, p = n.data.get(s.dataId).values, d = n.data.get(i.dataId).values, c = o.map(g => n.data.get(g.dataId).values), h = o.map(g => g.shape), [m, f] = S_(u, r.shape, p, s.shape, s.dtype, d, i.shape, c, h, l); return n.makeTensorInfo(m, s.dtype, f) } var mZ = { kernelName: qm, backendName: "cpu", kernelFunc: hZ }; function fZ(e) { let { backend: t, attrs: n } = e, { start: a, stop: r, dtype: s, step: i } = n, o = X1(a, r, i, s); return t.makeTensorInfo([o.length], s, o) } var gZ = { kernelName: Xc, backendName: "cpu", kernelFunc: fZ }, bZ = lt(No, e => 1 / e), yZ = { kernelName: No, backendName: "cpu", kernelFunc: bZ }; function xZ(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a; ge(r, "resizeBilinear"); let l = w.computeStrides(r.shape), [u, p] = o, [d, c, h, m] = r.shape, f = n.data.get(r.dataId).values, g = new Float32Array(w.sizeFromShape([d, u, p, m])), b = [s && u > 1 ? c - 1 : c, s && p > 1 ? h - 1 : h], y = [s && u > 1 ? u - 1 : u, s && p > 1 ? p - 1 : p], x = 0, v = b[0] / y[0], I = b[1] / y[1]; for (let N = 0; N < d; N++)for (let C = 0; C < u; C++) { let _; i ? _ = v * (C + .5) - .5 : _ = v * C; let F = Math.max(0, Math.floor(_)), D = _ - F, $ = Math.min(c - 1, Math.ceil(_)), S = N * l[0] + F * l[1], M = N * l[0] + $ * l[1]; for (let B = 0; B < p; B++) { let U; i ? U = I * (B + .5) - .5 : U = I * B; let H = Math.max(0, Math.floor(U)), j = U - H, K = Math.min(h - 1, Math.ceil(U)), Z = S + H * l[2], J = M + H * l[2], ee = S + K * l[2], ae = M + K * l[2]; for (let te = 0; te < m; te++) { let se = f[Z + te], ie = f[J + te], xe = f[ee + te], ue = f[ae + te], ye = se + (xe - se) * j, ke = ie + (ue - ie) * j, Se = ye + (ke - ye) * D; g[x++] = Se } } } return n.makeTensorInfo([d, u, p, m], "float32", g) } var vZ = { kernelName: Eo, backendName: "cpu", kernelFunc: xZ }; function wZ(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a; ge([s, r], "resizeBilinearGrad"); let o = w.computeStrides(r.shape), [l, u, p, d] = r.shape, [, c, h] = s.shape, m = new Float32Array(l * u * p * d), f = [i && c > 1 ? u - 1 : u, i && h > 1 ? p - 1 : p], g = [i && c > 1 ? c - 1 : c, i && h > 1 ? h - 1 : h], b = f[0] / g[0], y = f[1] / g[1], x = n.data.get(s.dataId).values, v = 0; for (let I = 0; I < l; I++) { let N = I * o[0]; for (let C = 0; C < c; C++) { let _ = C * b, F = Math.floor(_), D = Math.min(Math.ceil(_), u - 1), $ = N + F * o[1], S = N + D * o[1], M = _ - F, B = 1 - M; for (let U = 0; U < h; U++) { let H = U * y, j = Math.floor(H), K = Math.min(Math.ceil(H), p - 1), Z = H - j, J = 1 - Z, ee = $ + j * o[2], ae = $ + K * o[2], te = S + j * o[2], se = S + K * o[2], ie = B * J, xe = B * Z, ue = M * J, ye = M * Z; for (let ke = 0; ke < d; ke++) { let Se = x[v++]; m[ee + ke] += Se * ie, m[ae + ke] += Se * xe, m[te + ke] += Se * ue, m[se + ke] += Se * ye } } } } return n.makeTensorInfo([l, p, u, d], "float32", m) } var kZ = { kernelName: Xu, backendName: "cpu", kernelFunc: wZ }; function IZ(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a; ge(r, "resizeNearestNeighbor"); let l = w.computeStrides(r.shape), [u, p] = o, [d, c, h, m] = r.shape, f = n.data.get(r.dataId).values, g = new Float32Array(d * u * p * m), b = [s && u > 1 ? c - 1 : c, s && p > 1 ? h - 1 : h], y = [s && u > 1 ? u - 1 : u, s && p > 1 ? p - 1 : p], x = b[0] / y[0], v = b[1] / y[1], I = 0; for (let N = 0; N < d; N++) { let C = N * l[0]; for (let _ = 0; _ < u; _++) { let F = i ? x * (_ + .5) : x * _, D = Math.min(c - 1, s ? Math.round(F) : Math.floor(F)); i && (D = Math.max(0, D)); let $ = C + D * l[1]; for (let S = 0; S < p; S++) { let M = i ? v * (S + .5) : v * S, B = Math.min(h - 1, s ? Math.round(M) : Math.floor(M)); i && (B = Math.max(0, B)); let U = $ + B * l[2]; for (let H = 0; H < m; H++) { let j = f[U + H]; g[I++] = j } } } } return n.makeTensorInfo([d, u, p, m], r.dtype, g) } var SZ = { kernelName: Co, backendName: "cpu", kernelFunc: IZ }; function NZ(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a; ge([s, r], "resizeNearestNeighborGrad"); let o = w.computeStrides(r.shape), l = w.computeStrides(s.shape), [u, p, d, c] = r.shape, [, h, m] = s.shape, f = new Float32Array(u * p * d * c), g = n.data.get(s.dataId).values, b = [i && h > 1 ? p - 1 : p, i && m > 1 ? d - 1 : d], y = [i && h > 1 ? h - 1 : h, i && m > 1 ? m - 1 : m], x = b[0] / y[0], v = b[1] / y[1], I = 1 / x, N = 1 / v, C = Math.ceil(I) * 2 + 2, _ = Math.ceil(N) * 2 + 2; for (let F = 0; F < u; F++) { let D = F * o[0]; for (let $ = 0; $ < p; $++) { let S = D + $ * o[1], M = Math.floor($ * I), B = Math.floor(M - C / 2); for (let U = 0; U < d; U++) { let H = S + U * o[2], j = Math.floor(U * N), K = Math.floor(j - _ / 2); for (let Z = 0; Z < c; Z++) { let J = 0; for (let ee = 0; ee < C; ee++) { let ae = ee + B; if (ae < 0 || ae >= h) continue; let te = D + ae * l[1], se = ae * x, ie = Math.min(p - 1, i ? Math.round(se) : Math.floor(se)); if ($ === ie) for (let xe = 0; xe < _; xe++) { let ue = xe + K; if (ue < 0 || ue >= m) continue; let ye = te + ue * l[2], ke = ue * v, Se = Math.min(d - 1, i ? Math.round(ke) : Math.floor(ke)); U === Se && (J += g[ye + Z]) } } f[H + Z] = J } } } } return n.makeTensorInfo(r.shape, r.dtype, f) } var TZ = { kernelName: Ku, backendName: "cpu", kernelFunc: NZ }; function CZ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { dims: s } = a; ge(r, "reverse"); let i = r.shape.length, o = w.parseAxisParam(s, r.shape); if (i === 0) return dr({ inputs: { x: r }, backend: n }); let l = new Wt(r.shape, r.dtype), u = n.bufferSync(r); for (let p = 0; p < l.size; p++) { let d = l.indexToLoc(p), c = d.slice(); o.forEach(h => c[h] = r.shape[h] - 1 - c[h]), l.set(u.get(...c), ...d) } return n.makeTensorInfo(l.shape, l.dtype, l.values) } var EZ = { kernelName: Ao, backendName: "cpu", kernelFunc: CZ }, _Z = { kernelName: pp, backendName: "cpu", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { image: a } = e, { radians: r, fillValue: s, center: i } = t, o = n, l = w.getTypedArrayFromDType(a.dtype, w.sizeFromShape(a.shape)), [u, p, d, c] = a.shape, [h, m] = T.getImageCenter(i, p, d), f = 255, g = Math.sin(r), b = Math.cos(r), y = o.data.get(a.dataId).values; for (let x = 0; x < u; x++) { let v = x * d * p * c; for (let I = 0; I < p; I++) { let N = I * (d * c); for (let C = 0; C < d; C++) { let _ = C * c; for (let F = 0; F < c; F++) { let D = [u, I, C, F], $ = D[2], S = D[1], M = ($ - h) * b - (S - m) * g, B = ($ - h) * g + (S - m) * b; M = Math.round(M + h), B = Math.round(B + m); let U = s; if (typeof s != "number" && (F === 3 ? U = f : U = s[F]), M >= 0 && M < d && B >= 0 && B < p) { let j = B * (d * c), K = M * c, Z = v + j + K + F; U = y[Z] } let H = v + N + _ + F; l[H] = U } } } } return { dataId: o.write(l, a.shape, a.dtype), shape: a.shape, dtype: a.dtype } } }, AZ = lt(Fo, e => { let t = Math.floor(e); return e - t < .5 ? Math.floor(e) : e - t > .5 ? Math.ceil(e) : t % 2 === 0 ? t : t + 1 }), FZ = { kernelName: Fo, backendName: "cpu", kernelFunc: AZ }; function $Z(e) { let { inputs: t, backend: n, attrs: a } = e, { indices: r, updates: s } = t, { shape: i } = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(s, r, i), c = !0, h = n.bufferSync(r), m = n.bufferSync(s), f = ai(h, m, i, d, u, l, o, p, 0, c); return n.makeTensorInfo(i, f.dtype, f.values) } var DZ = { kernelName: Yu, backendName: "cpu", kernelFunc: $Z }; function RZ(e, t) { let n = 0, a = e.length, r = 0; for (; n < a;)r = Math.floor((n + a) / 2), e[r] < t ? n = r + 1 : a = r; return a } function MZ(e, t) { let n = 0, a = e.length, r = 0; for (; n < a;)r = Math.floor((n + a) / 2), e[r] <= t ? n = r + 1 : a = r; return a } function OZ(e, t, n, a, r, s) { let i = w.getArrayFromDType("int32", n * r); for (let o = 0; o < n; ++o) { let l = e.slice(o * a, (o + 1) * a), u = o * r; for (let p = 0; p < r; ++p)i[u + p] = s === "left" ? RZ(l, t[p + u]) : MZ(l, t[p + u]) } return i } function PZ(e) { let { inputs: t, backend: n, attrs: a } = e, { sortedSequence: r, values: s } = t, { side: i } = a, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, u = OZ(o, l, r.shape[0], r.shape[1], s.shape[1], i); return n.makeTensorInfo(s.shape, "int32", u) } var LZ = { kernelName: Ju, backendName: "cpu", kernelFunc: PZ }; function zZ(e) { let { inputs: t, backend: n } = e, { condition: a, t: r, e: s } = t; ge([a, r, s], "select"); let i = a.shape.length, o = n.data.get(a.dataId).values, l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = ga(r.dtype, s.dtype), d = w.makeZerosTypedArray(w.sizeFromShape(r.shape), p), c = 0, h = i === 0 || i > 1 || r.shape.length === 1 ? 1 : w.sizeFromShape(r.shape.slice(1)); for (let m = 0; m < o.length; m++)for (let f = 0; f < h; f++)o[m] === 1 ? d[c++] = l[m] : d[c++] = u[m]; return n.makeTensorInfo(r.shape, p, d) } var WZ = { kernelName: Qu, backendName: "cpu", kernelFunc: zZ }, BZ = T.SELU_SCALEALPHA, VZ = T.SELU_SCALE, UZ = lt(Do, e => e >= 0 ? VZ * e : BZ * (Math.exp(e) - 1)), GZ = { kernelName: Do, backendName: "cpu", kernelFunc: UZ }, HZ = lt(Oo, e => e < 0 ? -1 : e > 0 ? 1 : 0), qZ = { kernelName: Oo, backendName: "cpu", kernelFunc: HZ }, jZ = lt(Ro, e => Math.sin(e)), KZ = { kernelName: Ro, backendName: "cpu", kernelFunc: jZ }, XZ = lt(Mo, e => Math.sinh(e)), YZ = { kernelName: Mo, backendName: "cpu", kernelFunc: XZ }, ZZ = 11920928955078125e-23, kS = Math.log(ZZ) + 2, JZ = lt(Lo, e => { let t = e > -kS, n = e < kS, a = Math.exp(e), r; return n ? r = a : t ? r = e : r = Math.log(1 + a), r }), QZ = { kernelName: Lo, backendName: "cpu", kernelFunc: JZ }; function eJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, paddings: i } = a; ge([r], "spaceToBatchND"); let o = w.sizeFromShape(s), l = [[0, 0]]; l.push(...i); for (let g = 1 + s.length; g < r.shape.length; ++g)l.push([0, 0]); let u = Z_.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), p = T.getReshaped(u.shape, s, o, !1), d = T.getPermuted(p.length, s.length, !1), c = T.getReshapedPermuted(u.shape, s, o, !1), h = xt({ inputs: { x: u }, backend: n, attrs: { shape: p } }), m = Bn({ inputs: { x: h }, backend: n, attrs: { perm: d } }), f = xt({ inputs: { x: m }, backend: n, attrs: { shape: c } }); return n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), f } var tJ = { kernelName: tp, backendName: "cpu", kernelFunc: eJ }; function nJ(e) {
        let { inputs: t, backend: n } = e, { indices: a, values: r, denseShape: s, defaultValue: i } = t; if (s.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`); if (a.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
        ${a.shape}`); if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
        ${r.shape}`); if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`); let o = n.data.get(a.dataId).values, l = n.data.get(r.dataId).values, u = n.data.get(s.dataId).values, p = n.data.get(i.dataId).values[0], [d, c, h, m, f] = C_(o, a.shape, a.dtype, l, r.dtype, u, p); return [n.makeTensorInfo(c, a.dtype, d), n.makeTensorInfo([c[0]], r.dtype, h), n.makeTensorInfo([m.length], "bool", new Uint8Array(m.map(g => Number(g)))), n.makeTensorInfo([f.length], a.dtype, new Int32Array(f))]
    } var aJ = { kernelName: Yc, backendName: "cpu", kernelFunc: nJ }; function rJ(e) {
        let { inputs: t, backend: n } = e, { inputIndices: a, inputShape: r, newShape: s } = t; if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${a.shape}`); if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`); let i = Array.from(n.data.get(r.dataId).values), o = n.data.get(a.dataId).values, l = Array.from(n.data.get(s.dataId).values), [u, p, d] = E_(o, a.shape, a.dtype, i, l); return [n.makeTensorInfo(p, a.dtype, u), n.makeTensorInfo([d.length], s.dtype, new Int32Array(d))]
    } var sJ = { kernelName: ap, backendName: "cpu", kernelFunc: rJ }; function iJ(e) {
        let { inputs: t, backend: n } = e, { data: a, indices: r, segmentIds: s } = t; if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
          ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`); if (r.shape[0] !== s.shape[0]) throw new Error("segmentIds and indices should have same size."); let i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = Y1(i, a.shape, a.dtype, o, l, !0); return n.makeTensorInfo(p, a.dtype, u)
    } var oJ = { kernelName: Zc, backendName: "cpu", kernelFunc: iJ }; function lJ(e) {
        let { inputs: t, backend: n } = e, { data: a, indices: r, segmentIds: s } = t; if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
         ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`); if (r.shape[0] !== s.shape[0]) throw new Error("segmentIds and indices should have same size."); let i = n.data.get(a.dataId).values, o = n.data.get(r.dataId).values, l = n.data.get(s.dataId).values, [u, p] = Y1(i, a.shape, a.dtype, o, l); return n.makeTensorInfo(p, a.dtype, u)
    } var uJ = { kernelName: Jc, backendName: "cpu", kernelFunc: lJ }; function pJ(e) { let { inputs: t, backend: n, attrs: a } = e, { sparseIndices: r, sparseValues: s, defaultValue: i } = t, { outputShape: o } = a, { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = T.calculateShapes(s, r, o), h = !1, m = n.bufferSync(r), f; switch (s.dtype) { case "bool": { let g = n.bufferSync(s), b = !!n.data.get(i.dataId).values[0]; f = ai(m, g, o, c, p, u, l, d, b, h); break } case "float32": { let g = n.bufferSync(s), b = n.data.get(i.dataId).values[0]; f = ai(m, g, o, c, p, u, l, d, b, h); break } case "int32": { let g = n.bufferSync(s), b = n.data.get(i.dataId).values[0]; f = ai(m, g, o, c, p, u, l, d, b, h); break } case "string": { let g = n.bufferSync(s), b = w.decodeString(n.data.get(i.dataId).values[0]); f = ai(m, g, o, c, p, u, l, d, b, h); break } default: throw new Error(`Unsupported type ${s.dtype}`) }return n.makeTensorInfo(o, f.dtype, f.values) } var cJ = { kernelName: rp, backendName: "cpu", kernelFunc: pJ }; function dJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { numOrSizeSplits: s, axis: i } = a, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = new Array(r.shape.length).fill(0), p = r.shape.slice(); return l.map(d => { let c = [...p]; c[o] = d; let h = wi({ inputs: { x: r }, backend: n, attrs: { begin: u, size: c } }); return u[o] += d, h }) } var hJ = { kernelName: np, backendName: "cpu", kernelFunc: dJ }, mJ = { kernelName: Qc, backendName: "cpu", kernelFunc: ({ inputs: e, backend: t }) => { let { x: n } = e, a = t; ge(n, "square"); let r = a.data.get(n.dataId).values, s = new Float32Array(r.length); for (let i = 0; i < r.length; ++i) { let o = r[i]; s[i] = o * o } return { dataId: a.write(s, n.shape, n.dtype), shape: n.shape, dtype: n.dtype } } }, fJ = lt(Ts, (e, t) => { let n = t; return isNaN(e) ? NaN : e > 0 ? 1 : n.alpha }), gJ = { kernelName: Ts, backendName: "cpu", kernelFunc: fJ }; function bJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a; ge(r, "stridedSlice"); let { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I; if (f) I = xt({ inputs: { x: r }, backend: n, attrs: { shape: m } }); else if (g || b) { w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`); let N = Kt.computeOutShape(y, x, v), C = wi({ inputs: { x: r }, backend: n, attrs: { begin: y, size: N } }); I = xt({ inputs: { x: C }, backend: n, attrs: { shape: m } }), n.disposeIntermediateTensorInfo(C) } else { let N = n.bufferSync(r), C = F_(h, N, v, y); I = n.makeTensorInfo(m, C.dtype, C.values) } return I } var yJ = { kernelName: sp, backendName: "cpu", kernelFunc: bJ }; function xJ(e) { let { inputs: t, backend: n, attrs: a } = e, { separator: r, nGramWidths: s, leftPad: i, rightPad: o, padWidth: l, preserveShortSequences: u } = a, { data: p, dataSplits: d } = t, c = n.data.get(p.dataId).values, h = n.data.get(d.dataId).values, [m, f] = Z1(c, h, r, s, i, o, l, u); return [n.makeTensorInfo([m.length], "string", m), n.makeTensorInfo(d.shape, "int32", f)] } var vJ = { kernelName: td, backendName: "cpu", kernelFunc: xJ }; function wJ(e) { let { inputs: t, backend: n, attrs: a } = e, { skipEmpty: r } = a, { input: s, delimiter: i } = t; if (s.dtype !== "string") throw new Error("Input must be of datatype string"); if (s.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${s.shape}`); if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`); let o = n.data.get(s.dataId).values, l = n.data.get(i.dataId).values[0], [u, p, d] = J1(o, l, r), c = p.length; return [n.makeTensorInfo([c, 2], "int32", u), n.makeTensorInfo([c], "string", p), n.makeTensorInfo([2], "int32", new Int32Array(d))] } var kJ = { kernelName: nd, backendName: "cpu", kernelFunc: wJ }; function IJ(e) { let { inputs: t, backend: n, attrs: a } = e, { numBuckets: r } = a, { input: s } = t; if (s.dtype !== "string") throw new Error("Input must be of datatype string"); if (r <= 0) throw new Error("Number of buckets must be at least 1"); let i = n.data.get(s.dataId).values, o = Q1(i, r); return n.makeTensorInfo(s.shape, "int32", o) } var SJ = { kernelName: ad, backendName: "cpu", kernelFunc: IJ }, NJ = lt(Go, e => Math.tan(e)), TJ = { kernelName: Go, backendName: "cpu", kernelFunc: NJ }, CJ = lt(Ho, e => Math.tanh(e)), EJ = { kernelName: Ho, backendName: "cpu", kernelFunc: CJ }; function _J(e) { let { inputs: t, backend: n } = e, { tensor: a, indices: r, updates: s } = t, { sliceRank: i, numUpdates: o, sliceSize: l, strides: u, outputSize: p } = T.calculateShapes(s, r, a.shape), d = !1, c = n.bufferSync(r), h = n.bufferSync(s), m = n.bufferSync(a), f = ai(c, h, a.shape, p, l, o, i, u, m, d); return n.makeTensorInfo(a.shape, f.dtype, f.values) } var AJ = { kernelName: Zu, backendName: "cpu", kernelFunc: _J }; function FJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { reps: s } = a; ge(r, "tile"); let i = D_(n.bufferSync(r), s); return n.makeTensorInfo(i.shape, i.dtype, i.values) } var $J = { kernelName: Ns, backendName: "cpu", kernelFunc: FJ }; function DJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { k: s, sorted: i } = a; ge(r, "topk"); let o = n.data.get(r.dataId).values, [l, u] = M_(o, r.shape, r.dtype, s, i); return [n.makeTensorInfo(l.shape, l.dtype, l.values), n.makeTensorInfo(u.shape, u.dtype, u.values)] } var RJ = { kernelName: ip, backendName: "cpu", kernelFunc: DJ }; function MJ(e) { let { inputs: t, attrs: n, backend: a } = e, { image: r, transforms: s } = t, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = n, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = w.computeStrides(r.shape), y = b[0], x = b[1], v = b[2], I = w.computeStrides(g), N = I[0], C = I[1], _ = I[2], F = w.getTypedArrayFromDType(r.dtype, w.sizeFromShape(g)); F.fill(l); let D = a.data.get(r.dataId).values, $ = a.data.get(s.dataId).values; for (let S = 0; S < p; ++S) { let M = s.shape[0] === 1 ? $ : $.subarray(S * 8, S * 8 + 8); for (let B = 0; B < m; ++B)for (let U = 0; U < f; ++U)for (let H = 0; H < h; ++H) { let j, K = M[6] * U + M[7] * B + 1; if (K === 0) continue; let Z = (M[0] * U + M[1] * B + M[2]) / K, J = (M[3] * U + M[4] * B + M[5]) / K, ee = IS(Z, c, o), ae = IS(J, d, o); switch (i) { case "nearest": j = BJ(D, d, c, y, x, v, S, ae, ee, H, l); break; case "bilinear": j = VJ(D, d, c, y, x, v, S, ae, ee, H, l); break; default: throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`) }let te = S * N + B * C + U * _ + H; F[te] = j } return a.makeTensorInfo(g, r.dtype, F) } return { dataId: a.write(F, g, r.dtype), shape: r.shape, dtype: r.dtype } } var OJ = { kernelName: op, backendName: "cpu", kernelFunc: MJ }; function IS(e, t, n) { switch (n) { case "reflect": return PJ(e, t); case "wrap": return LJ(e, t); case "nearest": return WJ(e, t); case "constant": default: return zJ(e, t) } } function PJ(e, t) { let n = e; if (n < 0) if (t <= 1) n = 0; else { let a = 2 * t; n < a && (n = a * Math.trunc(-n / a) + n), n = n < -t ? n + a : -n - 1 } else if (n > t - 1) if (t <= 1) n = 0; else { let a = 2 * t; n -= a * Math.trunc(n / a), n >= t && (n = a - n - 1) } return w.clamp(0, n, t - 1) } function LJ(e, t) { let n = e; if (n < 0) if (t <= 1) n = 0; else { let a = t - 1; n += t * (Math.trunc(-n / a) + 1) } else if (n > t - 1) if (t <= 1) n = 0; else { let a = t - 1; n -= t * Math.trunc(n / a) } return w.clamp(0, n, t - 1) } function zJ(e, t) { return e } function WJ(e, t) { return w.clamp(0, e, t - 1) } function uc(e, t, n, a, r, s, i, o, l, u, p) { let d = i * a + o * r + l * s + u; return 0 <= o && o < t && 0 <= l && l < n ? e[d] : p } function BJ(e, t, n, a, r, s, i, o, l, u, p) { let d = Math.round(o), c = Math.round(l); return uc(e, t, n, a, r, s, i, d, c, u, p) } function VJ(e, t, n, a, r, s, i, o, l, u, p) { let d = Math.floor(o), c = Math.floor(l), h = d + 1, m = c + 1, f = (m - l) * uc(e, t, n, a, r, s, i, d, c, u, p) + (l - c) * uc(e, t, n, a, r, s, i, d, m, u, p), g = (m - l) * uc(e, t, n, a, r, s, i, h, c, u, p) + (l - c) * uc(e, t, n, a, r, s, i, h, m, u, p); return (h - o) * f + (o - d) * g } function UJ(e) { let { inputs: t, attrs: n, backend: a } = e, { axis: r } = n, { x: s } = t; ge(s, "unique"); let i = a.data.get(s.dataId).values, { outputValues: o, outputShape: l, indices: u } = tk(i, r, s.shape, s.dtype); return [a.makeTensorInfo(l, s.dtype, o), a.makeTensorInfo([u.length], "int32", u)] } var GJ = { kernelName: rd, backendName: "cpu", kernelFunc: UJ }; function HJ(e) { let { inputs: t, backend: n, attrs: a } = e, { value: r } = t, { axis: s } = a; s < 0 && (s += r.shape.length); let i = r.shape.length, o = r.shape[s], l = new Array(i - 1), u = 0; for (let h = 0; h < i; h++)h !== s && (l[u++] = r.shape[h]); let p = new Array(i).fill(0), d = r.shape.slice(); d[s] = 1; let c = new Array(o); for (let h = 0; h < c.length; h++) { p[s] = h; let m = wi({ inputs: { x: r }, backend: n, attrs: { begin: p, size: d } }); c[h] = xt({ inputs: { x: m }, backend: n, attrs: { shape: l } }), n.disposeIntermediateTensorInfo(m) } return c } var qJ = { kernelName: lp, backendName: "cpu", kernelFunc: HJ }; function jJ(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, segmentIds: s } = t, { numSegments: i } = a; ge(r, "unsortedSegmentSum"); let o = r.shape.length, l = s.shape.length, u = [], p = [], d = o - l, c = s; for (let m = 0; m < d; ++m) { let f = Nm({ inputs: { input: c }, backend: n, attrs: { dim: m + 1 } }); c = f, p.push(f) } for (let m = 0; m < i; ++m) { let f = w.createScalarValue(m, "int32"), g = n.makeTensorInfo([], "int32", f), b = n_({ inputs: { a: g, b: c }, backend: n }), y = vs({ inputs: { x: b }, backend: n, attrs: { dtype: "float32" } }), x = Jf({ inputs: { a: y, b: r }, backend: n }), v = Rd({ inputs: { x }, backend: n, attrs: { axis: 0, keepDims: !1 } }); u.push(v), p.push(g), p.push(b), p.push(y), p.push(x), p.push(v) } let h = Y_({ inputs: u, backend: n, attrs: { axis: 0 } }); return p.forEach(m => n.disposeIntermediateTensorInfo(m)), h } var KJ = { kernelName: sd, backendName: "cpu", kernelFunc: jJ }, XJ = [V8, wK, G8, q8, CK, K8, Y8, J8, eX, nX, rX, iX, lX, cX, hX, gX, yX, vX, kX, W8, SX, TX, EX, _K, AX, NK, FK, $X, kK, RX, OX, PX, zX, BX, UX, HX, jX, XX, ZX, QX, tY, aY, sY, oY, lY, pY, dY, mY, fY, gY, bY, xY, kY, D8, SY, $K, $Y, DK, DY, MK, zY, WY, VY, PK, zK, GY, qY, KY, YY, BK, UK, IK, JY, MX, e7, n7, r7, R8, HK, jK, i7, XK, l7, c7, h7, g7, y7, v7, w7, ZK, I7, N7, C7, _7, F7, D7, M7, QK, P7, W7, G7, t8, a8, j7, Y7, Q7, s8, tZ, aZ, rZ, Z_, lZ, O8, l8, pZ, dZ, mZ, gZ, SK, fv, yZ, P8, L8, z8, vZ, kZ, SZ, TZ, EZ, _Z, FZ, b8, DZ, LZ, WZ, GZ, x8, qZ, KZ, YZ, v8, V7, QZ, tJ, aJ, sJ, oJ, uJ, cJ, hJ, I8, mJ, N8, C8, gJ, yJ, vJ, kJ, SJ, F8, vY, TJ, EJ, AJ, $J, RJ, OJ, i8, GJ, qJ, KJ, nZ]; for (let e of XJ) id(e); var J_ = {}; _e(J_, { assertNotComplex: () => wp, bindCanvasToFramebuffer: () => i9, bindColorTextureToFramebuffer: () => Zh, bindTextureToProgramUniformSampler: () => mA, bindTextureUnit: () => cA, bindVertexBufferToProgramAttribute: () => bv, callAndCheck: () => de, canBeRepresented: () => eA, createFragmentShader: () => aA, createFramebuffer: () => pA, createProgram: () => rA, createStaticIndexBuffer: () => oA, createStaticVertexBuffer: () => iA, createTexture: () => lA, createVertexShader: () => nA, getBatchDim: () => ki, getExtensionOrThrow: () => pc, getFramebufferErrorMessage: () => fA, getMaxTexturesInShader: () => xA, getNumChannels: () => r9, getProgramUniformLocation: () => hA, getProgramUniformLocationOrThrow: () => dA, getRowsCols: () => Ii, getShapeAs3D: () => dc, getTextureShapeFromLogicalShape: () => bA, getWebGLDisjointQueryTimerVersion: () => vA, getWebGLErrorMessage: () => tA, getWebGLMaxTextureSize: () => yA, hasExtension: () => ha, isCapableOfRenderingToFloatTexture: () => wA, isDownloadFloatTextureEnabled: () => kA, isReshapeFree: () => $c, isWebGLFenceEnabled: () => IA, isWebGLVersionEnabled: () => xv, linkProgram: () => sA, logShaderSourceAndInfoLog: () => ik, resetMaxTextureSize: () => o9, resetMaxTexturesInShader: () => l9, unbindColorTextureFromFramebuffer: () => yv, unbindTextureUnit: () => s9, validateFramebuffer: () => cc, validateProgram: () => Yh, validateTextureSize: () => uA }); var ti = {}, Uh = { alpha: !1, antialias: !1, premultipliedAlpha: !1, preserveDrawingBuffer: !1, depth: !1, stencil: !1, failIfMajorPerformanceCaveat: !0 }; function Q_(e, t) { ti[e] = t } function qa(e, t) { if (!(e in ti) || t != null) { let a = ZJ(e, t); if (a !== null) ti[e] = a; else return console.log("Could not get context for WebGL version", e), null } let n = ti[e]; return n == null || n.isContextLost() ? (delete ti[e], qa(e)) : (n.disable(n.DEPTH_TEST), n.disable(n.STENCIL_TEST), n.disable(n.BLEND), n.disable(n.DITHER), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SAMPLE_COVERAGE), n.enable(n.SCISSOR_TEST), n.enable(n.CULL_FACE), n.cullFace(n.BACK), ti[e]) } function YJ(e) { if (!G().getBool("IS_SAFARI") && typeof OffscreenCanvas != "undefined" && e === 2) return new OffscreenCanvas(300, 150); if (typeof document != "undefined") return document.createElement("canvas"); throw new Error("Cannot create a canvas in this context") } function ZJ(e, t) { if (e !== 1 && e !== 2) throw new Error("Cannot get WebGL rendering context, WebGL is disabled."); let n = t == null ? YJ(e) : t; return n.addEventListener("webglcontextlost", a => { a.preventDefault(), delete ti[e] }, !1), G().getBool("SOFTWARE_WEBGL_ENABLED") && (Uh.failIfMajorPerformanceCaveat = !1), e === 1 ? n.getContext("webgl", Uh) || n.getContext("experimental-webgl", Uh) : n.getContext("webgl2", Uh) } var Fc; (function (e) { e[e.DENSE = 0] = "DENSE", e[e.SHARED_BATCH = 1] = "SHARED_BATCH" })(Fc || (Fc = {})); var da; (function (e) { e[e.RENDER = 0] = "RENDER", e[e.UPLOAD = 1] = "UPLOAD", e[e.PIXELS = 2] = "PIXELS", e[e.DOWNLOAD = 3] = "DOWNLOAD" })(da || (da = {})); var dn; (function (e) { e[e.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", e[e.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", e[e.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", e[e.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", e[e.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16" })(dn || (dn = {})); function Md(e, t) { return [t, e] } function JJ(e, t) { return e * t } function Gh(e) { let t = w.sizeFromShape(e), n = Math.ceil(t / 4); return w.sizeToSquarishShape(n) } function vp(e, t) { return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(e / 2))] } function QJ(e, t) { let [n, a] = vp(e, t); return n * a * 4 } function sk(e, t) { let n = e, a, r, s, i, o, l, u, p, d, c; return G().getNumber("WEBGL_VERSION") === 2 ? (a = n.R32F, r = n.R16F, s = n.RGBA16F, i = n.RGBA32F, o = n.RED, u = 4, p = 1, d = n.HALF_FLOAT, c = n.FLOAT, l = n.RGBA8) : (a = e.RGBA, r = e.RGBA, s = e.RGBA, i = n.RGBA, o = e.RGBA, u = 4, p = 4, d = t != null ? t.HALF_FLOAT_OES : null, c = e.FLOAT, l = e.RGBA), { internalFormatFloat: a, internalFormatHalfFloat: r, internalFormatPackedHalfFloat: s, internalFormatPackedFloat: i, textureFormatFloat: o, downloadTextureFormat: l, downloadUnpackNumChannels: u, defaultNumChannels: p, textureTypeHalfFloat: d, textureTypeFloat: c } } function de(e, t) { let n = t(); return G().getBool("DEBUG") && e9(e), n } function e9(e) { let t = e.getError(); if (t !== e.NO_ERROR) throw new Error("WebGL Error: " + tA(e, t)) } var t9 = 596e-10, n9 = 65504; function eA(e) { return !!(G().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || e === 0 || t9 < Math.abs(e) && Math.abs(e) < n9) } function tA(e, t) { switch (t) { case e.NO_ERROR: return "NO_ERROR"; case e.INVALID_ENUM: return "INVALID_ENUM"; case e.INVALID_VALUE: return "INVALID_VALUE"; case e.INVALID_OPERATION: return "INVALID_OPERATION"; case e.INVALID_FRAMEBUFFER_OPERATION: return "INVALID_FRAMEBUFFER_OPERATION"; case e.OUT_OF_MEMORY: return "OUT_OF_MEMORY"; case e.CONTEXT_LOST_WEBGL: return "CONTEXT_LOST_WEBGL"; default: return `Unknown error code ${t}` } } function pc(e, t) { return Lr(e, () => e.getExtension(t), 'Extension "' + t + '" not supported on this browser.') } function nA(e, t) { let n = Lr(e, () => e.createShader(e.VERTEX_SHADER), "Unable to create vertex WebGLShader."); if (de(e, () => e.shaderSource(n, t)), de(e, () => e.compileShader(n)), e.getShaderParameter(n, e.COMPILE_STATUS) === !1) throw console.log(e.getShaderInfoLog(n)), new Error("Failed to compile vertex shader."); return n } function aA(e, t) { let n = Lr(e, () => e.createShader(e.FRAGMENT_SHADER), "Unable to create fragment WebGLShader."); if (de(e, () => e.shaderSource(n, t)), de(e, () => e.compileShader(n)), G().get("ENGINE_COMPILE_ONLY")) return n; if (e.getShaderParameter(n, e.COMPILE_STATUS) === !1) throw ik(t, e.getShaderInfoLog(n)), new Error("Failed to compile fragment shader."); return n } var a9 = /ERROR: [0-9]+:([0-9]+):/g; function ik(e, t) {
        let n = a9.exec(t); if (n == null) { console.log(`Couldn't parse line number in error: ${t}`), console.log(e); return } let a = +n[1], r = e.split(`
`), s = r.length.toString().length + 2, i = r.map((d, c) => w.rightPad((c + 1).toString(), s) + d), o = 0; for (let d = 0; d < i.length; d++)o = Math.max(i[d].length, o); let l = i.slice(0, a - 1), u = i.slice(a - 1, a), p = i.slice(a); console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${w.rightPad(u[0], o)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(p.join(`
`))
    } function rA(e) { return Lr(e, () => e.createProgram(), "Unable to create WebGLProgram.") } function sA(e, t) { if (de(e, () => e.linkProgram(t)), !G().get("ENGINE_COMPILE_ONLY") && e.getProgramParameter(t, e.LINK_STATUS) === !1) throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.") } function Yh(e, t) { if (de(e, () => e.validateProgram(t)), e.getProgramParameter(t, e.VALIDATE_STATUS) === !1) throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.") } function iA(e, t) { let n = Lr(e, () => e.createBuffer(), "Unable to create WebGLBuffer"); return de(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)), de(e, () => e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW)), n } function oA(e, t) { let n = Lr(e, () => e.createBuffer(), "Unable to create WebGLBuffer"); return de(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n)), de(e, () => e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW)), n } function r9() { return G().getNumber("WEBGL_VERSION") === 2 ? 1 : 4 } function lA(e) { return Lr(e, () => e.createTexture(), "Unable to create WebGLTexture.") } function uA(e, t) { let n = G().getNumber("WEBGL_MAX_TEXTURE_SIZE"); if (e <= 0 || t <= 0) { let a = `[${e}x${t}]`; throw new Error("Requested texture size " + a + " is invalid.") } if (e > n || t > n) { let a = `[${e}x${t}]`, r = `[${n}x${n}]`; throw new Error("Requested texture size " + a + " greater than WebGL maximum on this browser / GPU " + r + ".") } } function pA(e) { return Lr(e, () => e.createFramebuffer(), "Unable to create WebGLFramebuffer.") } function bv(e, t, n, a, r, s, i) { let o = e.getAttribLocation(t, n); return o === -1 ? !1 : (de(e, () => e.bindBuffer(e.ARRAY_BUFFER, a)), de(e, () => e.vertexAttribPointer(o, r, e.FLOAT, !1, s, i)), de(e, () => e.enableVertexAttribArray(o)), !0) } function cA(e, t, n) { gA(e, n), de(e, () => e.activeTexture(e.TEXTURE0 + n)), de(e, () => e.bindTexture(e.TEXTURE_2D, t)) } function s9(e, t) { gA(e, t), de(e, () => e.activeTexture(e.TEXTURE0 + t)), de(e, () => e.bindTexture(e.TEXTURE_2D, null)) } function dA(e, t, n) { return Lr(e, () => e.getUniformLocation(t, n), 'uniform "' + n + '" not present in program.') } function hA(e, t, n) { return e.getUniformLocation(t, n) } function mA(e, t, n, a) { de(e, () => cA(e, t, a)), de(e, () => e.uniform1i(n, a)) } function i9(e) { de(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), de(e, () => e.viewport(0, 0, e.canvas.width, e.canvas.height)), de(e, () => e.scissor(0, 0, e.canvas.width, e.canvas.height)) } function Zh(e, t, n) { de(e, () => e.bindFramebuffer(e.FRAMEBUFFER, n)), de(e, () => e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0)) } function yv(e, t) { de(e, () => e.bindFramebuffer(e.FRAMEBUFFER, t)), de(e, () => e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0)) } function cc(e) { let t = e.checkFramebufferStatus(e.FRAMEBUFFER); if (t !== e.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + fA(e, t)) } function fA(e, t) { switch (t) { case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"; case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"; case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"; case e.FRAMEBUFFER_UNSUPPORTED: return "FRAMEBUFFER_UNSUPPORTED"; default: return `unknown error ${t}` } } function Lr(e, t, n) { let a = de(e, () => t()); if (a == null) throw new Error(n); return a } function gA(e, t) { let n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, a = t + e.TEXTURE0; if (a < e.TEXTURE0 || a > n) { let r = `[gl.TEXTURE0, gl.TEXTURE${n}]`; throw new Error(`textureUnit must be in ${r}.`) } } function ki(e, t = 2) { return w.sizeFromShape(e.slice(0, e.length - t)) } function Ii(e) { if (e.length === 0) throw Error("Cannot get rows and columns of an empty shape array."); return [e.length > 1 ? e[e.length - 2] : 1, e[e.length - 1]] } function dc(e) { let t = [1, 1, 1]; return e.length === 0 || e.length === 1 && e[0] === 1 || (t = [ki(e), ...Ii(e)]), t } function bA(e, t = !1) { let n = G().getNumber("WEBGL_MAX_TEXTURE_SIZE"), a = G().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE"); a === 1 / 0 && G().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (a = n / 2), t && (n = n * 2, a = a * 2, e = e.map((o, l) => l >= e.length - 2 ? w.nearestLargerEven(e[l]) : e[l]), e.length === 1 && (e = [2, e[0]])), e.length !== 2 && (e = w.squeezeShape(e).newShape); let r = w.sizeFromShape(e), s = null; e.length <= 1 && r <= n ? s = [1, r] : e.length === 2 && e[0] <= n && e[1] <= n ? s = e : e.length === 3 && e[0] * e[1] <= n && e[2] <= n ? s = [e[0] * e[1], e[2]] : e.length === 3 && e[0] <= n && e[1] * e[2] <= n ? s = [e[0], e[1] * e[2]] : e.length === 4 && e[0] * e[1] * e[2] <= n && e[3] <= n ? s = [e[0] * e[1] * e[2], e[3]] : e.length === 4 && e[0] <= n && e[1] * e[2] * e[3] <= n && (s = [e[0], e[1] * e[2] * e[3]]); let i = s != null && Math.max(...s) > a && Math.min(...s) <= (t ? 2 : 1) && Math.min(...s) > 0; if (s == null || i) if (t) { let o = ki(e), l = 2, u = 2; e.length && ([l, u] = Ii(e)), r = o * (l / 2) * (u / 2), s = w.sizeToSquarishShape(r).map(p => p * 2) } else s = w.sizeToSquarishShape(r); return s } function Hh(e) { return e % 2 === 0 } function $c(e, t) { if (e = e.slice(-2), t = t.slice(-2), w.arraysEqual(e, t) || !e.length || !t.length || e[0] === 0 || e[1] === 0 || t[0] === 0 || t[1] === 0) return !0; if (e.length !== t.length) { let n = e[e.length - 1], a = t[t.length - 1]; if (n === a || Hh(n) && Hh(a) && (e[0] === 1 || t[0] === 1)) return !0 } return e[1] === t[1] && Hh(e[0]) && Hh(t[0]) } var Jh, Qh; function yA(e) { if (Jh == null) { let t = qa(e); Jh = t.getParameter(t.MAX_TEXTURE_SIZE) } return Jh } function o9() { Jh = null } function l9() { Qh = null } function xA(e) { if (Qh == null) { let t = qa(e); Qh = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS) } return Math.min(16, Qh) } function vA(e) { if (e === 0) return 0; let t, n = qa(e); return ha(n, "EXT_disjoint_timer_query_webgl2") && e === 2 ? t = 2 : ha(n, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t } function ha(e, t) { return e.getExtension(t) != null } function xv(e) { try { if (qa(e) != null) return !0 } catch (t) { return console.log("Error when getting WebGL context: ", t), !1 } return !1 } function wA(e) { if (e === 0) return !1; let t = qa(e); if (e === 1) { if (!ha(t, "OES_texture_float")) return !1 } else if (!ha(t, "EXT_color_buffer_float")) return !1; return vv(t) } function kA(e) { if (e === 0) return !1; let t = qa(e); if (e === 1) { if (!ha(t, "OES_texture_float") || !ha(t, "WEBGL_color_buffer_float")) return !1 } else { if (ha(t, "EXT_color_buffer_float")) return vv(t); let n = "EXT_color_buffer_half_float"; if (ha(t, n)) { let a = t.getExtension(n); return u9(t, a) } return !1 } return vv(t) } function vv(e) { let t = sk(e), n = e.createTexture(); e.bindTexture(e.TEXTURE_2D, n), e.texImage2D(e.TEXTURE_2D, 0, t.internalFormatFloat, 1, 1, 0, t.textureFormatFloat, t.textureTypeFloat, null); let a = e.createFramebuffer(); e.bindFramebuffer(e.FRAMEBUFFER, a), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, n, 0); let r = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE; return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(n), e.deleteFramebuffer(a), r } function u9(e, t) { let n = sk(e, t), a = e.createTexture(); e.bindTexture(e.TEXTURE_2D, a), e.texImage2D(e.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null); let r = e.createFramebuffer(); e.bindFramebuffer(e.FRAMEBUFFER, r), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, a, 0); let s = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE; return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(a), e.deleteFramebuffer(r), s } function IA(e) { return e !== 2 ? !1 : qa(e).fenceSync != null } function wp(e, t) { Array.isArray(e) || (e = [e]), e.forEach(n => { n != null && w.assert(n.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`) }) } var be = G(); be.registerFlag("HAS_WEBGL", () => be.getNumber("WEBGL_VERSION") > 0); be.registerFlag("WEBGL_VERSION", () => xv(2) ? 2 : xv(1) ? 1 : 0); be.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1); be.registerFlag("WEBGL_BUFFER_SUPPORTED", () => be.get("WEBGL_VERSION") === 2); be.registerFlag("WEBGL_CPU_FORWARD", () => !0); be.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1); be.registerFlag("WEBGL_PACK", () => be.getBool("HAS_WEBGL")); be.registerFlag("WEBGL_PACK_NORMALIZATION", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_CLIP", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_REDUCE", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_LAZILY_UNPACK", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_CONV_IM2COL", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => be.getBool("WEBGL_PACK")); be.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => yA(be.getNumber("WEBGL_VERSION"))); be.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => xA(be.getNumber("WEBGL_VERSION"))); be.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => { let e = be.getNumber("WEBGL_VERSION"); return e === 0 ? 0 : vA(e) }); be.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => be.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !ud.isMobile()); be.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => wA(be.getNumber("WEBGL_VERSION"))); be.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => be.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : be.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")); be.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => kA(be.getNumber("WEBGL_VERSION"))); be.registerFlag("WEBGL_FENCE_API_ENABLED", () => IA(be.getNumber("WEBGL_VERSION"))); be.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => be.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0); be.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, e => { if (typeof e != "number") throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`); if (e < 0 && e !== -1) throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`) }); be.registerFlag("WEBGL_FLUSH_THRESHOLD", () => ud.isMobile() ? 1 : -1, e => { if (typeof e != "number") throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`); if (e < 0 && e !== -1) throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`) }); be.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128); be.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1); be.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5); be.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128); be.registerFlag("WEBGL_EXP_CONV", () => !1); be.registerFlag("SOFTWARE_WEBGL_ENABLED", () => be.getBool("IS_TEST")); be.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0); be.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1); be.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1); be.registerFlag("ENGINE_COMPILE_ONLY", () => !1); function Cn() {
        let e, t, n, a, r, s, i, o, l, u; return G().getNumber("WEBGL_VERSION") === 2 ? (e = "#version 300 es", t = "in", n = "out", a = "in", r = "texture", s = "outputColor", i = "out vec4 outputColor;", o = G().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `: "", l = "", u = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (e = "", t = "attribute", n = "varying", a = "varying", r = "texture2D", s = "gl_FragColor", i = "", o = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, u = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: e, attribute: t, varyingVs: n, varyingFs: a, texture2D: r, output: s, defineOutput: i, defineSpecialNaN: o, defineSpecialInf: l, defineRound: u }
    } function Qo(e, t, n = "index") { let a = w.computeStrides(t); return a.map((r, s) => { let i = `int ${e[s]} = ${n} / ${r}`, o = s === a.length - 1 ? `int ${e[s + 1]} = ${n} - ${e[s]} * ${r}` : `index -= ${e[s]} * ${r}`; return `${i}; ${o};` }).join("") } function Qf(e, t, n = "index") { let a = w.computeStrides(t); return a.map((r, s) => { let i = `int ${e[s]} = ${n} / outShapeStrides[${s}]`, o = s === a.length - 1 ? `int ${e[s + 1]} = ${n} - ${e[s]} * outShapeStrides[${s}]` : `index -= ${e[s]} * outShapeStrides[${s}]`; return `${i}; ${o};` }).join("") } function p9(e, t) { let n = e.length, a = e.map(s => `${t}[${s}]`), r = new Array(n - 1); r[n - 2] = a[n - 1]; for (let s = n - 3; s >= 0; --s)r[s] = `(${r[s + 1]} * ${a[s + 1]})`; return r } function c9(e, t, n = "index") { let a = e.map((s, i) => i), r = p9(a, t); return r.map((s, i) => { let o = `int ${e[i]} = ${n} / ${r[i]}`, l = i === r.length - 1 ? `int ${e[i + 1]} = ${n} - ${e[i]} * ${r[i]}` : `index -= ${e[i]} * ${r[i]}`; return `${o}; ${l};` }).join("") } function ok(e) {
        let t = w.computeStrides(e).map(n => n.toString()); return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`} function lk() {
        return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`} var SA = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`, { getBroadcastDims: NA } = T; function d9(e, t, n) {
        let a = []; if (e.forEach(c => { let h = w.sizeFromShape(c.shapeInfo.logicalShape); if (c.shapeInfo.isUniform ? a.push(`uniform float ${c.name}${h > 1 ? `[${h}]` : ""};`) : (a.push(`uniform sampler2D ${c.name};`), a.push(`uniform int offset${c.name};`)), n.enableShapeUniforms) { let { uniformShape: m } = uk(n.packedInputs, c.shapeInfo.logicalShape, c.shapeInfo.texShape); switch (m.length) { case 1: a.push(`uniform int ${c.name}Shape;`); break; case 2: a.push(`uniform ivec2 ${c.name}Shape;`); break; case 3: a.push(`uniform ivec3 ${c.name}Shape;`); break; case 4: a.push(`uniform ivec4 ${c.name}Shape;`); break; default: break }a.push(`uniform ivec2 ${c.name}TexShape;`) } }), n.enableShapeUniforms) { switch (t.logicalShape.length) { case 1: a.push("uniform int outShape;"); break; case 2: a.push("uniform ivec2 outShape;"), a.push("uniform int outShapeStrides;"); break; case 3: a.push("uniform ivec3 outShape;"), a.push("uniform ivec2 outShapeStrides;"); break; case 4: a.push("uniform ivec4 outShape;"), a.push("uniform ivec3 outShapeStrides;"); break; default: break }a.push("uniform ivec2 outTexShape;") } n.customUniforms && n.customUniforms.forEach(c => { a.push(`uniform ${c.type} ${c.name}${c.arrayIndex ? `[${c.arrayIndex}]` : ""};`) }); let r = a.join(`
`), s = e.map(c => h9(c, t, n.packedInputs, n.enableShapeUniforms)).join(`
`), i = t.texShape, o = Cn(), l = g9(o), u, p, d = x9(o); return t.isPacked ? (u = m9(t.logicalShape, i, n.enableShapeUniforms), p = y9(o)) : (u = f9(t.logicalShape, i, n.enableShapeUniforms), p = b9(o)), n.packedInputs && (d += I9), [d, l, p, r, u, s, n.userCode].join(`
`)
    } function kp(e, t = !1) { let n = e.shapeInfo.logicalShape; switch (n.length) { case 0: return M9(e, t); case 1: return P9(e, t); case 2: return z9(e, t); case 3: return B9(e, t); case 4: return U9(e, t); case 5: return G9(e); case 6: return H9(e); default: throw new Error(`${n.length}-D input sampling is not yet supported`) } } function TA(e, t) { switch (e.shapeInfo.logicalShape.length) { case 0: return R9(e); case 1: return O9(e, t); case 2: return L9(e, t); case 3: return W9(e, t); default: return V9(e, t) } } function h9(e, t, n = !1, a) { let r = ""; n ? r += TA(e, a) : r += kp(e, a); let s = e.shapeInfo.logicalShape, i = t.logicalShape; return s.length <= i.length && (n ? r += q9(e, t) : r += j9(e, t)), r } function m9(e, t, n) { switch (e.length) { case 0: return CA(); case 1: return S9(e, t, n); case 2: return $9(e, t, n); case 3: return T9(e, t, n); default: return E9(e, t, n) } } function f9(e, t, n) { switch (e.length) { case 0: return CA(); case 1: return N9(e, t, n); case 2: return D9(e, t, n); case 3: return C9(e, t, n); case 4: return _9(e, t, n); case 5: return A9(e, t); case 6: return F9(e, t); default: throw new Error(`${e.length}-D output sampling is not yet supported`) } } function g9(e) {
        return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${e.texture2D}(textureSampler, uv).r;
    }
  `} function b9(e) {
        return `
    void setOutput(float val) {
      ${e.output} = vec4(val, 0, 0, 0);
    }
  `} function y9(e) {
        return `
    void setOutput(vec4 val) {
      ${e.output} = val;
    }
  `} function x9(e) {
        return `${e.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e.varyingFs} vec2 resultUV;
    ${e.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${e.defineSpecialNaN}
    ${e.defineSpecialInf}
    ${e.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${v9}
    ${w9}
    ${k9}
  `} var v9 = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, w9 = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, k9 = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, I9 = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`; function CA() {
        return `
    int getOutputCoords() {
      return 0;
    }
  `} function S9(e, t, n) {
        let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)]; return a[0] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `: `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${a[1]}.0);
      }
    `: a[1] === 1 ? n ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `: `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${a[0]}.0);
      }
    `: n ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `: `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      return 2 * (resTexRC.x * ${a[1]} + resTexRC.y);
    }
  `} function N9(e, t, n) {
        return t[0] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `: `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `: t[1] === 1 ? n ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `: `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `: n ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `: `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `} function T9(e, t, n) {
        if (n) return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `; let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e[2] / 2), s = r * Math.ceil(e[1] / 2); return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      int index = resTexRC.x * ${a[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `} function C9(e, t, n) {
        if (n) return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Qf(["r", "c", "d"], e)}
    return ivec3(r, c, d);
  }
`; let a = Qo(["r", "c", "d"], e); return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${a}
      return ivec3(r, c, d);
    }
  `} function E9(e, t, n) {
        if (n) return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `; let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(e[e.length - 1] / 2), s = r * Math.ceil(e[e.length - 2] / 2), i = s, o = "", l = "b, r, c"; for (let u = 2; u < e.length - 1; u++)i *= e[e.length - u - 1], o = `
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+ o, l = `b${u}, ` + l; return `
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));
      int index = resTexRC.x * ${a[1]} + resTexRC.y;

      ${o}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${e.length}(${l});
    }
  `} function _9(e, t, n) {
        if (n) return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Qf(["r", "c", "d", "d2"], e)}
      return ivec4(r, c, d, d2);
    }
  `; let a = Qo(["r", "c", "d", "d2"], e); return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${a}
      return ivec4(r, c, d, d2);
    }
  `} function A9(e, t) {
        let n = Qo(["r", "c", "d", "d2", "d3"], e); return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `} function F9(e, t) {
        let n = Qo(["r", "c", "d", "d2", "d3", "d4"], e); return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `} function $9(e, t, n) {
        let a = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)]; if (w.arraysEqual(e, t)) return n ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `: `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));
      }
    `; let r = Math.ceil(e[1] / 2); return n ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `: `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${a[0]}, ${a[1]}));

      int index = resTexRC.x * ${a[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `} function D9(e, t, n) {
        return w.arraysEqual(e, t) ? n ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `: `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `: e[1] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `: `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `: e[0] === 1 ? n ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `: `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `: n ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `: `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${e[1]};
      int c = index - r * ${e[1]};
      return ivec2(r, c);
    }
  `} function el(e) { return `offset${e}` } function R9(e) {
        let t = e.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), a = Cn(); return `
    vec4 ${n}() {
      return ${a.texture2D}(${t}, halfCR);
    }
  `} function M9(e, t) {
        let n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1); if (e.shapeInfo.isUniform) return `float ${a}() {return ${n};}`; let [r, s] = e.shapeInfo.texShape; if (r === 1 && s === 1) return `
      float ${a}() {
        return sampleTexture(${n}, halfCR);
      }
    `; let i = el(n); if (t) return `
    float ${a}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `; let [o, l] = e.shapeInfo.texShape; return `
    float ${a}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${i});
      return sampleTexture(${n}, uv);
    }
  `} function O9(e, t) {
        let n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = e.shapeInfo.texShape, s = Cn(); if (t) return `
    vec4 ${a}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${n}, uv);
    }
  `; let i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)]; return `
    vec4 ${a}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${n}, uv);
    }
  `} function P9(e, t) {
        let n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1); if (e.shapeInfo.isUniform) return `
      float ${a}(int index) {
        ${Ip(e)}
      }
    `; let r = e.shapeInfo.texShape, s = r[0], i = r[1]; if (i === 1 && s === 1) return `
      float ${a}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `; let o = el(n); return i === 1 ? t ? `
      float ${a}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    `: `
      float ${a}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);
        return sampleTexture(${n}, uv);
      }
    `: s === 1 ? t ? `
      float ${a}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    `: `
      float ${a}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    `: t ? `
    float ${a}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});
      return sampleTexture(${n}, uv);
    }
  `: `
    float ${a}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});
      return sampleTexture(${n}, uv);
    }
  `} function L9(e, t) {
        let n = e.shapeInfo.logicalShape, a = e.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e.shapeInfo.texShape, i = s[0], o = s[1], l = Cn(); if (s != null && w.arraysEqual(n, s)) return t ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);

        return ${l.texture2D}(${a}, uv);
      }
    `: `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);

        return ${l.texture2D}(${a}, uv);
      }
    `; if (t) return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `; let u = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)], p = Math.ceil(n[1] / 2); return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${p}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `} function z9(e, t) {
        let n = e.shapeInfo.logicalShape, a = e.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e.shapeInfo.texShape; if (s != null && w.arraysEqual(n, s)) {
            if (t) return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `; let c = s[0], h = s[1]; return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${h}.0, ${c}.0);
      return sampleTexture(${a}, uv);
    }
  `} let { newShape: i, keptDims: o } = w.squeezeShape(n), l = i; if (l.length < n.length) {
            let c = Sp(e, l), h = ["row", "col"]; return `
      ${kp(c, t)}
      float ${r}(int row, int col) {
        return ${r}(${Np(h, o)});
      }
    `} if (e.shapeInfo.isUniform) return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${Ip(e)}
      }
    `; let u = s[0], p = s[1], d = el(a); return p === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `: `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  `: u === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `: `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${p}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `: t ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `: `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${d};
    vec2 uv = uvFromFlat(${u}, ${p}, index);
    return sampleTexture(${a}, uv);
  }
`} function W9(e, t) {
        let n = e.shapeInfo.logicalShape, a = e.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = e.shapeInfo.texShape, i = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)]; if (n[0] === 1) {
            let c = n.slice(1), h = [1, 2], m = Sp(e, c), f = ["b", "row", "col"]; return `
        ${TA(m, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${Np(f, h)});
        }
      `} let o = Cn(); if (t) return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${o.texture2D}(${a}, uv);
    }
  `; let l = i[0], u = i[1], p = Math.ceil(n[2] / 2), d = p * Math.ceil(n[1] / 2); return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${d}, ${p}, b, row, col);
      return ${o.texture2D}(${a}, uv);
    }
  `} function B9(e, t) {
        let n = e.shapeInfo.logicalShape, a = e.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = n[1] * n[2], i = n[2], { newShape: o, keptDims: l } = w.squeezeShape(n), u = o; if (u.length < n.length) {
            let f = Sp(e, u), g = ["row", "col", "depth"]; return `
        ${kp(f, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${Np(g, l)});
        }
      `} if (e.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${Ip(e)}
      }
    `; let p = e.shapeInfo.texShape, d = p[0], c = p[1], h = e.shapeInfo.flatOffset; if (c === s && h == null) return t ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `: `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${c}.0, ${d}.0);
          return sampleTexture(${a}, uv);
        }
      `; if (c === i && h == null) return t ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `: `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}.0, ${d}.0);
      return sampleTexture(${a}, uv);
    }
  `; let m = el(a); return t ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${m};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `: `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${m};
        vec2 uv = uvFromFlat(${d}, ${c}, index);
        return sampleTexture(${a}, uv);
      }
  `} function V9(e, t) {
        let n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = Cn(); if (t) return `
    vec4 ${a}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);
    }
  `; let s = e.shapeInfo.logicalShape, i = s.length, o = e.shapeInfo.texShape, l = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], u = l[0], p = l[1], d = Math.ceil(s[i - 1] / 2), c = d * Math.ceil(s[i - 2] / 2), h = "int b, int row, int col", m = `b * ${c} + (row / 2) * ${d} + (col / 2)`; for (let f = 2; f < i - 1; f++)h = `int b${f}, ` + h, c *= s[i - f - 1], m = `b${f} * ${c} + ` + m; return `
    vec4 ${a}(${h}) {
      int index = ${m};
      int texR = index / ${p};
      int texC = index - texR * ${p};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}, ${u});
      return ${r.texture2D}(${n}, uv);
    }
  `} function U9(e, t) {
        let n = e.shapeInfo.logicalShape, a = e.name, r = "get" + a.charAt(0).toUpperCase() + a.slice(1), s = n[3], i = n[2] * s, o = n[1] * i, { newShape: l, keptDims: u } = w.squeezeShape(n); if (l.length < n.length) {
            let y = Sp(e, l), x = ["row", "col", "depth", "depth2"]; return `
      ${kp(y, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${Np(x, u)});
      }
    `} if (e.shapeInfo.isUniform) return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${o}, ${i}, ${s}, 1)));
        ${Ip(e)}
      }
    `; let p = e.shapeInfo.flatOffset, d = e.shapeInfo.texShape, c = d[0], h = d[1], m = `int stride2 = ${a}Shape[3];`, f = `int stride1 = ${a}Shape[2] * stride2;`, g = `int stride0 = ${a}Shape[1] * stride1;`; if (h === o && p == null) return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${m}
        ${f}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `: `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `; if (h === s && p == null) return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `: `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1] * n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `; let b = el(a); return t ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${f}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});
      return sampleTexture(${a}, uv);
    }
  `: `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${c}, ${h}, index + ${b});
      return sampleTexture(${a}, uv);
    }
  `} function G9(e) {
        let t = e.shapeInfo.logicalShape, n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), r = t[4], s = t[3] * r, i = t[2] * s, o = t[1] * i, { newShape: l, keptDims: u } = w.squeezeShape(t); if (l.length < t.length) {
            let f = Sp(e, l), g = ["row", "col", "depth", "depth2", "depth3"]; return `
      ${kp(f)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${Np(g, u)});
      }
    `} if (e.shapeInfo.isUniform) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${o}, ${i}, ${s}, ${r})) +
          depth3;
        ${Ip(e)}
      }
    `; let p = e.shapeInfo.flatOffset, d = e.shapeInfo.texShape, c = d[0], h = d[1]; if (h === o && p == null) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `; if (h === r && p == null) return `
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `; let m = el(n); return `
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${o} + col * ${i} + depth * ${s} +
          depth2 * ${r} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${h}, index);
      return sampleTexture(${n}, uv);
    }
  `} function H9(e) {
        let t = e.shapeInfo.logicalShape, n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), { newShape: r, keptDims: s } = w.squeezeShape(t); if (r.length < t.length) {
            let g = Sp(e, r), b = ["row", "col", "depth", "depth2", "depth3", "depth4"]; return `
      ${kp(g)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${Np(b, s)});
      }
    `} let i = t[5], o = t[4] * i, l = t[3] * o, u = t[2] * l, p = t[1] * u; if (e.shapeInfo.isUniform) return `
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${p}, ${u}, ${l}, ${o})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Ip(e)}
      }
    `; let d = e.shapeInfo.flatOffset, c = e.shapeInfo.texShape, h = c[0], m = c[1]; if (m === p && d == null) return `
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${o}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `; if (m === i && d == null) return `
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${h}.0);
        return sampleTexture(${n}, uv);
      }
    `; let f = el(n); return `
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${p} + col * ${u} + depth * ${l} +
          depth2 * ${o} + depth3 * ${i} + depth4 + ${f};
      vec2 uv = uvFromFlat(${h}, ${m}, index);
      return sampleTexture(${n}, uv);
    }
  `} function Ip(e) {
        let t = e.name, n = w.sizeFromShape(e.shapeInfo.logicalShape); return n < 2 ? `return ${t};` : `
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `} function q9(e, t) {
        let n = e.name, a = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + a + "AtOutCoords", s = e.shapeInfo.logicalShape.length, i = t.logicalShape.length, o = NA(e.shapeInfo.logicalShape, t.logicalShape), l = ht(i), u = i - s, p, d = ["x", "y", "z", "w", "u", "v"]; s === 0 ? p = "" : i < 2 && o.length >= 1 ? p = "coords = 0;" : p = o.map(g => `coords.${d[g + u]} = 0;`).join(`
`); let c = ""; i < 2 && s > 0 ? c = "coords" : c = e.shapeInfo.logicalShape.map((g, b) => `coords.${d[b + u]}`).join(", "); let h = "return outputValue;", m = w.sizeFromShape(e.shapeInfo.logicalShape) === 1, f = w.sizeFromShape(t.logicalShape) === 1; if (s === 1 && !m && !f) h = `
      return vec4(outputValue.xy, outputValue.xy);
    `; else if (m && !f) i === 1 ? h = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `: h = `
        return vec4(outputValue.x);
      `; else if (o.length) { let g = s - 2, b = s - 1; o.indexOf(g) > -1 && o.indexOf(b) > -1 ? h = "return vec4(outputValue.x);" : o.indexOf(g) > -1 ? h = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : o.indexOf(b) > -1 && (h = "return vec4(outputValue.xx, outputValue.zz);") } return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${p}
      vec4 outputValue = get${a}(${c});
      ${h}
    }
  `} function j9(e, t) {
        let n = e.name, a = n.charAt(0).toUpperCase() + n.slice(1), r = "get" + a + "AtOutCoords", s = t.texShape, i = e.shapeInfo.texShape, o = e.shapeInfo.logicalShape.length, l = t.logicalShape.length; if (!e.shapeInfo.isUniform && o === l && e.shapeInfo.flatOffset == null && w.arraysEqual(i, s)) return `
      float ${r}() {
        return sampleTexture(${n}, resultUV);
      }
    `; let u = ht(l), p = NA(e.shapeInfo.logicalShape, t.logicalShape), d = l - o, c, h = ["x", "y", "z", "w", "u", "v"]; o === 0 ? c = "" : l < 2 && p.length >= 1 ? c = "coords = 0;" : c = p.map(f => `coords.${h[f + d]} = 0;`).join(`
`); let m = ""; return l < 2 && o > 0 ? m = "coords" : m = e.shapeInfo.logicalShape.map((f, g) => `coords.${h[g + d]}`).join(", "), `
    float ${r}() {
      ${u} coords = getOutputCoords();
      ${c}
      return get${a}(${m});
    }
  `} function ht(e) { if (e <= 1) return "int"; if (e === 2) return "ivec2"; if (e === 3) return "ivec3"; if (e === 4) return "ivec4"; if (e === 5) return "ivec5"; if (e === 6) return "ivec6"; throw Error(`GPU for rank ${e} is not yet supported`) } function uk(e, t, n) { let { newShape: a, keptDims: r } = w.squeezeShape(t), s = t.length, i = e && s === 3 && t[0] === 1, o = i ? t.slice(1) : a, l = !e && s > 1 && !w.arraysEqual(t, n) && a.length < s || i; return { useSqueezeShape: l, uniformShape: l ? o : t, keptDims: r } } function Sp(e, t) { let n = JSON.parse(JSON.stringify(e)); return n.shapeInfo.logicalShape = t, n } function Np(e, t) { return t.map(n => e[n]).join(", ") } function K9(e, t, n, a) { let r = n.map((p, d) => { let c = { logicalShape: p.shape, texShape: p.isUniform ? null : p.texData.texShape, isUniform: p.isUniform, isPacked: p.isUniform ? !1 : p.texData.isPacked, flatOffset: null }; return p.texData != null && p.texData.slice != null && p.texData.slice.flatOffset > 0 && (c.flatOffset = p.texData.slice.flatOffset), { name: t.variableNames[d], shapeInfo: c } }), s = r.map(p => p.shapeInfo), i = { logicalShape: a.shape, texShape: a.texData.texShape, isUniform: !1, isPacked: a.texData.isPacked, flatOffset: null }, o = d9(r, i, t), l = aA(e.gl, o), u = e.createProgram(l); return G().get("ENGINE_COMPILE_ONLY") ? { program: t, fragmentShader: l, source: o, webGLProgram: u, inShapeInfos: s, outShapeInfo: i, variablesLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : (e.buildVao(u), Object.assign({ program: t, fragmentShader: l, source: o, webGLProgram: u, inShapeInfos: s, outShapeInfo: i }, EA(e, t, u))) } function EA(e, t, n) { let a = [], r = [], s, i, o, l = null, u = null; u = e.getUniformLocation(n, "NAN", !1), G().getNumber("WEBGL_VERSION") === 1 && (l = e.getUniformLocation(n, "INFINITY", !1)); let p = !1; for (let d of t.variableNames) { let c = { name: d, uniform: e.getUniformLocation(n, d, p), offset: e.getUniformLocation(n, `offset${d}`, p) }; t.enableShapeUniforms && (c.shape = e.getUniformLocation(n, `${d}Shape`, p), c.texShape = e.getUniformLocation(n, `${d}TexShape`, p)), a.push(c) } if (t.enableShapeUniforms && (s = e.getUniformLocation(n, "outShape", p), o = e.getUniformLocation(n, "outShapeStrides", p), i = e.getUniformLocation(n, "outTexShape", p)), t.customUniforms) for (let d of t.customUniforms) r.push(e.getUniformLocation(n, d.name, p)); return { variablesLocations: a, customUniformLocations: r, infLoc: l, nanLoc: u, outShapeLocation: s, outShapeStridesLocation: o, outTexShapeLocation: i } } function SS(e, t) { if (e.length !== t.length) throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`); e.forEach((n, a) => { let r = n.logicalShape, s = t[a], i = s.shape; if (!w.arraysEqual(r, i)) throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`); if (n.isUniform && s.isUniform) return; let o = n.texShape, l = s.isUniform ? null : s.texData.texShape; if (!w.arraysEqual(o, l)) throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`) }) } function X9(e, t, n, a, r) { t.program.enableShapeUniforms || (SS(t.inShapeInfos, n), SS([t.outShapeInfo], [a])); let s = a.texData.texture, i = a.texData.texShape; a.texData.isPacked ? e.setOutputPackedMatrixTexture(s.texture, i[0], i[1]) : e.setOutputMatrixTexture(s.texture, i[0], i[1]), e.setProgram(t.webGLProgram), e.bindVertexArray(t.webGLProgram.vao), G().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && e.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && e.gl.uniform1f(t.nanLoc, NaN); for (let l = 0; l < n.length; ++l) { let u = n[l], { uniform: p, offset: d, shape: c, texShape: h } = t.variablesLocations[l]; if (c) { let { uniformShape: m } = uk(t.program.packedInputs, u.shape, u.texData.texShape); switch (m.length) { case 1: e.gl.uniform1iv(c, new Int32Array(m)); break; case 2: e.gl.uniform2iv(c, new Int32Array(m)); break; case 3: e.gl.uniform3iv(c, new Int32Array(m)); break; case 4: e.gl.uniform4iv(c, new Int32Array(m)); break; default: break } } if (h && e.gl.uniform2i(h, u.texData.texShape[0], u.texData.texShape[1]), p != null) { if (u.isUniform) { if (w.sizeFromShape(u.shape) < 2) e.gl.uniform1f(p, u.uniformValues[0]); else { let m = u.uniformValues; m instanceof Float32Array || (m = new Float32Array(m)), e.gl.uniform1fv(p, m) } continue } u.texData.slice != null && d != null && e.gl.uniform1i(d, u.texData.slice.flatOffset), e.setInputMatrixTexture(u.texData.texture.texture, p, l) } } let o = t.outShapeLocation; if (o) switch (a.shape.length) { case 1: e.gl.uniform1iv(o, new Int32Array(a.shape)); break; case 2: e.gl.uniform2iv(o, new Int32Array(a.shape)); break; case 3: e.gl.uniform3iv(o, new Int32Array(a.shape)); break; case 4: e.gl.uniform4iv(o, new Int32Array(a.shape)); break; default: break }if (t.outShapeStridesLocation) { let l = w.computeStrides(a.shape); switch (a.shape.length) { case 2: e.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l)); break; case 3: e.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l)); break; case 4: e.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l)); break; default: break } } if (t.outTexShapeLocation && e.gl.uniform2i(t.outTexShapeLocation, a.texData.texShape[0], a.texData.texShape[1]), t.program.customUniforms && r) for (let l = 0; l < t.program.customUniforms.length; ++l) { let u = t.program.customUniforms[l], p = t.customUniformLocations[l], d = r[l]; if (u.type === "float") e.gl.uniform1fv(p, d); else if (u.type === "vec2") e.gl.uniform2fv(p, d); else if (u.type === "vec3") e.gl.uniform3fv(p, d); else if (u.type === "vec4") e.gl.uniform4fv(p, d); else if (u.type === "int") e.gl.uniform1iv(p, d); else if (u.type === "ivec2") e.gl.uniform2iv(p, d); else if (u.type === "ivec3") e.gl.uniform3iv(p, d); else if (u.type === "ivec4") e.gl.uniform4iv(p, d); else throw Error(`uniform type ${u.type} is not supported yet.`) } e.executeProgram() } function Y9(e, t, n) { let a = ""; t.concat(n).forEach(i => { let o = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0; if (e.enableShapeUniforms && !i.isUniform) { let l = i.texData.texShape, { useSqueezeShape: u, uniformShape: p, keptDims: d } = uk(e.packedInputs, i.shape, l), c = "", h = "", m = ""; if (p.length === 1 && e.packedInputs) { let I = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)]; c = `${I[0] > 1}_${I[1] > 1}` } else if (p.length === 2 && !e.packedInputs) h = `${p[0] > 1}_${p[1] > 1}`; else if (p.length > 2 && !e.packedInputs) { let I = w.computeStrides(p); m = `${I[0] === l[1]}_${I[I.length - 1] === l[1]}` } let f = i.shape.length, g = p.length === 2 && w.arraysEqual(i.shape, l), b = w.sizeFromShape(i.shape) === 1, y = T.getBroadcastDims(i.shape, n.shape), x = !e.packedInputs && f === n.shape.length && w.arraysEqual(l, n.texData.texShape), v = e.packedInputs || p.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`; a += `${f}_${x}_${u ? d : ""}_${p.length}_${b}_${y}_${g}_${c}_${h}_${m}_${v}_${o}` } else { let l = i.isUniform ? "uniform" : i.texData.texShape; a += `${i.shape}_${l}_${o}` } }); let r = e.userCode, s = e.constructor.name; return s += "_" + a + "_" + r + `${G().getNumber("WEBGL_VERSION")}`, s } function xn(e) { return G().getBool("WEBGL_USE_SHAPES_UNIFORMS") && e <= 4 } var Z9 = class {
        constructor(e) {
            this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Fc.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }]; let t = Cn(); this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Qf(["r", "c", "d"], e) : Qo(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}
    }, J9 = class {
        constructor(e) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Fc.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }]; let t = Cn(); this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Qf(["r", "c", "d"], e) : Qo(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}
    }, Q9 = class {
        constructor(e) {
            this.variableNames = ["A"], this.outTexUsage = da.DOWNLOAD; let t = Cn(); this.outputShape = e, this.userCode = `
      ${SA}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}
    }, eQ = class {
        constructor(e) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = da.DOWNLOAD; let t = Cn(); this.outputShape = e, this.userCode = `
      ${SA}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}
    }, tQ = { R: 0, G: 1, B: 2, A: 3 }, NS = class {
        constructor(e, t = !1, n = "RGBA") {
            this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }]; let a = Cn(); this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length); let r = "result"; t && (r = "floor(result * 255. + 0.5)"); let s = ""; for (let i = 0; i < n.length; i++) {
                let o = n[i]; s += `
          if(offset == ${i}) {
            result = values[${tQ[o]}];
          }`} this.userCode = `
      ${this.enableShapeUniforms ? lk() : ok(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${n.length});

        flatIndex = idiv(flatIndex, ${n.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${a.texture2D}(A, uv);
          ${s}
        }
        ${a.output} = vec4(${r}, 0., 0., 0.);
      }
    `}
    }, nQ = class {
        constructor(e, t = !1) {
            this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }]; let n = Cn(); this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length); let a = "", r = "result"; t && (r = "floor(result * 255. + 0.5)"); for (let s = 0; s <= 1; s++)for (let i = 0; i <= 1; i++) {
                let o = s * 2 + i; a += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${s} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${s};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${o}] = values[0];
            } else if (offset == 1) {
              result[${o}] = values[1];
            } else if (offset == 2) {
              result[${o}] = values[2];
            } else {
              result[${o}] = values[3];
            }
          }
        }
        `} this.userCode = `
        ${this.enableShapeUniforms ? lk() : ok(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${a}

          ${n.output} = ${r};
        }
    `}
    }, _A = {}; _e(_A, { bindVertexProgramAttributeStreams: () => LA, createBufferFromOutputTexture: () => BA, createFloat16MatrixTexture: () => RA, createFloat16PackedMatrixTexture: () => PA, createFloat32MatrixTexture: () => DA, createIndexBuffer: () => $A, createPackedMatrixTexture: () => OA, createUnsignedBytesMatrixTexture: () => MA, createVertexBuffer: () => FA, createVertexShader: () => AA, downloadByteEncodedFloatMatrixFromOutputTexture: () => UA, downloadFloat32MatrixFromBuffer: () => VA, downloadMatrixFromPackedOutputTexture: () => HA, downloadPackedMatrixFromBuffer: () => GA, getInternalFormatForFloat16MatrixTexture: () => ck, getInternalFormatForFloat16PackedMatrixTexture: () => mk, getInternalFormatForFloat32MatrixTexture: () => pk, getInternalFormatForPackedMatrixTexture: () => hk, getInternalFormatForUnsignedBytesMatrixTexture: () => dk, uploadDenseMatrixToTexture: () => zA, uploadPixelDataToTexture: () => WA }); function AA(e) {
        let t = Cn(), n = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`; return nA(e, n)
    } function FA(e) { let t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]); return iA(e, t) } function $A(e) { let t = new Uint16Array([0, 1, 2, 2, 1, 3]); return oA(e, t) } function Od(e, t, n, a, r, s) { uA(t, n); let i = lA(e), o = e.TEXTURE_2D; return de(e, () => e.bindTexture(o, i)), de(e, () => e.texParameteri(o, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE)), de(e, () => e.texParameteri(o, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE)), de(e, () => e.texParameteri(o, e.TEXTURE_MIN_FILTER, e.NEAREST)), de(e, () => e.texParameteri(o, e.TEXTURE_MAG_FILTER, e.NEAREST)), G().getNumber("WEBGL_VERSION") === 1 ? de(e, () => e.texImage2D(o, 0, a, t, n, 0, r, s, null)) : de(e, () => e.texStorage2D(o, 1, a, t, n)), de(e, () => e.bindTexture(e.TEXTURE_2D, null)), { texture: i, texShape: [n, t] } } function pk(e) { return e.internalFormatFloat } function DA(e, t, n, a) { let [r, s] = Md(t, n); return Od(e, r, s, pk(a), a.textureFormatFloat, e.FLOAT) } function ck(e) { return e.internalFormatHalfFloat } function RA(e, t, n, a) { let [r, s] = Md(t, n); return Od(e, r, s, ck(a), a.textureFormatFloat, a.textureTypeHalfFloat) } function dk(e) { return e.downloadTextureFormat } function MA(e, t, n, a) { let [r, s] = Md(t, n); return Od(e, r, s, dk(a), e.RGBA, e.UNSIGNED_BYTE) } function hk(e) { return e.internalFormatPackedFloat } function OA(e, t, n, a) { let [r, s] = vp(t, n); return Od(e, r, s, hk(a), e.RGBA, e.FLOAT) } function mk(e) { return e.internalFormatPackedHalfFloat } function PA(e, t, n, a) { let [r, s] = vp(t, n); return Od(e, r, s, mk(a), e.RGBA, a.textureTypeHalfFloat) } function LA(e, t, n) { return de(e, () => e.bindBuffer(e.ARRAY_BUFFER, n)), bv(e, t, "clipSpacePos", n, 3, 20, 0) && bv(e, t, "uv", n, 2, 20, 12) } function zA(e, t, n, a, r, s) { de(e, () => e.bindTexture(e.TEXTURE_2D, t)); let i, o, l; r instanceof Uint8Array ? (i = new Uint8Array(n * a * 4), o = e.UNSIGNED_BYTE, l = e.RGBA) : (i = new Float32Array(n * a * 4), o = e.FLOAT, l = s.internalFormatPackedFloat), i.set(r), G().getNumber("WEBGL_VERSION") === 2 ? de(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, a, e.RGBA, o, i)) : de(e, () => e.texImage2D(e.TEXTURE_2D, 0, l, n, a, 0, e.RGBA, o, i)), de(e, () => e.bindTexture(e.TEXTURE_2D, null)) } function WA(e, t, n) { de(e, () => e.bindTexture(e.TEXTURE_2D, t)), n.data instanceof Uint8Array ? G().getNumber("WEBGL_VERSION") === 2 ? de(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n.width, n.height, e.RGBA, e.UNSIGNED_BYTE, n.data)) : de(e, () => e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, n.width, n.height, 0, e.RGBA, e.UNSIGNED_BYTE, n.data)) : G().getNumber("WEBGL_VERSION") === 2 ? de(e, () => e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, e.RGBA, e.UNSIGNED_BYTE, n)) : de(e, () => e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, n)), de(e, () => e.bindTexture(e.TEXTURE_2D, null)) } function BA(e, t, n, a) { let r = e.createBuffer(); de(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, r)); let s = 4 * 4 * t * n; return de(e, () => e.bufferData(e.PIXEL_PACK_BUFFER, s, e.STREAM_READ)), de(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, 0)), de(e, () => e.bindBuffer(e.PIXEL_PACK_BUFFER, null)), r } function VA(e, t, n) { let a = e, r = new Float32Array(n); return a.bindBuffer(a.PIXEL_PACK_BUFFER, t), a.getBufferSubData(a.PIXEL_PACK_BUFFER, 0, r), a.bindBuffer(a.PIXEL_PACK_BUFFER, null), r } function UA(e, t, n, a) { let [r, s] = Md(t, n), i = 4, o = new Uint8Array(JJ(t * n, i)); return de(e, () => e.readPixels(0, 0, r, s, a.downloadTextureFormat, e.UNSIGNED_BYTE, o)), new Float32Array(o.buffer) } function GA(e, t, n, a, r, s, i, o) { let l = e, u = new Float32Array(QJ(s, i)); return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, u), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), u } function HA(e, t, n) { let a = new Float32Array(t * n * 4); return de(e, () => e.readPixels(0, 0, n, t, e.RGBA, e.FLOAT, a)), a } var em = class { constructor(e) { this.outputTexture = null, this.program = null, this.disposed = !1, this.itemsToPoll = []; let t = G().getNumber("WEBGL_VERSION"); if (e != null ? (this.gl = e, Q_(t, e)) : this.gl = qa(t), e = this.gl, G().getNumber("WEBGL_VERSION") === 2) { let r = e; this.createVertexArray = () => de(r, () => r.createVertexArray()), this.bindVertexArray = s => de(r, () => r.bindVertexArray(s)), this.deleteVertexArray = s => de(r, () => r.deleteVertexArray(s)), this.getVertexArray = () => de(r, () => r.getParameter(r.VERTEX_ARRAY_BINDING)) } else if (e != null) { let r = e.getExtension("OES_vertex_array_object"); if (r == null) throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object."); this.createVertexArray = () => de(e, () => r.createVertexArrayOES()), this.bindVertexArray = s => de(e, () => r.bindVertexArrayOES(s)), this.deleteVertexArray = s => de(e, () => r.deleteVertexArrayOES(s)), this.getVertexArray = () => de(e, () => e.getParameter(r.VERTEX_ARRAY_BINDING_OES)) } let n = "WEBGL_color_buffer_float", a = "EXT_color_buffer_half_float"; if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), G().getNumber("WEBGL_VERSION") === 1) { let r = "OES_texture_float", s = "OES_texture_half_float"; if (this.textureFloatExtension = pc(this.gl, r), ha(this.gl, s)) this.textureHalfFloatExtension = pc(this.gl, s); else if (G().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true."); if (this.colorBufferFloatExtension = this.gl.getExtension(n), ha(this.gl, a)) this.colorBufferHalfFloatExtension = pc(this.gl, a); else if (G().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.") } else if (n = "EXT_color_buffer_float", ha(this.gl, n)) this.colorBufferFloatExtension = this.gl.getExtension(n); else if (ha(this.gl, a)) this.colorBufferHalfFloatExtension = this.gl.getExtension(a); else throw new Error("GL context does not support color renderable floats"); this.vertexBuffer = FA(this.gl), this.indexBuffer = $A(this.gl), this.framebuffer = pA(this.gl), this.textureConfig = sk(this.gl, this.textureHalfFloatExtension) } get debug() { return G().getBool("DEBUG") } dispose() { if (this.disposed) return; this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing."); let e = this.gl; de(e, () => e.finish()), de(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), de(e, () => e.deleteFramebuffer(this.framebuffer)), de(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), de(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), de(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = !0 } createFloat32MatrixTexture(e, t) { return this.throwIfDisposed(), DA(this.gl, e, t, this.textureConfig) } createFloat16MatrixTexture(e, t) { return this.throwIfDisposed(), RA(this.gl, e, t, this.textureConfig) } createUnsignedBytesMatrixTexture(e, t) { return this.throwIfDisposed(), MA(this.gl, e, t, this.textureConfig) } uploadPixelDataToTexture(e, t) { this.throwIfDisposed(), WA(this.gl, e, t) } uploadDenseMatrixToTexture(e, t, n, a) { this.throwIfDisposed(), zA(this.gl, e, t, n, a, this.textureConfig) } createFloat16PackedMatrixTexture(e, t) { return this.throwIfDisposed(), PA(this.gl, e, t, this.textureConfig) } createPackedMatrixTexture(e, t) { return this.throwIfDisposed(), OA(this.gl, e, t, this.textureConfig) } deleteMatrixTexture(e) { this.throwIfDisposed(), this.outputTexture === e && (yv(this.gl, this.framebuffer), this.outputTexture = null), de(this.gl, () => this.gl.deleteTexture(e)) } downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n) { return this.downloadMatrixDriver(e, () => UA(this.gl, t, n, this.textureConfig)) } downloadPackedMatrixFromBuffer(e, t, n, a, r, s) { return GA(this.gl, e, t, n, a, r, s, this.textureConfig) } downloadFloat32MatrixFromBuffer(e, t) { return VA(this.gl, e, t) } createBufferFromTexture(e, t, n) { this.bindTextureToFrameBuffer(e); let a = BA(this.gl, t, n, this.textureConfig); return this.unbindTextureToFrameBuffer(), a } createAndWaitForFence() { let e = this.createFence(this.gl); return this.pollFence(e) } createFence(e) { let t, n; if (G().getBool("WEBGL_FENCE_API_ENABLED")) { let a = e, r = a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE, 0); e.flush(), n = () => { let s = a.clientWaitSync(r, 0, 0); return s === a.ALREADY_SIGNALED || s === a.CONDITION_SATISFIED }, t = r } else G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = () => this.isQueryAvailable(t, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : n = () => !0; return { query: t, isFencePassed: n } } downloadMatrixFromPackedTexture(e, t, n) { return this.downloadMatrixDriver(e, () => HA(this.gl, t, n)) } createProgram(e) { this.throwIfDisposed(); let t = this.gl; this.vertexShader == null && (this.vertexShader = AA(t)); let n = rA(t); de(t, () => t.attachShader(n, this.vertexShader)), de(t, () => t.attachShader(n, e)), sA(t, n); let a = Object.assign(n, { vao: this.createVertexArray() }); return this.debug && Yh(t, a), a } buildVao(e) { this.setProgram(e), this.bindVertexArray(e.vao); let t = this.gl; de(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), LA(t, e, this.vertexBuffer) } deleteProgram(e) { this.throwIfDisposed(), e === this.program && (this.program = null), e != null && (de(this.gl, () => this.gl.deleteProgram(e)), this.deleteVertexArray(e.vao)) } setProgram(e) { this.throwIfDisposed(), this.program = e, this.program != null && this.debug && Yh(this.gl, this.program), de(this.gl, () => this.gl.useProgram(e)) } getUniformLocation(e, t, n = !0) { return this.throwIfDisposed(), n ? dA(this.gl, e, t) : hA(this.gl, e, t) } getAttributeLocation(e, t) { return this.throwIfDisposed(), de(this.gl, () => this.gl.getAttribLocation(e, t)) } getUniformLocationNoThrow(e, t) { return this.throwIfDisposed(), this.gl.getUniformLocation(e, t) } setInputMatrixTexture(e, t, n) { this.throwIfDisposed(), this.throwIfNoProgram(), mA(this.gl, e, t, n) } setOutputMatrixTexture(e, t, n) { this.setOutputMatrixTextureDriver(e, n, t) } setOutputPackedMatrixTexture(e, t, n) { this.throwIfDisposed(); let [a, r] = vp(t, n); this.setOutputMatrixTextureDriver(e, a, r) } setOutputMatrixWriteRegion(e, t, n, a) { this.setOutputMatrixWriteRegionDriver(n, e, a, t) } setOutputPackedMatrixWriteRegion(e, t, n, a) { throw new Error("setOutputPackedMatrixWriteRegion not implemented.") } debugValidate() { this.program != null && Yh(this.gl, this.program), cc(this.gl) } executeProgram() { this.throwIfDisposed(), this.throwIfNoProgram(); let e = this.gl; if (this.debug) { let t = this.getVertexArray(); console.assert(t === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate() } de(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0)) } blockUntilAllProgramsCompleted() { this.throwIfDisposed(), de(this.gl, () => this.gl.finish()) } getQueryTimerExtension() { return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = pc(this.gl, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension } getQueryTimerExtensionWebGL2() { return this.getQueryTimerExtension() } getQueryTimerExtensionWebGL1() { return this.getQueryTimerExtension() } beginQuery() { if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) { let n = this.gl, a = this.getQueryTimerExtensionWebGL2(), r = n.createQuery(); return n.beginQuery(a.TIME_ELAPSED_EXT, r), r } let e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT(); return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t } endQuery() { if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) { let t = this.gl, n = this.getQueryTimerExtensionWebGL2(); t.endQuery(n.TIME_ELAPSED_EXT); return } let e = this.getQueryTimerExtensionWebGL1(); e.endQueryEXT(e.TIME_ELAPSED_EXT) } async waitForQueryAndGetTime(e) { return await w.repeatedTry(() => this.disposed || this.isQueryAvailable(e, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) } getQueryTime(e, t) { if (t === 0) return null; if (t === 2) { let n = this.gl; return n.getQueryParameter(e, n.QUERY_RESULT) / 1e6 } else { let n = this.getQueryTimerExtensionWebGL1(); return n.getQueryObjectEXT(e, n.QUERY_RESULT_EXT) / 1e6 } } isQueryAvailable(e, t) { if (t === 0) return !0; if (t === 2) { let n = this.gl, a = this.getQueryTimerExtensionWebGL2(), r = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE); return this.disjoint == null && (this.disjoint = this.gl.getParameter(a.GPU_DISJOINT_EXT)), r && !this.disjoint } else { let n = this.getQueryTimerExtensionWebGL1(), a = n.getQueryObjectEXT(e, n.QUERY_RESULT_AVAILABLE_EXT); return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), a && !this.disjoint } } pollFence(e) { return new Promise(t => { this.addItemToPoll(() => e.isFencePassed(), () => t()) }) } pollItems() { let e = aQ(this.itemsToPoll.map(t => t.isDoneFn)); for (let t = 0; t <= e; ++t) { let { resolveFn: n } = this.itemsToPoll[t]; n() } this.itemsToPoll = this.itemsToPoll.slice(e + 1) } addItemToPoll(e, t) { if (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), this.itemsToPoll.length > 1) return; let n; "setTimeoutCustom" in G().platform && (n = G().platform.setTimeoutCustom.bind(G().platform)), w.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, n) } bindTextureToFrameBuffer(e) { this.throwIfDisposed(), Zh(this.gl, e, this.framebuffer), this.debug && cc(this.gl) } unbindTextureToFrameBuffer() { this.outputTexture != null ? (Zh(this.gl, this.outputTexture, this.framebuffer), this.debug && cc(this.gl)) : yv(this.gl, this.framebuffer) } downloadMatrixDriver(e, t) { this.bindTextureToFrameBuffer(e); let n = t(); return this.unbindTextureToFrameBuffer(), n } setOutputMatrixTextureDriver(e, t, n) { this.throwIfDisposed(); let a = this.gl; Zh(a, e, this.framebuffer), this.debug && cc(a), this.outputTexture = e, de(a, () => a.viewport(0, 0, t, n)), de(a, () => a.scissor(0, 0, t, n)) } setOutputMatrixWriteRegionDriver(e, t, n, a) { this.throwIfDisposed(), de(this.gl, () => this.gl.scissor(e, t, n, a)) } throwIfDisposed() { if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.") } throwIfNoProgram() { if (this.program == null) throw new Error("No GPU program is currently set.") } }; function aQ(e) { let t = 0; for (; t < e.length && e[t](); ++t); return t - 1 } var { addImpl: rQ, bincountImpl: qA, bincountReduceImpl: sQ, bitwiseAndImpl: iQ, castImpl: oQ, ceilImpl: lQ, concatImpl: uQ, equalImpl: pQ, expImpl: cQ, expm1Impl: dQ, floorImpl: hQ, gatherNdImpl: mQ, gatherV2Impl: fQ, greaterImpl: gQ, greaterEqualImpl: bQ, lessImpl: yQ, lessEqualImpl: xQ, linSpaceImpl: vQ, logImpl: wQ, maxImpl: kQ, maximumImpl: IQ, minimumImpl: SQ, multiplyImpl: NQ, negImpl: TQ, notEqualImpl: CQ, prodImpl: EQ, raggedGatherImpl: _Q, raggedRangeImpl: AQ, raggedTensorToTensorImpl: FQ, rangeImpl: $Q, rsqrtImpl: DQ, scatterImpl: RQ, sigmoidImpl: MQ, simpleAbsImpl: jA, sliceImpl: OQ, sparseFillEmptyRowsImpl: PQ, sparseReshapeImpl: LQ, sparseSegmentReductionImpl: KA, sqrtImpl: zQ, staticRegexReplaceImpl: WQ, stridedSliceImpl: BQ, stringNGramsImpl: VQ, stringSplitImpl: UQ, stringToHashBucketFastImpl: GQ, subImpl: HQ, tileImpl: qQ, topKImpl: jQ, transposeImpl: fk, uniqueImpl: KQ } = U1; function XA(e, t) { return ["x", "y", "z", "w", "u", "v"].slice(0, t).map(n => `${e}.${n}`) } function kn(e, t) { return t === 1 ? [e] : XA(e, t) } function XQ(e, t) { if (e === 1) return "rc"; let n = ""; for (let a = 0; a < e; a++)n += t[a], a < e - 1 && (n += ","); return n } var YQ = class {
        constructor(e) {
            if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = xn(this.outputShape.length), this.rank === 0) this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `; else {
                let t = kn("rc", this.rank), n = ht(this.rank), a = this.getOutOfBoundsCondition(t), r = this.getSetup(t), s = this.getOutput(t); this.userCode = `
        void main() {
          ${n} rc = getOutputCoords();

          if(${a}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${s}));
          }
        }
      `}
        } getSourceCoordsArr(e) { let t = []; for (let n = 0; n <= 1; n++)for (let a = 0; a <= 1; a++) { let r = `${n === 0 ? "r" : "rp1"}, ${a === 0 ? "c" : "cp1"}`; for (let s = 2; s < this.rank; s++)r = `${e[e.length - 1 - s]},` + r; t.push(r) } return t } getOutOfBoundsCondition(e) { if (this.rank === 1) return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`; let t = ""; for (let n = this.rank - 2; n < this.rank; n++)t += `${e[n]} >= ${this.enableShapeUniforms ? `outShape[${n}]` : this.outputShape[n]}`, n < this.rank - 1 && (t += "||"); return t } getSetup(e) {
            if (this.rank === 1) return ""; let t = e.slice(-2), n = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], a = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2]; return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${a};
    `} getOutput(e) {
            let t = this.getSourceCoordsArr(e); return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`
        }
    }, YA = class {
        constructor(e, t) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length); let n = ""; for (let a = 0; a < 4; a++) {
                let r = "thisRC = rc;"; a % 2 === 1 && (r += "thisRC.z += 1;"), a > 1 && (r += "thisRC.y += 1;"), n += `
        ${r}
        ${a > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${a}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${a > 0 ? "}" : ""}
      `} this.userCode = `
      ${ZQ(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? lk() : ok(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${n}

        setOutput(result);
      }
    `}
    }; function ZQ(e, t) {
        return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? c9(["r", "c", "d"], "inputShape") : Qo(["r", "c", "d"], e)}
      return ivec3(r, c, d);
    }
  `} var JQ = class { constructor(e) { this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = !1 } acquireTexture(e, t, n) { let a = CS(t, n), r = ES(e, a, n); r in this.freeTextures || (this.freeTextures[r] = []), r in this.usedTextures || (this.usedTextures[r] = []); let s = TS(e, a, this.gpgpu.gl, this.gpgpu.textureConfig, n); if (this.freeTextures[r].length > 0) { this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= s, this.log(); let o = this.freeTextures[r].pop(); return this.usedTextures[r].push(o), o } let i; return a === dn.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : a === dn.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : a === dn.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : a === dn.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : a === dn.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[r].push(i), this.numUsedTextures++, this._numBytesAllocated += s, this.log(), i } releaseTexture(e, t, n, a) { if (this.freeTextures == null) return; let r = CS(n, a), s = ES(t, r, a); s in this.freeTextures || (this.freeTextures[s] = []); let i = TS(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, a), o = G().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD"); o !== -1 && this._numBytesAllocated > o ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= i) : (this.freeTextures[s].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--; let l = this.usedTextures[s], u = l && l.indexOf(e); if (u == null || u < 0) throw new Error("Cannot release a texture that was never provided by this texture manager"); l[u] = l[l.length - 1], l.pop(), this.log() } log() { if (!this.logEnabled) return; let e = this.numFreeTextures + this.numUsedTextures; console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`); let t = this._numBytesFree / this._numBytesAllocated; console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`) } get numBytesAllocated() { return this._numBytesAllocated } get numBytesFree() { return this._numBytesFree } getNumUsedTextures() { return this.numUsedTextures } getNumFreeTextures() { return this.numFreeTextures } dispose() { if (this.freeTextures != null) { for (let e in this.freeTextures) this.freeTextures[e].forEach(t => { this.gpgpu.deleteMatrixTexture(t.texture) }); for (let e in this.usedTextures) this.usedTextures[e].forEach(t => { this.gpgpu.deleteMatrixTexture(t.texture) }); this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0 } } }; function QQ(e, t) { let n = e; if (t === n.R32F) return 4; if (t === n.R16F) return 2; if (t === n.RGBA32F || t === e.RGBA) return 16; if (t === n.RGBA16F) return 8; if (t === n.RGBA8) return 4; throw new Error(`Unknown internal format ${t}`) } function TS(e, t, n, a, r) { let s = eee(t, a), i; if (r) { let [l, u] = vp(e[0], e[1]); i = l * u } else { let [l, u] = Md(e[0], e[1]); i = l * u } let o = QQ(n, s); return i * o } function eee(e, t) { switch (e) { case dn.PACKED_2X2_FLOAT32: return hk(t); case dn.PACKED_2X2_FLOAT16: return mk(t); case dn.UNPACKED_FLOAT32: return pk(t); case dn.UNPACKED_FLOAT16: return ck(t); case dn.PACKED_4X1_UNSIGNED_BYTE: return dk(t); default: throw new Error(`Unknown physical texture type ${e}`) } } function tee(e) { return G().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? e ? dn.PACKED_2X2_FLOAT32 : dn.UNPACKED_FLOAT32 : e ? dn.PACKED_2X2_FLOAT16 : dn.UNPACKED_FLOAT16 } function CS(e, t) { if (e === da.UPLOAD) return dn.PACKED_2X2_FLOAT32; if (e === da.RENDER || e == null) return tee(t); if (e === da.DOWNLOAD || e === da.PIXELS) return dn.PACKED_4X1_UNSIGNED_BYTE; throw new Error(`Unknown logical texture type ${e}`) } function ES(e, t, n) { return `${e[0]}_${e[1]}_${t}_${n}` } var ir = class {
        constructor(e, t) {
            this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}
    }, Ma = "if (isnan(x)) return x;", nee = "return x;", _S = "return abs(x);", aee = "return (x >= 0.0) ? x : (exp(x) - 1.0);", ree = Ma + `
  return (x < 0.0) ? 0.0 : x;
`, see = Ma + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, es = "return x;", iee = "return 1.0 / (1.0 + exp(-1.0 * x));", oee = "return x;", lee = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, uee = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, pee = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, cee = "return 1.0 / (1.0 + exp(-1.0 * x));", ss = class {
            constructor(e, t) {
                this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}
        }, dee = class {
            constructor(e) {
                this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length); let t = e.length, n = kn("rc", t), a = ht(t), r = XQ(t, n), s = n.slice(-2), i = t <= 1 ? "rc" : `vec2(${s.join(",")})`; this.userCode = `
      void main() {
        ${a} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${i}));
      }
    `}
        }, hee = fr.whereImpl, mee = 1e-7, fee = 1e-4, Nx = {}; function gee(e) { return e in Nx || (Nx[e] = {}), Nx[e] } var bee = G().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), yee = 600; function xee() { return G().global.screen == null ? 1024 : G().global.screen.height * G().global.screen.width * window.devicePixelRatio * yee / 1024 / 1024 } var gk = class ZA extends Pc { nextDataId() { return ZA.nextDataId++ } constructor(t) { if (super(), this.pendingRead = new WeakMap, this.pendingDisposal = new WeakSet, this.dataRefCount = new WeakMap, this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !G().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device"); let n; if (t != null) { if (t instanceof em) n = t; else { let a = qa(G().getNumber("WEBGL_VERSION"), t); n = new em(a) } this.binaryCache = {}, this.gpgpuCreatedLocally = !1 } else { let a = qa(G().getNumber("WEBGL_VERSION")); n = new em(a), this.binaryCache = gee(G().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0 } this.gpgpu = n, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new JQ(this.gpgpu), this.numMBBeforeWarning = xee(), this.texData = new $m(this, Ea()) } numDataIds() { return this.texData.numDataIds() - this.pendingDeletes } writeTexture(t, n, a, r, s, i) { let o = this.makeTensorInfo(n, a), l = this.texData.get(o.dataId); l.isPacked = !1, l.texture = { texture: t, texShape: [r, s] }, l.texShape = [r, s]; let u = dc(n), p = new NS(u, !1, i), d = this.runWebGLProgram(p, [o], a, [[r, s]]); return d.shape = n, l.texture = null, this.disposeIntermediateTensorInfo(o), d.dataId } write(t, n, a) { if ((G().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || G().getBool("DEBUG")) && this.checkNumericalProblems(t), a === "complex64" && t != null) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."); let r = { id: this.nextDataId() }; return this.texData.set(r, { shape: n, dtype: a, values: t, usage: da.UPLOAD, refCount: 1 }), r } refCount(t) { return this.texData.has(t) ? this.texData.get(t).refCount : 0 } incRef(t) { let n = this.texData.get(t); n.refCount++ } decRef(t) { if (this.texData.has(t)) { let n = this.texData.get(t); n.refCount-- } } move(t, n, a, r, s) { if (G().getBool("DEBUG") && this.checkNumericalProblems(n), r === "complex64") throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag)."); this.texData.set(t, { shape: a, dtype: r, values: n, usage: da.UPLOAD, refCount: s }) } disposeIntermediateTensorInfo(t) { this.disposeData(t.dataId) } readSync(t) { let n = this.texData.get(t), { values: a, dtype: r, complexTensorInfos: s, slice: i, shape: o, isPacked: l } = n; if (i != null) { let c; l ? c = new ss(o, es) : c = new ir(o, es); let h = this.runWebGLProgram(c, [{ dataId: t, shape: o, dtype: r }], r), m = this.readSync(h.dataId); return this.disposeIntermediateTensorInfo(h), m } if (a != null) return this.convertAndCacheOnCPU(t); if (r === "string") return a; let u = this.activeTimers != null, p; u && (p = w.now()); let d; if (r === "complex64") { let c = this.readSync(s.real.dataId), h = this.readSync(s.imag.dataId); d = T.mergeRealAndImagArrays(c, h) } else d = this.getValuesFromTexture(t); return u && (this.downloadWaitMs += w.now() - p), this.convertAndCacheOnCPU(t, d) } async read(t) { if (this.pendingRead.has(t)) { let m = this.pendingRead.get(t); return new Promise(f => m.push(f)) } let n = this.texData.get(t), { values: a, shape: r, slice: s, dtype: i, complexTensorInfos: o, isPacked: l } = n; if (s != null) { let m; l ? m = new ss(r, es) : m = new ir(r, es); let f = this.runWebGLProgram(m, [{ dataId: t, shape: r, dtype: i }], i), g = this.read(f.dataId); return this.disposeIntermediateTensorInfo(f), g } if (a != null) return this.convertAndCacheOnCPU(t); if (G().getBool("DEBUG") && !G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && G().getNumber("WEBGL_VERSION") === 2) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported."); let u = null, p; if (i !== "complex64" && G().get("WEBGL_BUFFER_SUPPORTED")) { p = this.decode(t); let m = this.texData.get(p.dataId); u = this.gpgpu.createBufferFromTexture(m.texture.texture, ...Gh(r)) } this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence(); let d; if (i === "complex64") { let m = await Promise.all([this.read(o.real.dataId), this.read(o.imag.dataId)]), f = m[0], g = m[1]; d = T.mergeRealAndImagArrays(f, g) } else if (u == null) d = this.getValuesFromTexture(t); else { let m = w.sizeFromShape(r); d = this.gpgpu.downloadFloat32MatrixFromBuffer(u, m) } if (p != null && this.disposeIntermediateTensorInfo(p), u != null) { let m = this.gpgpu.gl; de(m, () => m.deleteBuffer(u)) } let c = this.convertAndCacheOnCPU(t, d), h = this.pendingRead.get(t); return this.pendingRead.delete(t), h.forEach(m => m(c)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && Ea().removeDataId(t, this), this.pendingDeletes--), c } readToGPU(t, n = {}) { let a = this.texData.get(t), { values: r, shape: s, slice: i, dtype: o, isPacked: l, texture: u } = a; if (o === "complex64") throw new Error("Does not support reading texture for complex64 dtype."); if (i != null) { let h; l ? h = new ss(s, es) : h = new ir(s, es); let m = this.runWebGLProgram(h, [{ dataId: t, shape: s, dtype: o }], o), f = this.readToGPU(m, n); return this.disposeIntermediateTensorInfo(m), f } if (u == null) throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU."); let p = this.decode(t, n.customTexShape), d = Ea().makeTensorFromTensorInfo(p), c = this.texData.get(p.dataId); return Object.assign({ tensorRef: d }, c.texture) } bufferSync(t) { let n = this.readSync(t.dataId); if (t.dtype === "string") try { let a = n.map(r => w.decodeString(r)); return Pe(t.shape, t.dtype, a) } catch (a) { throw new Error("Failed to decode encoded string bytes into utf-8") } return Pe(t.shape, t.dtype, n) } checkNumericalProblems(t) { if (t != null) for (let n = 0; n < t.length; n++) { let a = t[n]; if (!eA(a)) throw G().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${a} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${a} cannot be represented on this device.`) } } getValuesFromTexture(t) { let { shape: n, dtype: a, isPacked: r } = this.texData.get(t), s = w.sizeFromShape(n); if (G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) { let c = this.decode(t), h = this.texData.get(c.dataId), m = this.gpgpu.downloadMatrixFromPackedTexture(h.texture.texture, ...Gh(n)).subarray(0, s); return this.disposeIntermediateTensorInfo(c), m } let i = G().getBool("WEBGL_PACK") && r === !0, o = i ? dc(n) : n, l = i ? new eQ(o) : new Q9(o), u = this.runWebGLProgram(l, [{ shape: o, dtype: a, dataId: t }], "float32"), p = this.texData.get(u.dataId), d = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(p.texture.texture, p.texShape[0], p.texShape[1]).subarray(0, s); return this.disposeIntermediateTensorInfo(u), d } timerAvailable() { return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 } time(t) { let n = this.activeTimers, a = [], r = !1; this.programTimersStack == null ? (this.programTimersStack = a, r = !0) : this.activeTimers.push(a), this.activeTimers = a, t(); let s = w.flatten(this.activeTimers.map(l => l.query)).filter(l => l != null), i = w.flatten(this.activeTimers.map(l => l.name)).filter(l => l != null); this.activeTimers = n, r && (this.programTimersStack = null); let o = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }; return (async () => { if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) { let l = await Promise.all(s); o.kernelMs = w.sum(l), o.getExtraProfileInfo = () => l.map((u, p) => ({ name: i[p], ms: u })).map(u => `${u.name}: ${u.ms}`).join(", ") } else o.kernelMs = { error: "WebGL query timers are not supported in this environment." }; return this.uploadWaitMs = 0, this.downloadWaitMs = 0, o })() } memory() { return { unreliable: !1, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree } } startTimer() { return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: w.now(), endMs: null } } endTimer(t) { return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = w.now(), t) } async getQueryTime(t) { if (G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) return this.gpgpu.waitForQueryAndGetTime(t); let n = t; return n.endMs - n.startMs } disposeData(t, n = !1) { if (this.pendingDisposal.has(t)) return !1; if (!this.texData.has(t)) return !0; if (n ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !n && this.texData.get(t).refCount > 0) return !1; if (this.pendingRead.has(t)) return this.pendingDisposal.add(t), this.pendingDeletes++, !1; this.releaseGPUData(t); let { complexTensorInfos: a } = this.texData.get(t); return a != null && (this.disposeData(a.real.dataId, n), this.disposeData(a.imag.dataId, n)), this.texData.delete(t), !0 } releaseGPUData(t) { let { texture: n, dtype: a, texShape: r, usage: s, isPacked: i, slice: o } = this.texData.get(t), l = o && o.origDataId || t, u = this.dataRefCount.get(l); u > 1 ? this.dataRefCount.set(l, u - 1) : (this.dataRefCount.delete(l), n != null && (this.numBytesInGPU -= this.computeBytes(r, a), this.textureManager.releaseTexture(n, r, s, i))); let p = this.texData.get(t); p.texture = null, p.texShape = null, p.isPacked = !1, p.slice = null } getTexture(t) { return this.uploadToGPU(t), this.texData.get(t).texture.texture } getDataInfo(t) { return this.texData.get(t) } shouldExecuteOnCPU(t, n = bee) { return G().getBool("WEBGL_CPU_FORWARD") && t.every(a => this.texData.get(a.dataId).texture == null && w.sizeFromShape(a.shape) < n) } getGPGPUContext() { return this.gpgpu } where(t) { T.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead"); let n = t.dataSync(); return hee(t.shape, n) } packedUnaryOp(t, n, a) { let r = new ss(t.shape, n), s = this.compileAndRun(r, [t], a); return Ea().makeTensorFromTensorInfo(s) } abs(t) { if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") { let r = jA(this.texData.get(t.dataId).values); return this.makeOutput(t.shape, t.dtype, r) } if (G().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, _S, t.dtype); let n = new ir(t.shape, _S), a = this.compileAndRun(n, [t]); return Ea().makeTensorFromTensorInfo(a) } makeTensorInfo(t, n, a) { let r; if (n === "string" && a != null && a.length > 0 && w.isString(a[0])) { let s = a.map(i => w.encodeString(i)); r = this.write(s, t, n) } else r = this.write(a, t, n); return this.texData.get(r).usage = null, { dataId: r, shape: t, dtype: n } } makeOutput(t, n, a) { return Ea().makeTensorFromTensorInfo(this.makeTensorInfo(t, n, a), this) } unpackTensor(t) { let n = new dee(t.shape); return this.runWebGLProgram(n, [t], t.dtype) } packTensor(t) { let n = new YQ(t.shape); return this.runWebGLProgram(n, [t], t.dtype, null, !0) } packedReshape(t, n) { let a = [ki(t.shape), ...Ii(t.shape)], r = { dtype: t.dtype, shape: a, dataId: t.dataId }, s = [ki(n), ...Ii(n)], i = new YA(s, a), o = !0, l = [a], u = this.runWebGLProgram(i, [r], t.dtype, l, o); return { dataId: u.dataId, shape: n, dtype: u.dtype } } decode(t, n) { let a = this.texData.get(t), { isPacked: r, shape: s, dtype: i } = a; if (n != null) { let c = w.sizeFromShape(s), h = n[0] * n[1] * 4; w.assert(c <= h, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.") } let o = dc(s), l; r ? l = new J9(o) : l = new Z9(o); let u = !0, p = [n != null ? n : Gh(o)], d = this.runWebGLProgram(l, [{ shape: o, dtype: i, dataId: t }], i, p, u, n); return { dtype: i, shape: s, dataId: d.dataId } } runWebGLProgram(t, n, a, r, s = !1, i) { let o = this.makeTensorInfo(t.outputShape, a), l = this.texData.get(o.dataId); if (t.packedOutput && (l.isPacked = !0), t.outPackingScheme === Fc.DENSE) { let b = i != null ? i : Gh(t.outputShape); l.texShape = b.map(y => y * 2) } if (t.outTexUsage != null && (l.usage = t.outTexUsage), w.sizeFromShape(o.shape) === 0) return l.values = w.getTypedArrayFromDType(o.dtype, 0), o; let u = [], p = n.map(b => { if (b.dtype === "complex64") throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts."); let y = this.texData.get(b.dataId); if (y.texture == null) { if (!t.packedInputs && w.sizeFromShape(b.shape) <= G().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: b.shape, texData: null, isUniform: !0, uniformValues: y.values }; t.packedInputs && (y.isPacked = !0, y.shape = b.shape) } if (this.uploadToGPU(b.dataId), !!y.isPacked != !!t.packedInputs) b = y.isPacked ? this.unpackTensor(b) : this.packTensor(b), u.push(b), y = this.texData.get(b.dataId); else if (y.isPacked && !$c(y.shape, b.shape)) { let x = b, v = b.shape; b.shape = y.shape, b = this.packedReshape(b, v), u.push(b), y = this.texData.get(b.dataId), x.shape = v } return { shape: b.shape, texData: y, isUniform: !1 } }); this.uploadToGPU(o.dataId); let d = { shape: o.shape, texData: l, isUniform: !1 }, c = Y9(t, p, d), h = this.getAndSaveBinary(c, () => K9(this.gpgpu, t, p, d)), m = this.activeTimers != null, f; m && (f = this.startTimer()), G().get("ENGINE_COMPILE_ONLY") || X9(this.gpgpu, h, p, d, r), u.forEach(b => this.disposeIntermediateTensorInfo(b)), m && (f = this.endTimer(f), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(f) })); let g = G().getNumber("WEBGL_FLUSH_THRESHOLD"); if (g > 0) { let b = w.now(); b - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = b) } if (!G().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && s === !1) { let b = this.unpackTensor(o); return this.disposeIntermediateTensorInfo(o), b } return o } compileAndRun(t, n, a, r, s = !1) { return a = a || n[0].dtype, this.runWebGLProgram(t, n, a, r, s) } getAndSaveBinary(t, n) { return t in this.binaryCache || (this.binaryCache[t] = n()), this.binaryCache[t] } getTextureManager() { return this.textureManager } dispose() { this.disposed || (G().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach(t => { this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t] }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0) } floatPrecision() { return this.floatPrecisionValue == null && (this.floatPrecisionValue = O(() => { if (!G().get("WEBGL_RENDER_FLOAT32_ENABLED")) { let t = G().getBool("DEBUG"); G().set("DEBUG", !1); let n = this.abs(ve(1e-8)).dataSync()[0]; if (G().set("DEBUG", t), n > 0) return 32 } return 16 })), this.floatPrecisionValue } epsilon() { return this.floatPrecision() === 32 ? mee : fee } uploadToGPU(t) { let n = this.texData.get(t), { shape: a, dtype: r, values: s, texture: i, usage: o, isPacked: l } = n; if (i != null) return; let u = this.activeTimers != null, p; u && (p = w.now()); let d = n.texShape; if (d == null && (d = bA(a, l), n.texShape = d), s != null) { let c = dc(a), h, m = d[1], f = d[0], g = s instanceof Uint8Array || s instanceof Uint8ClampedArray; (l || !g) && ([m, f] = vp(d[0], d[1])), l ? h = new nQ(c, g) : h = new NS(c, g); let b = g ? [f, m] : d, y = this.makeTensorInfo(b, r), x = this.texData.get(y.dataId); g ? x.usage = da.PIXELS : x.usage = da.UPLOAD, x.texShape = b, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(y.dataId), m, f, s); let v = [[f, m]], I = this.runWebGLProgram(h, [y], r, v, !0), N = this.texData.get(I.dataId); n.texShape = N.texShape, n.isPacked = N.isPacked, n.usage = N.usage, G().get("ENGINE_COMPILE_ONLY") ? this.disposeData(I.dataId) : (n.texture = N.texture, n.values = null, this.texData.delete(I.dataId)), this.disposeIntermediateTensorInfo(y), u && (this.uploadWaitMs += w.now() - p) } else { let c = this.acquireTexture(d, o, r, l); n.texture = c } } convertAndCacheOnCPU(t, n) { let a = this.texData.get(t), { dtype: r } = a; return n != null && (a.values = vee(n, r)), a.values } acquireTexture(t, n, a, r) { if (this.numBytesInGPU += this.computeBytes(t, a), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) { let s = (this.numBytesInGPU / 1024 / 1024).toFixed(2); this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`) } return this.textureManager.acquireTexture(t, n, r) } computeBytes(t, n) { return t[0] * t[1] * w.bytesPerElement(n) } checkCompileCompletion() { for (let [, t] of Object.entries(this.binaryCache)) this.checkCompletion_(t) } async checkCompileCompletionAsync() { let t = []; if (this.gpgpu.parallelCompilationExtension) { for (let [, n] of Object.entries(this.binaryCache)) t.push(this.checkCompletionAsync_(n)); return Promise.all(t) } else { for (let [, n] of Object.entries(this.binaryCache)) { let a = new Promise(r => { try { this.checkCompletion_(n), r(!0) } catch (s) { throw s } }); t.push(a) } return Promise.all(t) } } async checkCompletionAsync_(t) { return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await s0(), this.checkCompletionAsync_(t)) } checkCompletion_(t) { if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1) throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (ik(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders."); return !0 } getUniformLocations() { for (let t of Object.values(this.binaryCache)) { this.gpgpu.buildVao(t.webGLProgram); let { variablesLocations: n, customUniformLocations: a, infLoc: r, nanLoc: s, outShapeLocation: i, outShapeStridesLocation: o, outTexShapeLocation: l } = EA(this.gpgpu, t.program, t.webGLProgram); t.variablesLocations = n, t.customUniformLocations = a, t.infLoc = r, t.nanLoc = s, t.outShapeLocation = i, t.outShapeStridesLocation = o, t.outTexShapeLocation = l } } createTensorFromGPUData(t, n, a) { t.channels = t.channels || "RGBA"; let { texture: r, height: s, width: i, channels: o } = t, l = Ea().backend; if (!l.gpgpu.gl.isTexture(r)) throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'."); let u = l.writeTexture(r, n, a, s, i, o); return Ea().makeTensorFromDataId(u, n, a, l) } }; gk.nextDataId = 0; function vee(e, t) { if (t === "float32" || t === "complex64") return e; if (t === "int32" || t === "bool") { let n = t === "int32" ? new Int32Array(e.length) : new Uint8Array(e.length); for (let a = 0; a < n.length; ++a)n[a] = Math.round(e[a]); return n } else throw new Error(`Unknown dtype ${t}`) } var wee = "4.16.0"; function JA() { G().set("WEBGL_FORCE_F16_TEXTURES", !0) } ud.isBrowser() && Ym("webgl", () => new gk, 2); var kee = { forceHalfFloat: JA }, bk = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`, Si = class {
                constructor(e, t, n) {
                    this.variableNames = ["A", "B"], this.outputShape = T.assertAndGetBroadcastShape(t, n), this.enableShapeUniforms = xn(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}
            }, tl = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`, Tp = class {
                constructor(e, t, n, a = !1) {
                    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = T.assertAndGetBroadcastShape(t, n); let r = this.outputShape.length; this.enableShapeUniforms = xn(r); let s = ""; if (a) if (r === 0 || w.sizeFromShape(this.outputShape) === 1) s = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `; else if (s = `
          ${ht(r)} coords = getOutputCoords();
        `, r === 1) this.enableShapeUniforms ? s += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `: s += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `; else {
                        let i = kn("coords", r); this.enableShapeUniforms ? s += `
            bool nextRowOutOfBounds =
              (${i[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${i[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `: s += `
            bool nextRowOutOfBounds =
              (${i[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${i[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `} this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${s}

        setOutput(result);
      }
    `}
            }; function aa(e) { let { inputs: t, backend: n } = e, { x: a } = t; return n.incRef(a.dataId), { dataId: a.dataId, shape: a.shape, dtype: a.dtype } } var Iee = { kernelName: no, backendName: "webgl", kernelFunc: aa }; function Ms(e) { let { inputs: t, backend: n } = e, { real: a, imag: r } = t, s = n.makeTensorInfo(a.shape, "complex64"), i = n.texData.get(s.dataId), o = aa({ inputs: { x: a }, backend: n }), l = aa({ inputs: { x: r }, backend: n }); return i.complexTensorInfos = { real: o, imag: l }, s } var See = { kernelName: Mm, backendName: "webgl", kernelFunc: Ms }, QA = "return (a < 0.) ? b * a : a;", eF = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`; function Nee(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { alpha: s } = a, i = n.makeTensorInfo([], "float32", w.createScalarValue(s, "float32")), o = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Tp(eF, r.shape, i.shape) : new Si(QA, r.shape, i.shape), l = n.runWebGLProgram(o, [r, i], "float32"); return n.disposeIntermediateTensorInfo(i), l } var Tee = { kernelName: io, backendName: "webgl", kernelFunc: Nee }, tF = "return (a < 0.) ? b * a : a;", nF = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`; function Cee(e) { let { inputs: t, backend: n } = e, { x: a, alpha: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Tp(nF, a.shape, r.shape) : new Si(tF, a.shape, r.shape); return n.runWebGLProgram(s, [a, r], "float32") } var Eee = { kernelName: Io, backendName: "webgl", kernelFunc: Cee }, Cp = "if (isnan(x)) return x;"; function Ze({ opSnippet: e, packedOpSnippet: t, cpuKernelImpl: n, dtype: a }) { return ({ inputs: r, backend: s }) => { let { x: i } = r, o = s, l = a || i.dtype; if (o.shouldExecuteOnCPU([i]) && n != null) { let d = o.texData.get(i.dataId), c = n(d.values, l); return o.makeTensorInfo(i.shape, l, c) } let u = G().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null, p; return u ? p = new ss(i.shape, t) : p = new ir(i.shape, e), o.runWebGLProgram(p, [i], l) } } function fn({ opSnippet: e, packedOpSnippet: t, checkOutOfBounds: n = !1, supportsComplex: a = !1, cpuKernelImpl: r, dtype: s }) { return ({ inputs: i, backend: o }) => { let { a: l, b: u } = i, p = o; if (a && l.dtype === "complex64") { let m = p.texData.get(l.dataId), f = p.texData.get(u.dataId), [g, b] = [[m.complexTensorInfos.real, f.complexTensorInfos.real], [m.complexTensorInfos.imag, f.complexTensorInfos.imag]].map(x => { let [v, I] = x, N = { dataId: v.dataId, dtype: v.dtype, shape: l.shape }, C = { dataId: I.dataId, dtype: I.dtype, shape: u.shape }, _ = new Si(e, l.shape, u.shape); return p.runWebGLProgram(_, [N, C], ga(v.dtype, I.dtype)) }), y = Ms({ inputs: { real: g, imag: b }, backend: p }); return p.disposeIntermediateTensorInfo(g), p.disposeIntermediateTensorInfo(b), y } let d = s || ga(l.dtype, u.dtype); if ((l.dtype === "string" || u.dtype === "string" || p.shouldExecuteOnCPU([l, u])) && r != null) { let m = p.texData.get(l.dataId).values, f = p.texData.get(u.dataId).values, g = l.dtype === "string" ? T.fromUint8ToStringArray(m) : m, b = l.dtype === "string" ? T.fromUint8ToStringArray(f) : f, [y, x] = r(l.shape, u.shape, g, b, d), v = p.makeTensorInfo(x, d), I = p.texData.get(v.dataId); return I.values = y, v } let c = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null, h; return c ? h = new Tp(t, l.shape, u.shape, n) : h = new Si(e, l.shape, u.shape), p.runWebGLProgram(h, [l, u], d) } } function Dc(e, t = !1) { if (e === "linear") return t ? oee : nee; if (e === "relu") return t ? uee : ree; if (e === "elu") return t ? lee : aee; if (e === "relu6") return t ? pee : see; if (e === "prelu") return t ? nF : tF; if (e === "leakyrelu") return t ? eF : QA; if (e === "sigmoid") return t ? cee : iee; throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`) } var aF = class {
        constructor(e, t, n, a = !1, r = !1, s = !1, i = null, o = !1, l = !1) {
            this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = n, this.enableShapeUniforms = xn(this.outputShape.length); let u = a ? e[1] : e[2], p = Math.ceil(u / 2), d = a ? "i * 2, rc.y" : "rc.y, i * 2", c = r ? "rc.z, i * 2" : "i * 2, rc.z", h = a ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], f = "", g = ""; i && (o ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`: l ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`: f = `vec4 activation(vec4 x) {
          ${i}
        }`, g = "result = activation(result);"); let b = s ? "result += getBiasAtOutCoords();" : ""; s && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), l && this.variableNames.push("leakyreluAlpha"); let y = "rc.x", x = "rc.x"; e[0] < t[0] ? y = `imod(rc.x, ${e[0]})` : t[0] < e[0] && (x = `imod(rc.x, ${t[0]})`), this.userCode = `
      ${f}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${y};
        int batchB = ${x};
        for (int i = 0; i < ${p}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${c});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${m[0]});
          result += (${h[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${g}

        setOutput(result);
      }
    `}
    }, AS = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" }, FS = class {
        constructor(e, t, n) {
            this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = T.assertAndGetBroadcastShape(t, n), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}
    }, $S = "return a * b;"; function yk(e) { let { inputs: t, backend: n } = e, { a, b: r } = t, s = T.upcastType(a.dtype, r.dtype); if (a.dtype === "complex64") { let o = n.texData.get(a.dataId), l = n.texData.get(r.dataId), u = new FS(AS.REAL, a.shape, r.shape), p = new FS(AS.IMAG, a.shape, r.shape), d = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: a.shape }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: a.shape }, { dataId: l.complexTensorInfos.real.dataId, dtype: l.complexTensorInfos.real.dtype, shape: r.shape }, { dataId: l.complexTensorInfos.imag.dataId, dtype: l.complexTensorInfos.imag.dtype, shape: r.shape }], c = n.runWebGLProgram(u, d, "float32"), h = n.runWebGLProgram(p, d, "float32"), m = Ms({ inputs: { real: c, imag: h }, backend: n }); return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), m } if (n.shouldExecuteOnCPU([a, r])) { let o = n.texData.get(a.dataId), l = n.texData.get(r.dataId), [u, p] = NQ(a.shape, r.shape, o.values, l.values, s), d = n.makeTensorInfo(p, s), c = n.texData.get(d.dataId); return c.values = u, d } let i; return G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new Tp($S, a.shape, r.shape) : i = new Si($S, a.shape, r.shape), n.runWebGLProgram(i, [a, r], s) } var _ee = { kernelName: xo, backendName: "webgl", kernelFunc: yk }; function Aee(e, t, n) { let a = [ki(e.shape), ...Ii(e.shape)], r = { dtype: e.dtype, shape: a, dataId: e.dataId }, s = [ki(t), ...Ii(t)], i = new YA(s, a), o = !0, l = [a], u = n.runWebGLProgram(i, [r], e.dtype, l, o); return { dataId: u.dataId, shape: t, dtype: u.dtype } } function ce(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { shape: s } = a, i = n, o = w.sizeFromShape(r.shape), l = w.inferFromImplicitShape(s, o), u = w.sizeFromShape(l); w.assert(o === u, () => `The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`); let p = i.texData.get(r.dataId); return p.isPacked && !$c(r.shape, l) && !(p.texture !== null && $c(p.shape, l)) ? Aee(r, l, i) : (i.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype }) } var Fee = { kernelName: ju, backendName: "webgl", kernelFunc: ce }, DS = class {
        constructor(e, t) {
            this.variableNames = ["x"]; let { windowSize: n, batchSize: a, inSize: r, outSize: s } = e; this.outputShape = [a, s]; let i = Math.floor(n / 4) * 4, o = n % 4, l = "sumValue += dot(values, ones);"; if (t != null) { let p = 1 / t; l = `sumValue += dot(values * ${w.isInt(p) ? p.toPrecision(2) : p}, ones);` } let u = ""; r % n > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${i};
        if (${o === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${o === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${o === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `}
    }, $ee = class {
        constructor(e, t) {
            this.variableNames = ["x"]; let { windowSize: n, batchSize: a, inSize: r, outSize: s } = e; this.outputShape = [a, s]; let i = "0.0", o = ""; t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", o = "min") : t === "max" && (i = "-1.0 / 1e-20", o = "max"); let l = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`; t === "sum" ? l = "sumValue" : t === "prod" ? l = "prodValue" : t === "all" ? l = "allValue" : t === "any" && (l = "anyValue"); let u = Math.floor(n / 4) * 4, p = n % 4, d = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, c = "vec4"; t === "all" ? (i = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, c = "bvec4") : t === "any" && (i = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, c = "bvec4"); let h = ""; r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${p === 1}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${p === 2}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${p === 3}) {
          ${c} values = ${c}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${l});
      }
    `}
    }; function Dee(e) { let t = []; for (; t.length === 0 || t[t.length - 1].outSize !== 1;) { let n = t.length ? t[t.length - 1].outSize : e[1], a = T.computeOptimalWindowSize(n); t.push({ inSize: n, windowSize: a, outSize: Math.ceil(n / a) }) } return t } function nl(e, t, n, a) { let r = Dee(e.shape), s = e; for (let i = 0; i < r.length; i++) { let { inSize: o, windowSize: l, outSize: u } = r[i], p, d; n === "mean" ? p = i === 0 ? new DS({ windowSize: l, inSize: o, batchSize: e.shape[0], outSize: u }, o) : new DS({ windowSize: l, inSize: o, batchSize: e.shape[0], outSize: u }) : p = new $ee({ windowSize: l, inSize: o, batchSize: e.shape[0], outSize: u }, n), d = s, s = a.runWebGLProgram(p, [s], t), d.dataId !== e.dataId && a.disposeIntermediateTensorInfo(d) } return s } var Ree = class {
        constructor(e, t) {
            this.variableNames = ["A"]; let n = new Array(e.length); for (let s = 0; s < n.length; s++)n[s] = e[t[s]]; this.outputShape = n, this.rank = n.length; let a = ht(this.rank), r = Mee(t); this.userCode = `
    void main() {
      ${a} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `}
    }; function Mee(e) { let t = e.length; if (t > 6) throw Error(`Transpose for rank ${t} is not yet supported`); let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], a = new Array(t); for (let r = 0; r < e.length; r++)a[e[r]] = n[r]; return a.join() } var Oee = class {
        constructor(e, t) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0; let n = new Array(e.length); for (let u = 0; u < n.length; u++)n[u] = e[t[u]]; if (this.outputShape = n, this.rank = n.length, this.rank > 6) throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`); let a = ht(this.rank), r = XA("rc", this.rank), s = new Array(this.rank); for (let u = 0; u < t.length; u++)s[t[u]] = r[u]; let i = `vec2(${s.slice(-2).join()})`, o = `++${r[this.rank - 1]} < ${n[this.rank - 1]}`, l = `getChannel(getA(${s.join()}), ${i})`; this.userCode = `
    void main() {
      ${a} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${n[this.rank - 2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `}
    }; function eg(e, t, n) { let a = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Oee(e.shape, t) : new Ree(e.shape, t); return n.runWebGLProgram(a, [e], e.dtype) } function Pee(e, t, n, a) { let r = t, s = e.shape.length, i = w.parseAxisParam(r, e.shape), o = i, l = T.getAxesPermutation(o, s), u = l != null, p = e; u && (p = eg(e, l, a), o = T.getInnerMostAxes(o.length, s)), T.assertAxesAreInnerMostDims("sum", o, s); let [d, c] = T.computeOutAndReduceShapes(p.shape, o), h = d; n && (h = T.expandShapeToKeepDim(d, i)); let m = w.sizeFromShape(c), f = w.sizeFromShape(e.shape) / m, g = ce({ inputs: { x: p }, attrs: { shape: [f, m] }, backend: a }), b = Xm(e.dtype), y = nl(g, b, "sum", a), x = ce({ inputs: { x: y }, attrs: { shape: h }, backend: a }); return a.disposeIntermediateTensorInfo(g), a.disposeIntermediateTensorInfo(y), u && a.disposeIntermediateTensorInfo(p), x } function tg(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a; return Pee(r, s, i, n) } var Lee = { kernelName: Wo, backendName: "webgl", kernelFunc: tg }; function In(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { perm: s } = a, i = n, o = r.shape.length, l = new Array(o); for (let p = 0; p < l.length; p++)l[p] = r.shape[s[p]]; let u; if (i.shouldExecuteOnCPU([r])) { let p = i.texData.get(r.dataId).values, d = fk(p, r.shape, r.dtype, s, l); u = i.makeTensorInfo(l, r.dtype); let c = i.texData.get(u.dataId); c.values = d } else u = eg(r, s, i); return u } var zee = { kernelName: Er, backendName: "webgl", kernelFunc: In }, rF = 1e3; function Cm({ a: e, b: t, transposeA: n, transposeB: a, backend: r, bias: s = null, preluActivationWeights: i = null, leakyreluAlpha: o = 0, activation: l = null }) { let u = e.shape.length, p = t.shape.length, d = n ? e.shape[u - 2] : e.shape[u - 1], c = a ? t.shape[p - 1] : t.shape[p - 2], h = n ? e.shape[u - 1] : e.shape[u - 2], m = a ? t.shape[p - 2] : t.shape[p - 1], f = e.shape.slice(0, -2), g = t.shape.slice(0, -2), b = w.sizeFromShape(f), y = w.sizeFromShape(g), x = cp.assertAndGetBroadcastShape(e.shape.slice(0, -2), t.shape.slice(0, -2)).concat([h, m]); w.assert(d === c, () => `Error in matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`); let v = n ? [b, d, h] : [b, h, d], I = a ? [y, m, c] : [y, c, m], N = ce({ inputs: { x: e }, backend: r, attrs: { shape: v } }), C = ce({ inputs: { x: t }, backend: r, attrs: { shape: I } }), _ = [N, C], F = Math.max(b, y), D = n ? N.shape[1] : N.shape[2], $ = s != null, S = i != null, M = l === "leakyrelu", B = l != null ? Dc(l, !0) : null, U = $ || S || M || B != null, H; if ((h === 1 || m === 1) && D > rF && U === !1) { let K = N, Z = C; n && (K = In({ inputs: { x: N }, backend: r, attrs: { perm: [0, 2, 1] } }), _.push(K)), a && (Z = In({ inputs: { x: C }, backend: r, attrs: { perm: [0, 2, 1] } }), _.push(Z)); let J = m !== 1, ee = m === 1, ae = K; J && (ae = ce({ inputs: { x: K }, backend: r, attrs: { shape: [F, D, 1] } }), _.push(ae)); let te = m === 1 ? 2 : 1, se = Z; ee && (se = ce({ inputs: { x: Z }, backend: r, attrs: { shape: [F, 1, D] } }), _.push(se)); let ie = yk({ inputs: { a: ae, b: se }, backend: r }); H = tg({ inputs: { x: ie }, backend: r, attrs: { axis: te, keepDims: !0 } }), _.push(ie) } else { let K = ga(e.dtype, t.dtype), Z = new aF(v, I, [F, h, m], n, a, $, B, S, M), J = [N, C]; if (s != null && J.push(s), S && J.push(i), M) { let ee = r.makeTensorInfo([], "float32", w.createScalarValue(o, "float32")); J.push(ee), _.push(ee) } H = r.runWebGLProgram(Z, J, K) } let j = ce({ inputs: { x: H }, backend: r, attrs: { shape: x } }); _.push(H); for (let K of _) r.disposeIntermediateTensorInfo(K); return j } function Wee(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s, bias: i, preluActivationWeights: o } = t, { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a; return Cm({ a: r, b: s, transposeA: l, transposeB: u, backend: n, bias: i, preluActivationWeights: o, leakyreluAlpha: d, activation: p }) } var Bee = { kernelName: oi, backendName: "webgl", kernelFunc: Wee }, RS = "return abs(x);"; function Vee(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (n.shouldExecuteOnCPU([a]) && a.dtype !== "complex64") { let s = n.texData.get(a.dataId), i = jA(s.values); return n.makeTensorInfo(a.shape, a.dtype, i) } let r; return G().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new ss(a.shape, RS) : r = new ir(a.shape, RS), n.runWebGLProgram(r, [a], a.dtype) } var Uee = { kernelName: uu, backendName: "webgl", kernelFunc: Vee }, Gee = Ma + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, Hee = Ze({ opSnippet: Gee }), qee = { kernelName: Ci, backendName: "webgl", kernelFunc: Hee }, jee = Ma + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, Kee = Ze({ opSnippet: jee }), Xee = { kernelName: Ei, backendName: "webgl", kernelFunc: Kee }, MS = "return a + b;", Yee = fn({ opSnippet: MS, packedOpSnippet: MS, supportsComplex: !0, cpuKernelImpl: rQ }), Zee = { kernelName: Is, backendName: "webgl", kernelFunc: Yee }, Jee = class {
            constructor(e, t) {
                this.outputShape = [], this.outputShape = e, this.variableNames = t.map((r, s) => `T${s}`); let n = []; this.variableNames.forEach(r => { n.push(`float v${r} = get${r}AtOutCoords();`) }); let a = this.variableNames.map(r => `v${r}`).join(" + "); this.userCode = `
      void main() {
        ${n.join(`
        `)}

        float result = ${a};
        setOutput(result);
      }
    `}
        }, Qee = class {
            constructor(e, t) {
                this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.variableNames = t.map((r, s) => `T${s}`); let n = []; this.variableNames.forEach(r => { n.push(`vec4 v${r} = get${r}AtOutCoords();`) }); let a = this.variableNames.map(r => `v${r}`).join(" + "); this.userCode = `
      void main() {
        ${n.join(`
        `)}

        vec4 result = ${a};
        setOutput(result);
      }
    `}
        }; function tm(e) { let { inputs: t, backend: n } = e, a = t; if (a.length === 1) return aa({ inputs: { x: a[0] }, backend: n }); if (a.length > G().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) { let o = Math.floor(a.length / 2), l = tm({ inputs: a.slice(0, o), backend: n }), u = tm({ inputs: a.slice(o), backend: n }); return tm({ inputs: [l, u], backend: n }) } let r = a.map(o => o.dtype).reduce((o, l) => ga(o, l)), s = a.map(o => o.shape), i = G().getBool("WEBGL_PACK") ? new Qee(a[0].shape, s) : new Jee(a[0].shape, s); return n.runWebGLProgram(i, a, r) } var ete = { kernelName: _i, backendName: "webgl", kernelFunc: tm }; function tte(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r; p != null && (d = In({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, o)), T.assertAxesAreInnerMostDims("all", u, o); let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = nl(f, f.dtype, "all", n), b; if (i) { let y = T.expandShapeToKeepDim(c, l); b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } }) } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } }); return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b } var nte = { kernelName: pu, backendName: "webgl", kernelFunc: tte }; function ate(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r; p != null && (d = In({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, o)), T.assertAxesAreInnerMostDims("any", u, o); let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = nl(f, f.dtype, "any", n), b; if (i) { let y = T.expandShapeToKeepDim(c, l); b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } }) } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } }); return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b } var rte = { kernelName: cu, backendName: "webgl", kernelFunc: ate }, ste = class {
            constructor(e, t, n) {
                this.variableNames = ["A"]; let { windowSize: a, batchSize: r, outSize: s } = e; n || this.variableNames.push("bestIndicesA"), this.outputShape = [r, s]; let i = t === "max" ? ">" : "<", o = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));"; this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${a};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${a}; i++) {
          int inIdx = ${o};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}
        }, ite = class {
            constructor(e, t, n, a) {
                this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, w.assert(e.length > 2, () => `Packed arg${n.charAt(0).toUpperCase() + n.slice(1)} supports only inputs with rank above 2.`); let r = e[e.length - 1], s = Math.ceil(r / t); this.outputShape = e.slice(0, -1), s > 1 && this.outputShape.push(s), a || this.variableNames.push("bestIndicesA"); let i = this.outputShape, o = i.length, l = ht(o), u = kn("coords", o), p, d; if (s === 1) {
                    d = o + 1; let C = ht(d); p = `
        ${C} sourceLocR = ${C}(${u.join()}, 0);
        ++${u[o - 1]};
        ${C} sourceLocG = ${C}(${u.join()}, 0);
        ++${u[o - 2]};
        ${C} sourceLocA = ${C}(${u.join()}, 0);
        --${u[o - 1]};
        ${C} sourceLocB = ${C}(${u.join()}, 0);
        --${u[o - 2]};`
                } else d = o, p = `
        ${l} sourceLocR = coords;
        ++${u[o - 1]};
        ${l} sourceLocG = coords;
        ++${u[o - 2]};
        ${l} sourceLocA = coords;
        --${u[o - 1]};
        ${l} sourceLocB = coords;
        --${u[o - 2]};`; let c = ["x", "y", "z", "w", "u", "v"].slice(0, d), h = "." + c[d - 1], m = c.map(C => "int " + C), f = kn("sourceLocR", d - 1).concat("inIdx.r"), g = kn("sourceLocG", d - 1).concat("inIdx.g"), b = kn("sourceLocB", d - 1).concat("inIdx.b"), y = kn("sourceLocA", d - 1).concat("inIdx.a"), x = n === "max" ? "greaterThan" : "lessThan", v = a ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${f.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${y.join()})));`, I = `vec4(
            getAChannel(${f.join()}),
            hasNextCol ? getAChannel(${g.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`, N = a ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${c.join()}),
                                          vec2(${c.slice(-2).join()}));
      }`; this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${c.join()}),
                               vec2(${c.slice(-2).join()}));
      }
      ${N}
      void main() {
        ${l} coords = getOutputCoords();
        bool hasNextCol = ${u[o - 1]} < ${i[o - 1] - 1};
        bool hasNextRow = ${u[o - 2]} < ${i[o - 2] - 1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${I};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${v}
          vec4 candidate = ${I};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}
        }; function sF(e, t, n, a = null) { let r = t.shape[0], s = t.shape[1]; a != null && (r = a.shape[0], s = a.shape[1]); let i = T.computeOptimalWindowSize(s), o = { windowSize: i, inSize: s, batchSize: r, outSize: Math.ceil(s / i) }, l = new ste(o, n, a == null), u = [t]; a != null && u.push(a); let p = e.runWebGLProgram(l, u, "int32"); if (p.shape[1] === 1) return p; let d = sF(e, t, n, p); return e.disposeIntermediateTensorInfo(p), d } function iF(e, t, n, a = null) { let r = a != null ? a.shape : t.shape, s = r[r.length - 1], i = T.computeOptimalWindowSize(s), o = new ite(r, i, n, a == null), l = a == null ? [t] : [t, a], u = e.runWebGLProgram(o, l, "int32"); if (u.shape.length === t.shape.length) { let p = iF(e, t, n, u); return e.disposeIntermediateTensorInfo(u), p } return u } function oF(e, t, n, a) { let r = [n]; if (T.assertAxesAreInnerMostDims("arg" + a.charAt(0).toUpperCase() + a.slice(1), r, t.shape.length), !G().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) { let s = [], i = e.texData.get(t.dataId), o = i !== null && i.isPacked, l = t; o && (l = e.unpackTensor(t), s.push(l)); let [u, p] = T.computeOutAndReduceShapes(l.shape, r), d = w.sizeFromShape(p), c = ce({ inputs: { x: l }, backend: e, attrs: { shape: [-1, d] } }); s.push(c); let h = sF(e, c, a); s.push(h); let m = ce({ inputs: { x: h }, backend: e, attrs: { shape: u } }); return s.forEach(f => e.disposeIntermediateTensorInfo(f)), m } return iF(e, t, a) } function ote(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s } = a, i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = []; o != null && (l = In({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), T.assertAxesAreInnerMostDims("argMax", [i[0]], l.shape.length); let p = oF(n, l, i[0], "max"); return u.forEach(d => n.disposeIntermediateTensorInfo(d)), p } var lte = { kernelName: du, backendName: "webgl", kernelFunc: ote }; function ute(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s } = a, i = w.parseAxisParam(s, r.shape), o = T.getAxesPermutation(i, r.shape.length), l = r, u = []; o != null && (l = In({ inputs: { x: r }, backend: n, attrs: { perm: o } }), u.push(l), i = T.getInnerMostAxes(i.length, l.shape.length)), T.assertAxesAreInnerMostDims("argMin", [i[0]], l.shape.length); let p = oF(n, l, i[0], "min"); return u.forEach(d => n.disposeIntermediateTensorInfo(d)), p } var pte = { kernelName: hu, backendName: "webgl", kernelFunc: ute }, cte = Ma + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, dte = Ze({ opSnippet: cte }), hte = { kernelName: Ai, backendName: "webgl", kernelFunc: dte }, mte = Ma + "return log(x + sqrt(x * x + 1.0));", fte = Ze({ opSnippet: mte }), gte = { kernelName: Fi, backendName: "webgl", kernelFunc: fte }, bte = Ma + `
  return atan(x);
`, yte = Ze({ opSnippet: bte }), xte = { kernelName: $i, backendName: "webgl", kernelFunc: yte }, vte = bk + `
  return atan(a, b);
`, wte = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+ tl + `
  return result;
`, kte = fn({ opSnippet: vte, packedOpSnippet: wte }), Ite = { kernelName: Ri, backendName: "webgl", kernelFunc: kte }, Ste = Ma + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, Nte = Ze({ opSnippet: Ste }), Tte = { kernelName: Di, backendName: "webgl", kernelFunc: Nte }, Rc = class {
                constructor(e, t, n, a = !1, r = !1) {
                    if (this.variableNames = ["x"], t === "avg" && n) throw new Error("Cannot compute positions for average pool."); let s = e.filterWidth, i = e.strideHeight, o = e.strideWidth, l = e.dilationHeight, u = e.dilationWidth, p = e.effectiveFilterHeight, d = e.effectiveFilterWidth, c = e.padInfo.top, h = e.padInfo.left; this.outputShape = e.outShape; let m = t === "avg", f = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, g = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`, b = "0.0"; if (m || (b = "-1.0 / 1e-20"), n) {
                        let C = ">="; this.userCode = `
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${c}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${C} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${a ? r ? f : g : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `; return
                    } let y = "max", x = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`; t === "avg" && (x = "avgValue / max(count, 1.0)"); let v = Math.floor(s / 4) * 4, I = s % 4, N = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${y}(values, minMaxValue);
      }
    `; this.userCode = `
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${c}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${v}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${N}
          }

          int xC = xCCorner + ${v};
          if (${I === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${N}
          } else if (${I === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${N}
          } else if (${I === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${N}
          }
        }
        setOutput(${x});
      }
    `}
            }, xk = class {
                constructor(e, t, n, a = !1, r = !1) {
                    if (this.variableNames = ["x"], t === "avg" && n) throw new Error("Cannot compute positions for average pool."); let s = e.filterWidth, i = e.strideDepth, o = e.strideHeight, l = e.strideWidth, u = e.dilationDepth, p = e.dilationHeight, d = e.dilationWidth, c = e.effectiveFilterDepth, h = e.effectiveFilterHeight, m = e.effectiveFilterWidth, f = e.padInfo.front, g = e.padInfo.top, b = e.padInfo.left; this.outputShape = e.outShape; let y = t === "avg", x = "0.0"; if (y || (x = "-1.0 / 1e-20"), n) {
                        let F = ">="; this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${o}, ${l});
        const ivec3 pads = ivec3(${f}, ${g}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${c};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${F} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${a ? r ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${h} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `; return
                    } let v = "max", I = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`; t === "avg" && (I = "avgValue / max(count, 1.0)"); let N = Math.floor(s / 4) * 4, C = s % 4, _ = `
      if (${y}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${v}(values, minMaxValue);
      }
    `; this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${o}, ${l});
      const ivec3 pads = ivec3(${f}, ${g}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${c};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${N}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${_}
            }

            int xC = xCCorner + ${N};
            if (${C === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${C === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${_}
            } else if (${C === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${_}
            }
          }
        }
        setOutput(${I});
      }
    `}
            }; function Cte(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t; wp(r, "avgPool"); let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1; w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`); let p = T.computePool2DInfo(r.shape, s, i, u, o, l); if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) return aa({ inputs: { x: r }, backend: n }); let d = new Rc(p, "avg", !1); return n.runWebGLProgram(d, [r], "float32") } var Ete = { kernelName: Mi, backendName: "webgl", kernelFunc: Cte }; function _te(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = [1, 1, 1], d = T.computePool3DInfo(r.shape, s, i, p, o, l, u), c = new xk(d, "avg", !1); return n.runWebGLProgram(c, [r], "float32") } var Ate = { kernelName: mu, backendName: "webgl", kernelFunc: _te }, Fte = class {
                constructor(e) {
                    this.variableNames = ["dy"], this.outputShape = e.inShape; let t = e.filterHeight, n = e.filterWidth, a = e.strideHeight, r = e.strideWidth, s = e.dilationHeight, i = e.dilationWidth, o = e.effectiveFilterHeight, l = e.effectiveFilterWidth, u = o - 1 - e.padInfo.top, p = l - 1 - e.padInfo.left, d = 1 / (t * n); this.userCode = `
      const ivec2 pads = ivec2(${u}, ${p});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}
            }, $te = class {
                constructor(e) {
                    this.variableNames = ["dy"], this.outputShape = e.inShape; let t = e.filterDepth, n = e.filterHeight, a = e.filterWidth, r = e.strideDepth, s = e.strideHeight, i = e.strideWidth, o = e.dilationDepth, l = e.dilationHeight, u = e.dilationWidth, p = e.effectiveFilterDepth, d = e.effectiveFilterHeight, c = e.effectiveFilterWidth, h = p - 1 - e.padInfo.front, m = d - 1 - e.padInfo.top, f = c - 1 - e.padInfo.left, g = 1 / (t * n * a); this.userCode = `
      const ivec3 pads = ivec3(${h}, ${m}, ${f});
      const float avgMultiplier = float(${g});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}
            }; function Dte(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, i = s, { filterSize: o, strides: l, pad: u, dimRoundingMode: p } = a, d = [1, 1, 1], c = T.computePool3DInfo(i.shape, o, l, d, u, p), h = new $te(c); return n.runWebGLProgram(h, [r], i.dtype) } var Rte = { kernelName: Wc, backendName: "webgl", kernelFunc: Dte }; function Mte(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, i = s; wp([r, s], "avgPoolGrad"); let { filterSize: o, strides: l, pad: u } = a, p = T.computePool2DInfo(i.shape, o, l, 1, u), d = new Fte(p); return n.runWebGLProgram(d, [r], i.dtype) } var Ote = { kernelName: zc, backendName: "webgl", kernelFunc: Mte }; function Pte(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a; return Cm({ a: r, b: s, transposeA: i, transposeB: o, backend: n }) } var Lte = { kernelName: Oi, backendName: "webgl", kernelFunc: Pte }, zte = class {
                constructor(e, t, n, a, r, s) {
                    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], T.assertAndGetBroadcastShape(e, t), T.assertAndGetBroadcastShape(e, n); let i = "0.0"; a != null && (T.assertAndGetBroadcastShape(e, a), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()"); let o = "1.0"; r != null && (T.assertAndGetBroadcastShape(e, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${s}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}
            }, Wte = class {
                constructor(e, t, n, a, r, s) {
                    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], T.assertAndGetBroadcastShape(e, t), T.assertAndGetBroadcastShape(e, n); let i = "vec4(0.0)"; a != null && (T.assertAndGetBroadcastShape(e, a), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()"); let o = "vec4(1.0)"; r != null && (T.assertAndGetBroadcastShape(e, r), this.variableNames.push("scale"), o = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${s}));

        setOutput((x - mean) * inv + offset);
      }
    `}
            }, Bte = ({ inputs: e, backend: t, attrs: n }) => { let { x: a, mean: r, variance: s, offset: i, scale: o } = e; w.assert(r.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), w.assert(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), w.assert(o == null || r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."); let { varianceEpsilon: l } = n; l == null && (l = .001); let u = [a, r, s], p = null; i != null && (p = i.shape, u.push(i)); let d = null; o != null && (d = o.shape, u.push(o)); let c = G().getBool("WEBGL_PACK_NORMALIZATION") ? new Wte(a.shape, r.shape, s.shape, p, d, l) : new zte(a.shape, r.shape, s.shape, p, d, l); return t.runWebGLProgram(c, u, u[0].dtype) }, Vte = { kernelName: eo, backendName: "webgl", kernelFunc: Bte }, Ute = class {
                constructor(e) {
                    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length; let t = ht(this.rank); this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }]; let n = Gte(this.rank), a, r = e.map((s, i) => `sourceLoc.${wv[i]} = start[${i}] + coords.${wv[i]};`); a = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${r.join(`
`)}
      `, this.userCode = `
      void main() {
        ${a}
        setOutput(getSource(${n}));
      }
    `}
            }, wv = ["x", "y", "z", "w", "u", "v"]; function Gte(e) { if (e === 1) return "sourceLoc"; if (e <= 6) return wv.slice(0, e).map(t => "sourceLoc." + t).join(","); throw Error(`Slicing for rank ${e} is not yet supported`) } var Hte = class {
                constructor(e) {
                    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }]; let t = ht(this.rank), n = kn("coords", this.rank), a = kn("sourceLoc", this.rank), r = this.rank === 1 ? "sourceLoc" : `vec2(${a.slice(-2).join()})`, s = `getChannel(getSource(${a.join()}), ${r})`, i = `
      result.x = ${s};
      if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${a[this.rank - 1]};
        result.y = ${s};
        --${a[this.rank - 1]};
      }
    `, o = this.rank === 1 ? "" : `
      --${n[this.rank - 1]};
      if (++${n[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${a[this.rank - 2]};
        result.z = ${s};
        if (++${n[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${a[this.rank - 1]};
          result.w = ${s};
        }
      }
    `, l = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((u, p) => `start[${p}]`).join()});` : e.map((u, p) => `${a[p]} = ${n[p]} + start[${p}];`).join(`
`); this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `}
            }; function qte(e, t, n, a) { let r = a.texData.get(e.dataId), s = a.makeTensorInfo(n, e.dtype), i = a.texData.get(s.dataId); Object.assign(i, r), i.refCount = 1, i.shape = n, i.dtype = e.dtype; let o = Kt.computeFlatOffset(t, w.computeStrides(e.shape)); r.slice && (o += r.slice.flatOffset), i.slice = { flatOffset: o, origDataId: r.slice && r.slice.origDataId || e.dataId }; let l = a.dataRefCount.get(i.slice.origDataId) || 1; return a.dataRefCount.set(i.slice.origDataId, l + 1), s } function Ep(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { begin: s, size: i } = a, [o, l] = Kt.parseSliceParams(r, s, i); if (Kt.assertParamsValid(r, o, l), w.sizeFromShape(l) === 0) return n.makeTensorInfo(l, r.dtype, []); if (n.shouldExecuteOnCPU([r]) || r.dtype === "string") { let d = n.texData.get(r.dataId), c = OQ(d.values, o, l, r.shape, r.dtype); return n.makeTensorInfo(l, r.dtype, c) } let { isPacked: u } = n.texData.get(r.dataId), p = Kt.isSliceContinous(r.shape, o, l); if (u || !p) { let d = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Hte(l) : new Ute(l), c = [o]; return n.runWebGLProgram(d, [r], r.dtype, c) } return n.uploadToGPU(r.dataId), qte(r, o, l, n) } var jte = { kernelName: ep, backendName: "webgl", kernelFunc: Ep }, Kte = e => { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, crops: i } = a; w.assert(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"); let o = s.reduce((y, x) => y * x), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = [], m = ce({ inputs: { x: r }, backend: n, attrs: { shape: l } }), f = In({ inputs: { x: m }, backend: n, attrs: { perm: u } }), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: p } }), b = Ep({ inputs: { x: g }, backend: n, attrs: { begin: d, size: c } }); return h.push(m), h.push(f), h.push(g), h.forEach(y => n.disposeIntermediateTensorInfo(y)), b }, Xte = { kernelName: fu, backendName: "webgl", kernelFunc: Kte }; function Yte(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, weights: s } = t, { size: i } = a, o = n.readSync(r.dataId), l = n.readSync(s.dataId), u = qA(o, l, s.dtype, s.shape, i); return n.makeTensorInfo([i], s.dtype, u) } var Zte = { kernelName: gu, backendName: "webgl", kernelFunc: Yte }, Jte = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`, Qte = `
  return float(int(a.r) & int(b.r));
`; function ene(e) { let { inputs: t, backend: n } = e, { a, b: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS"), i = G().getNumber("WEBGL_VERSION"); if (n.shouldExecuteOnCPU([a, r]) || i === 1) { let l = n.texData.get(a.dataId).values, u = n.texData.get(r.dataId).values, [p, d] = iQ(a.shape, r.shape, l, u, a.dtype), c = n.makeTensorInfo(d, a.dtype), h = n.texData.get(c.dataId); return h.values = p, c } let o; return s ? o = new Tp(Jte, a.shape, r.shape, !1) : o = new Si(Qte, a.shape, r.shape), n.runWebGLProgram(o, [a, r], a.dtype) } var tne = { kernelName: bu, backendName: "webgl", kernelFunc: ene }; function nne(e) { let { inputs: t, backend: n } = e, { s0: a, s1: r } = t, s = n.readSync(a.dataId), i = n.readSync(r.dataId), o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i)); return n.makeTensorInfo([o.length], "int32", Int32Array.from(o)) } var ane = { kernelName: Bc, backendName: "webgl", kernelFunc: nne }, rne = "return float(a != b);", lF = fn({ opSnippet: rne, cpuKernelImpl: CQ, dtype: "bool" }), sne = { kernelName: Bu, backendName: "webgl", kernelFunc: lF }; function Pd(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = n.texData.get(a.dataId); return aa({ inputs: { x: r.complexTensorInfos.real }, backend: n }) } var ine = { kernelName: jm, backendName: "webgl", kernelFunc: Pd }, one = "return float(int(x));"; function lne(e, t) { let n = new ir(e.shape, one), a = t.runWebGLProgram(n, [e], "int32"); return { dataId: a.dataId, shape: a.shape, dtype: a.dtype } } function kv(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { dtype: s } = a; if (s === "complex64") { if (r.dtype === "complex64") return aa({ inputs: { x: r }, backend: n }); let i = It(r.shape), o = kv({ inputs: { x: r }, backend: n, attrs: { dtype: "float32" } }), l = Ms({ inputs: { real: o, imag: i }, backend: n }); return i.dispose(), n.disposeIntermediateTensorInfo(o), l } if (r.dtype === "complex64") { let i = Pd({ inputs: { input: r }, backend: n }), o = kv({ inputs: { x: i }, backend: n, attrs: { dtype: s } }); return n.disposeIntermediateTensorInfo(i), o } if (!w.hasEncodingLoss(r.dtype, s)) { let i = aa({ inputs: { x: r }, backend: n }); return { dataId: i.dataId, shape: i.shape, dtype: s } } if (n.shouldExecuteOnCPU([r])) { let i = n.texData.get(r.dataId).values, [o, l, u] = oQ(i, r.shape, r.dtype, s); return n.makeTensorInfo(o, l, u) } if (s === "int32") return lne(r, n); if (s === "bool") { let i = n.makeTensorInfo([], "bool", w.getTypedArrayFromDType("bool", 1)), o = lF({ inputs: { a: r, b: i }, backend: n }); return n.disposeIntermediateTensorInfo(i), o } throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${s}`) } var une = { kernelName: Pi, backendName: "webgl", kernelFunc: kv }, OS = "return ceil(x);", pne = Ze({ opSnippet: OS, packedOpSnippet: OS, cpuKernelImpl: lQ }), cne = { kernelName: Li, backendName: "webgl", kernelFunc: pne }, dne = class {
        constructor(e) {
            this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}
    }, hne = class {
        constructor(e) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}
    }; function mne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { clipValueMin: s, clipValueMax: i } = a, o; G().getBool("WEBGL_PACK_CLIP") ? o = new hne(r.shape) : o = new dne(r.shape); let l = [[s], [i]]; return n.runWebGLProgram(o, [r], r.dtype, l) } var fne = { kernelName: Ss, backendName: "webgl", kernelFunc: mne }, gne = class {
        constructor(e) {
            this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}
    }; function PS(e, t) { return { dataId: t.dataId, dtype: t.dtype, shape: e.shape } } function bne(e) { let { inputs: t, backend: n } = e, { x: a } = t, r = n.texData.get(a.dataId), s = new gne(a.shape), i = [PS(a, r.complexTensorInfos.real), PS(a, r.complexTensorInfos.imag)]; return n.runWebGLProgram(s, i, i[0].dtype) } var yne = { kernelName: Vc, backendName: "webgl", kernelFunc: bne }, xne = class {
        constructor(e) {
            this.outputShape = [], this.outputShape = T.computeOutShape(e, 1), this.variableNames = e.map((s, i) => `T${i}`); let t = new Array(e.length - 1); t[0] = e[0][1]; for (let s = 1; s < t.length; s++)t[s] = t[s - 1] + e[s][1]; let n = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`]; for (let s = 1; s < t.length; s++) { let i = t[s - 1]; n.push(`else if (yC < ${t[s]}) setOutput(getT${s}(yR, yC-${i}));`) } let a = t.length, r = t[t.length - 1]; n.push(`else setOutput(getT${a}(yR, yC-${r}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join(`
        `)}
      }
    `}
    }, vne = class {
        constructor(e, t) {
            this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = T.computeOutShape(e, t); let n = this.outputShape, a = n.length, r = ht(a), s = kn("coords", a), i = ["x", "y", "z", "w", "u", "v"].slice(0, a); this.variableNames = e.map((m, f) => `T${f}`); let o = new Array(e.length - 1); o[0] = e[0][t]; for (let m = 1; m < o.length; m++)o[m] = o[m - 1] + e[m][t]; let l = i[t], u = i.slice(-2), p = i.join(), d = `if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${p}), vec2(${u.join()}));
        }`; for (let m = 1; m < o.length; m++) {
                let f = o[m - 1]; d += `
        if (${l} < ${o[m]}  && ${l} >= ${o[m - 1]}) {
          return getChannel(
            getT${m}(${qh(i, l, f)}),
            vec2(${qh(u, l, f)}));
        }`} let c = o.length, h = o[o.length - 1]; d += `
        return getChannel(
          getT${c}(${qh(i, l, h)}),
          vec2(${qh(u, l, h)}));`, this.userCode = `
      float getValue(${i.map(m => "int " + m)}) {
        ${d}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${s}), 0., 0., 0.);

        ${s[a - 1]} = ${s[a - 1]} + 1;
        if (${s[a - 1]} < ${n[a - 1]}) {
          result.g = getValue(${s});
        }

        ${s[a - 2]} = ${s[a - 2]} + 1;
        if (${s[a - 2]} < ${n[a - 2]}) {
          result.a = getValue(${s});
        }

        ${s[a - 1]} = ${s[a - 1]} - 1;
        if (${s[a - 2]} < ${n[a - 2]} &&
            ${s[a - 1]} < ${n[a - 1]}) {
          result.b = getValue(${s});
        }
        setOutput(result);
      }
    `}
    }; function qh(e, t, n) { let a = e.indexOf(t); return e.map((r, s) => s === a ? `${r} - ${n}` : r).join() } function ng(e) { let { inputs: t, backend: n } = e, { input: a } = t, r = n.texData.get(a.dataId); return aa({ inputs: { x: r.complexTensorInfos.imag }, backend: n }) } var wne = { kernelName: Um, backendName: "webgl", kernelFunc: ng }; function hc(e, t, n) { let a = e[0].dtype; if (a === "complex64") { let h = e.map(y => Pd({ inputs: { input: y }, backend: n })), m = e.map(y => ng({ inputs: { input: y }, backend: n })), f = hc(h, t, n), g = hc(m, t, n), b = Ms({ inputs: { real: f, imag: g }, backend: n }); return h.forEach(y => n.disposeIntermediateTensorInfo(y)), m.forEach(y => n.disposeIntermediateTensorInfo(y)), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), b } let r = n.shouldExecuteOnCPU(e); if (a === "string" && (r = !0), r) { let h = e.map(v => { let I = [-1, w.sizeFromShape(v.shape.slice(t))]; return ce({ inputs: { x: v }, backend: n, attrs: { shape: I } }) }), m = h.map(v => ({ vals: n.readSync(v.dataId), shape: v.shape })), f = T.computeOutShape(h.map(v => v.shape), 1), g = h[0].shape[0] === 1, b = uQ(m, f, a, g), y = T.computeOutShape(e.map(v => v.shape), t), x = n.makeTensorInfo(y, a, b); return h.forEach(v => n.disposeIntermediateTensorInfo(v)), x } let s = e.filter(h => w.sizeFromShape(h.shape) > 0), i = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && s[0].shape.length > 1; if (s.length === 1) { let h = i ? new ir(e[0].shape, es) : new ss(e[0].shape, es); return n.runWebGLProgram(h, e, a) } let o = G().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER"); if (s.length > o) { let h = []; for (let f = 0; f < s.length; f += o) { let g = s.slice(f, f + o); h.push(hc(g, t, n)) } let m = hc(h, t, n); for (let f of h) n.disposeIntermediateTensorInfo(f); return m } if (i) { let h = new vne(s.map(m => m.shape), t); return n.runWebGLProgram(h, s, a) } let { tensors2D: l, outShape: u } = kne(s, t, n), p = new xne(l.map(h => h.shape)), d = n.runWebGLProgram(p, l, a); l.forEach(h => n.disposeIntermediateTensorInfo(h)); let c = ce({ inputs: { x: d }, attrs: { shape: u }, backend: n }); return n.disposeIntermediateTensorInfo(d), c } function kne(e, t, n) { let a = T.computeOutShape(e.map(r => r.shape), t); return { tensors2D: e.map(r => ce({ inputs: { x: r }, attrs: { shape: [-1, w.sizeFromShape(r.shape.slice(t))] }, backend: n })), outShape: a } } function uF(e) { let { inputs: t, backend: n, attrs: a } = e, { axis: r } = a, s = w.parseAxisParam(r, t[0].shape)[0], i = t.map(u => u.shape); T.assertParamsConsistent(i, s); let o = T.computeOutShape(t.map(u => u.shape), s); if (w.sizeFromShape(o) === 0) return n.makeTensorInfo(o, t[0].dtype, []); let l = t.filter(u => w.sizeFromShape(u.shape) > 0); return l.length === 1 ? aa({ inputs: { x: l[0] }, backend: n }) : hc(l, s, n) } var Ine = { kernelName: yu, backendName: "webgl", kernelFunc: uF }, pF = class {
        constructor(e, t = !1, n = null, a = !1, r = !1) {
            this.variableNames = ["x", "W"], this.outputShape = e.outShape; let s = e.padInfo.top, i = e.padInfo.left, o = e.strideHeight, l = e.strideWidth, u = e.dilationHeight, p = e.dilationWidth, d = e.filterHeight, c = e.filterWidth, h = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4, f = e.dataFormat === "channelsLast", g = f ? 1 : 2, b = f ? 2 : 3, y = f ? 3 : 1, x = "", v = ""; n && (a ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`: r ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`: x = `
          float activation(float x) {
            ${n}
          }
        `, v = "result = activation(result);"); let I = t ? "result += getBiasAtOutCoords();" : ""; t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${y}];

        ivec2 xRCCorner =
            ivec2(coords[${g}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${c}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${f}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${f}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${f}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${f}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${I}
        ${v}
        setOutput(result);
      }
    `}
    }, Sne = class {
        constructor(e) {
            this.variableNames = ["x", "W"], this.outputShape = e.outShape; let t = e.padInfo.front, n = e.padInfo.top, a = e.padInfo.left, r = e.strideDepth, s = e.strideHeight, i = e.strideWidth, o = e.dilationDepth, l = e.dilationHeight, u = e.dilationWidth, p = e.filterDepth, d = e.filterHeight, c = e.filterWidth, h = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4; this.userCode = `
      const ivec3 strides = ivec3(${r}, ${s}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${a});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${c}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }, cF = class {
        constructor(e, t = !1, n = null, a = !1, r = !1) {
            this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = xn(this.outputShape.length); let s = e.padInfo.left, i = e.strideWidth, o = e.dilationWidth, l = e.filterHeight, u = e.filterWidth, p = u, d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`; for (let f = 0; f < u; f++)d += `
           vec4 xTexelC${f * 2};
           int xTexelC${f * 2}Ready;
           vec4 xTexelC${f * 2 + 1};
           int xTexelC${f * 2 + 1}Ready;
           vec4 xC${f};`; d += `
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `; for (let f = 0; f < u; f++)d += `
           xTexelC${f * 2} = vec4(0.0);
           xTexelC${f * 2}Ready = 0;
           xTexelC${f * 2 + 1} = vec4(0.0);
           xTexelC${f * 2 + 1}Ready = 0;
           xC${f} = vec4(0.0);`; d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `; for (let f = 0; f < (p + 1) / 2; f++) {
                let g = f * 2; if (d += `
           xC = xCCorner + ${g * o};
           `, i === 1) {
                    if (g < u && (s % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }
               `, o === 1 && g > 0 ? d += `
                 xC${g} = vec4(xTexelC${g - 2}.zw, xTexelC${g}.xy);
                 `: d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${g} = vec4(previous.zw, xTexelC${g}.xy);
                   } else {
                     xC${g} = vec4(0.0, 0.0, xTexelC${g}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 xC${g} = xTexelC${g};
                 `, g + 1 < u)) {
                        let b = s % 2 === 0 ? w.nearestLargerEven(o) : o; o % 2 === 0 && s % 2 === 1 || o % 2 !== 0 && s % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                     xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${g + 1}.zw = vec2(0.0);
                     }
                     xTexelC${g + 1}Ready = 1;
                   }
                   `, o > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${g + 1} = vec4(previous.zw, xTexelC${g + 1}.xy);
                     } else {
                      xC${g + 1} = vec4(0.0, 0.0, xTexelC${g + 1}.xy);
                     }
                     `: d += `
                     xC${g + 1} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${g + 1} = xTexelC${g};
                     `: d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                       xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${g + 1}.zw = vec2(0.0);
                       }
                       xTexelC${g + 1}Ready = 1;
                     }

                     xC${g + 1} = xTexelC${g + 1};
                     `}
                } else g < u && (s % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${g + 1}Ready == 0) {
                   xTexelC${g + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${g + 1}.zw = vec2(0.0);
                   }
                   xTexelC${g + 1}Ready = 1;
                 }

                 xC${g} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.zw);
               `, g + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${g + 1} = vec4(xTexelC${g + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${g}Ready == 0) {
                   xTexelC${g} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${g}.zw = vec2(0.0);
                   }
                   xTexelC${g}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${g + 1}Ready == 0) {
                   xTexelC${g + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${g + 1}.zw = vec2(0.);
                   }
                   xTexelC${g + 1}Ready = 1;
                 }

                 xC${g} = vec4(
                   xTexelC${g}.xy, xTexelC${g + 1}.xy);
               `, g + 1 < u && (d += `
                   xC${g + 1} = vec4(xTexelC${g}.zw, xTexelC${g + 1}.zw);
                 `))); g < u && (d += `
             wTexel = getW(r, ${g}, d1, d2);
             dotProd += xC${g}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${g}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, g + 1 < u && (d += `
               wTexel = getW(r, ${g + 1}, d1, d2);
               dotProd += xC${g + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${g + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))
            } d += `
     }
   `, d += `
     }
   `, d += `
     }
   `; let c = "", h = ""; n && (a ? c = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${n}
         }`: r ? c = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${n}
         }`: c = `vec4 activation(vec4 x) {
           ${n}
         }`, h = "result = activation(result);"); let m = t ? "result += getBiasAtOutCoords();" : ""; t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${c}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${h}
         setOutput(result);
       }
     `}
    }, Nne = class {
        constructor(e, t) {
            this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e, this.enableShapeUniforms = xn(this.outputShape.length); let { dataFormat: n } = t, a = Cn(), r = n === "channelsLast", s = r ? 1 : 2, i = r ? 2 : 3, o = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`, l = ""; for (let u = 0; u <= 1; u++)for (let p = 0; p <= 1; p++)l += `
          blockIndex = rc.z + ${p};
          pos = rc.y + ${u};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${s}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `; this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${a.output} = result;
      }
    `}
    }; function Em(e, t) { let n = e.length; return n >= 3 ? t ? [...e.slice(0, -3), e[n - 3] * e[n - 2], e[n - 1]] : [...e.slice(0, -3), e[n - 3], e[n - 2] * e[n - 1]] : !t && n === 1 && e[0] > 1 ? [e[0], 1] : null } function dF({ x: e, filter: t, convInfo: n, backend: a, bias: r = null, preluActivationWeights: s = null, leakyreluAlpha: i = 0, activation: o = null }) { let l = e.shape, u = a.texData.get(e.dataId), p = n.inChannels, d = l[0] * l[1] * l[2], c = n.outChannels, h = n.dataFormat === "channelsLast", m = !1, f = !1, g, b = []; if (s != null) { let y = Em(s.shape, h); y != null && (s = ce({ inputs: { x: s }, backend: a, attrs: { shape: y } }), b.push(s)) } if (r != null) { let y = Em(r.shape, h); y != null && (r = ce({ inputs: { x: r }, backend: a, attrs: { shape: y } }), b.push(r)) } if (!((d === 1 || c === 1) && p > rF) && u.isPacked && h && u.texture != null && l[2] % 2 !== 0 && w.arraysEqual(u.shape.slice(-3), l.slice(-3))) { let y = l[0] * l[1] * (l[2] + 1), x = { dataId: e.dataId, shape: [1, y, n.inChannels], dtype: e.dtype }, v = u.shape; u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, w.assert($c(u.shape, x.shape), () => `packed reshape ${u.shape} to ${x.shape} isn't free`); let I = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, n.inChannels, n.outChannels] } }); b.push(I); let N = Cm({ a: x, b: I, backend: a, transposeA: m, transposeB: f, bias: r, activation: o, preluActivationWeights: s, leakyreluAlpha: i }), C = a.texData.get(N.dataId); w.assert(C.isPacked, () => "batchMatMul result is expected to be packed"), u.shape = v, C.shape = n.outShape, g = aa({ inputs: { x: N }, backend: a }), g.shape = n.outShape, b.push(N) } else { let y = n.outHeight * n.outWidth, x = ce({ inputs: { x: e }, backend: a, attrs: { shape: h ? [n.batchSize, y, n.inChannels] : [n.batchSize, n.inChannels, y] } }), v = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, n.inChannels, n.outChannels] } }), I = Cm({ a: h ? x : v, b: h ? v : x, transposeA: !h, transposeB: f, backend: a, bias: r, activation: o, preluActivationWeights: s, leakyreluAlpha: i }); g = ce({ inputs: { x: I }, backend: a, attrs: { shape: n.outShape } }), b.push(x), b.push(v), b.push(I) } for (let y of b) a.disposeIntermediateTensorInfo(y); return g } function hF({ x: e, filter: t, convInfo: n, backend: a, bias: r = null, preluActivationWeights: s = null, leakyreluAlpha: i = 0, activation: o = null }) { let { filterWidth: l, filterHeight: u, inChannels: p, outWidth: d, outHeight: c, dataFormat: h } = n, m = h === "channelsLast", f = l * u * p, g = c * d, b = [n.batchSize, f, g], y = !0, x = !1, v = []; if (s != null) { let K = Em(s.shape, m); K != null && (s = ce({ inputs: { x: s }, backend: a, attrs: { shape: K } }), v.push(s)) } if (r != null) { let K = Em(r.shape, m); K != null && (r = ce({ inputs: { x: r }, backend: a, attrs: { shape: K } }), v.push(r)) } let I = ce({ inputs: { x: t }, backend: a, attrs: { shape: [1, f, w.sizeFromShape(t.shape) / f] } }); v.push(I); let N = new Nne(b, n), C = [e.shape, [n.padInfo.top, n.padInfo.left], [n.strideHeight, n.strideWidth], [n.dilationHeight, n.dilationWidth], [n.inChannels], [n.filterWidth * n.inChannels], [n.outWidth]], _ = a.runWebGLProgram(N, [e], "float32", C), F = ce({ inputs: { x: _ }, backend: a, attrs: { shape: b } }); v.push(_), v.push(F); let D = r != null, $ = s != null, S = o === "leakyrelu", M = o ? Dc(o, !0) : null, B = new aF(m ? F.shape : I.shape, m ? I.shape : F.shape, m ? [n.batchSize, g, n.outChannels] : [n.batchSize, n.outChannels, g], y, x, D, M, $, S), U = m ? [F, I] : [I, F]; if (r && U.push(r), $ && U.push(s), S) { let K = a.makeTensorInfo([], "float32", w.createScalarValue(i, "float32")); U.push(K), v.push(K) } let H = a.runWebGLProgram(B, U, "float32"), j = ce({ inputs: { x: H }, backend: a, attrs: { shape: n.outShape } }); v.push(H); for (let K of v) a.disposeIntermediateTensorInfo(K); return j } function Tne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dataFormat: l, dilations: u, dimRoundingMode: p } = a, d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, s.shape, i, u, o, p, !1, d), h; if (c.filterHeight === 1 && c.filterWidth === 1 && c.dilationHeight === 1 && c.dilationWidth === 1 && c.strideHeight === 1 && c.strideWidth === 1 && (c.padInfo.type === "SAME" || c.padInfo.type === "VALID")) h = dF({ x: r, filter: s, convInfo: c, backend: n }); else if (c.strideWidth <= 2 && d === "channelsLast" && G().getBool("WEBGL_EXP_CONV")) { let f = new cF(c), g = [[c.padInfo.top, c.padInfo.left], [c.strideHeight, c.strideWidth], [c.dilationHeight, c.dilationWidth], [c.inHeight, c.inWidth]]; h = n.runWebGLProgram(f, [r, s], "float32", g) } else if (G().getBool("WEBGL_CONV_IM2COL")) h = hF({ x: r, filter: s, convInfo: c, backend: n }); else { let f = new pF(c); h = n.runWebGLProgram(f, [r, s], "float32") } let m = ce({ inputs: { x: h }, backend: n, attrs: { shape: c.outShape } }); return n.disposeIntermediateTensorInfo(h), m } var Cne = { kernelName: zi, backendName: "webgl", kernelFunc: Tne }, Ene = class {
        constructor(e) {
            this.variableNames = ["x", "dy"], this.outputShape = e.filterShape; let t = e.strideHeight, n = e.strideWidth, a = e.padInfo.top, r = e.padInfo.left, s = e.dataFormat === "channelsLast"; this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${s ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`: `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }, _ne = class {
        constructor(e) {
            this.variableNames = ["dy", "W"], this.outputShape = e.inShape; let t = e.filterHeight, n = e.filterWidth, a = e.strideHeight, r = e.strideWidth, s = e.dataFormat === "channelsLast", i = t - 1 - e.padInfo.top, o = n - 1 - e.padInfo.left, l = s ? 1 : 2, u = s ? 2 : 3, p = s ? 3 : 1; this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${s}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }, Ane = class {
        constructor(e) {
            this.variableNames = ["x", "dy"], this.outputShape = e.filterShape; let t = e.strideDepth, n = e.strideHeight, a = e.strideWidth, r = e.padInfo.front, s = e.padInfo.top, i = e.padInfo.left; this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${r};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${s};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${a} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }, Fne = class {
        constructor(e) {
            this.variableNames = ["dy", "W"], this.outputShape = e.inShape; let t = e.filterDepth, n = e.filterHeight, a = e.filterWidth, r = e.strideDepth, s = e.strideHeight, i = e.strideWidth, o = t - 1 - e.padInfo.front, l = n - 1 - e.padInfo.top, u = a - 1 - e.padInfo.left; this.userCode = `
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${a}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${a} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }; function $ne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, filterShape: p } = a, d = T.convertConv2DDataFormat(l), c = T.computeConv2DInfo(r.shape, p, i, 1, o, u, !1, d), h = new Ene(c); return n.runWebGLProgram(h, [r, s], "float32") } var Dne = { kernelName: Om, backendName: "webgl", kernelFunc: $ne }, Rne = class {
        constructor(e) {
            this.variableNames = ["dy", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "strides", type: "vec2" }], this.outputShape = e.inShape, this.enableShapeUniforms = xn(this.outputShape.length); let t = e.filterHeight, n = e.filterWidth, a = t - 1 - e.padInfo.top, r = n - 1 - e.padInfo.left; this.userCode = `
      const ivec2 pads = ivec2(${a}, ${r});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            int wCPerm = ${n} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}
    }; function Mne(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { inputShape: i, strides: o, pad: l, dataFormat: u, dimRoundingMode: p } = a, d = T.convertConv2DDataFormat(u), c = T.computeConv2DInfo(i, s.shape, o, 1, l, p, !1, d); if (G().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && d === "channelsLast") { let h = [[c.strideHeight, c.strideWidth]], m = new Rne(c); return n.runWebGLProgram(m, [r, s], "float32", h) } else { let h = new _ne(c); return n.runWebGLProgram(h, [r, s], "float32") } } var One = { kernelName: Wi, backendName: "webgl", kernelFunc: Mne }; function Pne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a, u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), p = new Sne(u); return n.runWebGLProgram(p, [r, s], "float32") } var Lne = { kernelName: Bi, backendName: "webgl", kernelFunc: Pne }; function zne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a, u = T.computeConv3DInfo(r.shape, l, i, 1, o), p = new Ane(u); return n.runWebGLProgram(p, [r, s], "float32") } var Wne = { kernelName: xu, backendName: "webgl", kernelFunc: zne }; function Bne(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a, u = T.computeConv3DInfo(l, s.shape, o, 1, i), p = new Fne(u); return n.runWebGLProgram(p, [r, s], "float32") } var Vne = { kernelName: vu, backendName: "webgl", kernelFunc: Bne }, Une = Cp + `
  return cos(x);
`, Gne = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${tl}
  return result;
`, Hne = Ze({ opSnippet: Une, packedOpSnippet: Gne }), qne = { kernelName: Vi, backendName: "webgl", kernelFunc: Hne }, jne = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, Kne = Ze({ opSnippet: jne }), Xne = { kernelName: Ui, backendName: "webgl", kernelFunc: Kne }, Yne = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = []; let [s, i, o, l] = e, [u] = t, [p, d] = n; this.outputShape = [u, p, d, l]; let c = a === "bilinear" ? 1 : 0, [h, m] = [`${i - 1}.0`, `${o - 1}.0`], [f, g, b] = p > 1 ? [`${(i - 1) / (p - 1)}`, "(y2-y1) * height_ratio", `y1*${h} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${h}`], [y, x, v] = d > 1 ? [`${(o - 1) / (d - 1)}`, "(x2-x1) * width_ratio", `x1*${m} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${m}`]; this.userCode = `
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${s}) {
          return;
        }

        float height_scale = ${g};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${v};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${c} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}
        }, Zne = e => { let { inputs: t, backend: n, attrs: a } = e, { image: r, boxes: s, boxInd: i } = t, { cropSize: o, method: l, extrapolationValue: u } = a, p = new Yne(r.shape, s.shape, o, l, u); return n.runWebGLProgram(p, [r, s, i], "float32") }, Jne = { kernelName: ku, backendName: "webgl", kernelFunc: Zne }, Mc; (function (e) { e.Prod = "*", e.Sum = "+" })(Mc || (Mc = {})); var LS = class {
            constructor(e, t, n, a) {
                this.op = e, this.outputShape = t, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }]; let r = this.outputShape.length, s = this.op === Mc.Prod ? "1.0" : "0.0", i = n ? s : `getX(${zS(r, "coords", this.op)})`, o = this.outputShape[this.outputShape.length - 1], l = "", u = ""; n ? (l = a ? `end != ${o - 1}` : "end != 0", u = a ? "end + 1" : "end - 1") : (l = a ? `end + pow2 < ${o}` : "end >= pow2", u = a ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${ht(r)} coords = getOutputCoords();
        int end = ${WS(r, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${WS(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${zS(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `}
        }; function zS(e, t, n) { if (e === 1) return `${t}`; if (e === 2) return `${t}.x, ${t}.y`; if (e === 3) return `${t}.x, ${t}.y, ${t}.z`; if (e === 4) return `${t}.x, ${t}.y, ${t}.z, ${t}.w`; throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`) } function WS(e, t, n) { if (e === 1) return `${t}`; if (e === 2) return `${t}.y`; if (e === 3) return `${t}.z`; if (e === 4) return `${t}.w`; throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`) } function mF(e, t, n, a, r, s) { let i = t.shape.length, o = T.getAxesPermutation([a], i), l = t; o != null && (l = In({ inputs: { x: t }, backend: n, attrs: { perm: o } })); let u = T.getInnerMostAxes(1, i)[0]; if (u !== i - 1) throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${a}`); let p = l.shape[u], d = aa({ inputs: { x: l }, backend: n }); for (let c = 0; c <= Math.ceil(Math.log2(p)) - 1; c++) { let h = new LS(e, l.shape, !1, s), m = [[c]], f = d; d = n.runWebGLProgram(h, [d], d.dtype, m), n.disposeIntermediateTensorInfo(f) } if (r) { let c = new LS(e, l.shape, r, s), h = d; d = n.runWebGLProgram(c, [d], d.dtype), n.disposeIntermediateTensorInfo(h) } if (o != null) { let c = T.getUndoAxesPermutation(o), h = In({ inputs: { x: d }, backend: n, attrs: { perm: c } }); return n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(l), h } return d } function Qne(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a; return mF(Mc.Prod, r, n, s, i, o) } var eae = { kernelName: wu, backendName: "webgl", kernelFunc: Qne }; function tae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a; return mF(Mc.Sum, r, n, s, i, o) } var nae = { kernelName: Gi, backendName: "webgl", kernelFunc: tae }; function aae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, weights: s } = t, { size: i, binaryOutput: o } = a; if (r.shape.length === 1) { let l = n.readSync(r.dataId), u = n.readSync(s.dataId), p = qA(l, u, s.dtype, s.shape, i); return n.makeTensorInfo([i], s.dtype, p) } else if (r.shape.length === 2) { let l = n.bufferSync(r), u = n.bufferSync(s), p = sQ(l, u, i, o); return n.makeTensorInfo(p.shape, s.dtype, p.values) } throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`) } var rae = { kernelName: Uc, backendName: "webgl", kernelFunc: aae }, sae = class {
            constructor(e, t, n) {
                this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = n, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `} getHeightCoordString() { return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]" } getWidthCoordString() { return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]" } getDepthCoordString() { return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]" } getOutputDepthSize() { return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1] } getInputSamplingString() { return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)" }
        }; function iae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockSize: s, dataFormat: i } = a, o = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], u = i === "NHWC" ? r.shape[2] : r.shape[3], p = i === "NHWC" ? r.shape[3] : r.shape[1], d = l * s, c = u * s, h = p / (s * s), m = i === "NHWC" ? [o, d, c, h] : [o, h, d, c], f = new sae(m, s, i); return n.runWebGLProgram(f, [r], r.dtype) } var oae = { kernelName: Iu, backendName: "webgl", kernelFunc: iae }, fF = class {
            constructor(e, t = !1, n = null, a = !1, r = !1) {
                this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = xn(this.outputShape.length); let s = e.filterHeight, i = e.filterWidth, o = e.outChannels / e.inChannels, l = "", u = ""; n && (a ? l = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`: r ? l = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`: l = `
          float activation(float x) {
            ${n}
          }
        `, u = "result = activation(result);"); let p = t ? "result += getBiasAtOutCoords();" : ""; t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${s}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${u}
        setOutput(result);
      }
    `}
        }, gF = class {
            constructor(e, t = !1, n = null, a = !1, r = !1) {
                this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = xn(this.outputShape.length); let s = e.outChannels / e.inChannels, i = e.padInfo.left, o = e.strideWidth, l = e.dilationWidth, u = e.filterHeight, p = e.filterWidth, d = p, c = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`; for (let g = 0; g < p; g++)c += `
          vec4 xTexelC${g * 2};
          int xTexelC${g * 2}Ready;
          vec4 xTexelC${g * 2 + 1};
          int xTexelC${g * 2 + 1}Ready;
          vec4 xC${g};`; c += `
    for (int r = 0; r < ${u}; r++) {
      `; for (let g = 0; g < p; g++)c += `
          xTexelC${g * 2} = vec4(0.0);
          xTexelC${g * 2}Ready = 0;
          xTexelC${g * 2 + 1} = vec4(0.0);
          xTexelC${g * 2 + 1}Ready = 0;
          xC${g} = vec4(0.0);`; c += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `; for (let g = 0; g < (d + 1) / 2; g++) {
                    let b = g * 2; if (c += `
          xC = xCCorner + ${b * l};
          `, o === 1) {
                        if (b < p && (i % 2 === 1 ? (c += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, l === 1 && b > 0 ? c += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                `: c += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : c += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < p)) {
                            let y = i % 2 === 0 ? w.nearestLargerEven(l) : l; l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (c += `
                  xCOffset = xC + imod(pads[1], 2) + ${y};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, l > 1 ? c += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    `: c += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : y === 1 ? c += `
                    xC${b + 1} = xTexelC${b};
                    `: c += `
                    xCOffset = xC + ${y};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `}
                    } else b < p && (i % 2 === 1 ? (c += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < p && (c += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (c += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < p && (c += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `))); b < p && (c += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < p && (c += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `))
                } c += `
    }
  `, c += `
      }
    `; let h = "", m = ""; n && (a ? h = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`: r ? h = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`: h = `vec4 activation(vec4 x) {
          ${n}
        }`, m = "result = activation(result);"); let f = t ? "result += getBiasAtOutCoords();" : ""; t && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${s};
        int q = d2 - d1 * ${s};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${c}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${f}
        ${m}
        setOutput(result);
      }
    `}
        }; function lae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l, dimRoundingMode: u } = a, p = l; p == null && (p = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(i, p), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`); let d = T.computeConv2DInfo(r.shape, s.shape, i, p, o, u, !0), c; G().getBool("WEBGL_PACK_DEPTHWISECONV") && d.strideWidth <= 2 && d.outChannels / d.inChannels === 1 ? c = new gF(d) : c = new fF(d); let h = [[d.padInfo.top, d.padInfo.left], [d.strideHeight, d.strideWidth], [d.dilationHeight, d.dilationWidth], [d.inHeight, d.inWidth]]; return n.runWebGLProgram(c, [r, s], "float32", h) } var uae = { kernelName: Hi, backendName: "webgl", kernelFunc: lae }, pae = class {
            constructor(e) {
                this.variableNames = ["x", "dy"], this.outputShape = e.filterShape; let t = e.strideHeight, n = e.strideWidth, a = e.padInfo.top, r = e.padInfo.left, s = e.outChannels / e.inChannels; this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${s} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${a};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${r};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}
        }, cae = class {
            constructor(e) {
                this.variableNames = ["dy", "W"], this.outputShape = e.inShape; let t = e.filterHeight, n = e.filterWidth, a = e.strideHeight, r = e.strideWidth, s = t - 1 - e.padInfo.top, i = n - 1 - e.padInfo.left, o = e.outChannels / e.inChannels; this.userCode = `
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${a}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}
        }; function dae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, filterShape: p } = a, d = T.computeConv2DInfo(r.shape, p, i, o, l, u, !0), c = new pae(d); return n.runWebGLProgram(c, [r, s], "float32") } var hae = { kernelName: Pm, backendName: "webgl", kernelFunc: dae }; function mae(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { strides: i, dilations: o, pad: l, dimRoundingMode: u, inputShape: p } = a, d = T.computeConv2DInfo(p, s.shape, i, o, l, u, !0), c = new cae(d); return n.runWebGLProgram(c, [r, s], "float32") } var fae = { kernelName: Lm, backendName: "webgl", kernelFunc: mae }, gae = class {
            constructor(e) {
                this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}
        }; function bae(e) { let { inputs: t, backend: n } = e, { x: a } = t, r = [...a.shape, ...a.shape], s = w.sizeFromShape(a.shape), i = ce({ inputs: { x: a }, backend: n, attrs: { shape: [s] } }), o = new gae(s), l = n.runWebGLProgram(o, [i], i.dtype), u = ce({ inputs: { x: l }, backend: n, attrs: { shape: r } }); return n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(l), u } var yae = { kernelName: Gc, backendName: "webgl", kernelFunc: bae }, xae = class {
            constructor(e) {
                this.variableNames = ["x", "W"], this.outputShape = e.outShape; let { inHeight: t, inWidth: n, padInfo: a, strideHeight: r, strideWidth: s, filterHeight: i, filterWidth: o, dilationHeight: l, dilationWidth: u } = e, { top: p, left: d } = a; this.userCode = `
      const ivec2 strides = ivec2(${r}, ${s});
      const ivec2 pads = ivec2(${p}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}
        }; function vae(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a, u = T.computeDilation2DInfo(r.shape, s.shape, i, o, "NHWC", l), p, d = new xae(u); p = n.runWebGLProgram(d, [r, s], "float32"); let c = ce({ inputs: { x: p }, backend: n, attrs: { shape: u.outShape } }); return n.disposeIntermediateTensorInfo(p), c } var wae = { kernelName: qi, backendName: "webgl", kernelFunc: vae }; function kae(e) { let { inputs: t, backend: n, attrs: a } = e, { equation: r } = a, s = t, { allDims: i, summedDims: o, idDims: l } = T.decodeEinsumEquation(r, s.length); T.checkEinsumDimSizes(i.length, l, s); let { path: u, steps: p } = T.getEinsumComputePath(o, l), d = p.length, c = null, h = i.length, m = []; for (let f = 0; f < d; ++f) { for (let g of p[f]) { let { permutationIndices: b, expandDims: y } = T.getEinsumPermutation(h, l[g]), x; T.isIdentityPermutation(b) ? x = s[g] : (x = In({ inputs: { x: s[g] }, backend: n, attrs: { perm: b } }), m.push(x)); let v = x.shape.slice(); for (let I = 0; I < y.length; ++I)v.splice(y[I], 0, 1); w.arraysEqual(x.shape, v) || (x = ce({ inputs: { x }, backend: n, attrs: { shape: v } }), m.push(x)), c === null ? c = x : (c = yk({ inputs: { a: x, b: c }, backend: n }), m.push(c)) } f < d - 1 && (u[f] >= 0 && (c = tg({ inputs: { x: c }, backend: n, attrs: { axis: u[f] - (i.length - h), keepDims: !1 } }), m.push(c)), h--) } for (let f of m) f !== c && n.disposeIntermediateTensorInfo(f); return c } var Iae = { kernelName: Wm, backendName: "webgl", kernelFunc: kae }, Sae = "return (x >= 0.0) ? x : (exp(x) - 1.0);", Nae = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, Tae = Ze({ opSnippet: Sae, packedOpSnippet: Nae }), Cae = { kernelName: Ki, backendName: "webgl", kernelFunc: Tae }, Eae = "return (b >= 0.0) ? a : a * (b + 1.0);", _ae = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, Aae = e => { let { inputs: t, backend: n } = e, { dy: a, y: r } = t, s = G().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Tp(_ae, a.shape, r.shape) : new Si(Eae, a.shape, r.shape); return n.runWebGLProgram(s, [a, r], a.dtype) }, Fae = { kernelName: Su, backendName: "webgl", kernelFunc: Aae }, $ae = `
  return vec4(equal(a, b));
`, Dae = "return float(a == b);", Rae = fn({ opSnippet: Dae, packedOpSnippet: $ae, dtype: "bool", cpuKernelImpl: pQ }), Mae = { kernelName: Nu, backendName: "webgl", kernelFunc: Rae }, Oae = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${T.ERF_P};
  float a1 = ${T.ERF_A1};
  float a2 = ${T.ERF_A2};
  float a3 = ${T.ERF_A3};
  float a4 = ${T.ERF_A4};
  float a5 = ${T.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, Pae = Ze({ opSnippet: Oae }), Lae = { kernelName: Xi, backendName: "webgl", kernelFunc: Pae }, zae = Cp + `
  return exp(x);
`, Wae = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, bF = Ze({ opSnippet: zae, packedOpSnippet: Wae, cpuKernelImpl: cQ, dtype: "float32" }), Bae = { kernelName: Yi, backendName: "webgl", kernelFunc: bF }; function Iv(e) { let { inputs: t, attrs: n, backend: a } = e, { dim: r } = n, { input: s } = t, i = s.shape.length, o = s.shape.slice(), l = r; return r < 0 && (w.assert(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), o.splice(l, 0, 1), ce({ inputs: { x: s }, backend: a, attrs: { shape: o } }) } var Vae = { kernelName: Tu, backendName: "webgl", kernelFunc: Iv }, BS = "return exp(x) - 1.0;", Uae = Ze({ opSnippet: BS, packedOpSnippet: BS, cpuKernelImpl: dQ }), Gae = { kernelName: Zi, backendName: "webgl", kernelFunc: Uae }, VS = class {
        constructor(e, t, n) {
            this.variableNames = ["real", "imag"]; let a = t[1]; this.outputShape = t; let r = n ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, s = n ? `${a}.0` : "1.0", i; if (e === "real") i = "return real * expR - imag * expI;"; else if (e === "imag") i = "return real * expI + imag * expR;"; else throw new Error(`FFT component must be either "real" or "imag", got ${e}.`); this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${s};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}
    }; function yF(e, t, n) { let a = n.texData.get(e.dataId), r = w.sizeFromShape(e.shape), s = e.shape[e.shape.length - 1], i = r / s, o = ce({ inputs: { x: e }, backend: n, attrs: { shape: [i, s] } }), l = o.shape, u = new VS("real", l, t), p = new VS("imag", l, t), d = [{ dataId: a.complexTensorInfos.real.dataId, dtype: a.complexTensorInfos.real.dtype, shape: l }, { dataId: a.complexTensorInfos.imag.dataId, dtype: a.complexTensorInfos.imag.dtype, shape: l }], c = n.runWebGLProgram(u, d, "float32"), h = n.runWebGLProgram(p, d, "float32"), m = Ms({ inputs: { real: c, imag: h }, backend: n }); n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h); let f = ce({ inputs: { x: m }, backend: n, attrs: { shape: e.shape } }); return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(m), f } function Hae(e) { let { inputs: t, backend: n } = e, { input: a } = t; return yF(a, !1, n) } var qae = { kernelName: Bm, backendName: "webgl", kernelFunc: Hae }, jae = class {
        constructor(e, t) {
            this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}
    }; function Ld(e) { let { backend: t, attrs: n } = e, { shape: a, value: r } = n, { dtype: s } = n; if (s = s || w.inferDtype(r), s === "string") { let i = w.getArrayFromDType(s, w.sizeFromShape(a)); return i.fill(r), t.makeTensorInfo(a, s, i) } else { let i = new jae(a, r), o = [[r]]; return t.runWebGLProgram(i, [], s, o) } } var Kae = { kernelName: Hc, backendName: "webgl", kernelFunc: Ld }, Xae = class {
        constructor(e) {
            this.variableNames = ["Image"], this.outputShape = []; let t = e[2]; this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}
    }, Yae = { kernelName: Cu, backendName: "webgl", kernelFunc: ({ inputs: e, backend: t }) => { let { image: n } = e, a = t, r = new Xae(n.shape); return a.runWebGLProgram(r, [n], n.dtype) } }, US = "return floor(x);", Zae = Ze({ opSnippet: US, packedOpSnippet: US, cpuKernelImpl: hQ }), Jae = { kernelName: Ji, backendName: "webgl", kernelFunc: Zae }, Qae = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, ere = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, tre = fn({ opSnippet: Qae, packedOpSnippet: ere, dtype: "int32" }), nre = { kernelName: Qi, backendName: "webgl", kernelFunc: tre }, are = class {
            constructor(e) {
                this.variableNames = ["A"]; let t = Cn(), [n, a] = e; this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}
        }, rre = class {
            constructor(e) {
                this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0; let t = Cn(), [n, a] = e; this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${a}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}
        }, sre = { kernelName: sm, backendName: "webgl", kernelFunc: ire }, Ol, Tx = G().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"); function ire(e) { let { inputs: t, backend: n, attrs: a } = e, { pixels: r } = t, { numChannels: s } = a, i = typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement, o = typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement, [l, u] = i ? [r.videoWidth, r.videoHeight] : [r.width, r.height], p = [u, l], d = [u, l, s]; if (o || i) { let f = G().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU"); (Ol == null || f !== Tx) && (Tx = f, Ol = document.createElement("canvas").getContext("2d", { willReadFrequently: Tx })), Ol.canvas.width = l, Ol.canvas.height = u, Ol.drawImage(r, 0, 0, l, u), r = Ol.canvas } let c = n.makeTensorInfo(p, "int32"); n.texData.get(c.dataId).usage = da.PIXELS, n.gpgpu.uploadPixelDataToTexture(n.getTexture(c.dataId), r); let h = G().getBool("WEBGL_PACK") ? new rre(d) : new are(d), m = n.runWebGLProgram(h, [c], "int32"); return n.disposeData(c.dataId), m } function ore(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dataFormat: p, dilations: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = a, f = T.convertConv2DDataFormat(p), g = T.computeConv2DInfo(r.shape, s.shape, l, d, u, c, !1, f), b, y = [], x = i != null, v = o != null, I = h === "leakyrelu", N = () => { let _ = [r, s], F = (D, $) => { if ($ === "NCHW" && D.shape.length === 1 && D.shape[0] !== 1) { let S = ce({ inputs: { x: D }, backend: n, attrs: { shape: [D.shape[0], 1, 1] } }); return y.push(S), S } return D }; if (x && _.push(F(i, p)), v && _.push(F(o, p)), I) { let D = n.makeTensorInfo([], "float32", w.createScalarValue(m, "float32")); _.push(D), y.push(D) } return _ }; if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID")) b = dF({ x: r, filter: s, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: m }); else if (g.strideWidth <= 2 && f === "channelsLast" && G().getBool("WEBGL_EXP_CONV")) { let _ = h ? Dc(h, !0) : null, F = new cF(g, x, _, v, I), D = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], $ = N(); b = n.runWebGLProgram(F, $, "float32", D) } else if (G().getBool("WEBGL_CONV_IM2COL")) b = hF({ x: r, filter: s, convInfo: g, backend: n, bias: i, activation: h, preluActivationWeights: o, leakyreluAlpha: m }); else { let _ = h ? Dc(h, !1) : null, F = new pF(g, x, _, v, I), D = N(); b = n.runWebGLProgram(F, D, "float32") } let C = ce({ inputs: { x: b }, backend: n, attrs: { shape: g.outShape } }); return y.push(b), y.forEach(_ => n.disposeIntermediateTensorInfo(_)), C } var lre = { kernelName: li, backendName: "webgl", kernelFunc: ore }; function ure(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dimRoundingMode: d, activation: c, leakyreluAlpha: h } = a, m = [], f = p; f == null && (f = [1, 1]), w.assert(T.eitherStridesOrDilationsAreOne(l, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${f}'`); let g = T.computeConv2DInfo(r.shape, s.shape, l, f, u, d, !0), b = G().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, y = c ? Dc(c, b) : null, x = [r, s], v = i != null, I = o != null, N = c === "leakyrelu"; if (v && x.push(i), I && x.push(o), N) { let D = n.makeTensorInfo([], "float32", w.createScalarValue(h, "float32")); x.push(D), m.push(D) } let C; b ? C = new gF(g, v, y, I, N) : C = new fF(g, v, y, I, N); let _ = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], F = n.runWebGLProgram(C, x, "float32", _); return m.forEach(D => n.disposeIntermediateTensorInfo(D)), F } var pre = { kernelName: ui, backendName: "webgl", kernelFunc: ure }, cre = class {
            constructor(e, t, n, a) {
                this.sliceDim = e, this.strides = t, this.paramsShape = a, this.variableNames = ["x", "indices"], this.outputShape = n; let r = ht(n.length), s = `
    int index;`; for (let i = 0; i < this.sliceDim; i++)s += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`; this.userCode = `
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${s}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}
        }; function dre(e) { let { inputs: t, backend: n } = e, { params: a, indices: r } = t, s = r.shape, i = s[s.length - 1], o = w.sizeFromShape(a.shape), [l, u, p, d] = T.prepareAndValidate(a, r), c = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u, i] } }), h = ce({ inputs: { x: a }, backend: n, attrs: { shape: [w.sizeFromShape(a.shape) / p, p] } }); if (n.shouldExecuteOnCPU([a, r]) || a.dtype === "string") { let b = n.readSync(r.dataId), y = n.bufferSync(a), x = mQ(b, y, a.dtype, u, i, p, d, a.shape, o); return n.makeTensorInfo(l, a.dtype, x.values) } let m = new cre(i, d, [u, p], a.shape), f = n.runWebGLProgram(m, [h, c], h.dtype), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: l } }); return n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(f), g } var hre = { kernelName: _u, backendName: "webgl", kernelFunc: dre }, mre = class {
            constructor(e, t) {
                this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length; let n = ht(this.rank), a = fre(e, 2); this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${a}));
      }
    `}
        }; function fre(e, t) { let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], a = []; for (let r = 0; r < e.length; r++)r === 2 ? a.push("index") : a.push(`${n[r]}`); return a.join() } function xF(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, indices: s } = t, { axis: i, batchDims: o } = a, l = w.parseAxisParam(i, r.shape)[0]; if (G().get("DEBUG")) { let y = n.readSync(s.dataId), x = r.shape[l]; for (let v = 0; v < y.length; ++v) { let I = y[v]; w.assert(I <= x - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${x - 1}]`) } } let u = T.segment_util.collectGatherOpShapeInfo(r, s, l, o), p = w.sizeFromShape(s.shape), d = [], c = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), h = ce({ inputs: { x: s }, backend: n, attrs: { shape: [u.batchSize, p / u.batchSize] } }); d.push(c), d.push(h); let m = [u.batchSize, u.outerSize, p / u.batchSize, u.sliceSize]; if (n.shouldExecuteOnCPU([r, s]) || r.dtype === "string") { let y = n.bufferSync(h), x = n.bufferSync(c), v = fQ(x, y, m); return d.forEach(I => n.disposeIntermediateTensorInfo(I)), n.makeTensorInfo(u.outputShape, v.dtype, v.values) } let f = new mre(c.shape, m), g = n.runWebGLProgram(f, [c, h], c.dtype); d.push(g); let b = ce({ inputs: { x: g }, backend: n, attrs: { shape: u.outputShape } }); return d.forEach(y => n.disposeIntermediateTensorInfo(y)), b } var gre = { kernelName: Eu, backendName: "webgl", kernelFunc: xF }, bre = "return float(a > b);", yre = `
  return vec4(greaterThan(a, b));
`, xre = fn({ opSnippet: bre, packedOpSnippet: yre, cpuKernelImpl: gQ, dtype: "bool" }), vre = { kernelName: Au, backendName: "webgl", kernelFunc: xre }, wre = "return float(a >= b);", kre = `
  return vec4(greaterThanEqual(a, b));
`, Ire = fn({ opSnippet: wre, packedOpSnippet: kre, dtype: "bool", cpuKernelImpl: bQ }), Sre = { kernelName: to, backendName: "webgl", kernelFunc: Ire }; function Nre(e) { let { inputs: t, backend: n } = e, { input: a } = t; return yF(a, !0, n) } var Tre = { kernelName: Vm, backendName: "webgl", kernelFunc: Nre }, Cre = "return float(!isnan(x) && !isinf(x));", Ere = Ze({ opSnippet: Cre, dtype: "bool" }), _re = { kernelName: ao, backendName: "webgl", kernelFunc: Ere }, Are = "return float(isinf(x));", Fre = Ze({ opSnippet: Are, dtype: "bool" }), $re = { kernelName: ro, backendName: "webgl", kernelFunc: Fre }, Dre = "return float(isnan(x));", Rre = Ze({ opSnippet: Dre, dtype: "bool" }), Mre = { kernelName: so, backendName: "webgl", kernelFunc: Rre }, Ore = "return float(a < b);", Pre = `
  return vec4(lessThan(a, b));
`, Lre = fn({ opSnippet: Ore, packedOpSnippet: Pre, cpuKernelImpl: yQ, dtype: "bool" }), zre = { kernelName: Fu, backendName: "webgl", kernelFunc: Lre }, Wre = "return float(a <= b);", Bre = `
  return vec4(lessThanEqual(a, b));
`, Vre = fn({ opSnippet: Wre, packedOpSnippet: Bre, cpuKernelImpl: xQ, dtype: "bool" }), Ure = { kernelName: $u, backendName: "webgl", kernelFunc: Vre }; function Gre(e) { let { backend: t, attrs: n } = e, { start: a, stop: r, num: s } = n, i = vQ(a, r, s); return t.makeTensorInfo([i.length], "float32", i) } var Hre = { kernelName: Du, backendName: "webgl", kernelFunc: Gre }, qre = Cp + `
  return x < 0.0 ? 0./0. : log(x);
`, jre = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, Kre = Ze({ opSnippet: qre, packedOpSnippet: jre, cpuKernelImpl: wQ }), Xre = { kernelName: oo, backendName: "webgl", kernelFunc: Kre }, Yre = Cp + `
  return log(1.0 + x);
`, Zre = Ze({ opSnippet: Yre }), Jre = { kernelName: lo, backendName: "webgl", kernelFunc: Zre }, Qre = "return float(a >= 1.0 && b >= 1.0);", ese = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, tse = fn({ opSnippet: Qre, packedOpSnippet: ese, dtype: "bool" }), nse = { kernelName: Ru, backendName: "webgl", kernelFunc: tse }, ase = "return float(!(x >= 1.0));", rse = Ze({ opSnippet: ase }), sse = { kernelName: Mu, backendName: "webgl", kernelFunc: rse }, ise = "return float(a >= 1.0 || b >= 1.0);", ose = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, lse = fn({ opSnippet: ise, packedOpSnippet: ose, dtype: "bool" }), use = { kernelName: Ou, backendName: "webgl", kernelFunc: lse }, pse = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["x"], this.outputShape = []; let s = t, i = e[3] - 1; this.outputShape = e; let o, l = `float(${n}) + float(${a}) * sum`; r === .5 ? o = `inversesqrt(${l})` : r === 1 ? o = `1.0/(${l})` : o = `exp(log(${l}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${s}; j <= ${s}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${o};
        setOutput(val);
      }
    `}
        }, cse = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0; let s = t, i = e[3] - 1; this.outputShape = e; let o, l = `float(${n}) + float(${a}) * sum`; r === .5 ? o = `inversesqrt(${l})` : r === 1 ? o = `1.0/(${l})` : o = `exp(log(${l}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${s};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${s}; j <= ${s}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${o};
        setOutput(result);
      }
    `}
        }, dse = e => { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a, u = G().getBool("WEBGL_PACK_NORMALIZATION") ? new cse(r.shape, s, i, o, l) : new pse(r.shape, s, i, o, l); return n.runWebGLProgram(u, [r], r.dtype) }, hse = { kernelName: uo, backendName: "webgl", kernelFunc: dse }, mse = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = n, this.alpha = a, this.beta = r, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${a}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${a})
                * float(${r})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}
        }, fse = e => { let { inputs: t, backend: n, attrs: a } = e, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a, d = new mse(r.shape, o, l, u, p); return n.runWebGLProgram(d, [r, s, i], r.dtype) }, gse = { kernelName: Pu, backendName: "webgl", kernelFunc: fse }; function bse(e, t, n, a) { let r = w.sizeFromShape(t), s = w.sizeFromShape(e.shape) / r, i = ce({ inputs: { x: e }, attrs: { shape: [s, r] }, backend: a }), o = nl(i, e.dtype, "max", a), l = ce({ inputs: { x: o }, attrs: { shape: n }, backend: a }); return a.disposeIntermediateTensorInfo(i), a.disposeIntermediateTensorInfo(o), l } function vF(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { reductionIndices: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = p != null, c = n.shouldExecuteOnCPU([r]), h = r; if (d) { if (c) { let y = n.texData.get(h.dataId).values, x = new Array(o); for (let N = 0; N < x.length; N++)x[N] = r.shape[p[N]]; let v = fk(y, r.shape, r.dtype, p, x); h = n.makeTensorInfo(x, r.dtype); let I = n.texData.get(h.dataId); I.values = v } else h = eg(r, p, n); u = T.getInnerMostAxes(u.length, o) } T.assertAxesAreInnerMostDims("max", u, o); let [m, f] = T.computeOutAndReduceShapes(h.shape, u), g = m; i && (g = T.expandShapeToKeepDim(m, l)); let b; if (c) { let y = n.texData.get(h.dataId).values, x = kQ(y, w.sizeFromShape(f), g, r.dtype); b = n.makeTensorInfo(g, r.dtype); let v = n.texData.get(b.dataId); v.values = x } else b = bse(h, f, g, n); return d && n.disposeIntermediateTensorInfo(h), b } var yse = { kernelName: po, backendName: "webgl", kernelFunc: vF }, xse = bk + `
  return max(a, b);
`, vse = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+ tl + `
  return result;
`, wse = fn({ opSnippet: xse, packedOpSnippet: vse, cpuKernelImpl: IQ }), kse = { kernelName: co, backendName: "webgl", kernelFunc: wse }; function Ise(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t; wp(r, "maxPool"); let { filterSize: s, strides: i, pad: o, dimRoundingMode: l } = a, u = 1; w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`); let p = T.computePool2DInfo(r.shape, s, i, u, o, l); if (p.filterWidth === 1 && p.filterHeight === 1 && w.arraysEqual(p.inShape, p.outShape)) return aa({ inputs: { x: r }, backend: n }); let d = new Rc(p, "max", !1); return n.runWebGLProgram(d, [r], r.dtype) } var Sse = { kernelName: ho, backendName: "webgl", kernelFunc: Ise }; function Nse(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dataFormat: l, dimRoundingMode: u } = a, p = [1, 1, 1], d = T.computePool3DInfo(r.shape, s, i, p, o, u, l), c = new xk(d, "max", !1); return n.runWebGLProgram(c, [r], r.dtype) } var Tse = { kernelName: Lu, backendName: "webgl", kernelFunc: Nse }, Cse = class {
        constructor(e) {
            this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape; let t = e.strideHeight, n = e.strideWidth, a = e.dilationHeight, r = e.effectiveFilterHeight, s = e.effectiveFilterWidth, i = r - 1 - e.padInfo.top, o = s - 1 - e.padInfo.left, l = r * s - 1; this.userCode = `
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${s} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}
    }, Ese = class {
        constructor(e) {
            this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape; let t = e.strideDepth, n = e.strideHeight, a = e.strideWidth, r = e.dilationDepth, s = e.dilationHeight, i = e.dilationWidth, o = e.effectiveFilterDepth, l = e.effectiveFilterHeight, u = e.effectiveFilterWidth, p = o - 1 - e.padInfo.front, d = l - 1 - e.padInfo.top, c = u - 1 - e.padInfo.left, h = o * l * u - 1; this.userCode = `
      const ivec3 pads = ivec3(${p}, ${d}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${s}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}
    }; function _se(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, i = s, { filterSize: o, strides: l, pad: u, dimRoundingMode: p } = a, d = [1, 1, 1], c = T.computePool3DInfo(i.shape, o, l, d, u, p), h = new xk(c, "max", !0), m = n.runWebGLProgram(h, [i], i.dtype), f = new Ese(c), g = n.runWebGLProgram(f, [r, m], i.dtype); return n.disposeIntermediateTensorInfo(m), g } var Ase = { kernelName: jc, backendName: "webgl", kernelFunc: _se }; function Fse(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s, output: i } = t, o = s; wp([s, i], "maxPoolGrad"); let { filterSize: l, strides: u, pad: p, dimRoundingMode: d } = a, c = T.computePool2DInfo(o.shape, l, u, 1, p, d), h = !0, m = new Rc(c, "max", h), f = n.runWebGLProgram(m, [o], o.dtype), g = new Cse(c), b = n.runWebGLProgram(g, [r, f], o.dtype); return n.disposeIntermediateTensorInfo(f), b } var $se = { kernelName: qc, backendName: "webgl", kernelFunc: Fse }; function Dse(e, t, n, a) { let r = new Rc(n, "max", !1), s = a.runWebGLProgram(r, [e], "float32"); r = new Rc(n, "max", !0, !0, t); let i = a.runWebGLProgram(r, [e], "float32"); return [s, i] } var Rse = { kernelName: Kc, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { x: a } = e, { filterSize: r, strides: s, pad: i, includeBatchInIndex: o } = t, l = n; w.assert(a.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.shape.length}.`); let u = [1, 1]; w.assert(T.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`); let p = T.computePool2DInfo(a.shape, r, s, u, i), [d, c] = Dse(a, o, p, l); return [d, c] } }; function Mse(e, t, n, a) { let r = w.sizeFromShape(t), s = w.sizeFromShape(e.shape) / r, i = ce({ inputs: { x: e }, attrs: { shape: [s, r] }, backend: a }), o = nl(i, "float32", "mean", a), l = ce({ inputs: { x: o }, attrs: { shape: n }, backend: a }); return a.disposeIntermediateTensorInfo(i), a.disposeIntermediateTensorInfo(o), l } var Ose = { kernelName: mo, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { x: a } = e, { keepDims: r, axis: s } = t, i = n, o = a.shape.length, l = w.parseAxisParam(s, a.shape), u = l, p = T.getAxesPermutation(u, o), d = p != null, c = i.shouldExecuteOnCPU([a]), h = [], m = a; if (d) { if (c) { let x = i.texData.get(m.dataId).values, v = new Array(o); for (let C = 0; C < v.length; C++)v[C] = a.shape[p[C]]; let I = fk(x, a.shape, a.dtype, p, v); m = i.makeTensorInfo(v, a.dtype); let N = i.texData.get(m.dataId); N.values = I } else m = eg(a, p, i); h.push(m), u = T.getInnerMostAxes(u.length, o) } T.assertAxesAreInnerMostDims("sum", u, o); let [f, g] = T.computeOutAndReduceShapes(m.shape, u), b = f; r && (b = T.expandShapeToKeepDim(f, l)); let y = Mse(m, g, b, i); for (let x of h) i.disposeIntermediateTensorInfo(x); return y } }; function Pse(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = w.parseAxisParam(s, r.shape), u = l, p = T.getAxesPermutation(u, o), d = r; p != null && (d = In({ inputs: { x: r }, backend: n, attrs: { perm: p } }), u = T.getInnerMostAxes(u.length, r.shape.length)), T.assertAxesAreInnerMostDims("min", u, o); let [c, h] = T.computeOutAndReduceShapes(d.shape, u), m = w.sizeFromShape(h), f = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, m] } }), g = nl(f, f.dtype, "min", n), b; if (i) { let y = T.expandShapeToKeepDim(c, l); b = ce({ inputs: { x: g }, backend: n, attrs: { shape: y } }) } else b = ce({ inputs: { x: g }, backend: n, attrs: { shape: c } }); return n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(g), p != null && n.disposeIntermediateTensorInfo(d), b } var Lse = { kernelName: fo, backendName: "webgl", kernelFunc: Pse }, zse = bk + `
  return min(a, b);
`, Wse = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+ tl + `
  return result;
`, Bse = fn({ opSnippet: zse, packedOpSnippet: Wse, cpuKernelImpl: SQ }), Vse = { kernelName: go, backendName: "webgl", kernelFunc: Bse }, Use = class {
            constructor(e, t, n) {
                this.variableNames = ["x"], this.outputShape = t.map((u, p) => u[0] + e[p] + u[1]); let a = e.length, r = ht(a), s = t.map(u => u[0]).join(","), i = t.map((u, p) => u[0] + e[p]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, a), l = n === "reflect" ? 0 : 1; if (a === 1) {
                    this.userCode = `
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `; return
                } this.userCode = `
      ${r} start = ${r}(${s});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${a}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${o}));
      }
    `}
        }, Gse = class {
            constructor(e, t, n) {
                this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t.map((h, m) => h[0] + e[m] + h[1]); let a = e.length, r = ht(a), s = t.map(h => h[0]).join(","), i = t.map((h, m) => h[0] + e[m]).join(","), o = kn("rc", a), l = kn("source", a), u = `${o[a - 1]} < ${this.outputShape[a - 1]}`, p = a === 1 ? "source" : `vec2(${l.slice(-2).join()})`, d = n === "reflect" ? 0 : 1, c = ""; if (a === 1) {
                    let h = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `; c = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${l.join()}), ${p});
        ${o[a - 1]} += 1;
        if(${u}) {
          ${h}
          result[1] = getChannel(getX(${l.join()}), ${p});
        }
      `} else {
                    let h = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `; c = `
        ${r} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${l.join()}), ${p});
        ${o[a - 1]} += 1;
        if(${u}) {
          ${h}
          result[1] = getChannel(getX(${l.join()}), ${p});
        }
        rc = outputLoc;
        ${o[a - 2]} += 1;
        if(${o[a - 2]} < ${this.outputShape[a - 2]}) {
          ${h}
          result[2] = getChannel(getX(${l.join()}), ${p});
          ${o[a - 1]} += 1;
          if(${u}) {
            ${h}
            result[3] = getChannel(getX(${l.join()}), ${p});
          }
        }
      `} this.userCode = `
      const ${r} start = ${r}(${s});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `}
        }, Hse = ({ inputs: e, backend: t, attrs: n }) => { let { x: a } = e, { paddings: r, mode: s } = n, i = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Gse(a.shape, r, s) : new Use(a.shape, r, s); return t.runWebGLProgram(i, [a], a.dtype) }, qse = { kernelName: bo, backendName: "webgl", kernelFunc: Hse }, jse = `if (b == 0.0) return NAN;
  return mod(a, b);`, Kse = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+ tl + `
  return result;
`, Xse = fn({ opSnippet: jse, packedOpSnippet: Kse }), Yse = { kernelName: yo, backendName: "webgl", kernelFunc: Xse }, Zse = class {
            constructor(e, t, n) {
                this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, n], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `}
        }, Jse = `
if (a == b) {
  return 1.0;
};
return a / b;`, Qse = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, wF = fn({ opSnippet: Jse, packedOpSnippet: Qse, checkOutOfBounds: !0 }), eie = { kernelName: ji, backendName: "webgl", kernelFunc: wF }, GS = "return a - b;", kF = fn({ opSnippet: GS, packedOpSnippet: GS, supportsComplex: !0, cpuKernelImpl: HQ }), tie = { kernelName: Uo, backendName: "webgl", kernelFunc: kF }; function IF(e) { let { inputs: t, backend: n, attrs: a } = e, { logits: r } = t, { dim: s } = a, i = w.parseAxisParam([s], r.shape), o = vF({ inputs: { x: r }, backend: n, attrs: { reductionIndices: i, keepDims: !1 } }), l = T.expandShapeToKeepDim(o.shape, i), u = ce({ inputs: { x: o }, backend: n, attrs: { shape: l } }), p = kF({ inputs: { a: r, b: u }, backend: n }), d = bF({ inputs: { x: p }, backend: n }), c = tg({ inputs: { x: d }, backend: n, attrs: { axis: i, keepDims: !1 } }), h = ce({ inputs: { x: c }, backend: n, attrs: { shape: l } }), m = wF({ inputs: { a: d, b: h }, backend: n }); return n.disposeIntermediateTensorInfo(o), n.disposeIntermediateTensorInfo(u), n.disposeIntermediateTensorInfo(p), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(c), n.disposeIntermediateTensorInfo(h), m } var nie = { kernelName: Bo, backendName: "webgl", kernelFunc: IF }; function aie(e) { let { inputs: t, backend: n, attrs: a } = e, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a, l = o ? r : IF({ inputs: { logits: r }, backend: n, attrs: { dim: r.shape.length - 1 } }), u = l.shape[0], p = l.shape[1], d = new Zse(u, p, s), c = [[i]], h = n.runWebGLProgram(d, [l], "int32", c); return o || n.disposeIntermediateTensorInfo(l), h } var rie = { kernelName: zu, backendName: "webgl", kernelFunc: aie }, sie = Ma + `
  return -x;
`, iie = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`; function oie(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (n.shouldExecuteOnCPU([a])) { let s = n.texData.get(a.dataId), [i, o] = TQ(s.values, a.shape, a.dtype); return n.makeTensorInfo(o, a.dtype, i) } let r; return G().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new ss(a.shape, iie) : r = new ir(a.shape, sie), n.runWebGLProgram(r, [a], a.dtype) } var lie = { kernelName: Wu, backendName: "webgl", kernelFunc: oie }, uie = fr.nonMaxSuppressionV3Impl; function pie(e) { T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"); let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l } = a, u = n.readSync(r.dataId), p = n.readSync(s.dataId), { selectedIndices: d } = uie(u, p, i, o, l); return n.makeTensorInfo([d.length], "int32", new Int32Array(d)) } var cie = { kernelName: Vu, backendName: "webgl", kernelFunc: pie }, die = fr.nonMaxSuppressionV4Impl; function hie(e) { T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"); let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, padToMaxOutputSize: u } = a, p = n.readSync(r.dataId), d = n.readSync(s.dataId), { selectedIndices: c, validOutputs: h } = die(p, d, i, o, l, u); return [n.makeTensorInfo([c.length], "int32", new Int32Array(c)), n.makeTensorInfo([], "int32", new Int32Array([h]))] } var mie = { kernelName: Uu, backendName: "webgl", kernelFunc: hie }, fie = fr.nonMaxSuppressionV5Impl; function gie(e) { T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"); let { inputs: t, backend: n, attrs: a } = e, { boxes: r, scores: s } = t, { maxOutputSize: i, iouThreshold: o, scoreThreshold: l, softNmsSigma: u } = a, p = n.readSync(r.dataId), d = n.readSync(s.dataId), c = i, h = o, m = l, f = u, { selectedIndices: g, selectedScores: b } = fie(p, d, c, h, m, f); return [n.makeTensorInfo([g.length], "int32", new Int32Array(g)), n.makeTensorInfo([b.length], "float32", new Float32Array(b))] } var bie = { kernelName: Gu, backendName: "webgl", kernelFunc: gie }, yie = class {
        constructor(e, t, n, a) {
            this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${a}), float(${n}),
                      float(index == coords.y)));
      }
    `}
    }, xie = e => { let { inputs: t, backend: n, attrs: a } = e, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a, u = w.sizeFromShape(r.shape), p = new yie(u, i, o, l), d = ce({ inputs: { x: r }, backend: n, attrs: { shape: [u] } }), c = n.runWebGLProgram(p, [d], s); n.disposeIntermediateTensorInfo(d); let h = [...r.shape, i], m = ce({ inputs: { x: c }, backend: n, attrs: { shape: h } }); return n.disposeIntermediateTensorInfo(c), m }, vie = { kernelName: vo, backendName: "webgl", kernelFunc: xie }; function _m(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (a.dtype === "complex64") { let r = Pd({ inputs: { input: a }, backend: n }), s = _m({ inputs: { x: r }, backend: n }), i = ng({ inputs: { input: a }, backend: n }), o = _m({ inputs: { x: i }, backend: n }), l = Ms({ inputs: { real: s, imag: o }, backend: n }); return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l } else return Ld({ attrs: { shape: a.shape, dtype: a.dtype, value: a.dtype === "string" ? "" : 0 }, backend: n }) } var wie = { kernelName: up, backendName: "webgl", kernelFunc: _m }; function SF(e) { let { inputs: t, backend: n } = e, { x: a } = t; if (a.dtype === "string") throw new Error("onesLike is not supported under string dtype"); if (a.dtype === "complex64") { let r = Pd({ inputs: { input: a }, backend: n }), s = SF({ inputs: { x: r }, backend: n }), i = ng({ inputs: { input: a }, backend: n }), o = _m({ inputs: { x: i }, backend: n }), l = Ms({ inputs: { real: s, imag: o }, backend: n }); return n.disposeIntermediateTensorInfo(r), n.disposeIntermediateTensorInfo(s), n.disposeIntermediateTensorInfo(i), n.disposeIntermediateTensorInfo(o), l } else return Ld({ attrs: { shape: a.shape, dtype: a.dtype, value: 1 }, backend: n }) } var kie = { kernelName: Hu, backendName: "webgl", kernelFunc: SF }; function Iie(e) { let { inputs: t, backend: n, attrs: a } = e, { axis: r } = a; if (t.length === 1) return Iv({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } }); let s = t[0].shape, i = t[0].dtype; t.forEach(p => { w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes") }); let o = [], l = t.map(p => { let d = Iv({ inputs: { input: p }, backend: n, attrs: { dim: r } }); return o.push(d), d }), u = uF({ inputs: l, backend: n, attrs: { axis: r } }); return o.forEach(p => n.disposeIntermediateTensorInfo(p)), u } var Sie = { kernelName: qu, backendName: "webgl", kernelFunc: Iie }, Nie = class {
        constructor(e, t, n) {
            this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((l, u) => l[0] + e[u] + l[1]); let a = e.length, r = ht(a), s = t.map(l => l[0]).join(","), i = t.map((l, u) => l[0] + e[u]).join(","), o = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, a); if (a === 1) {
                this.userCode = `
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `; return
            } this.userCode = `
      ${r} start = ${r}(${s});
      ${r} end = ${r}(${i});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `}
    }, Tie = class {
        constructor(e, t, n) {
            this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map((m, f) => m[0] + e[f] + m[1]); let a = e.length, r = ht(a), s = t.map(m => m[0]).join(","), i = t.map((m, f) => m[0] + e[f]).join(","), o = kn("rc", a), l = kn("source", a), u = `${o[a - 1]} < ${this.outputShape[a - 1]}`, p = a === 1 ? "source" : `vec2(${l.slice(-2).join()})`, d = [`${r} rc = outputLoc;`, `${o[a - 1]} += 1;
       if(${u}) {
      `, a === 1 ? "" : `}
       rc = outputLoc;
       ${o[a - 2]} += 1;
       if(${o[a - 2]} < ${this.outputShape[a - 2]}) {`, a === 1 ? "" : `  ${o[a - 1]} += 1;
         if(${u}) {`], c = a === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", h = ""; for (let m = 0, f = a === 1 ? 2 : 4; m < f; m++)h += `
        ${d[m]}
        if (${c}) {
          result[${m}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${m}] = getChannel(getX(${l.join()}), ${p});
        }
      `; h += a === 1 ? "} " : "}}", this.userCode = `
      const ${r} start = ${r}(${s});
      const ${r} end = ${r}(${i});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}
    }, NF = e => { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { paddings: s, constantValue: i } = a; if (w.sizeFromShape(r.shape) === 0) { let u = s.map((p, d) => p[0] + r.shape[d] + p[1]); return Ld({ backend: n, attrs: { shape: u, value: i, dtype: r.dtype } }) } let o = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Tie(r.shape, s, i) : new Nie(r.shape, s, i), l = [[i]]; return n.runWebGLProgram(o, [r], r.dtype, l) }, Cie = { kernelName: wo, backendName: "webgl", kernelFunc: NF }, Eie = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, _ie = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+ tl + `
  return result;
`, Aie = fn({ opSnippet: Eie, packedOpSnippet: _ie }), Fie = { kernelName: ko, backendName: "webgl", kernelFunc: Aie }; function $ie(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, keepDims: i } = a, o = r.shape.length, l = [], u = w.parseAxisParam(s, r.shape), p = u, d = T.getAxesPermutation(p, o), c = r; d != null && (c = In({ inputs: { x: r }, backend: n, attrs: { perm: d } }), p = T.getInnerMostAxes(p.length, o), l.push(c)), T.assertAxesAreInnerMostDims("prod", p, o); let h; if (n.shouldExecuteOnCPU([c])) { let m = n.texData.get(c.dataId).values, { outVals: f, outShape: g, outDtype: b } = EQ(c.shape, c.dtype, m, p); h = n.makeTensorInfo(g, b, f) } else { let [m, f] = T.computeOutAndReduceShapes(c.shape, p), g = w.sizeFromShape(f), b = ce({ inputs: { x: c }, backend: n, attrs: { shape: [-1, g] } }), y = Xm(r.dtype), x = nl(b, y, "prod", n); h = ce({ inputs: { x }, backend: n, attrs: { shape: m } }), l.push(b), l.push(x) } if (i) { l.push(h); let m = T.expandShapeToKeepDim(h.shape, u); h = ce({ inputs: { x: h }, backend: n, attrs: { shape: m } }) } return l.forEach(m => n.disposeIntermediateTensorInfo(m)), h } var Die = { kernelName: So, backendName: "webgl", kernelFunc: $ie }; function Rie(e) { let { inputs: t, backend: n, attrs: a } = e, { paramsNestedSplits: r, paramsDenseValues: s, indices: i } = t, { outputRaggedRank: o } = a, l = r.map(b => n.readSync(b.dataId)), u = r.map(b => b.shape), p = n.readSync(s.dataId), d = n.readSync(i.dataId), [c, h, m] = _Q(l, u, p, s.shape, s.dtype, d, i.shape, o), f = c.map(b => n.makeTensorInfo([b.length], "int32", b)), g = n.makeTensorInfo(m, s.dtype, h); return f.concat([g]) } var Mie = { kernelName: Gm, backendName: "webgl", kernelFunc: Rie }; function Oie(e) { let { inputs: t, backend: n } = e, { starts: a, limits: r, deltas: s } = t, i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = AQ(i, a.shape, a.dtype, o, r.shape, l, s.shape), d = n.makeTensorInfo([u.length], "int32", u), c = n.makeTensorInfo([p.length], a.dtype, p); return [d, c] } var Pie = { kernelName: Hm, backendName: "webgl", kernelFunc: Oie }; function Lie(e) { let { inputs: t, backend: n, attrs: a } = e, { shape: r, values: s, defaultValue: i, rowPartitionTensors: o } = t, { rowPartitionTypes: l } = a, u = n.readSync(r.dataId), p = n.readSync(s.dataId), d = n.readSync(i.dataId), c = o.map(g => n.readSync(g.dataId)), h = o.map(g => g.shape), [m, f] = FQ(u, r.shape, p, s.shape, s.dtype, d, i.shape, c, h, l); return n.makeTensorInfo(m, s.dtype, f) } var zie = { kernelName: qm, backendName: "webgl", kernelFunc: Lie }, TF = e => { let { backend: t, attrs: n } = e, { start: a, stop: r, step: s, dtype: i } = n, o = $Q(a, r, s, i); return t.makeTensorInfo([o.length], i, o) }, Wie = { kernelName: Xc, backendName: "webgl", kernelFunc: TF }, Bie = "return 1.0 / x;", Vie = Ze({ opSnippet: Bie }), Uie = { kernelName: No, backendName: "webgl", kernelFunc: Vie }, Gie = Ma + `
  return (x < 0.0) ? 0.0 : x;
`, Hie = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, qie = Ze({ opSnippet: Gie, packedOpSnippet: Hie }), jie = { kernelName: To, backendName: "webgl", kernelFunc: qie }, Kie = Ma + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Xie = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Yie = Ze({ opSnippet: Kie, packedOpSnippet: Xie }), Zie = { kernelName: _o, backendName: "webgl", kernelFunc: Yie }, Jie = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["A"], this.outputShape = []; let [s, i, o, l] = e; this.outputShape = [s, t, n, l]; let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d; r ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / p[0]},
          ${u[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}
        }, Qie = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = []; let [s, i, o, l] = e; this.outputShape = [s, t, n, l]; let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d; r ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / p[0]},
          ${u[1] / p[1]},
          ${u[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l - 1};
        bool hasNextRow = coords.z < ${n - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}
        }; function eoe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, p = G().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Qie(r.shape, l, u, s, i) : new Jie(r.shape, l, u, s, i); return n.runWebGLProgram(p, [r], "float32") } var toe = { kernelName: Eo, backendName: "webgl", kernelFunc: eoe }, noe = class {
            constructor(e, t, n) {
                this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t; let [, a, r] = t, [, s, i] = e, o = [n && s > 1 ? a - 1 : a, n && i > 1 ? r - 1 : r], l = [n && s > 1 ? s - 1 : s, n && i > 1 ? i - 1 : i], u = o[0] / l[0], p = o[1] / l[1], d = 1 / u, c = 1 / p, h = Math.ceil(d) * 2 + 2, m = Math.ceil(c) * 2 + 2; this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${c});

        const int winHeight = int(${h});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${a - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}
        }; function aoe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a, o = new noe(s.shape, r.shape, i); return n.runWebGLProgram(o, [s], s.dtype) } var roe = { kernelName: Xu, backendName: "webgl", kernelFunc: aoe }, soe = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["A"], this.outputShape = []; let [s, i, o, l] = e; this.outputShape = [s, t, n, l]; let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d = a ? "0.5" : "0.0", c; r ? c = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : c = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / p[0]},
          ${u[1] / p[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${c};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}
        }, ioe = class {
            constructor(e, t, n, a, r) {
                this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = []; let [s, i, o, l] = e; this.outputShape = [s, t, n, l]; let u = [a && t > 1 ? i - 1 : i, a && n > 1 ? o - 1 : o], p = [a && t > 1 ? t - 1 : t, a && n > 1 ? n - 1 : n], d = a ? "0.5" : "0.0", c; r ? c = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : c = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / p[0]},
          ${u[1] / p[1]},
          ${u[1] / p[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${c};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l - 1};
        bool hasNextRow = coords.z < ${n - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}
        }; function ooe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r } = t, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, p = G().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new ioe(r.shape, l, u, s, i) : new soe(r.shape, l, u, s, i); return n.runWebGLProgram(p, [r], r.dtype) } var loe = { kernelName: Co, backendName: "webgl", kernelFunc: ooe }, uoe = class {
            constructor(e, t, n) {
                this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t; let [, a, r] = t, [, s, i] = e, o = [n && s > 1 ? a - 1 : a, n && i > 1 ? r - 1 : r], l = [n && s > 1 ? s - 1 : s, n && i > 1 ? i - 1 : i], u = o[0] / l[0], p = o[1] / l[1], d = 1 / u, c = 1 / p, h = Math.ceil(d) * 2 + 2, m = Math.ceil(c) * 2 + 2; this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${p});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${c});

        const int winHeight = int(${h});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${a}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}
        }; function poe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a, o = new uoe(s.shape, r.shape, i); return n.runWebGLProgram(o, [s], s.dtype) } var coe = { kernelName: Ku, backendName: "webgl", kernelFunc: poe }, doe = class {
            constructor(e, t) {
                this.variableNames = ["x"]; let n = e.length; if (n > 4) throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`); if (this.outputShape = e, n === 1) {
                    this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `; return
                } let a = i => t.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, r = e.map((i, o) => a(o)).join(","), s = ht(n); this.userCode = `
      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `}
        }, hoe = class {
            constructor(e, t) {
                this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0; let n = e.length; if (n > 4) throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`); this.outputShape = e; let a = kn("rc", n), r = `${a[n - 1]} + 1 < ${this.outputShape[n - 1]}`, s = `${a[n - 2]} + 1 < ${this.outputShape[n - 2]}`, i = ht(n); n === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `: this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${o(a.slice())};
          if(${r}){
            result.g = ${l(a.slice())};
          }
          if(${s}) {
            result.b = ${u(a.slice())};
            if(${r}) {
              result.a = ${p(a.slice())};
            }
          }
          setOutput(result);
        }
    `; function o(h) { return d(h) } function l(h) { return h[n - 1] = "(" + h[n - 1] + " + 1)", d(h) } function u(h) { return h[n - 2] = "(" + h[n - 2] + " + 1)", d(h) } function p(h) { return h[n - 1] = "(" + h[n - 1] + " + 1)", h[n - 2] = "(" + h[n - 2] + " + 1)", d(h) } function d(h) { let m = e.map((b, y) => c(y, h)), f = m.join(","), g = m.slice(-2).join(","); return `getChannel(getX(${f}), vec2(${g}))` } function c(h, m) { return t.indexOf(h) !== -1 && e[h] !== 1 ? `${e[h]} - ${m[h]} - 1` : `${m[h]}` }
            }
        }; function moe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { dims: s } = a, i = r.shape.length, o = w.parseAxisParam(s, r.shape); if (i === 0) return aa({ inputs: { x: r }, backend: n }); let l = G().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new hoe(r.shape, o) : new doe(r.shape, o); return n.runWebGLProgram(l, [r], r.dtype) } var foe = { kernelName: Ao, backendName: "webgl", kernelFunc: moe }, goe = class {
            constructor(e, t) {
                this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }]; let n = e[1], a = e[2]; this.outputShape = e; let r = ""; typeof t == "number" ? r = `float outputValue = ${t.toFixed(2)};` : r = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}
        }, boe = { kernelName: pp, backendName: "webgl", kernelFunc: ({ inputs: e, attrs: t, backend: n }) => { let { image: a } = e, { radians: r, fillValue: s, center: i } = t, o = n, l = new goe(a.shape, s), [u, p] = T.getImageCenter(i, a.shape[1], a.shape[2]), d = [[u, p, Math.sin(r), Math.cos(r)]]; return o.runWebGLProgram(l, [a], a.dtype, d) } }, yoe = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, xoe = Ze({ opSnippet: yoe }), voe = { kernelName: Fo, backendName: "webgl", kernelFunc: xoe }, woe = "return inversesqrt(x);", koe = Ze({ opSnippet: woe, cpuKernelImpl: DQ }), Ioe = { kernelName: $o, backendName: "webgl", kernelFunc: koe }, vk = class {
                constructor(e, t, n, a, r, s, i = !0, o = !1) {
                    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = s; let l = ht(r.length), u = ht(s.length), p = ""; n === 1 ? p = "i" : n === 2 && (p = "i, j"); let d = `getIndices(${p})`, c = ""; a === 1 ? c = "i" : a === 2 && (c = "i, coords[1]"); let h = `getUpdates(${c})`, m = ""; o && (m = "coords[0], coords[1]"); let f = `getDefaultValue(${m})`, g = t > 1 ? "strides[j]" : "strides"; this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${g};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${h};
              found = true;
            }
          }
          setOutput(mix(${f}, sum, float(found)));
        }
      `}
            }, Soe = class {
                constructor(e, t, n, a, r, s, i = !0, o = !1) {
                    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s; let l = ht(r.length), u = ht(s.length), p = ""; n === 1 ? p = "i" : n === 2 && (p = "i, j"); let d = `getIndices(${p})`, c = ""; a === 1 ? c = "i" : a === 2 && (c = "i, coords[1]"); let h = `getUpdates(${c})`, m = ""; o && (m = "coords[0], coords[1]"); let f = `getDefaultValue(${m})`, g = t > 1 ? "strides[j]" : "strides", b = t > 1 ? "strides[j + 1]" : "strides"; this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${d});
              flattenedIndex += index.xz * ${g};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${h};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${f}, sum, found));
        }
      `}
            }; function Noe(e) { let { inputs: t, backend: n, attrs: a } = e, { indices: r, updates: s } = t, { shape: i } = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(s, r, i), c = [d / u, u]; if (d === 0) return n.makeTensorInfo(i, r.dtype); let h = ce({ inputs: { x: r }, backend: n, attrs: { shape: [l, o] } }), m = ce({ inputs: { x: s }, backend: n, attrs: { shape: [l, u] } }), f = n.makeTensorInfo([], "float32", new Float32Array([0])), g; G().getBool("WEBGL_PACK") ? g = new Soe(l, o, h.shape.length, m.shape.length, p, c) : g = new vk(l, o, h.shape.length, m.shape.length, p, c); let b = n.runWebGLProgram(g, [m, h, f], m.dtype), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: i } }); return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(f), y } var Toe = { kernelName: Yu, backendName: "webgl", kernelFunc: Noe }, Coe = class {
                constructor(e, t, n, a) {
                    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e, n]; let r = "while (left < right) {", s = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`, i = G().getNumber("WEBGL_VERSION") === 2 ? r : s, o = a === "left" ? "<" : "<="; this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${o} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}
            }; function Eoe(e) { let { inputs: t, backend: n, attrs: a } = e, { sortedSequence: r, values: s } = t, { side: i } = a, o = new Coe(r.shape[0], r.shape[1], s.shape[1], i), l = [[r.shape[1]]]; return n.runWebGLProgram(o, [r, s], "int32", l) } var _oe = { kernelName: Ju, backendName: "webgl", kernelFunc: Eoe }, Aoe = class {
                constructor(e, t, n) {
                    this.variableNames = ["c", "a", "b"], this.outputShape = t; let a, r; if (n > 4) throw Error(`Where for rank ${n} is not yet supported`); if (n === 1) r = "resRC", a = "resRC"; else { let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [], l = []; for (let u = 0; u < t.length; u++)l.push(`${i[u]}`), u < e && o.push(`${i[u]}`); a = o.join(), r = l.join() } let s = ht(n); this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        float cVal = getC(${a});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `}
            }; function Foe(e) { let { inputs: t, backend: n } = e, { condition: a, t: r, e: s } = t, i = new Aoe(a.shape.length, r.shape, r.shape.length); return n.runWebGLProgram(i, [a, r, s], ga(r.dtype, s.dtype)) } var $oe = { kernelName: Qu, backendName: "webgl", kernelFunc: Foe }, Doe = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${T.SELU_SCALEALPHA};
  float scale = ${T.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, Roe = Ze({ opSnippet: Doe }), Moe = { kernelName: Do, backendName: "webgl", kernelFunc: Roe }, Ooe = Cp + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, Poe = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Loe = Ze({ opSnippet: Ooe, packedOpSnippet: Poe, cpuKernelImpl: MQ }), zoe = { kernelName: Po, backendName: "webgl", kernelFunc: Loe }, Woe = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, Boe = Ze({ opSnippet: Woe }), Voe = { kernelName: Oo, backendName: "webgl", kernelFunc: Boe }, Uoe = Cp + `
  return sin(x);
`, Goe = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${tl}
  return result;
`, Hoe = Ze({ opSnippet: Uoe, packedOpSnippet: Goe }), qoe = { kernelName: Ro, backendName: "webgl", kernelFunc: Hoe }, joe = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, Koe = Ze({ opSnippet: joe }), Xoe = { kernelName: Mo, backendName: "webgl", kernelFunc: Koe }, Yoe = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, Zoe = Ze({ opSnippet: Yoe }), Joe = { kernelName: Lo, backendName: "webgl", kernelFunc: Zoe }, Qoe = e => { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, paddings: i } = a; w.assert(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"); let o = s.reduce((b, y) => b * y), l = [[0, 0]]; l.push(...i); for (let b = 1 + s.length; b < r.shape.length; ++b)l.push([0, 0]); let u = [], p = NF({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), d = T.getReshaped(p.shape, s, o, !1), c = T.getPermuted(d.length, s.length, !1), h = T.getReshapedPermuted(p.shape, s, o, !1), m = ce({ inputs: { x: p }, backend: n, attrs: { shape: d } }), f = In({ inputs: { x: m }, backend: n, attrs: { perm: c } }), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: h } }); return u.push(p), u.push(m), u.push(f), u.forEach(b => n.disposeIntermediateTensorInfo(b)), g }, ele = { kernelName: tp, backendName: "webgl", kernelFunc: Qoe }; function tle(e) {
        let { inputs: t, backend: n } = e, { indices: a, values: r, denseShape: s, defaultValue: i } = t; if (s.shape.length !== 1) throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`); if (a.shape.length !== 2) throw new Error(`Indices must be a matrix, saw:
         ${a.shape}`); if (r.shape.length !== 1) throw new Error(`Values must be a vector, saw:
         ${r.shape}`); if (i.shape.length !== 0) throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`); let o = n.readSync(a.dataId), l = n.readSync(r.dataId), u = n.readSync(s.dataId), p = n.readSync(i.dataId)[0], [d, c, h, m, f] = PQ(o, a.shape, a.dtype, l, r.dtype, u, p); return [n.makeTensorInfo(c, a.dtype, d), n.makeTensorInfo([c[0]], r.dtype, h), n.makeTensorInfo([m.length], "bool", new Uint8Array(m.map(g => Number(g)))), n.makeTensorInfo([f.length], a.dtype, new Int32Array(f))]
    } var nle = { kernelName: Yc, backendName: "webgl", kernelFunc: tle }; function ale(e) { let { inputs: t, backend: n } = e, { inputIndices: a, inputShape: r, newShape: s } = t; if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape ${a.shape}`); if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`); let i = Array.from(n.readSync(r.dataId)), o = n.readSync(a.dataId), l = Array.from(n.readSync(s.dataId)), [u, p, d] = LQ(o, a.shape, a.dtype, i, l); return [n.makeTensorInfo(p, a.dtype, u), n.makeTensorInfo([d.length], s.dtype, new Int32Array(d))] } var rle = { kernelName: ap, backendName: "webgl", kernelFunc: ale }; function sle(e) {
        let { inputs: t, backend: n } = e, { data: a, indices: r, segmentIds: s } = t; if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
              ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`); let i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = KA(i, a.shape, a.dtype, o, l, !0); return n.makeTensorInfo(p, a.dtype, u)
    } var ile = { kernelName: Zc, backendName: "webgl", kernelFunc: sle }; function ole(e) {
        let { inputs: t, backend: n } = e, { data: a, indices: r, segmentIds: s } = t; if (a.shape.length < 1) throw new Error("Data should be at least 1 dimensional but received scalar"); if (r.shape.length !== 1) throw new Error(`Indices should be a vector but received shape
             ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`); let i = n.readSync(a.dataId), o = n.readSync(r.dataId), l = n.readSync(s.dataId), [u, p] = KA(i, a.shape, a.dtype, o, l); return n.makeTensorInfo(p, a.dtype, u)
    } var lle = { kernelName: Jc, backendName: "webgl", kernelFunc: ole }; function ule(e) { let { inputs: t, backend: n, attrs: a } = e, { sparseIndices: r, sparseValues: s, defaultValue: i } = t, { outputShape: o } = a, { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = T.calculateShapes(s, r, o), h = !1; if (s.dtype === "string") { let b = n.bufferSync(r), y = n.bufferSync(s), x = w.decodeString(n.readSync(i.dataId)[0]), v = RQ(b, y, o, c, p, u, l, d, x, h); return n.makeTensorInfo(o, v.dtype, v.values) } let m = new vk(u, l, r.shape.length, s.shape.length, d, [c, 1], h), f = n.runWebGLProgram(m, [s, r, i], s.dtype), g = ce({ inputs: { x: f }, backend: n, attrs: { shape: o } }); return n.disposeIntermediateTensorInfo(f), g } var ple = { kernelName: rp, backendName: "webgl", kernelFunc: ule }; function cle(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { numOrSizeSplits: s, axis: i } = a, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = r.shape.length, p = new Array(u).fill(0), d = r.shape.slice(); return l.map(c => { let h = [...d]; h[o] = c; let m = Ep({ inputs: { x: r }, backend: n, attrs: { begin: p, size: h } }); return p[o] += c, m }) } var dle = { kernelName: np, backendName: "webgl", kernelFunc: cle }, HS = "return sqrt(x);", hle = Ze({ opSnippet: HS, packedOpSnippet: HS, cpuKernelImpl: zQ }), mle = { kernelName: zo, backendName: "webgl", kernelFunc: hle }, fle = "return x * x;", gle = Ze({ opSnippet: fle }), ble = { kernelName: Qc, backendName: "webgl", kernelFunc: gle }, qS = "return (a - b) * (a - b);", yle = fn({ opSnippet: qS, packedOpSnippet: qS }), xle = { kernelName: Vo, backendName: "webgl", kernelFunc: yle }; function vle(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t; if (r.dtype !== "string") throw new Error("Input must be of datatype string"); let s = n.readSync(r.dataId), i = T.fromUint8ToStringArray(s), o = WQ(i, "string", a); return n.makeTensorInfo(r.shape, "string", o) } var wle = { kernelName: ed, backendName: "webgl", kernelFunc: vle }; function kle({ inputs: e, attrs: t, backend: n }) {
        let { x: a } = e, r = Ma + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, s = new ir(a.shape, r); return n.runWebGLProgram(s, [a], a.dtype)
    } var Ile = { kernelName: Ts, backendName: "webgl", kernelFunc: kle }, Sle = class {
        constructor(e, t, n) {
            this.variableNames = ["x"], this.outputShape = n; let a = n.length, r = ht(n.length), s = ht(n.length), i = ""; if (a === 1) i = "coords * strides + begin"; else { let o = 0; i = n.map((l, u) => (o++, n.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${o - 1}] * strides[${u}] + begin[${u}]`)).join(",") } this.userCode = `
      ${r} begin = ${r}(${e});
      ${r} strides = ${r}(${t});

      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}
    }; function Nle(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a, { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I; if (f) I = ce({ inputs: { x: r }, backend: n, attrs: { shape: m } }); else if (g || b) { w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`); let C = Kt.computeOutShape(y, x, v), _ = Ep({ inputs: { x: r }, backend: n, attrs: { begin: y, size: C } }); I = ce({ inputs: { x: _ }, backend: n, attrs: { shape: m } }), n.disposeIntermediateTensorInfo(_) } else if (n.shouldExecuteOnCPU([r])) { let C = n.readSync(r.dataId), _ = Pe(r.shape, r.dtype, C), F = BQ(h, _, v, y); I = n.makeTensorInfo(m, r.dtype, F.values) } else { let C = new Sle(y, v, h); I = n.runWebGLProgram(C, [r], r.dtype) } let N = ce({ inputs: { x: I }, backend: n, attrs: { shape: m } }); return n.disposeIntermediateTensorInfo(I), N } var Tle = { kernelName: sp, backendName: "webgl", kernelFunc: Nle }; function Cle(e) { let { inputs: t, backend: n, attrs: a } = e, { separator: r, nGramWidths: s, leftPad: i, rightPad: o, padWidth: l, preserveShortSequences: u } = a, { data: p, dataSplits: d } = t, c = n.readSync(p.dataId), h = n.readSync(d.dataId), [m, f] = VQ(c, h, r, s, i, o, l, u); return [n.makeTensorInfo([m.length], "string", m), n.makeTensorInfo(d.shape, "int32", f)] } var Ele = { kernelName: td, backendName: "webgl", kernelFunc: Cle }; function _le(e) { let { inputs: t, backend: n, attrs: a } = e, { skipEmpty: r } = a, { input: s, delimiter: i } = t; if (s.dtype !== "string") throw new Error("Input must be of datatype string"); if (s.shape.length !== 1) throw new Error(`Input must be a vector, got shape: ${s.shape}`); if (i.shape.length !== 0) throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`); let o = n.readSync(s.dataId), l = n.readSync(i.dataId)[0], [u, p, d] = UQ(o, l, r), c = p.length; return [n.makeTensorInfo([c, 2], "int32", u), n.makeTensorInfo([c], "string", p), n.makeTensorInfo([2], "int32", new Int32Array(d))] } var Ale = { kernelName: nd, backendName: "webgl", kernelFunc: _le }; function Fle(e) { let { inputs: t, backend: n, attrs: a } = e, { numBuckets: r } = a, { input: s } = t; if (s.dtype !== "string") throw new Error("Input must be of datatype string"); if (r <= 0) throw new Error("Number of buckets must be at least 1"); let i = n.readSync(s.dataId), o = GQ(i, r); return n.makeTensorInfo(s.shape, "int32", o) } var $le = { kernelName: ad, backendName: "webgl", kernelFunc: Fle }, Dle = "return tan(x);", Rle = Ze({ opSnippet: Dle }), Mle = { kernelName: Go, backendName: "webgl", kernelFunc: Rle }, Ole = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, Ple = Ze({ opSnippet: Ole }), Lle = { kernelName: Ho, backendName: "webgl", kernelFunc: Ple }; function zle(e) { let { inputs: t, backend: n, attrs: a } = e, { tensor: r, indices: s, updates: i } = t, { } = a, { sliceRank: o, numUpdates: l, sliceSize: u, strides: p, outputSize: d } = T.calculateShapes(i, s, r.shape), c = [d / u, u]; if (d === 0) return n.makeTensorInfo(r.shape, s.dtype); let h = ce({ inputs: { x: s }, backend: n, attrs: { shape: [l, o] } }), m = ce({ inputs: { x: i }, backend: n, attrs: { shape: [l, u] } }), f = ce({ inputs: { x: r }, backend: n, attrs: { shape: c } }), g = new vk(l, o, h.shape.length, m.shape.length, p, c, !1, !0), b = n.runWebGLProgram(g, [m, h, f], f.dtype), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: r.shape } }); return n.disposeIntermediateTensorInfo(h), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(f), n.disposeIntermediateTensorInfo(b), y } var Wle = { kernelName: Zu, backendName: "webgl", kernelFunc: zle }, Ble = class {
        constructor(e, t) {
            this.variableNames = ["A"]; let n = new Array(e.length); for (let s = 0; s < n.length; s++)n[s] = e[s] * t[s]; this.outputShape = n, this.rank = n.length; let a = ht(this.rank), r = Vle(e); this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `}
    }; function Vle(e) { let t = e.length; if (t > 5) throw Error(`Tile for rank ${t} is not yet supported`); if (t === 1) return `imod(resRC, ${e[0]})`; let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], a = []; for (let r = 0; r < e.length; r++)a.push(`imod(${n[r]}, ${e[r]})`); return a.join() } function CF(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { reps: s } = a; if (r.dtype === "string" || r.shape.length > 5) { let o = n.readSync(r.dataId), l = r.dtype === "string" ? o.map(d => w.decodeString(d)) : o, u = Pe(r.shape, r.dtype, l), p = qQ(u, s); return n.makeTensorInfo(p.shape, p.dtype, p.values) } let i = new Ble(r.shape, s); return n.runWebGLProgram(i, [r], r.dtype) } var Ule = { kernelName: Ns, backendName: "webgl", kernelFunc: CF }, Gle = class {
        constructor(e) {
            this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}
    }, Hle = class {
        constructor(e) {
            this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}
    }; function Ks(e, t) { t !== null && e.disposeIntermediateTensorInfo(t) } function jS(e) { let t = 1; for (; t < e;)t *= 2; return t } function qle(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { k: s, sorted: i } = a, o = G().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = G().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), u = r.shape, p = u[u.length - 1]; if (n.shouldExecuteOnCPU([r]) || p < o || s > l) { let F = n.readSync(r.dataId), [D, $] = jQ(F, u, r.dtype, s, i); return [n.makeTensorInfo(D.shape, D.dtype, D.values), n.makeTensorInfo($.shape, $.dtype, $.values)] } if (s === 0) return u[u.length - 1] = 0, [n.makeTensorInfo(u, r.dtype, []), n.makeTensorInfo(u, "int32", [])]; if (p === 1) return [r, Ld({ attrs: { shape: u, dtype: "int32", value: 0 }, backend: n })]; let d = n.texData.get(r.dataId), c = d !== null && d.isPacked, h = c ? n.unpackTensor(r) : r, m = w.sizeFromShape(u) / p, f = ce({ inputs: { x: h }, attrs: { shape: [m, p] }, backend: n }); c && Ks(n, h); let g = jS(s), b = jS(p), y = null, x = () => y === null ? [f, f] : [f, y], v = (F, D, $) => { let S = x(), M = new Gle($), B = [[p], [y === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [F], [D]], U = y; y = n.runWebGLProgram(M, S, "int32", B), Ks(n, U) }; for (let F = 1; F < g; F *= 2) { let D = F * 2; for (let $ = F; $ >= 1; $ /= 2)v(D, $, [m, b]) } for (let F = b; F > g; F /= 2) { let D = x(), $ = new Hle([m, F / 2]), S = [[p], [y === null ? 1 : 0], [g]], M = y; y = n.runWebGLProgram($, D, "int32", S), Ks(n, M); let B = g / 2, U = B * 2; for (let H = B; H >= 1; H /= 2)v(U, H, y.shape) } let I = y; y = Ep({ inputs: { x: y }, backend: n, attrs: { begin: 0, size: [m, s] } }), Ks(n, I); let N = xF({ inputs: { x: f, indices: y }, backend: n, attrs: { axis: 1, batchDims: 1 } }); Ks(n, f); let C = u.slice(0, -1); C.push(s), I = y, y = ce({ inputs: { x: y }, attrs: { shape: C }, backend: n }), Ks(n, I); let _ = N; return N = ce({ inputs: { x: N }, attrs: { shape: C }, backend: n }), Ks(n, _), [N, y] } var jle = { kernelName: ip, backendName: "webgl", kernelFunc: qle }, Kle = class {
        constructor(e, t, n, a, r, s) {
            this.variableNames = ["Image", "Transforms"], this.outputShape = s; let i = n === "nearest" ? 1 : 2, o; switch (a) { case "constant": o = 1; break; case "reflect": o = 2; break; case "wrap": o = 3; break; case "nearest": o = 4; break; default: o = 1; break }this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${o} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${o} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}
    }; function Xle(e) { let { inputs: t, backend: n, attrs: a } = e, { image: r, transforms: s } = t, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = a, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = new Kle(d, c, i, o, l, g); return n.runWebGLProgram(b, [r, s], "float32") } var Yle = { kernelName: op, backendName: "webgl", kernelFunc: Xle }; function Zle(e) { let { inputs: t, attrs: n, backend: a } = e, { axis: r } = n, { x: s } = t; wp(s, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded"); let i = a.readSync(s.dataId), { outputValues: o, outputShape: l, indices: u } = KQ(i, r, s.shape, s.dtype); return [a.makeTensorInfo(l, s.dtype, o), a.makeTensorInfo([u.length], "int32", u)] } var Jle = { kernelName: rd, backendName: "webgl", kernelFunc: Zle }; function Qle(e) { let { inputs: t, backend: n, attrs: a } = e, { value: r } = t, { axis: s } = a; s < 0 && (s += r.shape.length); let i = r, o = i.shape.length, l = r.shape[s], u = new Array(o - 1), p = 0; for (let f = 0; f < o; f++)f !== s && (u[p++] = i.shape[f]); let d = [], c = new Array(o).fill(0), h = i.shape.slice(); h[s] = 1; let m = new Array(l); for (let f = 0; f < m.length; f++) { c[s] = f; let g = Ep({ inputs: { x: i }, backend: n, attrs: { begin: c, size: h } }), b = ce({ inputs: { x: g }, backend: n, attrs: { shape: u } }); m[f] = b, d.push(g) } return d.forEach(f => n.disposeIntermediateTensorInfo(f)), m } var eue = { kernelName: lp, backendName: "webgl", kernelFunc: Qle }, tue = class {
        constructor(e, t) {
            this.variableNames = ["x", "segmentIds"]; let n = e.windowSize, a = e.batchSize, r = e.inSize, s = e.numSegments, i = s * Math.ceil(r / n); this.outputShape = [a, i]; let o = "0.0", l = "sumValue", u = Math.floor(n / 4) * 4, p = n % 4, d = `
        sumValue += dot(values, segFilter);
    `, c = ""; r % n > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `); let h = ""; r % n > 0 && (h = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${o};

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${s})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${s})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${p === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${p === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${p === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${l});
      }
    `}
    }; function nue(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, segmentIds: s } = t, { numSegments: i } = a, o = r.shape.length, l = [], u = 0, p = T.getAxesPermutation([u], o), d = r; p != null && (d = In({ inputs: { x: r }, backend: n, attrs: { perm: p } }), l.push(d), u = T.getInnerMostAxes(1, o)[0]); let c = T.segment_util.computeOutShape(d.shape, u, i), h = w.sizeFromShape([d.shape[u]]), m = ce({ inputs: { x: d }, backend: n, attrs: { shape: [-1, h] } }); l.push(m); let f = Xm(r.dtype), g = (v, I, N, C, _) => { let F = v.shape[0], D = v.shape[1], $ = T.segment_util.segOpComputeOptimalWindowSize(D, _), S = { windowSize: $, inSize: D, batchSize: F, numSegments: _ }, M = new tue(S, I), B = n.compileAndRun(M, [v, N], C); if (l.push(B), B.shape[1] === _) return B; let U = TF({ backend: n, attrs: { start: 0, stop: _, step: 1, dtype: "float32" } }), H = CF({ inputs: { x: U }, backend: n, attrs: { reps: [D / $] } }); return l.push(U), l.push(H), g(B, I, H, C, _) }, b = g(m, "unsortedSegmentSum", s, f, i), y = ce({ inputs: { x: b }, backend: n, attrs: { shape: c } }), x = y; if (p != null) { l.push(y); let v = T.getUndoAxesPermutation(p); x = In({ inputs: { x }, backend: n, attrs: { perm: v } }) } return l.forEach(v => n.disposeIntermediateTensorInfo(v)), x } var aue = { kernelName: sd, backendName: "webgl", kernelFunc: nue }, rue = [Bee, Uee, qee, Xee, Zee, ete, nte, rte, lte, pte, hte, gte, xte, Ite, Tte, Ete, Ate, Rte, Ote, Lte, Vte, Xte, Zte, tne, ane, une, cne, fne, See, yne, Ine, Cne, Dne, One, Lne, Wne, Vne, qne, Xne, Jne, eae, nae, rae, oae, uae, hae, fae, yae, wae, Iae, Cae, Fae, Mae, Lae, Bae, Vae, Gae, qae, Kae, Yae, Jae, nre, sre, lre, pre, hre, gre, vre, Sre, Iee, Tre, wne, _re, $re, Mre, Tee, zre, Ure, Hre, Xre, Jre, nse, sse, use, hse, gse, yse, kse, Sse, Tse, Ase, $se, Rse, Ose, Lse, Vse, qse, Yse, rie, _ee, lie, cie, mie, bie, sne, vie, kie, Sie, Cie, Fie, Eee, Die, Mie, Pie, zie, Wie, ine, eie, Uie, jie, Zie, Fee, toe, roe, loe, coe, foe, boe, voe, Ioe, Toe, _oe, $oe, Moe, zoe, Voe, qoe, Xoe, jte, nie, Joe, ele, nle, rle, ile, lle, ple, dle, mle, ble, xle, wle, Ile, Tle, Ele, Ale, $le, tie, Lee, Mle, Lle, Wle, Ule, jle, Yle, zee, Jle, eue, aue, wie]; for (let e of rue) id(e); var Qe; (function (e) { e[e.float32 = 0] = "float32", e[e.int32 = 1] = "int32", e[e.bool = 2] = "bool", e[e.string = 3] = "string", e[e.complex64 = 4] = "complex64" })(Qe || (Qe = {})); var Oc; (function (e) { e[e.linear = 0] = "linear", e[e.relu = 1] = "relu", e[e.relu6 = 2] = "relu6", e[e.prelu = 3] = "prelu", e[e.leakyrelu = 4] = "leakyrelu", e[e.sigmoid = 5] = "sigmoid", e[e.elu = 6] = "elu" })(Oc || (Oc = {})); var EF; function sue(e) { EF = e.wasm.cwrap(oi, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]) } function iue(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s, bias: i, preluActivationWeights: o } = t; if (r.dtype !== "float32" || s.dtype !== "float32") throw new Error("_FusedMatMul for non non-float32 tensors not yet supported."); let { transposeA: l, transposeB: u, activation: p, leakyreluAlpha: d } = a, c = n.dataIdMap.get(r.dataId).id, h = n.dataIdMap.get(s.dataId).id, m = 0; if (i != null) { let _ = n.dataIdMap.get(i.dataId); if (_.shape.length !== 1) throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${_.shape.length}.`); m = _.id } let f = o == null ? 0 : n.dataIdMap.get(o.dataId).id, g = Oc[p]; if (g == null) throw new Error(`${p} activation not yet supported for FusedConv2D in the wasm backend.`); let b = l ? r.shape[2] : r.shape[1], y = u ? s.shape[1] : s.shape[2], x = cp.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)), v = n.makeOutput([...x, b, y], r.dtype), I = n.dataIdMap.get(v.dataId).id, N = new Uint8Array(new Int32Array(r.shape).buffer), C = new Uint8Array(new Int32Array(s.shape).buffer); return EF(c, N, r.shape.length, h, C, s.shape.length, l, u, g, m, f, d || 0, I), v } var oue = { kernelName: oi, backendName: "wasm", setupFunc: sue, kernelFunc: iue }; function Xe(e, t) { let n; function a(s) { n = s.wasm.cwrap(e, null, ["number", "number", "number"]) } function r(s) { let { backend: i, inputs: { x: o } } = s, l = i.dataIdMap.get(o.dataId).id, u = i.makeOutput(o.shape, t || o.dtype), p = i.dataIdMap.get(u.dataId).id; return w.sizeFromShape(u.shape) === 0 || n(l, Qe[o.dtype], p), u } return { kernelName: e, backendName: "wasm", setupFunc: a, kernelFunc: r } } var lue = Xe(uu), uue = Xe(Ci), pue = Xe(Ei); function Ut(e, t, n) { let a; function r(i) { a = i.wasm.cwrap(e, null, ["number", "array", "number", "number", "array", "number", "number", "number"]) } function s(i) { let { backend: o, inputs: l } = i, { a: u, b: p } = l, d = o.dataIdMap.get(u.dataId).id, c = o.dataIdMap.get(p.dataId).id, h = n != null ? n : u.dtype, m = T.assertAndGetBroadcastShape(u.shape, p.shape), f = o.makeOutput(m, h); if (w.sizeFromShape(m) === 0) return f; let g = new Uint8Array(new Int32Array(u.shape).buffer), b = new Uint8Array(new Int32Array(p.shape).buffer), y = o.dataIdMap.get(f.dataId).id; return a(d, g, u.shape.length, c, b, p.shape.length, Qe[u.dtype], y), f } return { kernelName: e, backendName: "wasm", setupFunc: r, kernelFunc: s } } var cue = !0, due = Ut(Is, cue), _F; function hue(e) { _F = e.wasm.cwrap(_i, null, ["array", "number", "number", "number"]) } function mue(e) { let { inputs: t, backend: n } = e, a = n.makeOutput(t[0].shape, t[0].dtype); if (w.sizeFromShape(a.shape) === 0) return a; let r = t.map(o => n.dataIdMap.get(o.dataId).id), s = new Uint8Array(new Int32Array(r).buffer), i = n.dataIdMap.get(a.dataId).id; return _F(s, r.length, Qe[a.dtype], i), a } var fue = { kernelName: _i, backendName: "wasm", setupFunc: hue, kernelFunc: mue }; function ag(e) { let { inputs: { x: t }, backend: n } = e; if (t.dtype === "string") return bn(n.readSync(t.dataId), t.shape, t.dtype); let a = n.makeOutput(t.shape, t.dtype), r = n.typedArrayFromHeap(t); return n.typedArrayFromHeap(a).set(r), a } var gue = { kernelName: no, backendName: "wasm", kernelFunc: ag }, AF; function bue(e) { AF = e.wasm.cwrap(Er, null, ["number", "array", "number", "number", "number", "array", "number"]) } function ws(e) { let { inputs: t, backend: n, attrs: a } = e, [r, s] = xue(t.x.shape, a.perm), i = !0; for (let m = 0; m < s.length; m++)s[m] !== m && (i = !1); let o = yue(t.x.shape, a.perm), l = { dataId: t.x.dataId, shape: r, dtype: t.x.dtype }; if (i) { let m = ag({ inputs: t, backend: n }); return m.shape = o, m } let u = n.makeOutput(o, l.dtype), p = n.dataIdMap.get(l.dataId).id, d = n.dataIdMap.get(u.dataId).id, c = new Uint8Array(new Int32Array(s).buffer), h = new Uint8Array(new Int32Array(l.shape).buffer); return AF(p, h, l.shape.length, Qe[l.dtype], d, c, s.length), u } function yue(e, t) { let n = new Array(e.length); for (let a = 0; a < n.length; a++)n[a] = e[t[a]]; return n } function xue(e, t) { let n = [], a = []; for (let r = 0; r < e.length; ++r)e[r] !== 1 && n.push(e[r]), e[t[r]] !== 1 && a.push(t[r]); for (let r = 0; r < a.length; ++r) { let s = -1; for (let i = 0; i < a.length; ++i)a[i] >= r && (s === -1 || a[s] > a[i]) && (s = i); a[s] = r } return [n, a] } var vue = { kernelName: Er, backendName: "wasm", kernelFunc: ws, setupFunc: bue }; function Os(e, t, n) { let a = e.shape, r = e.shape.length, s = w.parseAxisParam(t, a), i = s, o = T.getAxesPermutation(i, r), l = null, u = !1; if (o != null) { let p = new Array(r); for (let c = 0; c < p.length; c++)p[c] = a[o[c]]; i = T.getInnerMostAxes(i.length, r), l = ws({ inputs: { x: e }, attrs: { perm: o }, backend: n }); let d = n.dataIdMap.get(e.dataId).id; n.dataIdMap.get(l.dataId).id !== d && (u = !0) } return { transposed: l, originalAxes: s, axes: i, inputWasTransposed: u } } var FF; function wue(e) { FF = e.wasm.cwrap(pu, null, ["number, number, number"]) } function kue(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Os(i, r, t); if (c) { let y = t.dataIdMap.get(u.dataId).id; l = u, o = y } let h = l.shape.length; T.assertAxesAreInnerMostDims("all", p, h); let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype); if (w.sizeFromShape(l.shape) !== 0) { let y = t.dataIdMap.get(b.dataId).id; FF(o, g, y) } if (c && t.disposeData(u.dataId), s) { let y = T.expandShapeToKeepDim(b.shape, d); b.shape = y } return b } var Iue = { kernelName: pu, backendName: "wasm", setupFunc: wue, kernelFunc: kue }, $F; function Sue(e) { $F = e.wasm.cwrap(cu, null, ["number, number, number"]) } function Nue(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Os(i, r, t); if (c) { let y = t.dataIdMap.get(u.dataId).id; l = u, o = y } let h = l.shape.length; T.assertAxesAreInnerMostDims("any", p, h); let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype); if (w.sizeFromShape(l.shape) !== 0) { let y = t.dataIdMap.get(b.dataId).id; $F(o, g, y) } if (c && t.disposeData(u.dataId), s) { let y = T.expandShapeToKeepDim(b.shape, d); b.shape = y } return b } var Tue = { kernelName: cu, backendName: "wasm", setupFunc: Sue, kernelFunc: Nue }; function DF(e) { let t; function n(r) { t = r.wasm.cwrap(e, null, ["number", "number", "number", "number", "number"]) } function a(r) { let { backend: s, inputs: i, attrs: o } = r, { axis: l } = o, { x: u } = i, p = s.dataIdMap.get(u.dataId).id, d = p, c = u, { transposed: h, axes: m, inputWasTransposed: f } = Os(u, l, s); if (f) { let I = s.dataIdMap.get(h.dataId).id; I !== p && (c = h, d = I) } let g = c.shape.slice(0, -1), b = s.makeOutput(g, "int32"), y = s.dataIdMap.get(b.dataId).id, x = w.sizeFromShape(b.shape), v = c.shape[m[0]]; return t(d, Qe[c.dtype], x, v, y), f && s.disposeData(h.dataId), b } return { kernelName: e, backendName: "wasm", setupFunc: n, kernelFunc: a } } var Cue = DF(du), Eue = DF(hu), _ue = Xe(Ai), Aue = Xe(Fi), Fue = Xe($i), $ue = Ut(Ri, !1), Due = Xe(Di), RF; function Rue(e) { RF = e.wasm.cwrap(Mi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Mue(e) { let { inputs: t, attrs: n, backend: a } = e, r = t.x, s = a.dataIdMap.get(r.dataId).id, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = n, p = T.computePool2DInfo(r.shape, i, o, 1, l, u), d = p.filterHeight, c = p.filterWidth, h = p.padInfo.top, m = p.padInfo.right, f = p.padInfo.bottom, g = p.padInfo.left, b = p.strideHeight, y = p.strideWidth, x = p.inChannels; if (p.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`); if (p.dilationWidth !== 1 || p.dilationHeight !== 1) throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${p.dilationHeight}, ${p.dilationWidth}].`); let v = a.makeOutput(p.outShape, "float32"), I = a.dataIdMap.get(v.dataId).id; return RF(s, r.shape[0], r.shape[1], r.shape[2], d, c, h, m, f, g, b, y, x, I), v } var Oue = { kernelName: Mi, backendName: "wasm", setupFunc: Rue, kernelFunc: Mue }, MF; function Pue(e) { MF = e.wasm.cwrap("AvgPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Lue(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.makeOutput(p.outShape, r.dtype); return MF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d } var zue = { kernelName: mu, backendName: "wasm", setupFunc: Pue, kernelFunc: Lue }, OF; function Wue(e) { OF = e.wasm.cwrap("AvgPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Bue(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype); return OF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left, p.filterDepth, p.filterHeight, p.filterWidth), d } var Vue = { kernelName: Wc, backendName: "wasm", setupFunc: Wue, kernelFunc: Bue }, PF; function Uue(e) { PF = e.wasm.cwrap("AvgPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Gue(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l } = a, u = T.computePool2DInfo(s.shape, i, o, 1, l), p = n.makeOutput(s.shape, s.dtype); return PF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.effectiveFilterHeight, u.effectiveFilterWidth, u.padInfo.top, u.padInfo.left, u.filterHeight, u.filterWidth), p } var Hue = { kernelName: zc, backendName: "wasm", setupFunc: Uue, kernelFunc: Gue }; function Ln(e) { let { inputs: t, attrs: n } = e, { x: a } = t, { shape: r } = n, s = w.sizeFromShape(a.shape), i = w.inferFromImplicitShape(r, s); return w.assert(s === w.sizeFromShape(i), () => `new shape: ${i}, old shape: ${a.shape}. New shape and old shape must have the same number of elements.`), e.backend.incRef(a.dataId), { dataId: a.dataId, shape: i, dtype: a.dtype } } var que = { kernelName: ju, backendName: "wasm", kernelFunc: Ln }, LF; function jue(e) { LF = e.wasm.cwrap(Oi, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]) } function Kue(e) { let { inputs: t, backend: n, attrs: a } = e, { a: r, b: s } = t, { transposeA: i, transposeB: o } = a; if (r.dtype !== "float32" || s.dtype !== "float32") throw new Error("BatchMatMul for non non-float32 tensors not yet supported."); let l = r.shape.length, u = s.shape.length, p = i ? r.shape[l - 2] : r.shape[l - 1], d = o ? s.shape[u - 1] : s.shape[u - 2], c = i ? r.shape[l - 1] : r.shape[l - 2], h = o ? s.shape[u - 2] : s.shape[u - 1], m = r.shape.slice(0, -2), f = s.shape.slice(0, -2), g = w.sizeFromShape(m), b = w.sizeFromShape(f), y = cp.assertAndGetBroadcastShape(r.shape.slice(0, -2), s.shape.slice(0, -2)).concat([c, h]); w.assert(p === d, () => `Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`); let x = i ? [g, p, c] : [g, c, p], v = o ? [b, h, d] : [b, d, h], I = Ln({ inputs: { x: r }, backend: n, attrs: { shape: x } }), N = Ln({ inputs: { x: s }, backend: n, attrs: { shape: v } }), C = n.dataIdMap.get(I.dataId).id, _ = n.dataIdMap.get(N.dataId).id, F = i ? I.shape[2] : I.shape[1], D = o ? N.shape[1] : N.shape[2], $ = Math.max(g, b), S = n.makeOutput([$, F, D], I.dtype), M = n.dataIdMap.get(S.dataId).id, B = new Uint8Array(new Int32Array(I.shape).buffer), U = new Uint8Array(new Int32Array(N.shape).buffer); return LF(C, B, I.shape.length, _, U, N.shape.length, i, o, M), n.disposeData(I.dataId), n.disposeData(N.dataId), S.shape = y, S } var Xue = { kernelName: Oi, backendName: "wasm", setupFunc: jue, kernelFunc: Kue }; function Ni(e) { let { inputs: { x: t }, attrs: { begin: n, size: a }, backend: r } = e, [s, i] = Kt.parseSliceParams(t, n, a), o = Kt.isSliceContinous(t.shape, s, i), l = r.readSync(t.dataId), u = r.makeOutput(i, t.dtype), p = w.computeStrides(t.shape), d = r.dataIdMap.get(u.dataId); if (o) { let m = Kt.computeFlatOffset(s, p); return t.dtype === "string" ? d.stringBytes = l.slice(m, m + w.sizeFromShape(i)) : r.typedArrayFromHeap(u).set(l.subarray(m, m + w.sizeFromShape(i))), u } if (t.dtype === "string") { let m = Im(l, s, i, t.shape, t.dtype); return d.stringBytes = m, u } let c = r.typedArrayFromHeap(u), h = t.shape.length; if (h === 2) Yue(l, p[0], c, s, i); else if (h === 3) Zue(l, p[0], p[1], c, s, i); else if (h === 4) Jue(l, p[0], p[1], p[2], c, s, i); else { let m = Im(l, s, i, t.shape, t.dtype); c.set(m) } return u } function Yue(e, t, n, a, r) { let s = 0, i = a[0], o = a[1], l = i + r[0]; for (let u = i; u < l; u++) { let p = u * t + o; n.set(e.subarray(p, p + r[1]), s), s += r[1] } } function Zue(e, t, n, a, r, s) { let i = 0, o = r[0], l = r[1], u = r[2], p = o + s[0], d = l + s[1]; for (let c = o; c < p; c++)for (let h = l; h < d; h++) { let m = c * t + h * n + u; a.set(e.subarray(m, m + s[2]), i), i += s[2] } } function Jue(e, t, n, a, r, s, i) { let o = 0, l = s[0], u = s[1], p = s[2], d = l + i[0], c = u + i[1], h = p + i[2], m = s[3]; for (let f = l; f < d; f++)for (let g = u; g < c; g++)for (let b = p; b < h; b++) { let y = f * t + g * n + b * a + m; r.set(e.subarray(y, y + i[3]), o), o += i[3] } } var Que = { kernelName: ep, backendName: "wasm", kernelFunc: Ni }; function epe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, crops: i } = a, o = s.reduce((b, y) => b * y), l = T.getReshaped(r.shape, s, o), u = T.getPermuted(l.length, s.length), p = T.getReshapedPermuted(r.shape, s, o), d = T.getSliceBeginCoords(i, s.length), c = T.getSliceSize(p, i, s.length), h = Ln({ inputs: { x: r }, backend: n, attrs: { shape: l } }), m = ws({ inputs: { x: h }, backend: n, attrs: { perm: u } }), f = Ln({ inputs: { x: m }, backend: n, attrs: { shape: p } }), g = Ni({ inputs: { x: f }, backend: n, attrs: { begin: d, size: c } }); return n.disposeData(h.dataId), n.disposeData(m.dataId), n.disposeData(f.dataId), g } var tpe = { kernelName: fu, backendName: "wasm", kernelFunc: epe }, zF; function npe(e) { zF = e.wasm.cwrap(gu, null, ["number", "number", "boolean", "number", "number", "number"]) } function ape(e) { let { backend: t, inputs: n, attrs: a } = e, { x: r, weights: s } = n, { size: i } = a, o = s.shape.reduce((d, c) => d * c, 1) !== 0, l = r.shape.length === 1 ? [i] : [r.shape[0], i], u = t.makeOutput(l, s.dtype); function p(d) { return t.dataIdMap.get(d.dataId).id } return zF(p(r), i, o, p(s), Qe[s.dtype], p(u)), u } var rpe = { kernelName: gu, backendName: "wasm", setupFunc: npe, kernelFunc: ape }, spe = !0, ipe = Ut(bu, spe); function ope(e) { let { inputs: t, backend: n } = e, { s0: a, s1: r } = t, s = n.typedArrayFromHeap(a), i = n.typedArrayFromHeap(r), o = T.assertAndGetBroadcastShape(Array.from(s), Array.from(i)); return n.makeOutput([o.length], "int32", void 0, new Int32Array(o)) } var lpe = { kernelName: Bc, backendName: "wasm", kernelFunc: ope }; function Ps(e) { let { inputs: { x: t }, attrs: { dtype: n }, backend: a } = e, r = a.makeOutput(t.shape, n), s = a.typedArrayFromHeap(t); return a.typedArrayFromHeap(r).set(s), r } var upe = { kernelName: Pi, backendName: "wasm", kernelFunc: Ps }, ppe = Xe(Li), WF; function cpe(e) { WF = e.wasm.cwrap(Ss, null, ["number", "number", "number", "number"]) } function dpe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { clipValueMin: s, clipValueMax: i } = a, o = n.dataIdMap.get(r.dataId).id, l = n.makeOutput(r.shape, r.dtype), u = n.dataIdMap.get(l.dataId).id; return WF(o, s, i, u), l } var hpe = { kernelName: Ss, backendName: "wasm", setupFunc: cpe, kernelFunc: dpe }; function BF(e) { let { inputs: t, backend: n } = e, a = w.parseAxisParam(e.attrs.axis, t[0].shape)[0], r = t.map(h => h.shape); T.assertParamsConsistent(r, a); let s = T.computeOutShape(t.map(h => h.shape), a), i = t.filter(h => w.sizeFromShape(h.shape) > 0); if (i.length === 1) return ag({ inputs: { x: i[0] }, backend: n }); let o = n.makeOutput(s, t[0].dtype); if (w.sizeFromShape(s) === 0) return o; if (i[0].dtype === "string") { let h = i.map(x => { let v = [-1, w.sizeFromShape(x.shape.slice(a))]; return Ln({ inputs: { x }, backend: n, attrs: { shape: v } }) }), m = h.map(x => ({ vals: n.readSync(x.dataId), shape: x.shape })); s = T.computeOutShape(h.map(x => x.shape), 1); let f = h[0].shape[0] === 1, g = q1(m, s, t[0].dtype, f), b = T.computeOutShape(i.map(x => x.shape), a); o.shape = b; let y = n.dataIdMap.get(o.dataId); return y.stringBytes = T.fromStringArrayToUint8(g), h.forEach(x => n.disposeData(x.dataId)), o } let l = w.sizeFromShape(i[0].shape.slice(0, a)), u = 0, p = i.map(h => { let m = w.sizeFromShape(h.shape.slice(a)); return u += m, m }), d = i.map(h => n.typedArrayFromHeap(h)), c = n.typedArrayFromHeap(o); for (let h = 0; h < l; h++) { let m = h * u; for (let f = 0; f < d.length; f++) { let g = p[f], b = h * g, y = d[f].subarray(b, b + g); c.set(y, m), m += g } } return o } var mpe = { kernelName: yu, backendName: "wasm", kernelFunc: BF }, VF; function fpe(e) { VF = e.wasm.cwrap(zi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function gpe(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r, filter: s } = t, i = a.dataIdMap.get(r.dataId).id, o = a.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: p, dimRoundingMode: d, dataFormat: c } = n, h = T.convertConv2DDataFormat(c), m = T.computeConv2DInfo(r.shape, s.shape, l, u, p, d, !1, h), f = m.filterHeight, g = m.filterWidth, b = m.padInfo.top, y = m.padInfo.right, x = m.padInfo.bottom, v = m.padInfo.left, I = m.dilationHeight, N = m.dilationWidth, C = m.strideHeight, _ = m.strideWidth, F = m.inChannels, D = m.outChannels, $ = m.padInfo.type === "SAME" ? 1 : 0; if (m.dataFormat !== "channelsLast") throw new Error(`wasm backend Conv2D does not support dataFormat:'${m.dataFormat}'. Please use 'channelsLast'.`); let S = a.makeOutput(m.outShape, "float32"), M = a.dataIdMap.get(S.dataId).id; return VF(i, r.shape[0], r.shape[1], r.shape[2], o, f, g, b, y, x, v, $, I, N, C, _, F, D, M), S } var bpe = { kernelName: zi, backendName: "wasm", setupFunc: fpe, kernelFunc: gpe }, UF; function ype(e) { UF = e.wasm.cwrap(Wi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function xpe(e) { let { backend: t, inputs: n, attrs: a } = e, { dy: r, filter: s } = n, { strides: i, pad: o, dataFormat: l, dimRoundingMode: u, inputShape: p } = a, d = 1, c = T.convertConv2DDataFormat(l), h = T.computeConv2DInfo(p, s.shape, i, d, o, u, !1, c), { batchSize: m, filterHeight: f, filterWidth: g, inChannels: b, inHeight: y, inWidth: x, outChannels: v, outHeight: I, outWidth: N, strideHeight: C, strideWidth: _ } = h, F = f - 1 - h.padInfo.top, D = g - 1 - h.padInfo.left, $ = h.dataFormat === "channelsLast", S = w.computeStrides(h.inShape), M = w.computeStrides(r.shape), [B, U, H] = w.computeStrides(s.shape), j = S[0], K = $ ? S[1] : S[2], Z = $ ? S[2] : 1, J = $ ? 1 : S[1], ee = M[0], ae = $ ? M[1] : M[2], te = $ ? M[2] : 1, se = $ ? 1 : M[1], ie = t.makeOutput(h.inShape, "float32"), xe = t.dataIdMap.get(ie.dataId).id, ue = t.dataIdMap.get(r.dataId).id, ye = t.dataIdMap.get(s.dataId).id; return UF(ue, ye, m, f, g, y, x, b, I, N, v, C, _, F, D, B, U, H, j, K, Z, J, ee, ae, te, se, xe), ie } var vpe = { kernelName: Wi, backendName: "wasm", setupFunc: ype, kernelFunc: xpe }, GF; function wpe(e) { GF = e.wasm.cwrap(Bi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function kpe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a; if (r.dtype !== "float32") throw new Error(`Tensor x must have dtype float32, got ${r.dtype}`); if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`); let u = T.computeConv3DInfo(r.shape, s.shape, i, l, o), p = n.makeOutput(u.outShape, r.dtype); return GF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p } var Ipe = { kernelName: Bi, backendName: "wasm", setupFunc: wpe, kernelFunc: kpe }, HF; function Spe(e) { HF = e.wasm.cwrap(xu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Npe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, dy: s } = t, { strides: i, pad: o, filterShape: l } = a; if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`); if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`); let u = T.computeConv3DInfo(r.shape, l, i, 1, o), p = n.makeOutput(u.filterShape, s.dtype); return HF(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p } var Tpe = { kernelName: xu, backendName: "wasm", setupFunc: Spe, kernelFunc: Npe }, qF; function Cpe(e) { qF = e.wasm.cwrap(vu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Epe(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, filter: s } = t, { pad: i, strides: o, inputShape: l } = a; if (r.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${r.dtype}`); if (s.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`); let u = T.computeConv3DInfo(l, s.shape, o, 1, i), p = n.makeOutput(u.inShape, r.dtype); return qF(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(p.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), p } var _pe = { kernelName: vu, backendName: "wasm", setupFunc: Cpe, kernelFunc: Epe }, Ape = Xe(Vi), Fpe = Xe(Ui), Sv; (function (e) { e[e.bilinear = 0] = "bilinear", e[e.nearest = 1] = "nearest" })(Sv || (Sv = {})); var jF; function $pe(e) { jF = e.wasm.cwrap(ku, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]) } function Dpe(e) { let { backend: t, inputs: n, attrs: a } = e, { method: r, extrapolationValue: s, cropSize: i } = a, { image: o, boxes: l, boxInd: u } = n, p = l.shape[0], [d, c] = i, h = [p, d, c, o.shape[3]], m = t.dataIdMap.get(o.dataId), f; o.dtype !== "float32" && (f = Ps({ backend: t, inputs: { x: o }, attrs: { dtype: "float32" } }), m = t.dataIdMap.get(f.dataId)); let g = m.id, b = t.dataIdMap.get(l.dataId).id, y = t.dataIdMap.get(u.dataId).id, x = t.makeOutput(h, "float32"), v = t.dataIdMap.get(x.dataId).id, I = new Uint8Array(new Int32Array(o.shape).buffer); return jF(g, b, y, p, I, d, c, Sv[r], s, v), f != null && t.disposeData(f.dataId), x } var Rpe = { kernelName: ku, backendName: "wasm", setupFunc: $pe, kernelFunc: Dpe }, KF; function Mpe(e) { KF = e.wasm.cwrap(wu, null, ["number", "number", "number", "number", "number", "number"]) } function Ope(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a, l = r.shape.length; w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumprod does not support ${r.dtype} tensors in the WASM backend`); let u = T.getAxesPermutation([s], l), p = r; u !== null && (p = ws({ inputs: { x: r }, attrs: { perm: u }, backend: n })); let d = T.getInnerMostAxes(1, l)[0]; T.assertAxesAreInnerMostDims("cumprod", [d], l); let c = n.makeOutput(p.shape, p.dtype), h = p.shape[d], m = n.dataIdMap.get(p.dataId).id, f = n.dataIdMap.get(c.dataId).id; KF(m, i ? 1 : 0, o ? 1 : 0, h, f, Qe[r.dtype]); let g = c; if (u !== null) { let b = T.getUndoAxesPermutation(u); g = ws({ inputs: { x: c }, attrs: { perm: b }, backend: n }), n.disposeData(p.dataId), n.disposeData(c.dataId) } return g } var Ppe = { kernelName: wu, backendName: "wasm", setupFunc: Mpe, kernelFunc: Ope }, XF; function Lpe(e) { XF = e.wasm.cwrap(Gi, null, ["number", "number", "number", "number", "number", "number"]) } function zpe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { axis: s, exclusive: i, reverse: o } = a, l = r.shape.length; w.assert(r.dtype === "float32" || r.dtype === "int32", () => `cumsum does not support ${r.dtype} tensors in the WASM backend`); let u = T.getAxesPermutation([s], l), p = r; u !== null && (p = ws({ inputs: { x: r }, attrs: { perm: u }, backend: n })); let d = T.getInnerMostAxes(1, l)[0]; T.assertAxesAreInnerMostDims("cumsum", [d], l); let c = n.makeOutput(p.shape, p.dtype), h = p.shape[d], m = n.dataIdMap.get(p.dataId).id, f = n.dataIdMap.get(c.dataId).id; XF(m, i ? 1 : 0, o ? 1 : 0, h, f, Qe[r.dtype]); let g = c; if (u !== null) { let b = T.getUndoAxesPermutation(u); g = ws({ inputs: { x: c }, attrs: { perm: b }, backend: n }), n.disposeData(p.dataId), n.disposeData(c.dataId) } return g } var Wpe = { kernelName: Gi, backendName: "wasm", setupFunc: Lpe, kernelFunc: zpe }, YF; function Bpe(e) { YF = e.wasm.cwrap("DenseBincount", null, ["number", "array", "number", "number", "boolean", "number", "number", "boolean", "number"]) } function Vpe(e) { let { backend: t, inputs: n, attrs: a } = e, { x: r, weights: s } = n, { size: i, binaryOutput: o } = a, l = s.shape.reduce((c, h) => c * h, 1) !== 0, u = r.shape.length === 1 ? [i] : [r.shape[0], i], p = t.makeOutput(u, s.dtype); function d(c) { return t.dataIdMap.get(c.dataId).id } return YF(d(r), new Uint8Array(new Int32Array(r.shape).buffer), r.shape.length, i, l, d(s), Qe[s.dtype], o, d(p)), p } var Upe = { kernelName: Uc, backendName: "wasm", setupFunc: Bpe, kernelFunc: Vpe }, ZF; function Gpe(e) { ZF = e.wasm.cwrap(Iu, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]) } function Hpe(e) { let { backend: t, inputs: n, attrs: a } = e, { x: r } = n, { blockSize: s, dataFormat: i } = a, o = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], u = i === "NHWC" ? r.shape[2] : r.shape[3], p = i === "NHWC" ? r.shape[3] : r.shape[1], d = l * s, c = u * s, h = p / (s * s), m = i === "NHWC" ? [o, d, c, h] : [o, h, d, c], f = t.makeOutput(m, "float32"), g = t.dataIdMap.get(r.dataId).id, b = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), y = new Uint8Array(new Int32Array(m).buffer), x = new Uint8Array(new Int32Array(w.computeStrides(m)).buffer), v = t.dataIdMap.get(f.dataId).id; return ZF(g, s, i === "NHWC" ? 1 : 0, b, r.shape.length - 1, y, x, m.length, v), f } var qpe = { kernelName: Iu, backendName: "wasm", setupFunc: Gpe, kernelFunc: Hpe }, JF; function jpe(e) { JF = e.wasm.cwrap(Hi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Kpe(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r, filter: s } = t, i = a.dataIdMap.get(r.dataId).id, o = a.dataIdMap.get(s.dataId).id, { strides: l, dilations: u, pad: p, dimRoundingMode: d } = n, c = u == null ? [1, 1] : u, h = T.computeConv2DInfo(r.shape, s.shape, l, c, p, d, !0), m = h.filterHeight, f = h.filterWidth, g = h.padInfo.top, b = h.padInfo.right, y = h.padInfo.bottom, x = h.padInfo.left, v = h.dilationHeight, I = h.dilationWidth, N = h.strideHeight, C = h.strideWidth, _ = h.inChannels, F = h.outChannels, D = h.padInfo.type === "SAME" ? 1 : 0; if (h.dataFormat !== "channelsLast") throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${h.dataFormat}'. Please use 'channelsLast'.`); let $ = a.makeOutput(h.outShape, "float32"), S = a.dataIdMap.get($.dataId).id; return JF(i, r.shape[0], r.shape[1], r.shape[2], o, m, f, g, b, y, x, D, v, I, N, C, _, F, S), $ } var Xpe = { kernelName: Hi, backendName: "wasm", setupFunc: jpe, kernelFunc: Kpe }, QF; function Ype(e) { QF = e.wasm.cwrap("Diag", null, ["number", "number", "number", "number"]) } function Zpe(e) { let { inputs: t, backend: n } = e, { x: a } = t, r = w.sizeFromShape(a.shape), s = n.makeOutput([...a.shape, ...a.shape], a.dtype); return QF(n.dataIdMap.get(a.dataId).id, Qe[a.dtype], r, n.dataIdMap.get(s.dataId).id), s } var Jpe = { kernelName: Gc, backendName: "wasm", setupFunc: Ype, kernelFunc: Zpe }, e$; function Qpe(e) { e$ = e.wasm.cwrap(qi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function ece(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s } = t, { strides: i, pad: o, dilations: l } = a; if (r.dtype !== s.dtype) throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${r.dtype} and ${s.dtype}`); let u = T.computeDilation2DInfo(r.shape, s.shape, i, o, "NHWC", l), p = n.makeOutput(u.outShape, r.dtype); return e$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(p.dataId).id, Qe[r.dtype], u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.filterHeight, u.filterWidth, u.padInfo.top, u.padInfo.left), p } var tce = { kernelName: qi, backendName: "wasm", setupFunc: Qpe, kernelFunc: ece }, t$; function nce(e) { t$ = e.wasm.cwrap(jl, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function ace(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, dy: i } = t, { strides: o, pad: l, dilations: u } = a; if (r.dtype !== s.dtype || r.dtype !== i.dtype) throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${s.dtype}, and ${i.dtype}`); let p = T.computeDilation2DInfo(r.shape, s.shape, o, l, "NHWC", u), d = n.makeOutput(s.shape, s.dtype); return t$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, Qe[r.dtype], p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.filterHeight, p.filterWidth, p.padInfo.top, p.padInfo.left), d } var rce = { kernelName: jl, backendName: "wasm", setupFunc: nce, kernelFunc: ace }, n$; function sce(e) { n$ = e.wasm.cwrap(ql, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function ice(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, filter: s, dy: i } = t, { strides: o, pad: l, dilations: u } = a; if (r.dtype !== s.dtype || r.dtype !== i.dtype) throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${s.dtype}, and ${i.dtype}`); let p = T.computeDilation2DInfo(r.shape, s.shape, o, l, "NHWC", u), d = n.makeOutput(r.shape, r.dtype); return n$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, Qe[r.dtype], p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.filterHeight, p.filterWidth, p.padInfo.top, p.padInfo.left), d } var oce = { kernelName: ql, backendName: "wasm", setupFunc: sce, kernelFunc: ice }, lce = Xe(Ki), a$; function uce(e) { a$ = e.wasm.cwrap(Su, null, ["number", "number", "number"]) } function pce(e) { let { inputs: t, backend: n } = e, { dy: a, y: r } = t, s = n.makeOutput(r.shape, "float32"), i = o => n.dataIdMap.get(o.dataId).id; return a$(i(r), i(a), i(s)), s } var cce = { kernelName: Su, backendName: "wasm", setupFunc: uce, kernelFunc: pce }, dce = !1, hce = Ut(Nu, dce, "bool"), mce = Xe(Xi), fce = Xe(Yi, "float32"); function Nv(e) { let { inputs: t, attrs: n, backend: a } = e, { input: r } = t, { dim: s } = n, i = r.shape.length, o = r.shape.slice(), l = s; return s < 0 && (w.assert(-(i + 1) <= s, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + s + 1), o.splice(l, 0, 1), Ln({ inputs: { x: r }, backend: a, attrs: { shape: o } }) } var gce = { kernelName: Tu, backendName: "wasm", kernelFunc: Nv }, bce = Xe(Zi, "float32"); function r$(e) { let { attrs: { shape: t, value: n }, backend: a } = e, { attrs: { dtype: r } } = e; r = r || w.inferDtype(n); let s = a.makeOutput(t, r); return a.typedArrayFromHeap(s).fill(n), s } var yce = { kernelName: Hc, backendName: "wasm", kernelFunc: r$ }, s$; function xce(e) { s$ = e.wasm.cwrap(Cu, null, ["number", "number", "number", "number", "number", "number"]) } function vce(e) { let { inputs: t, backend: n } = e, { image: a } = t, r = n.makeOutput(a.shape, a.dtype), s = n.dataIdMap.get(a.dataId).id, i = n.dataIdMap.get(r.dataId).id, [o, l, u, p] = a.shape; return s$(s, o, l, u, p, i), r } var wce = { kernelName: Cu, backendName: "wasm", kernelFunc: vce, setupFunc: xce }, kce = Xe(Ji), Ice = !1, Sce = Ut(Qi, Ice), i$; function Nce(e) { i$ = e.wasm.cwrap(eo, null, ["number", "number", "number", "number", "number", "number", "number"]) } function Tce(e) { let { backend: t, inputs: n, attrs: a } = e, { varianceEpsilon: r } = a, { x: s, mean: i, variance: o, offset: l, scale: u } = n, p = t.dataIdMap.get(s.dataId).id, d = t.dataIdMap.get(i.dataId).id, c = t.dataIdMap.get(o.dataId).id, h = l != null ? t.dataIdMap.get(l.dataId).id : 0, m = u != null ? t.dataIdMap.get(u.dataId).id : 0, f = t.makeOutput(s.shape, s.dtype); if (w.sizeFromShape(s.shape) === 0) return f; let g = t.dataIdMap.get(f.dataId).id; return i$(p, d, c, h, m, r, g), f } var Cce = { kernelName: eo, backendName: "wasm", setupFunc: Nce, kernelFunc: Tce }, o$; function Ece(e) { o$ = e.wasm.cwrap(li, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function _ce(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dataFormat: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = n, f = T.computeConv2DInfo(r.shape, s.shape, l, p, u, c), g = Oc[h]; if (g == null) throw new Error(`${h} activation not yet supported for FusedConv2D in the wasm backend.`); let b = a.dataIdMap.get(r.dataId).id, y = a.dataIdMap.get(s.dataId).id, x = f.outChannels, v = 0; if (i != null) { let te = a.dataIdMap.get(i.dataId); if (te.shape.length !== 1) throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${te.shape.length}.`); if (te.shape[0] !== x) throw new Error(`FusedConv2D bias shape (${te.shape}) does not match the number of output channels (${x})`); v = te.id } let I = f.filterHeight, N = f.filterWidth, C = f.padInfo.top, _ = f.padInfo.right, F = f.padInfo.bottom, D = f.padInfo.left, $ = f.dilationHeight, S = f.dilationWidth, M = f.strideHeight, B = f.strideWidth, U = f.inChannels, H = f.padInfo.type === "SAME" ? 1 : 0, j = f.batchSize, K = f.inHeight, Z = f.inWidth; if (d !== "NHWC") throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`); let J = a.makeOutput(f.outShape, "float32"), ee = a.dataIdMap.get(J.dataId).id, ae = o == null ? 0 : a.dataIdMap.get(o.dataId).id; return o$(b, j, K, Z, y, I, N, v, C, _, F, D, H, $, S, M, B, U, x, g, ae, m || 0, ee), J } var Ace = { kernelName: li, backendName: "wasm", setupFunc: Ece, kernelFunc: _ce }, l$; function Fce(e) { l$ = e.wasm.cwrap(ui, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function $ce(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r, filter: s, bias: i, preluActivationWeights: o } = t, { strides: l, pad: u, dilations: p, dataFormat: d, dimRoundingMode: c, activation: h, leakyreluAlpha: m } = n, f = T.computeConv2DInfo(r.shape, s.shape, l, p, u, c, !0), g = Oc[h]; if (g == null) throw new Error(`${h} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`); let b = a.dataIdMap.get(r.dataId).id, y = a.dataIdMap.get(s.dataId).id, x = f.outChannels, v = 0; if (i != null) { let te = a.dataIdMap.get(i.dataId); if (te.shape.length !== 1) throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${te.shape.length}.`); if (te.shape[0] !== x) throw new Error(`FusedDepthwiseConv2D bias shape (${te.shape}) does not match the number of output channels (${x})`); v = te.id } let I = f.filterHeight, N = f.filterWidth, C = f.padInfo.top, _ = f.padInfo.right, F = f.padInfo.bottom, D = f.padInfo.left, $ = f.dilationHeight, S = f.dilationWidth, M = f.strideHeight, B = f.strideWidth, U = f.inChannels, H = f.padInfo.type === "SAME" ? 1 : 0, j = f.batchSize, K = f.inHeight, Z = f.inWidth; if (d !== "NHWC") throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${d}'. Please use 'NHWC'.`); let J = a.makeOutput(f.outShape, "float32"), ee = a.dataIdMap.get(J.dataId).id, ae = o == null ? 0 : a.dataIdMap.get(o.dataId).id; return l$(b, j, K, Z, y, I, N, v, C, _, F, D, H, $, S, M, B, U, x, g, ae, m || 0, ee), J } var Dce = { kernelName: ui, backendName: "wasm", setupFunc: Fce, kernelFunc: $ce }, u$; function Rce(e) { u$ = e.wasm.cwrap(_u, null, ["number", "number", "number", "number", "number", "number", "array", "number"]) } function Mce(e) { let { backend: t, inputs: n } = e, { params: a, indices: r } = n, [s, i, o, l] = r0.prepareAndValidate(a, r), u = t.makeOutput(s, a.dtype); if (i === 0) return u; let p = r.shape, d = p[p.length - 1], c = t.dataIdMap.get(a.dataId).id, h = t.dataIdMap.get(r.dataId).id, m = new Uint8Array(new Int32Array(l).buffer), f = t.dataIdMap.get(u.dataId).id; return u$(c, Qe[a.dtype], h, i, d, o, m, f), u } var Oce = { kernelName: _u, backendName: "wasm", setupFunc: Rce, kernelFunc: Mce }, p$; function Pce(e) { p$ = e.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]) } function Lce(e) { let { backend: t, inputs: n, attrs: a } = e, { x: r, indices: s } = n, { axis: i, batchDims: o } = a, l = w.parseAxisParam(i, r.shape)[0], u = t.readSync(s.dataId), p = r.shape[l]; for (let C = 0; C < u.length; ++C) { let _ = u[C]; w.assert(_ <= p - 1 && _ >= 0, () => `GatherV2: the index value ${_} is not in [0, ${p - 1}]`) } let d = T.segment_util.collectGatherOpShapeInfo(r, s, l, o), c = Ln({ inputs: { x: r }, attrs: { shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize] }, backend: t }), h = w.sizeFromShape(s.shape), m = Ln({ inputs: { x: s }, attrs: { shape: [d.batchSize, h / d.batchSize] }, backend: t }), f = [d.batchSize, d.outerSize, h / d.batchSize, d.sliceSize], g = t.makeOutput(f, r.dtype); if (w.sizeFromShape(r.shape) === 0) return g; let b = c.shape.length - 1, y = t.dataIdMap.get(c.dataId).id, x = t.dataIdMap.get(m.dataId).id, v = t.dataIdMap.get(g.dataId).id, I = new Uint8Array(new Int32Array(w.computeStrides(c.shape)).buffer), N = new Uint8Array(new Int32Array(w.computeStrides(f)).buffer); return p$(y, Qe[r.dtype], I, b, x, d.batchSize, N, v), t.disposeData(c.dataId), t.disposeData(m.dataId), g.shape = d.outputShape, g } var zce = { kernelName: Eu, backendName: "wasm", setupFunc: Pce, kernelFunc: Lce }, Wce = !1, Bce = Ut(Au, Wce, "bool"), Vce = !1, Uce = Ut(to, Vce, "bool"), Gce = Xe(ao, "bool"), Hce = Xe(ro, "bool"), qce = Xe(so, "bool"), c$; function jce(e) { c$ = e.wasm.cwrap(io, null, ["number", "number", "number", "number"]) } function Kce(e) { let { inputs: { x: t }, attrs: { alpha: n }, backend: a } = e, r = a.dataIdMap.get(t.dataId).id, s = a.makeOutput(t.shape, "float32"); if (w.sizeFromShape(t.shape) !== 0) { let i = a.dataIdMap.get(s.dataId).id; c$(r, Qe[t.dtype], n, i) } return s } var Xce = { kernelName: io, backendName: "wasm", setupFunc: jce, kernelFunc: Kce }, Yce = !1, Zce = Ut(Fu, Yce, "bool"), Jce = !1, Qce = Ut($u, Jce, "bool"), d$; function ede(e) { d$ = e.wasm.cwrap(Du, null, ["number", "number", "number", "number"]) } function tde(e) { let { attrs: t, backend: n } = e, { start: a, stop: r, num: s } = t, i = Math.floor(s), o = n.makeOutput([i], "float32"); return d$(n.dataIdMap.get(o.dataId).id, a, r, i), o } var nde = { kernelName: Du, backendName: "wasm", setupFunc: ede, kernelFunc: tde }, ade = Xe(oo), rde = Xe(lo), sde = !1, ide = Ut(Ru, sde, "bool"), ode = Xe(Mu), lde = !1, ude = Ut(Ou, lde, "bool"), pde = !1, cde = Ut(mN, pde, "bool"), h$; function dde(e) { h$ = e.wasm.cwrap(uo, null, ["number", "number", "number", "number", "number", "number", "number"]) } function hde(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { depthRadius: s, bias: i, alpha: o, beta: l } = a; if (r.dtype !== "float32") throw new Error("LRN error: x must have dtype float32"); let u = n.makeOutput(r.shape, r.dtype); return h$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(u.dataId).id, r.shape[3], s, i, o, l), u } var mde = { kernelName: uo, backendName: "wasm", setupFunc: dde, kernelFunc: hde }, m$; function fde(e) { m$ = e.wasm.cwrap(Pu, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function gde(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r, y: s, dy: i } = t, { depthRadius: o, bias: l, alpha: u, beta: p } = a; if (r.dtype !== "float32" || s.dtype !== "float32" || i.dtype !== "float32") throw new Error("LRNGrad error: x, y, and dy must have dtype float32"); let d = n.makeOutput(r.shape, r.dtype); return m$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(i.dataId).id, n.dataIdMap.get(d.dataId).id, i.shape[3], o, l, u, p), d } var bde = { kernelName: Pu, backendName: "wasm", setupFunc: fde, kernelFunc: gde }, f$; function yde(e) { f$ = e.wasm.cwrap(po, null, ["number", "number", "number", "number"]) } function xde(e) { let { backend: t, inputs: n, attrs: a } = e, { reductionIndices: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = i, { transposed: u, axes: p, originalAxes: d, inputWasTransposed: c } = Os(i, r, t); if (c) { let y = t.dataIdMap.get(u.dataId).id; l = u, o = y } let h = l.shape.length; T.assertAxesAreInnerMostDims("max", p, h); let [m, f] = T.computeOutAndReduceShapes(l.shape, p), g = w.sizeFromShape(f), b = t.makeOutput(m, i.dtype); if (w.sizeFromShape(l.shape) !== 0) { let y = t.dataIdMap.get(b.dataId).id; f$(o, Qe[i.dtype], g, y) } if (c && t.disposeData(u.dataId), s) { let y = T.expandShapeToKeepDim(b.shape, d); b.shape = y } return b } var vde = { kernelName: po, backendName: "wasm", setupFunc: yde, kernelFunc: xde }, wde = !1, kde = Ut(co, wde), g$; function Ide(e) { g$ = e.wasm.cwrap(ho, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Sde(e) { let { inputs: t, attrs: n, backend: a } = e, r = t.x, s = a.dataIdMap.get(r.dataId).id; w.assert(r.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`); let { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = n, p = T.computePool2DInfo(r.shape, i, o, 1, l, u), d = p.filterHeight, c = p.filterWidth, h = p.padInfo.top, m = p.padInfo.right, f = p.padInfo.bottom, g = p.padInfo.left, b = p.dilationHeight, y = p.dilationWidth, x = p.strideHeight, v = p.strideWidth, I = p.inChannels, N = p.outChannels; if (p.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'${p.dataFormat}'. Please use 'channelsLast'.`); let C = a.makeOutput(p.outShape, "float32"), _ = a.dataIdMap.get(C.dataId).id; return g$(s, r.shape[0], r.shape[1], r.shape[2], d, c, h, m, f, g, b, y, x, v, I, N, _), C } var Nde = { kernelName: ho, backendName: "wasm", setupFunc: Ide, kernelFunc: Sde }, b$; function Tde(e) { b$ = e.wasm.cwrap("MaxPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Cde(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, dimRoundingMode: l, dataFormat: u } = a, p = T.computePool3DInfo(r.shape, s, i, 1, o, l, u), d = n.makeOutput(p.outShape, r.dtype); return b$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d } var Ede = { kernelName: Lu, backendName: "wasm", setupFunc: Tde, kernelFunc: Cde }, y$; function _de(e) { y$ = e.wasm.cwrap("MaxPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Ade(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool3DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype); return y$(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inDepth, p.inHeight, p.inWidth, p.outDepth, p.outHeight, p.outWidth, p.strideDepth, p.strideHeight, p.strideWidth, p.dilationDepth, p.dilationHeight, p.dilationWidth, p.effectiveFilterDepth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.front, p.padInfo.top, p.padInfo.left), d } var Fde = { kernelName: jc, backendName: "wasm", setupFunc: _de, kernelFunc: Ade }, x$; function $de(e) { x$ = e.wasm.cwrap("MaxPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Dde(e) { let { inputs: t, backend: n, attrs: a } = e, { dy: r, input: s } = t, { filterSize: i, strides: o, pad: l, dimRoundingMode: u } = a, p = T.computePool2DInfo(s.shape, i, o, 1, l, u), d = n.makeOutput(s.shape, s.dtype); return x$(n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.top, p.padInfo.left), d } var Rde = { kernelName: qc, backendName: "wasm", setupFunc: $de, kernelFunc: Dde }, v$; function Mde(e) { v$ = e.wasm.cwrap("MaxPoolWithArgmax", null, ["number", "number", "number", "number", "boolean", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Ode(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { filterSize: s, strides: i, pad: o, includeBatchInIndex: l } = a; w.assert(r.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`); let u = [1, 1]; w.assert(T.eitherStridesOrDilationsAreOne(i, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`); let p = T.computePool2DInfo(r.shape, s, i, [1, 1], o), d = n.makeOutput(p.outShape, r.dtype), c = n.makeOutput(p.outShape, "int32"); return v$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(d.dataId).id, n.dataIdMap.get(c.dataId).id, Qe[r.dtype], l, p.batchSize, p.inChannels, p.inHeight, p.inWidth, p.outHeight, p.outWidth, p.strideHeight, p.strideWidth, p.dilationHeight, p.dilationWidth, p.effectiveFilterHeight, p.effectiveFilterWidth, p.padInfo.top, p.padInfo.left), [d, c] } var Pde = { kernelName: Kc, backendName: "wasm", setupFunc: Mde, kernelFunc: Ode }, w$; function Lde(e) { w$ = e.wasm.cwrap(mo, null, ["number, number, number"]) } function zde(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Os(i, r, t), m = d; if (h) { let v = t.dataIdMap.get(p.dataId).id; v !== o && (u = p, l = v, m = T.getInnerMostAxes(m.length, u.shape.length)) } T.assertAxesAreInnerMostDims("mean", m, u.shape.length); let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = u; u.dtype !== "float32" && (y = Ps({ backend: t, inputs: { x: u }, attrs: { dtype: "float32" } }), l = t.dataIdMap.get(y.dataId).id); let x = t.makeOutput(f, "float32"); if (w.sizeFromShape(u.shape) !== 0) { let v = t.dataIdMap.get(x.dataId).id; w$(l, b, v) } if (h && t.disposeData(p.dataId), s) { let v = T.expandShapeToKeepDim(x.shape, c); x.shape = v } return u.dtype !== "float32" && t.disposeData(y.dataId), x } var Wde = { kernelName: mo, backendName: "wasm", setupFunc: Lde, kernelFunc: zde }, k$; function Bde(e) { k$ = e.wasm.cwrap(fo, null, ["number", "number", "number", "number"]) } function Vde(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Os(i, r, t); if (h) { let x = t.dataIdMap.get(p.dataId).id; x !== o && (u = p, l = x) } let m = u.shape.length; T.assertAxesAreInnerMostDims("min", d, m); let [f, g] = T.computeOutAndReduceShapes(u.shape, d), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype); if (w.sizeFromShape(u.shape) !== 0) { let x = t.dataIdMap.get(y.dataId).id; k$(l, Qe[i.dtype], b, x) } if (h && t.disposeData(p.dataId), s) { let x = T.expandShapeToKeepDim(y.shape, c); y.shape = x } return y } var Ude = { kernelName: fo, backendName: "wasm", setupFunc: Bde, kernelFunc: Vde }, Gde = !1, Hde = Ut(go, Gde), Tv; (function (e) { e[e.reflect = 0] = "reflect", e[e.symmetric = 1] = "symmetric" })(Tv || (Tv = {})); var I$; function qde(e) { I$ = e.wasm.cwrap(bo, null, ["number", "array", "number", "number", "array", "array", "number", "number"]) } function jde(e) { let { inputs: { x: t }, backend: n, attrs: { paddings: a, mode: r } } = e, s = a.map((m, f) => m[0] + t.shape[f] + m[1]), i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(s, t.dtype), l = n.dataIdMap.get(o.dataId).id, u = new Uint8Array(new Int32Array(t.shape).buffer), p = a.map(m => m[0]), d = a.map(m => m[1]), c = new Uint8Array(new Int32Array(p).buffer), h = new Uint8Array(new Int32Array(d).buffer); return I$(i, u, t.shape.length, Qe[t.dtype], c, h, Tv[r], l), o } var Kde = { kernelName: bo, backendName: "wasm", kernelFunc: jde, setupFunc: qde }, S$; function Xde(e) { S$ = e.wasm.cwrap(Bo, null, ["number", "number", "number", "number"]) } function N$(e) { let { backend: t, inputs: { logits: n }, attrs: { dim: a } } = e, r = t.dataIdMap.get(n.dataId).id, s = t.makeOutput(n.shape, n.dtype), i = t.dataIdMap.get(s.dataId).id, o = n.shape[a], l = w.sizeFromShape(n.shape) / o; return w.sizeFromShape(s.shape) === 0 || S$(r, i, o, l), s } var Yde = { kernelName: Bo, backendName: "wasm", setupFunc: Xde, kernelFunc: N$ }, T$; function Zde(e) { T$ = e.wasm.cwrap(zu, null, ["number", "number", "number", "number", "number", "number"]) } function Jde(e) { let { inputs: t, backend: n, attrs: a } = e, { logits: r } = t, { numSamples: s, seed: i, normalized: o } = a; if (r.dtype !== "float32") throw new Error(`Tensor logits must have dtype float32, got ${r.dtype}`); let l = o ? r : N$({ inputs: { logits: r }, backend: n, attrs: { dim: r.shape.length - 1 } }), [u, p] = l.shape, d = n.makeOutput([u, s], "int32"); return T$(n.dataIdMap.get(l.dataId).id, u, p, s, i, n.dataIdMap.get(d.dataId).id), o || n.disposeData(l.dataId), d } var Qde = { kernelName: zu, backendName: "wasm", setupFunc: Zde, kernelFunc: Jde }, ehe = Ut(yo, !0), the = !0, nhe = Ut(xo, the), ahe = Xe(Wu); function wk(e, t) { let n = new Int32Array(e.wasm.HEAPU8.buffer, t, 4), a = n[0], r = n[1], s = n[2], i = n[3]; return e.wasm._free(t), { pSelectedIndices: a, selectedSize: r, pSelectedScores: s, pValidOutputs: i } } var C$; function rhe(e) { C$ = e.wasm.cwrap(Vu, "number", ["number", "number", "number", "number", "number"]) } function she(e) { let { backend: t, inputs: n, attrs: a } = e, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i } = a, { boxes: o, scores: l } = n, u = t.dataIdMap.get(o.dataId).id, p = t.dataIdMap.get(l.dataId).id, d = C$(u, p, s, r, i), { pSelectedIndices: c, selectedSize: h, pSelectedScores: m, pValidOutputs: f } = wk(t, d); return t.wasm._free(m), t.wasm._free(f), t.makeOutput([h], "int32", c) } var ihe = { kernelName: Vu, backendName: "wasm", setupFunc: rhe, kernelFunc: she }, E$; function ohe(e) { E$ = e.wasm.cwrap(Uu, "number", ["number", "number", "number", "number", "number", "bool"]) } function lhe(e) { let { backend: t, inputs: n, attrs: a } = e, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i, padToMaxOutputSize: o } = a, { boxes: l, scores: u } = n, p = t.dataIdMap.get(l.dataId).id, d = t.dataIdMap.get(u.dataId).id, c = E$(p, d, s, r, i, o), { pSelectedIndices: h, selectedSize: m, pSelectedScores: f, pValidOutputs: g } = wk(t, c); t.wasm._free(f); let b = t.makeOutput([m], "int32", h), y = t.makeOutput([], "int32", g); return [b, y] } var uhe = { kernelName: Uu, backendName: "wasm", setupFunc: ohe, kernelFunc: lhe }, _$; function phe(e) { _$ = e.wasm.cwrap(Gu, "number", ["number", "number", "number", "number", "number", "number"]) } function che(e) { let { backend: t, inputs: n, attrs: a } = e, { iouThreshold: r, maxOutputSize: s, scoreThreshold: i, softNmsSigma: o } = a, { boxes: l, scores: u } = n, p = t.dataIdMap.get(l.dataId).id, d = t.dataIdMap.get(u.dataId).id, c = _$(p, d, s, r, i, o), { pSelectedIndices: h, selectedSize: m, pSelectedScores: f, pValidOutputs: g } = wk(t, c); t.wasm._free(g); let b = t.makeOutput([m], "int32", h), y = t.makeOutput([m], "float32", f); return [b, y] } var dhe = { kernelName: Gu, backendName: "wasm", setupFunc: phe, kernelFunc: che }, hhe = !1, mhe = Ut(Bu, hhe, "bool"), A$; function fhe(e) { A$ = e.wasm.cwrap(vo, null, ["number", "number", "number", "number", "number"]) } function ghe(e) { let { inputs: t, backend: n, attrs: a } = e, { indices: r } = t, { dtype: s, depth: i, onValue: o, offValue: l } = a, u = n.makeOutput([...r.shape, i], s), p = n.dataIdMap.get(u.dataId).id, d = n.dataIdMap.get(r.dataId).id; return A$(d, i, o, l, p), u } var bhe = { kernelName: vo, backendName: "wasm", setupFunc: fhe, kernelFunc: ghe }; function yhe(e) { let { inputs: { x: t }, backend: n } = e, a = n.makeOutput(t.shape, t.dtype); return n.typedArrayFromHeap(a).fill(1), a } var xhe = { kernelName: Hu, backendName: "wasm", kernelFunc: yhe }; function vhe(e) { let { inputs: t, backend: n, attrs: a } = e, { axis: r } = a; if (t.length === 1) return Nv({ inputs: { input: t[0] }, backend: n, attrs: { dim: r } }); let s = t[0].shape, i = t[0].dtype; t.forEach(p => { w.assertShapesMatch(s, p.shape, "All tensors passed to stack must have matching shapes"), w.assert(i === p.dtype, () => "All tensors passed to stack must have matching dtypes") }); let o = [], l = t.map(p => { let d = Nv({ inputs: { input: p }, backend: n, attrs: { dim: r } }); return o.push(d), d }), u = BF({ inputs: l, backend: n, attrs: { axis: r } }); return o.forEach(p => n.disposeData(p.dataId)), u } var whe = { kernelName: qu, backendName: "wasm", kernelFunc: vhe }, F$; function khe(e) { F$ = e.wasm.cwrap(wo, null, ["number", "array", "number", "number", "array", "array", "number", "number"]) } function Ihe(e) { let { inputs: { x: t }, backend: n, attrs: { paddings: a, constantValue: r } } = e, s = a.map((m, f) => m[0] + t.shape[f] + m[1]); if (w.sizeFromShape(t.shape) === 0) return r$({ backend: n, attrs: { shape: s, value: r, dtype: t.dtype } }); let i = n.dataIdMap.get(t.dataId).id, o = n.makeOutput(s, t.dtype), l = n.dataIdMap.get(o.dataId).id, u = new Uint8Array(new Int32Array(t.shape).buffer), p = a.map(m => m[0]), d = a.map(m => m[1]), c = new Uint8Array(new Int32Array(p).buffer), h = new Uint8Array(new Int32Array(d).buffer); return F$(i, u, t.shape.length, Qe[t.dtype], c, h, r, l), o } var $$ = { kernelName: wo, backendName: "wasm", kernelFunc: Ihe, setupFunc: khe }, She = !1, Nhe = Ut(ko, She), D$; function The(e) { D$ = e.wasm.cwrap(Io, null, ["number", "number", "number"]) } function Che(e) { let { inputs: t, backend: n } = e, { x: a, alpha: r } = t, s = n.dataIdMap.get(a.dataId).id, i = n.dataIdMap.get(r.dataId).id, o = s, l = a, u = l; l.dtype !== "float32" && (u = Ps({ backend: n, inputs: { x: a }, attrs: { dtype: "float32" } }), o = n.dataIdMap.get(u.dataId).id); let p = n.makeOutput(a.shape, "float32"), d = n.dataIdMap.get(p.dataId).id; return D$(o, i, d), l.dtype !== "float32" && n.disposeData(u.dataId), p } var Ehe = { kernelName: Io, backendName: "wasm", setupFunc: The, kernelFunc: Che }, R$; function _he(e) { R$ = e.wasm.cwrap(So, null, ["number", "number", "number", "number"]) } function Ahe(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Os(i, r, t), m = d; if (h) { let x = t.dataIdMap.get(p.dataId).id; x !== o && (u = p, l = x, m = T.getInnerMostAxes(m.length, u.shape.length)) } T.assertAxesAreInnerMostDims("prod", m, u.shape.length); let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype); if (w.sizeFromShape(u.shape) !== 0) { let x = t.dataIdMap.get(y.dataId).id; R$(l, b, Qe[y.dtype], x) } if (h && t.disposeData(p.dataId), s) { let x = T.expandShapeToKeepDim(y.shape, c); y.shape = x } return y } var Fhe = { kernelName: So, backendName: "wasm", setupFunc: _he, kernelFunc: Ahe }, $he = e => { let { backend: t, attrs: n } = e, { start: a, stop: r, step: s, dtype: i } = n, o = X1(a, r, s, i), l = t.makeOutput([o.length], i); return t.typedArrayFromHeap(l).set(o), l }, Dhe = { kernelName: Xc, backendName: "wasm", kernelFunc: $he }, Rhe = !0, Mhe = Ut(ji, Rhe), Ohe = Xe(No), Phe = Xe(To), Lhe = Xe(_o), M$; function zhe(e) { M$ = e.wasm.cwrap(Eo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Whe(e) { let { backend: t, inputs: n, attrs: a } = e, { images: r } = n, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, [p, d, c, h] = r.shape, m = [p, l, u, h], f = t.dataIdMap.get(r.dataId), g; f.dtype !== "float32" && (g = Ps({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), f = t.dataIdMap.get(g.dataId)); let b = f.id, y = t.makeOutput(m, "float32"); if (w.sizeFromShape(r.shape) === 0) return y; let x = t.dataIdMap.get(y.dataId).id; return M$(b, p, d, c, h, l, u, s ? 1 : 0, i ? 1 : 0, x), g != null && t.disposeData(g.dataId), y } var Bhe = { kernelName: Eo, backendName: "wasm", setupFunc: zhe, kernelFunc: Whe }, O$; function Vhe(e) { O$ = e.wasm.cwrap(Xu, null, ["number", "number", "number", "array", "array", "boolean"]) } function Uhe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a, o = n.makeOutput(r.shape, "float32"), l = n.dataIdMap.get(r.dataId), u; return l.dtype !== "float32" && (u = Ps({ backend: n, inputs: { x: r }, attrs: { dtype: "float32" } }), l = n.dataIdMap.get(u.dataId)), O$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(o.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), i), u != null && n.disposeData(u.dataId), o } var Ghe = { kernelName: Xu, backendName: "wasm", setupFunc: Vhe, kernelFunc: Uhe }, P$; function Hhe(e) { P$ = e.wasm.cwrap(Co, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function qhe(e) { let { backend: t, inputs: n, attrs: a } = e, { images: r } = n, { alignCorners: s, halfPixelCenters: i, size: o } = a, [l, u] = o, [p, d, c, h] = r.shape, m = [p, l, u, h], f = t.makeOutput(m, "float32"); if (w.sizeFromShape(r.shape) === 0) return f; let g = t.dataIdMap.get(r.dataId), b; g.dtype !== "float32" && (b = Ps({ backend: t, inputs: { x: r }, attrs: { dtype: "float32" } }), g = t.dataIdMap.get(b.dataId)); let y = g.id, x = t.dataIdMap.get(f.dataId).id; return P$(y, p, d, c, h, l, u, s ? 1 : 0, i ? 1 : 0, x), b != null && t.disposeData(b.dataId), f } var jhe = { kernelName: Co, backendName: "wasm", setupFunc: Hhe, kernelFunc: qhe }, L$; function Khe(e) { L$ = e.wasm.cwrap(Ku, null, ["number", "number", "number", "array", "array", "boolean"]) } function Xhe(e) { let { inputs: t, backend: n, attrs: a } = e, { images: r, dy: s } = t, { alignCorners: i } = a, o = n.makeOutput(r.shape, "float32"), l = n.dataIdMap.get(r.dataId), u; return l.dtype !== "float32" && (u = Ps({ backend: n, inputs: { x: r }, attrs: { dtype: "float32" } }), l = n.dataIdMap.get(u.dataId)), L$(n.dataIdMap.get(r.dataId).id, n.dataIdMap.get(s.dataId).id, n.dataIdMap.get(o.dataId).id, new Uint8Array(new Int32Array(r.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), i), u != null && n.disposeData(u.dataId), o } var Yhe = { kernelName: Ku, backendName: "wasm", setupFunc: Khe, kernelFunc: Xhe }, z$; function Zhe(e) { z$ = e.wasm.cwrap(Ao, null, ["number", "array", "number", "array", "number", "number"]) } function Jhe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { dims: s } = a, i = w.parseAxisParam(s, r.shape); if (r.shape.length === 0) return ag({ inputs: { x: r }, backend: n }); let o = n.makeOutput(r.shape, r.dtype), l = n.dataIdMap.get(r.dataId).id, u = n.dataIdMap.get(o.dataId).id, p = new Uint8Array(new Int32Array(i).buffer), d = new Uint8Array(new Int32Array(r.shape).buffer); z$(l, p, i.length, d, r.shape.length, u); let c = Ln({ inputs: { x: o }, attrs: { shape: r.shape }, backend: n }); return n.disposeData(o.dataId), c } var Qhe = { kernelName: Ao, backendName: "wasm", kernelFunc: Jhe, setupFunc: Zhe }, W$; function eme(e) { W$ = e.wasm.cwrap(pp, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]) } function tme(e) { let { inputs: t, backend: n, attrs: a } = e, { image: r } = t, { radians: s, fillValue: i, center: o } = a, l = n.makeOutput(r.shape, r.dtype), u = n.dataIdMap.get(r.dataId).id, p = n.dataIdMap.get(l.dataId).id, [d, c, h, m] = r.shape, [f, g] = T.getImageCenter(o, c, h), b = i === 0, y = 255, x = typeof i == "number" ? [i, i, i, b ? 0 : y] : [...i, y], v = new Uint8Array(new Int32Array(x).buffer); return W$(u, d, c, h, m, s, f, g, v, x.length, p), l } var nme = { kernelName: pp, backendName: "wasm", kernelFunc: tme, setupFunc: eme }, ame = Xe(Fo), rme = Xe($o), B$; function sme(e) { B$ = e.wasm.cwrap(Yu, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]) } function ime(e) { let { backend: t, inputs: n, attrs: a } = e, { indices: r, updates: s } = n, { shape: i } = a, o = t.makeOutput(i, s.dtype); if (w.sizeFromShape(i) === 0) return o; let { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = xf.calculateShapes(s, r, i), h = t.dataIdMap.get(r.dataId).id, m = t.dataIdMap.get(s.dataId).id, f = new Uint8Array(new Int32Array(d).buffer), g = t.dataIdMap.get(o.dataId).id; return B$(h, m, Qe[s.dtype], l, u, p, f, c, g), o } var ome = { kernelName: Yu, backendName: "wasm", setupFunc: sme, kernelFunc: ime }, V$; function lme(e) { V$ = e.wasm.cwrap(Ju, null, ["number", "number", "number", "number", "number", "number", "bool", "number"]) } function ume(e) { let { inputs: t, backend: n, attrs: a } = e, { sortedSequence: r, values: s } = t, { side: i } = a; if (r.dtype !== s.dtype) throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${r.dtype} and ${s.dtype}`); let o = n.makeOutput(s.shape, "int32"); function l(u) { return n.dataIdMap.get(u.dataId).id } return V$(l(r), l(s), r.shape[0], r.shape[1], s.shape[1], Qe[r.dtype], i === "left", l(o)), o } var pme = { kernelName: Ju, backendName: "wasm", setupFunc: lme, kernelFunc: ume }, U$; function cme(e) { U$ = e.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]) } function dme(e) { let { inputs: t, backend: n } = e, { condition: a, t: r, e: s } = t, i = n.dataIdMap.get(a.dataId).id, o = n.dataIdMap.get(r.dataId).id, l = n.dataIdMap.get(s.dataId).id, u = n.makeOutput(r.shape, r.dtype), p = n.dataIdMap.get(u.dataId).id, d = a.shape.length, c = r.shape.length, h = d === 0 || d > 1 || c === 1 ? 1 : w.sizeFromShape(r.shape.slice(1)); return U$(i, o, l, h, p), u } var hme = { kernelName: Qu, backendName: "wasm", kernelFunc: dme, setupFunc: cme }, mme = Xe(Do), G$; function fme(e) { G$ = e.wasm.cwrap(Po, null, ["number", "number"]) } function gme(e) { let { backend: t, inputs: { x: n } } = e, a = t.dataIdMap.get(n.dataId).id, r = t.makeOutput(n.shape, n.dtype), s = t.dataIdMap.get(r.dataId).id; return w.sizeFromShape(r.shape) === 0 || G$(a, s), r } var bme = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: fme, kernelFunc: gme }, yme = Xe(Oo), xme = Xe(Ro), vme = Xe(Mo), wme = Xe(Lo); function kme(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, { blockShape: s, paddings: i } = a, o = w.sizeFromShape(s), l = [[0, 0]]; l.push(...i); for (let g = 1 + s.length; g < r.shape.length; ++g)l.push([0, 0]); let u = $$.kernelFunc({ inputs: { x: r }, backend: n, attrs: { paddings: l, constantValue: 0 } }), p = T.getReshaped(u.shape, s, o, !1), d = T.getPermuted(p.length, s.length, !1), c = T.getReshapedPermuted(u.shape, s, o, !1), h = Ln({ inputs: { x: u }, backend: n, attrs: { shape: p } }), m = ws({ inputs: { x: h }, backend: n, attrs: { perm: d } }), f = Ln({ inputs: { x: m }, backend: n, attrs: { shape: c } }); return n.disposeData(u.dataId), n.disposeData(h.dataId), n.disposeData(m.dataId), f } var Ime = { kernelName: tp, backendName: "wasm", kernelFunc: kme }, H$; function Sme(e) { H$ = e.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function Nme(e) { let { backend: t, inputs: n } = e, { indices: a, values: r, denseShape: s, defaultValue: i } = n, o = a.shape[0], l = a.shape[1], u = t.readSync(s.dataId)[0], p = [o + u, l], d = t.dataIdMap.get(a.dataId).id, c = t.dataIdMap.get(r.dataId).id, h = t.dataIdMap.get(i.dataId).id, m = t.makeOutput(p, a.dtype), f = t.dataIdMap.get(m.dataId).id, g = t.makeOutput(p.slice(0, 1), r.dtype), b = t.dataIdMap.get(g.dataId).id, y = t.makeOutput([u], "bool"), x = t.dataIdMap.get(y.dataId).id, v = t.makeOutput([o], a.dtype), I = t.dataIdMap.get(v.dataId).id, N = t.makeOutput([4], "int32"), C = t.dataIdMap.get(N.dataId).id, _ = H$(d, c, Qe[r.dtype], o, u, l, h, f, b, x, I, C), F = t.readSync(N.dataId), D; switch (F[0]) { case 1: { D = T.getSparseFillEmptyRowsIndicesDenseShapeMismatch(F[1]); break } case 2: { D = T.getSparseFillEmptyRowsNegativeIndexErrorMessage(F[1], F[2]); break } case 3: D = T.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(F[1], F[2], F[3]); break; default: D = "" }if (t.disposeData(N.dataId), D) throw t.disposeData(m.dataId), t.disposeData(g.dataId), t.disposeData(y.dataId), t.disposeData(v.dataId), new Error(D); let $ = m, S = g; return _ !== p[0] && ($ = Ni({ inputs: { x: m }, attrs: { begin: 0, size: [_, l] }, backend: t }), S = Ni({ inputs: { x: g }, attrs: { begin: 0, size: _ }, backend: t }), t.disposeData(m.dataId), t.disposeData(g.dataId)), [$, S, y, v] } var Tme = { kernelName: Yc, backendName: "wasm", setupFunc: Sme, kernelFunc: Nme }, q$; function Cme(e) { q$ = e.wasm.cwrap(ap, null, ["number", "number", "number", "number", "number", "number", "number"]) } function Eme(e) {
        let { backend: t, inputs: n } = e, { inputIndices: a, inputShape: r, newShape: s } = n; if (a.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${a.shape}`); if (r.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`); if (s.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${s.shape}`); let i = t.dataIdMap.get(a.dataId).id, o = t.dataIdMap.get(r.dataId).id, l = t.dataIdMap.get(s.dataId).id, u = a.shape[0], p = w.sizeFromShape(s.shape), d = t.makeOutput([u, p], a.dtype), c = t.dataIdMap.get(d.dataId).id, h = t.makeOutput([p], s.dtype), m = t.dataIdMap.get(h.dataId).id, f = t.makeOutput([3], "int32"), g = t.dataIdMap.get(f.dataId).id; q$(i, o, l, u, c, m, g); let b = t.readSync(f.dataId), y; switch (b[0]) { case 0: { y = T.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(b[1], b[2]); break } case 1: { y = T.getSparseReshapeNegativeOutputDimErrorMessage(b[1], b[2]); break } case 2: y = T.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage(); break; case 3: { let x = Array.from(t.readSync(r.dataId)), v = Array.from(t.readSync(h.dataId)); y = T.getSparseReshapeInputOutputMultipleErrorMessage(x, v); break } case 4: { let x = Array.from(t.readSync(r.dataId)), v = Array.from(t.readSync(h.dataId)); y = T.getSparseReshapeInputOutputMismatchErrorMessage(x, v); break } default: y = "" }if (t.disposeData(f.dataId), y) throw t.disposeData(d.dataId), t.disposeData(h.dataId), new Error(y); return [d, h]
    } var _me = { kernelName: ap, backendName: "wasm", setupFunc: Cme, kernelFunc: Eme }, j$; function K$(e) { j$ = e.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]) } function X$(e, t) { let { backend: n, inputs: a } = e, { data: r, indices: s, segmentIds: i } = a, o = s.shape[0], l = n.readSync(i.dataId, o - 1, o)[0], u = o > 0 ? l + 1 : 0; if (u < 0) throw new Error(T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage()); let p = r.shape.slice(); p[0] = u; let d = n.dataIdMap.get(r.dataId).id, c = n.dataIdMap.get(s.dataId).id, h = n.dataIdMap.get(i.dataId).id, m = n.makeOutput(p, r.dtype), f = n.dataIdMap.get(m.dataId).id, g = n.makeOutput([4], "int32"), b = n.dataIdMap.get(g.dataId).id; j$(d, Qe[r.dtype], r.shape[0], c, h, f, b, t, 0); let y = n.readSync(g.dataId), x; switch (y[0]) { case 0: { x = T.getSparseSegmentReductionNegativeSegmentIdsErrorMessage(); break } case 1: { x = T.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage(); break } case 2: x = T.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y[1], y[2]); break; case 3: x = T.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(y[1], y[2], y[3]); break; default: x = "" }if (n.disposeData(g.dataId), x) throw n.disposeData(m.dataId), new Error(x); return m } function Ame(e) { return X$(e, !0) } var Fme = { kernelName: Zc, backendName: "wasm", setupFunc: K$, kernelFunc: Ame }; function $me(e) { return X$(e, !1) } var Dme = { kernelName: Jc, backendName: "wasm", setupFunc: K$, kernelFunc: $me }, Y$; function Rme(e) { Y$ = e.wasm.cwrap(rp, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]) } function Mme(e) { let { backend: t, inputs: n, attrs: a } = e, { sparseIndices: r, sparseValues: s, defaultValue: i } = n, { outputShape: o } = a, l = t.makeOutput(o, i.dtype); if (w.sizeFromShape(o) === 0) return l; let { sliceRank: u, numUpdates: p, sliceSize: d, strides: c, outputSize: h } = T.calculateShapes(s, r, o), m = t.dataIdMap.get(r.dataId).id, f = t.dataIdMap.get(s.dataId).id, g = t.dataIdMap.get(i.dataId).id, b = new Uint8Array(new Int32Array(c).buffer), y = t.dataIdMap.get(l.dataId).id; return Y$(m, f, s.shape.length, g, Qe[i.dtype], u, p, d, b, h, y), l } var Ome = { kernelName: rp, backendName: "wasm", setupFunc: Rme, kernelFunc: Mme }; function Pme(e) { let { inputs: t, attrs: n, backend: a } = e, { x: r } = t, { numOrSizeSplits: s, axis: i } = n, o = w.parseAxisParam(i, r.shape)[0], l = T.prepareSplitSize(r, s, o), u = new Array(r.shape.length).fill(0), p = r.shape.slice(); return l.map(d => { let c = [...p]; c[o] = d; let h = Ni({ inputs: { x: r }, attrs: { begin: u, size: c }, backend: a }); return u[o] += d, h }) } var Lme = { kernelName: np, backendName: "wasm", kernelFunc: Pme }, zme = Xe(zo), Wme = Xe(Qc), Bme = !0, Vme = Ut(Vo, Bme), Z$; function Ume(e) { Z$ = e.wasm.cwrap(Ts, null, ["number", "number", "number", "number"]) } function Gme(e) { let { backend: t, inputs: n, attrs: a } = e, { alpha: r } = a, { x: s } = n, i = t.dataIdMap.get(s.dataId).id, o = t.makeOutput(s.shape, s.dtype), l = t.dataIdMap.get(o.dataId).id; return Z$(i, r, Qe[s.dtype], l), o } var Hme = { kernelName: Ts, backendName: "wasm", setupFunc: Ume, kernelFunc: Gme }, J$; function qme(e) { J$ = e.wasm.cwrap(sp, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]) } function jme(e) { let { backend: t, inputs: n, attrs: a } = e, { x: r } = n, { begin: s, end: i, strides: o, beginMask: l, endMask: u, ellipsisMask: p, newAxisMask: d, shrinkAxisMask: c } = a, { finalShapeSparse: h, finalShape: m, isIdentity: f, sliceDim0: g, isSimpleSlice: b, begin: y, end: x, strides: v } = Kt.sliceInfo(r.shape, s, i, o, l, u, p, d, c), I; if (f) I = Ln({ inputs: { x: r }, backend: t, attrs: { shape: m } }); else if (g || b) { w.assert(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`); let N = Kt.computeOutShape(y, x, v), C = Ni({ inputs: { x: r }, backend: t, attrs: { begin: y, size: N } }); I = Ln({ inputs: { x: C }, backend: t, attrs: { shape: m } }), t.disposeData(C.dataId) } else { let N = t.makeOutput(h, "float32"), C = t.dataIdMap.get(r.dataId).id, _ = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), F = new Uint8Array(new Int32Array(y).buffer), D = new Uint8Array(new Int32Array(x).buffer), $ = new Uint8Array(new Int32Array(v).buffer), S = new Uint8Array(new Int32Array(h).buffer), M = new Uint8Array(new Int32Array(w.computeStrides(h)).buffer), B = t.dataIdMap.get(N.dataId).id; J$(C, _, r.shape.length, F, D, $, S, M, h.length, B), I = Ln({ inputs: { x: N }, backend: t, attrs: { shape: m } }), t.disposeData(N.dataId) } return I } var Kme = { kernelName: sp, backendName: "wasm", setupFunc: qme, kernelFunc: jme }; function Xme(e) { let { backend: t, inputs: n, attrs: a } = e, { data: r, dataSplits: s } = n, { separator: i, nGramWidths: o, leftPad: l, rightPad: u, padWidth: p, preserveShortSequences: d } = a, c = t.readSync(r.dataId), h = t.readSync(s.dataId), [m, f] = Z1(c, h, i, o, l, u, p, d), g = t.makeOutput([m.length], "string"), b = t.dataIdMap.get(g.dataId); b.stringBytes = m; let y = t.makeOutput(s.shape, "int32"); return t.typedArrayFromHeap(y).set(f), [g, y] } var Yme = { kernelName: td, backendName: "wasm", kernelFunc: Xme }; function Zme(e) { let { backend: t, inputs: n, attrs: a } = e, { input: r, delimiter: s } = n, { skipEmpty: i } = a, o = t.readSync(r.dataId), l = t.readSync(s.dataId), [u, p, d] = J1(o, l[0], i), c = p.length, h = t.makeOutput([c, 2], "int32"); t.typedArrayFromHeap(h).set(u); let m = t.makeOutput([c], "string"), f = t.dataIdMap.get(m.dataId); f.stringBytes = p; let g = t.makeOutput([2], "int32"); return t.typedArrayFromHeap(g).set(d), [h, m, g] } var Jme = { kernelName: nd, backendName: "wasm", kernelFunc: Zme }; function Qme(e) { let { backend: t, inputs: n, attrs: a } = e, { input: r } = n, { numBuckets: s } = a, i = t.readSync(r.dataId), o = Q1(i, s), l = t.makeOutput(r.shape, "int32"); return t.typedArrayFromHeap(l).set(o), l } var efe = { kernelName: ad, backendName: "wasm", kernelFunc: Qme }, tfe = !0, nfe = Ut(Uo, tfe), Q$; function afe(e) { Q$ = e.wasm.cwrap(Wo, null, ["number", "number", "number", "number"]) } function rfe(e) { let { backend: t, inputs: n, attrs: a } = e, { axis: r, keepDims: s } = a, { x: i } = n, o = t.dataIdMap.get(i.dataId).id, l = o, u = i, { transposed: p, axes: d, originalAxes: c, inputWasTransposed: h } = Os(i, r, t), m = d; if (h) { let x = t.dataIdMap.get(p.dataId).id; x !== o && (u = p, l = x, m = T.getInnerMostAxes(m.length, u.shape.length)) } T.assertAxesAreInnerMostDims("sum", m, u.shape.length); let [f, g] = T.computeOutAndReduceShapes(u.shape, m), b = w.sizeFromShape(g), y = t.makeOutput(f, u.dtype); if (w.sizeFromShape(u.shape) !== 0) { let x = t.dataIdMap.get(y.dataId).id; Q$(l, b, Qe[y.dtype], x) } if (h && t.disposeData(p.dataId), s) { let x = T.expandShapeToKeepDim(y.shape, c); y.shape = x } return y } var sfe = { kernelName: Wo, backendName: "wasm", setupFunc: afe, kernelFunc: rfe }, ife = Xe(Go), ofe = Xe(Ho), eD; function lfe(e) { eD = e.wasm.cwrap(Zu, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number", "number"]) } function ufe(e) { let { backend: t, inputs: n, attrs: a } = e, { tensor: r, indices: s, updates: i } = n, { } = a, o = t.makeOutput(r.shape, r.dtype); if (w.sizeFromShape(r.shape) === 0) return o; let { sliceRank: l, numUpdates: u, sliceSize: p, strides: d, outputSize: c } = xf.calculateShapes(i, s, r.shape), h = t.dataIdMap.get(s.dataId).id, m = t.dataIdMap.get(i.dataId).id, f = t.dataIdMap.get(r.dataId).id, g = new Uint8Array(new Int32Array(d).buffer), b = t.dataIdMap.get(o.dataId).id; return eD(h, m, Qe[i.dtype], l, u, p, g, c, b, f), o } var pfe = { kernelName: Zu, backendName: "wasm", setupFunc: lfe, kernelFunc: ufe }, tD; function cfe(e) { tD = e.wasm.cwrap(Ns, null, ["number", "array", "number", "array", "number", "number"]) } function dfe(e) { let { inputs: t, backend: n, attrs: a } = e, { x: r } = t, s = n.dataIdMap.get(r.dataId).id, { reps: i } = a, o = new Array(r.shape.length); for (let c = 0; c < o.length; c++)o[c] = r.shape[c] * i[c]; let l = new Uint8Array(new Int32Array(r.shape).buffer), u = new Uint8Array(new Int32Array(o).buffer), p = n.makeOutput(o, r.dtype), d = n.dataIdMap.get(p.dataId).id; return tD(s, l, r.shape.length, u, o.length, Qe[p.dtype], d), p } var hfe = { kernelName: Ns, backendName: "wasm", setupFunc: cfe, kernelFunc: dfe }, nD; function mfe(e) { nD = e.wasm.cwrap(ip, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]) } var ffe = ({ inputs: e, backend: t, attrs: n }) => { let { x: a } = e, { k: r, sorted: s } = n, i = t.dataIdMap.get(a.dataId).id, o = new Uint8Array(new Int32Array(a.shape).buffer), l = a.shape.slice(); l[l.length - 1] = r; let u = t.makeOutput(l, a.dtype), p = t.dataIdMap.get(u.dataId).id, d = t.makeOutput(l, "int32"), c = t.dataIdMap.get(d.dataId).id; return nD(i, o, a.shape.length, Qe[a.dtype], r, s, p, c), [u, d] }, gfe = { kernelName: ip, backendName: "wasm", setupFunc: mfe, kernelFunc: ffe }, aD; function bfe(e) { aD = e.wasm.cwrap(op, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "array", "number", "number", "number", "number", "number"]) } function yfe(e) { let { backend: t, inputs: n, attrs: a } = e, { image: r, transforms: s } = n, { interpolation: i, fillMode: o, fillValue: l, outputShape: u } = a, [p, d, c, h] = r.shape, [m, f] = u != null ? u : [d, c], g = [p, m, f, h], b = new Uint8Array(new Int32Array(w.computeStrides(r.shape)).buffer), y = new Uint8Array(new Int32Array(w.computeStrides(g)).buffer), x = t.makeOutput(g, r.dtype), v = t.dataIdMap.get(x.dataId).id, I = t.dataIdMap.get(r.dataId).id, N = t.dataIdMap.get(s.dataId).id, C = i === "nearest" ? 1 : 2, _; switch (o) { case "constant": _ = 1; break; case "reflect": _ = 2; break; case "wrap": _ = 3; break; case "nearest": _ = 4; break; default: _ = 1; break }return aD(I, N, s.shape[0] > 1, p, m, f, h, c, d, b, r.shape.length - 1, y, g.length - 1, C, _, l, v), x } var xfe = { kernelName: op, backendName: "wasm", setupFunc: bfe, kernelFunc: yfe }; function vfe(e) { let { inputs: t, attrs: n, backend: a } = e, { axis: r } = n, { x: s } = t, { outputValues: i, outputShape: o, indices: l } = tk(a.readSync(s.dataId), r, s.shape, s.dtype); return [a.makeOutput(o, s.dtype, void 0, i), a.makeOutput([l.length], "int32", void 0, l)] } var wfe = { kernelName: rd, backendName: "wasm", kernelFunc: vfe }; function kfe(e) { let { inputs: t, backend: n, attrs: a } = e, { value: r } = t, { axis: s } = a; s < 0 && (s += r.shape.length); let i = r.shape[s], o = r.shape.length, l = new Array(o - 1), u = 0; for (let h = 0; h < o; h++)h !== s && (l[u++] = r.shape[h]); let p = new Array(i), d = new Array(o).fill(0), c = r.shape.slice(); c[s] = 1; for (let h = 0; h < p.length; h++)d[s] = h, p[h] = Ni({ inputs: { x: r }, attrs: { begin: d, size: c }, backend: n }); return p.map(({ dataId: h, dtype: m }) => ({ dataId: h, dtype: m, shape: l })) } var Ife = { kernelName: lp, backendName: "wasm", kernelFunc: kfe }; function Sfe(e) { let { inputs: { x: t }, backend: n } = e, a = n.makeOutput(t.shape, t.dtype); return n.typedArrayFromHeap(a).fill(0), a } var Nfe = { kernelName: up, backendName: "wasm", kernelFunc: Sfe }, Tfe = [oue, lue, uue, pue, due, fue, Iue, Tue, Cue, Eue, _ue, Aue, Fue, $ue, Due, Oue, Hue, zue, Vue, Xue, tpe, rpe, ipe, lpe, upe, ppe, hpe, mpe, bpe, vpe, Ipe, Tpe, _pe, Ape, Fpe, Rpe, Ppe, Wpe, Upe, qpe, Xpe, Jpe, tce, rce, oce, lce, cce, hce, mce, fce, gce, bce, yce, wce, kce, Sce, Cce, Ace, Dce, Oce, zce, Bce, Uce, gue, Gce, Hce, qce, Xce, Zce, Qce, nde, rde, ade, ide, ode, ude, cde, mde, bde, vde, kde, Nde, Ede, Fde, Rde, Pde, Wde, Ude, Hde, Kde, Qde, ehe, nhe, ahe, ihe, uhe, dhe, mhe, bhe, xhe, whe, $$, Nhe, Ehe, Fhe, Dhe, Mhe, Ohe, Phe, Lhe, que, Bhe, Ghe, jhe, Yhe, Qhe, nme, ame, rme, ome, pme, hme, mme, bme, yme, xme, vme, Que, Yde, wme, Ime, Tme, _me, Fme, Dme, Ome, Lme, zme, Wme, Vme, Hme, Kme, Yme, Jme, efe, nfe, sfe, ife, ofe, pfe, hfe, gfe, xfe, vue, wfe, Ife, Nfe]; for (let e of Tfe) id(e); var Cv = G(); Cv.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => { try { return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11])) } catch (e) { return !1 } }); Cv.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => { if (Cv.get("IS_NODE")) return !1; try { return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11])) } catch (e) { return !1 } }); var KS = ks(ZR()), Cfe = ks(JR()), XS = ks(QR()), YS = KS.default || KS, Efe = XS.default || XS, rD = class extends Pc { constructor(e) { super(), this.wasm = e, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(sD), Ev = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new $m(this, Ea()) } write(e, t, n) { let a = { id: this.dataIdNextNumber++ }; return this.move(a, e, t, n, 1), a } numDataIds() { return this.dataIdMap.numDataIds() } async time(e) { let t = w.now(); return e(), { kernelMs: w.now() - t } } move(e, t, n, a, r) { let s = this.dataIdNextNumber++; if (a === "string") { let u = t; this.dataIdMap.set(e, { id: s, stringBytes: u, shape: n, dtype: a, memoryOffset: null, refCount: r }); return } let i = w.sizeFromShape(n), o = i * w.bytesPerElement(a), l = this.wasm._malloc(o) >>> 0; this.dataIdMap.set(e, { id: s, memoryOffset: l, shape: n, dtype: a, refCount: r }), this.wasm.tfjs.registerTensor(s, i, l), t != null && this.wasm.HEAPU8.set(new Uint8Array(t.buffer, t.byteOffset, o), l) } async read(e) { return this.readSync(e) } readSync(e, t, n) { let { memoryOffset: a, dtype: r, shape: s, stringBytes: i } = this.dataIdMap.get(e); if (r === "string") return (t == null || t === 0) && (n == null || n >= i.length) ? i : i.slice(t, n); t = t || 0, n = n || w.sizeFromShape(s); let o = w.bytesPerElement(r), l = this.wasm.HEAPU8.slice(a + t * o, a + n * o); return Ffe(l.buffer, r) } disposeData(e, t = !1) { if (this.dataIdMap.has(e)) { let n = this.dataIdMap.get(e); if (n.refCount--, !t && n.refCount > 0) return !1; this.wasm._free(n.memoryOffset), this.wasm.tfjs.disposeData(n.id), this.dataIdMap.delete(e) } return !0 } refCount(e) { return this.dataIdMap.has(e) ? this.dataIdMap.get(e).refCount : 0 } incRef(e) { let t = this.dataIdMap.get(e); t != null && t.refCount++ } floatPrecision() { return 32 } getMemoryOffset(e) { return this.dataIdMap.get(e).memoryOffset } dispose() { this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null } memory() { return { unreliable: !1 } } makeOutput(e, t, n, a) { let r; if (n == null) r = this.write(a != null ? a : null, e, t); else { let s = this.dataIdNextNumber++; r = { id: s }, this.dataIdMap.set(r, { id: s, memoryOffset: n, shape: e, dtype: t, refCount: 1 }); let i = w.sizeFromShape(e); this.wasm.tfjs.registerTensor(s, i, n) } return { dataId: r, shape: e, dtype: t } } typedArrayFromHeap({ shape: e, dtype: t, dataId: n }) { let a = this.wasm.HEAPU8.buffer, { memoryOffset: r } = this.dataIdMap.get(n), s = w.sizeFromShape(e); switch (t) { case "float32": return new Float32Array(a, r, s); case "int32": return new Int32Array(a, r, s); case "bool": return new Uint8Array(a, r, s); default: throw new Error(`Unknown dtype ${t}`) } } }; function _fe(e) { return (t, n) => (w.fetch(e, { credentials: "same-origin" }).then(a => { a.ok || t.env.a(`failed to load wasm binary file at '${e}'`), a.arrayBuffer().then(r => { WebAssembly.instantiate(r, t).then(s => { n(s.instance, s.module) }) }) }), {}) } function ZS(e, t, n) { if (Am != null) return Am; let a = "tfjs-backend-wasm.wasm"; return e && t ? a = "tfjs-backend-wasm-threaded-simd.wasm" : e && (a = "tfjs-backend-wasm-simd.wasm"), bc != null && bc[a] != null ? bc[a] : n + a } async function Afe() { let [e, t] = await Promise.all([G().getAsync("WASM_HAS_SIMD_SUPPORT"), G().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]); return new Promise((n, a) => { let r = {}; r.locateFile = (o, l) => { if (o.endsWith(".worker.js")) { let u = Cfe.wasmWorkerContents.replace(/\n/g, "\\n"), p = new Blob([u], { type: "application/javascript" }); return URL.createObjectURL(p) } return o.endsWith(".wasm") ? ZS(e, t, mc != null ? mc : l) : l + o }, kk && (r.instantiateWasm = _fe(ZS(e, t, mc != null ? mc : ""))); let s = !1; r.onAbort = () => { s || yc || (yc = !0, a({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" })) }; let i; t && e && Am == null ? (r.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + YS.toString()], { type: "text/javascript" }), i = YS(r)) : i = Efe(r), i.then(o => { s = !0, yc = !1; let l = null; o.tfjs = { init: o.cwrap("init", null, []), initWithThreadsCount: o.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: o.cwrap("get_threads_count", "number", []), registerTensor: o.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: o.cwrap("dispose_data", l, ["number"]), dispose: o.cwrap("dispose", l, []) }, n({ wasm: o }) }).catch(a) }) } function Ffe(e, t) { switch (t) { case "float32": return new Float32Array(e); case "int32": return new Int32Array(e); case "bool": return new Uint8Array(e); default: throw new Error(`Unknown dtype ${t}`) } } var $fe = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"], Am = null, mc = null, bc = {}, yc = !1, kk = !1; function Dfe(e, t = !1) { if (zv("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), yc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`"); Am = e, kk = t } function Rfe(e, t = !1) { if (yc) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`"); if (typeof e == "string") mc = e; else { bc = e; let n = $fe.filter(a => bc[a] == null); if (n.length > 0) throw new Error(`There were no entries found for the following binaries: ${n.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`) } kk = t } var sD = -1, Ev = -1; function Mfe(e) { sD = e } function Ofe() { if (Ev === -1) throw new Error("WASM backend not initialized."); return Ev } var Pfe = "4.16.0", Lfe = 2; Ym("wasm", async () => { let { wasm: e } = await Afe(); return new rD(e) }, Lfe); var JS = "4.16.0", zfe = "4.16.0", Wfe = "4.16.0", Bfe = "4.16.0", Vfe = "4.16.0", Ufe = { tfjs: JS, "tfjs-core": JS, "tfjs-converter": zfe, "tfjs-backend-cpu": Wfe, "tfjs-backend-webgl": Bfe, "tfjs-backend-wasm": Vfe }; var jk = {}; $h(jk, { AnchorPosition: () => Lk, DrawBox: () => Bd, DrawBoxOptions: () => og, DrawFaceLandmarks: () => yg, DrawFaceLandmarksOptions: () => bg, DrawTextField: () => dl, DrawTextFieldOptions: () => $p, drawContour: () => zr, drawDetections: () => Jfe, drawFaceExpressions: () => age, drawFaceLandmarks: () => sge }); function zr(e, t, n = !1) { if (e.beginPath(), t.slice(1).forEach(({ x: a, y: r }, s) => { let i = t[s]; e.moveTo(i.x, i.y), e.lineTo(a, r) }), n) { let a = t[t.length - 1], r = t[0]; if (!a || !r) return; e.moveTo(a.x, a.y), e.lineTo(r.x, r.y) } e.stroke() } var Tk = {}; $h(Tk, { computeReshapedDimensions: () => Nk, getCenterPoint: () => sl, isDimensions: () => sg, isEven: () => rg, isFloat: () => Sk, isTensor: () => al, isTensor1D: () => Gfe, isTensor2D: () => Ik, isTensor3D: () => Wr, isTensor4D: () => ka, isValidNumber: () => Xa, isValidProbablitiy: () => _p, range: () => br, round: () => rl }); var Un = class e { constructor(t, n) { if (!Xa(t) || !Xa(n)) throw new Error(`Dimensions.constructor - expected width and height to be valid numbers, instead have ${JSON.stringify({ width: t, height: n })}`); this._width = t, this._height = n } get width() { return this._width } get height() { return this._height } reverse() { return new e(1 / this.width, 1 / this.height) } }; function al(e, t) { return e instanceof Ce && e.shape.length === t } function Gfe(e) { return al(e, 1) } function Ik(e) { return al(e, 2) } function Wr(e) { return al(e, 3) } function ka(e) { return al(e, 4) } function Sk(e) { return e % 1 !== 0 } function rg(e) { return e % 2 === 0 } function rl(e, t = 2) { let n = 10 ** t; return Math.floor(e * n) / n } function sg(e) { return e && e.width && e.height } function Nk({ width: e, height: t }, n) { let a = n / Math.max(t, e); return new Un(Math.round(e * a), Math.round(t * a)) } function sl(e) { return e.reduce((t, n) => t.add(n), new Ue(0, 0)).div(new Ue(e.length, e.length)) } function br(e, t, n) { return Array(e).fill(0).map((a, r) => t + r * n) } function Xa(e) { return !!e && e !== 1 / 0 && e !== -1 / 0 && !Number.isNaN(e) || e === 0 } function _p(e) { return Xa(e) && e >= 0 && e <= 1 } var Ue = class e { constructor(t, n) { this._x = t, this._y = n } get x() { return this._x } get y() { return this._y } add(t) { return new e(this.x + t.x, this.y + t.y) } sub(t) { return new e(this.x - t.x, this.y - t.y) } mul(t) { return new e(this.x * t.x, this.y * t.y) } div(t) { return new e(this.x / t.x, this.y / t.y) } abs() { return new e(Math.abs(this.x), Math.abs(this.y)) } magnitude() { return Math.sqrt(this.x ** 2 + this.y ** 2) } floor() { return new e(Math.floor(this.x), Math.floor(this.y)) } }; var on = class e { static isRect(t) { return !!t && [t.x, t.y, t.width, t.height].every(Xa) } static assertIsValidBox(t, n, a = !1) { if (!e.isRect(t)) throw new Error(`${n} - invalid box: ${JSON.stringify(t)}, expected object with properties x, y, width, height`); if (!a && (t.width < 0 || t.height < 0)) throw new Error(`${n} - width (${t.width}) and height (${t.height}) must be positive numbers`) } constructor(t, n = !0) { let a = t || {}, r = [a.left, a.top, a.right, a.bottom].every(Xa), s = [a.x, a.y, a.width, a.height].every(Xa); if (!s && !r) throw new Error(`Box.constructor - expected box to be IBoundingBox | IRect, instead have ${JSON.stringify(a)}`); let [i, o, l, u] = s ? [a.x, a.y, a.width, a.height] : [a.left, a.top, a.right - a.left, a.bottom - a.top]; e.assertIsValidBox({ x: i, y: o, width: l, height: u }, "Box.constructor", n), this._x = i, this._y = o, this._width = l, this._height = u } get x() { return this._x } get y() { return this._y } get width() { return this._width } get height() { return this._height } get left() { return this.x } get top() { return this.y } get right() { return this.x + this.width } get bottom() { return this.y + this.height } get area() { return this.width * this.height } get topLeft() { return new Ue(this.left, this.top) } get topRight() { return new Ue(this.right, this.top) } get bottomLeft() { return new Ue(this.left, this.bottom) } get bottomRight() { return new Ue(this.right, this.bottom) } round() { let [t, n, a, r] = [this.x, this.y, this.width, this.height].map(s => Math.round(s)); return new e({ x: t, y: n, width: a, height: r }) } floor() { let [t, n, a, r] = [this.x, this.y, this.width, this.height].map(s => Math.floor(s)); return new e({ x: t, y: n, width: a, height: r }) } toSquare() { let { x: t, y: n, width: a, height: r } = this, s = Math.abs(a - r); return a < r && (t -= s / 2, a += s), r < a && (n -= s / 2, r += s), new e({ x: t, y: n, width: a, height: r }) } rescale(t) { let n = sg(t) ? t.width : t, a = sg(t) ? t.height : t; return new e({ x: this.x * n, y: this.y * a, width: this.width * n, height: this.height * a }) } pad(t, n) { let [a, r, s, i] = [this.x - t / 2, this.y - n / 2, this.width + t, this.height + n]; return new e({ x: a, y: r, width: s, height: i }) } clipAtImageBorders(t, n) { let { x: a, y: r, right: s, bottom: i } = this, o = Math.max(a, 0), l = Math.max(r, 0), u = s - o, p = i - l, d = Math.min(u, t - o), c = Math.min(p, n - l); return new e({ x: o, y: l, width: d, height: c }).floor() } shift(t, n) { let { width: a, height: r } = this, s = this.x + t, i = this.y + n; return new e({ x: s, y: i, width: a, height: r }) } padAtBorders(t, n) { let a = this.width + 1, r = this.height + 1, s = 1, i = 1, o = a, l = r, u = this.left, p = this.top, d = this.right, c = this.bottom; return d > n && (o = -d + n + a, d = n), c > t && (l = -c + t + r, c = t), u < 1 && (l = 2 - u, u = 1), p < 1 && (l = 2 - p, p = 1), { dy: i, edy: l, dx: s, edx: o, y: p, ey: c, x: u, ex: d, w: a, h: r } } calibrate(t) { return new e({ left: this.left + t.left * this.width, top: this.top + t.top * this.height, right: this.right + t.right * this.width, bottom: this.bottom + t.bottom * this.height }).toSquare().round() } }; var il = class extends on { constructor(t, n, a, r, s = !1) { super({ left: t, top: n, right: a, bottom: r }, s) } }; var ol = class e { constructor(t, n, a, r, s) { this._imageDims = new Un(s.width, s.height), this._score = t, this._classScore = n, this._className = a, this._box = new on(r).rescale(this._imageDims) } get score() { return this._score } get classScore() { return this._classScore } get className() { return this._className } get box() { return this._box } get imageDims() { return this._imageDims } get imageWidth() { return this.imageDims.width } get imageHeight() { return this.imageDims.height } get relativeBox() { return new on(this._box).rescale(this.imageDims.reverse()) } forSize(t, n) { return new e(this.score, this.classScore, this.className, this.relativeBox, { width: t, height: n }) } }; var Tt = class e extends ol { constructor(t, n, a) { super(t, t, "", n, a) } forSize(t, n) { let { score: a, relativeBox: r, imageDims: s } = super.forSize(t, n); return new e(a, r, s) } }; function Ck(e, t, n = !0) { let a = Math.max(0, Math.min(e.right, t.right) - Math.max(e.left, t.left)), r = Math.max(0, Math.min(e.bottom, t.bottom) - Math.max(e.top, t.top)), s = a * r; return n ? s / (e.area + t.area - s) : s / Math.min(e.area, t.area) } function Ek(e) { let t = e.map(o => o.x), n = e.map(o => o.y), a = t.reduce((o, l) => l < o ? l : o, 1 / 0), r = n.reduce((o, l) => l < o ? l : o, 1 / 0), s = t.reduce((o, l) => o < l ? l : o, 0), i = n.reduce((o, l) => o < l ? l : o, 0); return new il(a, r, s, i) } function _k(e, t, n, a = !0) { let r = t.map((i, o) => ({ score: i, boxIndex: o })).sort((i, o) => i.score - o.score).map(i => i.boxIndex), s = []; for (; r.length > 0;) { let i = r.pop(); s.push(i); let o = r, l = []; for (let u = 0; u < o.length; u++) { let p = o[u], d = e[i], c = e[p]; l.push(Ck(d, c, a)) } r = r.filter((u, p) => l[p] <= n) } return s } function Ya(e, t) { return O(() => { let [n, a, r] = t, s = yn([...e.shape.slice(0, 3), 1], n, "float32"), i = yn([...e.shape.slice(0, 3), 1], a, "float32"), o = yn([...e.shape.slice(0, 3), 1], r, "float32"), l = et([s, i, o], 3); return pe(e, l) }) } function Ak(e, t = !1) { return O(() => { let [n, a] = e.shape.slice(1); if (n === a) return e; let r = Math.abs(n - a), s = Math.round(r * (t ? .5 : 1)), i = n > a ? 2 : 1, o = c => { let h = e.shape.slice(); return h[i] = c, yn(h, 0, "float32") }, l = o(s), u = r - l.shape[i], d = [t && u ? o(u) : null, e, l].filter(c => !!c).map(c => re(c, "float32")); return et(d, i) }) } function Hfe(e) { let t = e.slice(); for (let n = t.length - 1; n > 0; n--) { let a = Math.floor(Math.random() * (n + 1)), r = t[n]; t[n] = t[a], t[a] = r } return t } function zd(e) { return 1 / (1 + Math.exp(-e)) } function qfe(e) { return Math.log(e / (1 - e)) } var ll = class extends on { constructor(t, n, a, r, s = !1) { super({ x: t, y: n, width: a, height: r }, s) } }; var jfe = .5, Kfe = .43, Xfe = .45, sa = class { constructor(t, n, a = new Ue(0, 0)) { let { width: r, height: s } = n; this._imgDims = new Un(r, s), this._shift = a, this._positions = t.map(i => i.mul(new Ue(r, s)).add(a)) } get shift() { return new Ue(this._shift.x, this._shift.y) } get imageWidth() { return this._imgDims.width } get imageHeight() { return this._imgDims.height } get positions() { return this._positions } get relativePositions() { return this._positions.map(t => t.sub(this._shift).div(new Ue(this.imageWidth, this.imageHeight))) } forSize(t, n) { return new this.constructor(this.relativePositions, { width: t, height: n }) } shiftBy(t, n) { return new this.constructor(this.relativePositions, this._imgDims, new Ue(t, n)) } shiftByPoint(t) { return this.shiftBy(t.x, t.y) } align(t, n = {}) { if (t) { let s = t instanceof Tt ? t.box.floor() : new on(t); return this.shiftBy(s.x, s.y).align(null, n) } let { useDlibAlignment: a, minBoxPadding: r } = { useDlibAlignment: !1, minBoxPadding: .2, ...n }; return a ? this.alignDlib() : this.alignMinBbox(r) } alignDlib() { let t = this.getRefPointsForAlignment(), [n, a, r] = t, s = d => r.sub(d).magnitude(), i = (s(n) + s(a)) / 2, o = Math.floor(i / Xfe), l = sl(t), u = Math.floor(Math.max(0, l.x - jfe * o)), p = Math.floor(Math.max(0, l.y - Kfe * o)); return new ll(u, p, Math.min(o, this.imageWidth + u), Math.min(o, this.imageHeight + p)) } alignMinBbox(t) { let n = Ek(this.positions); return n.pad(n.width * t, n.height * t) } getRefPointsForAlignment() { throw new Error("getRefPointsForAlignment not implemented by base class") } }; var Fk = class extends sa { getRefPointsForAlignment() { let t = this.positions; return [t[0], t[1], sl([t[3], t[4]])] } }; var ul = class extends sa { getJawOutline() { return this.positions.slice(0, 17) } getLeftEyeBrow() { return this.positions.slice(17, 22) } getRightEyeBrow() { return this.positions.slice(22, 27) } getNose() { return this.positions.slice(27, 36) } getLeftEye() { return this.positions.slice(36, 42) } getRightEye() { return this.positions.slice(42, 48) } getMouth() { return this.positions.slice(48, 68) } getRefPointsForAlignment() { return [this.getLeftEye(), this.getRightEye(), this.getMouth()].map(sl) } }; var Ap = class { constructor(t, n) { this._label = t, this._distance = n } get label() { return this._label } get distance() { return this._distance } toString(t = !0) { return `${this.label}${t ? ` (${rl(this.distance)})` : ""}` } }; var Fp = class extends on { static assertIsValidLabeledBox(t, n) { if (on.assertIsValidBox(t, n), !Xa(t.label)) throw new Error(`${n} - expected property label (${t.label}) to be a number`) } constructor(t, n) { super(t), this._label = n } get label() { return this._label } }; var Ls = class e { constructor(t, n) { if (typeof t != "string") throw new Error("LabeledFaceDescriptors - constructor expected label to be a string"); if (!Array.isArray(n) || n.some(a => !(a instanceof Float32Array))) throw new Error("LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array"); this._label = t, this._descriptors = n } get label() { return this._label } get descriptors() { return this._descriptors } toJSON() { return { label: this.label, descriptors: this.descriptors.map(t => Array.from(t)) } } static fromJSON(t) { let n = t.descriptors.map(a => new Float32Array(a)); return new e(t.label, n) } }; var $k = class extends Fp { static assertIsValidPredictedBox(t, n) { if (Fp.assertIsValidLabeledBox(t, n), !_p(t.score) || !_p(t.classScore)) throw new Error(`${n} - expected properties score (${t.score}) and (${t.classScore}) to be a number between [0, 1]`) } constructor(t, n, a, r) { super(t, n), this._score = a, this._classScore = r } get score() { return this._score } get classScore() { return this._classScore } }; function yr(e) { return e.detection instanceof Tt } function pl(e, t) { return { ...e, ...{ detection: t } } } function Dk() { let e = window.fetch; if (!e) throw new Error("fetch - missing fetch implementation for browser environment"); return { Canvas: HTMLCanvasElement, CanvasRenderingContext2D, Image: HTMLImageElement, ImageData, Video: HTMLVideoElement, createCanvasElement: () => document.createElement("canvas"), createImageElement: () => document.createElement("img"), createVideoElement: () => document.createElement("video"), fetch: e, readFile: () => { throw new Error("readFile - filesystem not available for browser environment") } } } function Wd() { return typeof global == "object" && typeof process != "undefined" && process.versions != null && process.versions.node != null } function ig(e) { let t = ""; if (!e && Wd()) try { e = ER("fs") } catch (a) { t = a.toString() } return { readFile: e ? a => new Promise((r, s) => { e.readFile(a, (i, o) => i ? s(i) : r(o)) }) : () => { throw new Error(`readFile - failed to require fs in nodejs environment with error: ${t}`) } } } function Rk() { let e = global.Canvas || global.HTMLCanvasElement, t = global.Image || global.HTMLImageElement, n = global.Video || global.HTMLVideoElement, a = () => { if (e) return new e; throw new Error("createCanvasElement - missing Canvas implementation for nodejs environment") }, r = () => { if (t) return new t; throw new Error("createImageElement - missing Image implementation for nodejs environment") }, s = () => { if (n) return new n; throw new Error("createVideoElement - missing Video implementation for nodejs environment") }, i = global.fetch, o = ig(); return { Canvas: e || class { }, CanvasRenderingContext2D: global.CanvasRenderingContext2D || class { }, Image: t || class { }, ImageData: global.ImageData || class { }, Video: global.HTMLVideoElement || class { }, createCanvasElement: a, createImageElement: r, createVideoElement: s, fetch: i, ...o } } function Mk() { return typeof window == "object" && typeof document != "undefined" && typeof HTMLImageElement != "undefined" && typeof HTMLCanvasElement != "undefined" && typeof HTMLVideoElement != "undefined" && typeof ImageData != "undefined" && typeof CanvasRenderingContext2D != "undefined" } var ln; function Yfe() { if (!ln) throw new Error("getEnv - environment is not defined, check isNodejs() and isBrowser()"); return ln } function Ok(e) { ln = e } function Pk() { return Mk() ? Ok(Dk()) : Wd() ? Ok(Rk()) : null } function Zfe(e) { if (ln || Pk(), !ln) throw new Error("monkeyPatch - environment is not defined, check isNodejs() and isBrowser()"); let { Canvas: t = ln.Canvas, Image: n = ln.Image } = e; ln.Canvas = t, ln.Image = n, ln.createCanvasElement = e.createCanvasElement || (() => new t), ln.createImageElement = e.createImageElement || (() => new n), ln.ImageData = e.ImageData || ln.ImageData, ln.Video = e.Video || ln.Video, ln.fetch = e.fetch || ln.fetch, ln.readFile = e.readFile || ln.readFile } var tt = { getEnv: Yfe, setEnv: Ok, initialize: Pk, createBrowserEnv: Dk, createFileSystem: ig, createNodejsEnv: Rk, monkeyPatch: Zfe, isBrowser: Mk, isNodejs: Wd }; Pk(); function cl(e) { return !tt.isNodejs() && typeof e == "string" ? document.getElementById(e) : e } function Gn(e) { let { Canvas: t, CanvasRenderingContext2D: n } = tt.getEnv(); if (e instanceof n) return e; let a = cl(e); if (!(a instanceof t)) throw new Error("resolveContext2d - expected canvas to be of instance of Canvas"); let r = a.getContext("2d", { willReadFrequently: !0 }); if (!r) throw new Error("resolveContext2d - canvas 2d context is null"); return r } var Lk = (r => (r.TOP_LEFT = "TOP_LEFT", r.TOP_RIGHT = "TOP_RIGHT", r.BOTTOM_LEFT = "BOTTOM_LEFT", r.BOTTOM_RIGHT = "BOTTOM_RIGHT", r))(Lk || {}), $p = class { constructor(t = {}) { let { anchorPosition: n, backgroundColor: a, fontColor: r, fontSize: s, fontStyle: i, padding: o } = t; this.anchorPosition = n || "TOP_LEFT", this.backgroundColor = a || "rgba(0, 0, 0, 0.5)", this.fontColor = r || "rgba(255, 255, 255, 1)", this.fontSize = s || 14, this.fontStyle = i || "Georgia", this.padding = o || 4 } }, dl = class e { constructor(t, n, a = {}) { this.text = typeof t == "string" ? [t] : t instanceof e ? t.text : t, this.anchor = n, this.options = new $p(a) } measureWidth(t) { let { padding: n } = this.options; return this.text.map(a => t.measureText(a).width).reduce((a, r) => a < r ? r : a, 0) + 2 * n } measureHeight() { let { fontSize: t, padding: n } = this.options; return this.text.length * t + 2 * n } getUpperLeft(t, n) { let { anchorPosition: a } = this.options, r = a === "BOTTOM_RIGHT" || a === "TOP_RIGHT", s = a === "BOTTOM_LEFT" || a === "BOTTOM_RIGHT", i = this.measureWidth(t), o = this.measureHeight(), l = r ? this.anchor.x - i : this.anchor.x, u = s ? this.anchor.y - o : this.anchor.y; if (n) { let { width: p, height: d } = n, c = Math.max(Math.min(l, p - i), 0), h = Math.max(Math.min(u, d - o), 0); return { x: c, y: h } } return { x: l, y: u } } draw(t) { let n = cl(t), a = Gn(n), { backgroundColor: r, fontColor: s, fontSize: i, fontStyle: o, padding: l } = this.options; a.font = `${i}px ${o}`; let u = this.measureWidth(a), p = this.measureHeight(); a.fillStyle = r; let d = this.getUpperLeft(a, n); a.fillRect(d.x, d.y, u, p), a.fillStyle = s, this.text.forEach((c, h) => { let m = l + d.x, f = l + d.y + (h + 1) * i; a.fillText(c, m, f) }) } }; var og = class { constructor(t = {}) { let { boxColor: n, lineWidth: a, label: r, drawLabelOptions: s } = t; this.boxColor = n || "rgba(0, 0, 255, 1)", this.lineWidth = a || 2, this.label = r; let i = { anchorPosition: "BOTTOM_LEFT", backgroundColor: this.boxColor }; this.drawLabelOptions = new $p({ ...i, ...s }) } }, Bd = class { constructor(t, n = {}) { this.box = new on(t), this.options = new og(n) } draw(t) { let n = Gn(t), { boxColor: a, lineWidth: r } = this.options, { x: s, y: i, width: o, height: l } = this.box; n.strokeStyle = a, n.lineWidth = r, n.strokeRect(s, i, o, l); let { label: u } = this.options; u && new dl([u], { x: s - r / 2, y: i }, this.options.drawLabelOptions).draw(t) } }; function Jfe(e, t) { (Array.isArray(t) ? t : [t]).forEach(a => { let r = a instanceof Tt ? a.score : yr(a) ? a.detection.score : void 0, s = a instanceof Tt ? a.box : yr(a) ? a.detection.box : new on(a), i = r ? `${rl(r)}` : void 0; new Bd(s, { label: i }).draw(e) }) } function Vd(e) { let { Image: t, Video: n } = tt.getEnv(); return e instanceof t && e.complete || e instanceof n && e.readyState >= 3 } function zk(e) { return new Promise((t, n) => { if (e instanceof tt.getEnv().Canvas || Vd(e)) { t(null); return } function a(s) { s.currentTarget && (s.currentTarget.removeEventListener("load", r), s.currentTarget.removeEventListener("error", a), n(s)) } function r(s) { s.currentTarget && (s.currentTarget.removeEventListener("load", r), s.currentTarget.removeEventListener("error", a), t(s)) } e.addEventListener("load", r), e.addEventListener("error", a) }) } function Wk(e) { return new Promise((t, n) => { e instanceof Blob || n(new Error("bufferToImage - expected buf to be of type: Blob")); let a = new FileReader; a.onload = () => { typeof a.result != "string" && n(new Error("bufferToImage - expected reader.result to be a string, in onload")); let r = tt.getEnv().createImageElement(); r.onload = () => t(r), r.onerror = n, r.src = a.result }, a.onerror = n, a.readAsDataURL(e) }) } function hl(e) { let { Image: t, Video: n } = tt.getEnv(); return e instanceof t ? new Un(e.naturalWidth, e.naturalHeight) : e instanceof n ? new Un(e.videoWidth, e.videoHeight) : new Un(e.width, e.height) } function ml({ width: e, height: t }) { let { createCanvasElement: n } = tt.getEnv(), a = n(); return a.width = e, a.height = t, a } function Ud(e, t) { let { ImageData: n } = tt.getEnv(); if (!(e instanceof n) && !Vd(e)) throw new Error("createCanvasFromMedia - media has not finished loading yet"); let { width: a, height: r } = t || hl(e), s = ml({ width: a, height: r }); return e instanceof n ? Gn(s).putImageData(e, 0, 0) : Gn(s).drawImage(e, 0, 0, a, r), s } async function Bk(e, t) { let n = t || tt.getEnv().createCanvasElement(), [a, r, s] = e.shape.slice(ka(e) ? 1 : 0), i = O(() => e.as3D(a, r, s).toInt()); return await Xo.toPixels(i, n), i.dispose(), n } function lg(e) { let { Image: t, Canvas: n, Video: a } = tt.getEnv(); return e instanceof t || e instanceof n || e instanceof a } function Vk(e, t, n = !1) { let { Image: a, Canvas: r } = tt.getEnv(); if (!(e instanceof a || e instanceof r)) throw new Error("imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement"); if (t <= 0) return ml({ width: 1, height: 1 }); let s = hl(e), i = t / Math.max(s.height, s.width), o = i * s.width, l = i * s.height, u = ml({ width: t, height: t }), p = e instanceof r ? e : Ud(e), d = Math.abs(o - l) / 2, c = n && o < l ? d : 0, h = n && l < o ? d : 0; return p.width > 0 && p.height > 0 && Gn(u).drawImage(p, c, h, o, l), u } var xr = class { constructor(t, n = !1) { this._imageTensors = []; this._canvases = []; this._treatAsBatchInput = !1; this._inputDimensions = []; this._inputSize = 0; if (!Array.isArray(t)) throw new Error(`NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have ${t}`); this._treatAsBatchInput = n, this._batchSize = t.length, t.forEach((a, r) => { if (Wr(a)) { this._imageTensors[r] = a, this._inputDimensions[r] = a.shape; return } if (ka(a)) { let i = a.shape[0]; if (i !== 1) throw new Error(`NetInput - tf.Tensor4D with batchSize ${i} passed, but not supported in input array`); this._imageTensors[r] = a, this._inputDimensions[r] = a.shape.slice(1); return } let s = a instanceof tt.getEnv().Canvas ? a : Ud(a); this._canvases[r] = s, this._inputDimensions[r] = [s.height, s.width, 3] }) } get imageTensors() { return this._imageTensors } get canvases() { return this._canvases } get isBatchInput() { return this.batchSize > 1 || this._treatAsBatchInput } get batchSize() { return this._batchSize } get inputDimensions() { return this._inputDimensions } get inputSize() { return this._inputSize } get reshapedInputDimensions() { return br(this.batchSize, 0, 1).map((t, n) => this.getReshapedInputDimensions(n)) } getInput(t) { return this.canvases[t] || this.imageTensors[t] } getInputDimensions(t) { return this._inputDimensions[t] } getInputHeight(t) { return this._inputDimensions[t][0] } getInputWidth(t) { return this._inputDimensions[t][1] } getReshapedInputDimensions(t) { if (typeof this.inputSize != "number") throw new Error("getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet"); let n = this.getInputWidth(t), a = this.getInputHeight(t); return Nk({ width: n, height: a }, this.inputSize) } toBatchTensor(t, n = !0) { return this._inputSize = t, O(() => { let a = br(this.batchSize, 0, 1).map(s => { let i = this.getInput(s); if (i instanceof Ce) { let o = ka(i) ? i : Gt(i); return o = Ak(o, n), (o.shape[1] !== t || o.shape[2] !== t) && (o = Qn.resizeBilinear(o, [t, t], !1, !1)), o.as3D(t, t, 3) } if (i instanceof tt.getEnv().Canvas) return Xo.fromPixels(Vk(i, t, n)); throw new Error(`toBatchTensor - at batchIdx ${s}, expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have ${i}`) }); return Ft(a.map(s => re(s, "float32"))).as4D(this.batchSize, t, t, 3) }) } }; async function vt(e) { if (e instanceof xr) return e; let t = Array.isArray(e) ? e : [e]; if (!t.length) throw new Error("toNetInput - empty array passed as input"); let n = r => Array.isArray(e) ? ` at input index ${r}:` : "", a = t.map(cl); return a.forEach((r, s) => { if (!lg(r) && !Wr(r) && !ka(r)) throw typeof t[s] == "string" ? new Error(`toNetInput -${n(s)} string passed, but could not resolve HTMLElement for element id ${t[s]}`) : new Error(`toNetInput -${n(s)} expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id`); if (ka(r)) { let i = r.shape[0]; if (i !== 1) throw new Error(`toNetInput -${n(s)} tf.Tensor4D with batchSize ${i} passed, but not supported in input array`) } }), await Promise.all(a.map(r => lg(r) && zk(r))), new xr(a, Array.isArray(e)) } async function Dp(e, t) { let { Canvas: n } = tt.getEnv(), a = e; if (!(e instanceof n)) { let i = await vt(e); if (i.batchSize > 1) throw new Error("extractFaces - batchSize > 1 not supported"); let o = i.getInput(0); a = o instanceof n ? o : await Bk(o) } let r = Gn(a); return t.map(i => i instanceof Tt ? i.forSize(a.width, a.height).box.floor() : i).map(i => i.clipAtImageBorders(a.width, a.height)).map(({ x: i, y: o, width: l, height: u }) => { let p = ml({ width: l, height: u }); return l > 0 && u > 0 && Gn(p).putImageData(r.getImageData(i, o, l, u), 0, 0), p }) } async function Rp(e, t) { if (!Wr(e) && !ka(e)) throw new Error("extractFaceTensors - expected image tensor to be 3D or 4D"); if (ka(e) && e.shape[0] > 1) throw new Error("extractFaceTensors - batchSize > 1 not supported"); return O(() => { let [n, a, r] = e.shape.slice(ka(e) ? 1 : 0); return t.map(o => o instanceof Tt ? o.forSize(a, n).box : o).map(o => o.clipAtImageBorders(a, n)).filter(o => o.width > 0 && o.height > 0).map(({ x: o, y: l, width: u, height: p }) => jo(e.as3D(n, a, r), [l, o, 0], [p, u, r])) }) } async function Br(e, t) { let { fetch: n } = tt.getEnv(), a = await n(e, t); if (!(a.status < 400)) throw new Error(`failed to fetch: (${a.status}) ${a.statusText}, from url: ${a.url}`); return a } async function Qfe(e) { let t = await Br(e), n = await t.blob(); if (!n.type.startsWith("image/")) throw new Error(`fetchImage - expected blob type to be of type image/*, instead have: ${n.type}, for url: ${t.url}`); return Wk(n) } async function Uk(e) { return (await Br(e)).json() } async function ege(e) { return new Float32Array(await (await Br(e)).arrayBuffer()) } function iD(e) { return new Promise((t, n) => { e instanceof Blob || n(new Error("bufferToVideo - expected buf to be of type: Blob")); let a = tt.getEnv().createVideoElement(); a.oncanplay = () => t(a), a.onerror = n, a.playsInline = !0, a.muted = !0, a.src = URL.createObjectURL(e), a.play() }) } async function tge(e) { let t = await Br(e), n = await t.blob(); if (!n.type.startsWith("video/")) throw new Error(`fetchVideo - expected blob type to be of type video/*, instead have: ${n.type}, for url: ${t.url}`); return iD(n) } function ug(e, t) { let n = `${t}-weights_manifest.json`; if (!e) return { modelBaseUri: "", manifestUri: n }; if (e === "/") return { modelBaseUri: "/", manifestUri: `/${n}` }; let a = e.startsWith("http://") ? "http://" : e.startsWith("https://") ? "https://" : ""; e = e.replace(a, ""); let r = e.split("/").filter(o => o), s = e.endsWith(".json") ? r[r.length - 1] : n, i = a + (e.endsWith(".json") ? r.slice(0, r.length - 1) : r).join("/"); return i = e.startsWith("/") ? `/${i}` : i, { modelBaseUri: i, manifestUri: i === "/" ? `/${s}` : `${i}/${s}` } } async function Gk(e, t) { let { manifestUri: n, modelBaseUri: a } = ug(e, t), r = await Uk(n); return qt.loadWeights(r, a) } function nge(e, t, n = !1) { let { width: a, height: r } = n ? hl(t) : t; return e.width = a, e.height = r, { width: a, height: r } } var un = class { constructor(t) { this._params = void 0; this._paramMappings = []; this._name = t } get params() { return this._params } get paramMappings() { return this._paramMappings } get isLoaded() { return !!this.params } getParamFromPath(t) { let { obj: n, objProp: a } = this.traversePropertyPath(t); return n[a] } reassignParamFromPath(t, n) { let { obj: a, objProp: r } = this.traversePropertyPath(t); a[r].dispose(), a[r] = n } getParamList() { return this._paramMappings.map(({ paramPath: t }) => ({ path: t, tensor: this.getParamFromPath(t) })) } getTrainableParams() { return this.getParamList().filter(t => t.tensor instanceof cs) } getFrozenParams() { return this.getParamList().filter(t => !(t.tensor instanceof cs)) } variable() { this.getFrozenParams().forEach(({ path: t, tensor: n }) => { this.reassignParamFromPath(t, n.variable()) }) } freeze() { this.getTrainableParams().forEach(({ path: t, tensor: n }) => { let a = bn(n.dataSync()); n.dispose(), this.reassignParamFromPath(t, a) }) } dispose(t = !0) { this.getParamList().forEach(n => { if (t && n.tensor.isDisposed) throw new Error(`param tensor has already been disposed for path ${n.path}`); n.tensor.dispose() }), this._params = void 0 } serializeParams() { return new Float32Array(this.getParamList().map(({ tensor: t }) => Array.from(t.dataSync())).reduce((t, n) => t.concat(n))) } async load(t) { if (t instanceof Float32Array) { this.extractWeights(t); return } await this.loadFromUri(t) } async loadFromUri(t) { if (t && typeof t != "string") throw new Error(`${this._name}.loadFromUri - expected model uri`); let n = await Gk(t, this.getDefaultModelName()); this.loadFromWeightMap(n) } async loadFromDisk(t) { if (t && typeof t != "string") throw new Error(`${this._name}.loadFromDisk - expected model file path`); let { readFile: n } = tt.getEnv(), { manifestUri: a, modelBaseUri: r } = ug(t, this.getDefaultModelName()), s = u => Promise.all(u.map(p => n(p).then(d => typeof d == "string" ? Buffer.from(d) : d.buffer))), i = qt.weightsLoaderFactory(s), o = JSON.parse((await n(a)).toString()), l = await i(o, r); this.loadFromWeightMap(l) } loadFromWeightMap(t) { let { paramMappings: n, params: a } = this.extractParamsFromWeightMap(t); this._paramMappings = n, this._params = a } extractWeights(t) { let { paramMappings: n, params: a } = this.extractParams(t); this._paramMappings = n, this._params = a } traversePropertyPath(t) { if (!this.params) throw new Error("traversePropertyPath - model has no loaded params"); let n = t.split("/").reduce((s, i) => { if (!s.nextObj.hasOwnProperty(i)) throw new Error(`traversePropertyPath - object does not have property ${i}, for path ${t}`); return { obj: s.nextObj, objProp: i, nextObj: s.nextObj[i] } }, { nextObj: this.params }), { obj: a, objProp: r } = n; if (!a || !r || !(a[r] instanceof Ce)) throw new Error(`traversePropertyPath - parameter is not a tensor, for path ${t}`); return { obj: a, objProp: r } } }; function Hn(e, t, n) { return O(() => { let a = $s(e, t.depthwise_filter, t.pointwise_filter, n, "same"); return a = X(a, t.bias), a }) } function pg(e, t, n = !1) { return O(() => { let a = Ke(n ? X($t(e, t.conv0.filters, [2, 2], "same"), t.conv0.bias) : Hn(e, t.conv0, [2, 2])), r = Hn(a, t.conv1, [1, 1]), s = Ke(X(a, r)), i = Hn(s, t.conv2, [1, 1]); return Ke(X(a, X(r, i))) }) } function Gd(e, t, n = !1, a = !0) { return O(() => { let r = Ke(n ? X($t(e, t.conv0.filters, a ? [2, 2] : [1, 1], "same"), t.conv0.bias) : Hn(e, t.conv0, a ? [2, 2] : [1, 1])), s = Hn(r, t.conv1, [1, 1]), i = Ke(X(r, s)), o = Hn(i, t.conv2, [1, 1]), l = Ke(X(r, X(s, o))), u = Hn(l, t.conv3, [1, 1]); return Ke(X(r, X(s, X(o, u)))) }) } function fl(e, t, n = "same", a = !1) { return O(() => { let r = X($t(e, t.filters, [1, 1], n), t.bias); return a ? Ke(r) : r }) } function En(e, t) { Object.keys(e).forEach(n => { t.some(a => a.originalPath === n) || e[n].dispose() }) } function Mp(e, t) { return (n, a, r, s) => { let i = Da(e(n * a * r * r), [r, r, n, a]), o = qe(e(a)); return t.push({ paramPath: `${s}/filters` }, { paramPath: `${s}/bias` }), { filters: i, bias: o } } } function cg(e, t) { return (n, a, r) => { let s = Aa(e(n * a), [n, a]), i = qe(e(a)); return t.push({ paramPath: `${r}/weights` }, { paramPath: `${r}/bias` }), { weights: s, bias: i } } } var Hd = class { constructor(t, n, a) { this.depthwise_filter = t; this.pointwise_filter = n; this.bias = a } }; function Op(e, t) { return (n, a, r) => { let s = Da(e(9 * n), [3, 3, n, 1]), i = Da(e(n * a), [1, 1, n, a]), o = qe(e(a)); return t.push({ paramPath: `${r}/depthwise_filter` }, { paramPath: `${r}/pointwise_filter` }, { paramPath: `${r}/bias` }), new Hd(s, i, o) } } function Pp(e) { return t => { let n = e(`${t}/depthwise_filter`, 4), a = e(`${t}/pointwise_filter`, 4), r = e(`${t}/bias`, 1); return new Hd(n, a, r) } } function ia(e, t) { return (n, a, r) => { let s = e[n]; if (!al(s, a)) throw new Error(`expected weightMap[${n}] to be a Tensor${a}D, instead have ${s}`); return t.push({ originalPath: n, paramPath: r || n }), s } } function _n(e) { let t = e; function n(r) { let s = t.slice(0, r); return t = t.slice(r), s } function a() { return t } return { extractWeights: n, getRemainingWeights: a } } function dg(e, t) { let n = Mp(e, t), a = Op(e, t); function r(i, o, l, u = !1) { let p = u ? n(i, o, 3, `${l}/conv0`) : a(i, o, `${l}/conv0`), d = a(o, o, `${l}/conv1`), c = a(o, o, `${l}/conv2`); return { conv0: p, conv1: d, conv2: c } } function s(i, o, l, u = !1) { let { conv0: p, conv1: d, conv2: c } = r(i, o, l, u), h = a(o, o, `${l}/conv3`); return { conv0: p, conv1: d, conv2: c, conv3: h } } return { extractDenseBlock3Params: r, extractDenseBlock4Params: s } } function oD(e) { let t = [], { extractWeights: n, getRemainingWeights: a } = _n(e), { extractDenseBlock4Params: r } = dg(n, t), s = r(3, 32, "dense0", !0), i = r(32, 64, "dense1"), o = r(64, 128, "dense2"), l = r(128, 256, "dense3"); if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`); return { paramMappings: t, params: { dense0: s, dense1: i, dense2: o, dense3: l } } } function hg(e) { return t => { let n = e(`${t}/filters`, 4), a = e(`${t}/bias`, 1); return { filters: n, bias: a } } } function mg(e, t) { let n = ia(e, t), a = hg(n), r = Pp(n); function s(o, l = !1) { let u = l ? a(`${o}/conv0`) : r(`${o}/conv0`), p = r(`${o}/conv1`), d = r(`${o}/conv2`); return { conv0: u, conv1: p, conv2: d } } function i(o, l = !1) { let u = l ? a(`${o}/conv0`) : r(`${o}/conv0`), p = r(`${o}/conv1`), d = r(`${o}/conv2`), c = r(`${o}/conv3`); return { conv0: u, conv1: p, conv2: d, conv3: c } } return { extractDenseBlock3Params: s, extractDenseBlock4Params: i } } function lD(e) { let t = [], { extractDenseBlock4Params: n } = mg(e, t), a = { dense0: n("dense0", !0), dense1: n("dense1"), dense2: n("dense2"), dense3: n("dense3") }; return En(e, t), { params: a, paramMappings: t } } var Lp = class extends un { constructor() { super("FaceFeatureExtractor") } forwardInput(t) { let { params: n } = this; if (!n) throw new Error("FaceFeatureExtractor - load model before inference"); return O(() => { let a = re(t.toBatchTensor(112, !0), "float32"), s = Ya(a, [122.782, 117.001, 104.298]).div(255), i = Gd(s, n.dense0, !0); return i = Gd(i, n.dense1), i = Gd(i, n.dense2), i = Gd(i, n.dense3), i = xa(i, [7, 7], [2, 2], "valid"), i }) } async forward(t) { return this.forwardInput(await vt(t)) } getDefaultModelName() { return "face_feature_extractor_model" } extractParamsFromWeightMap(t) { return lD(t) } extractParams(t) { return oD(t) } }; function qd(e, t) { return O(() => X($e(e, t.weights), t.bias)) } function uD(e, t, n) { let a = [], { extractWeights: r, getRemainingWeights: s } = _n(e), o = cg(r, a)(t, n, "fc"); if (s().length !== 0) throw new Error(`weights remaing after extract: ${s().length}`); return { paramMappings: a, params: { fc: o } } } function pD(e) { let t = [], n = ia(e, t); function a(s) { let i = n(`${s}/weights`, 2), o = n(`${s}/bias`, 1); return { weights: i, bias: o } } let r = { fc: a("fc") }; return En(e, t), { params: r, paramMappings: t } } function fg(e) { let t = {}, n = {}; return Object.keys(e).forEach(a => { let r = a.startsWith("fc") ? n : t; r[a] = e[a] }), { featureExtractorMap: t, classifierMap: n } } var zp = class extends un { constructor(t, n) { super(t), this._faceFeatureExtractor = n } get faceFeatureExtractor() { return this._faceFeatureExtractor } runNet(t) { let { params: n } = this; if (!n) throw new Error(`${this._name} - load model before inference`); return O(() => { let a = t instanceof xr ? this.faceFeatureExtractor.forwardInput(t) : t; return qd(a.as2D(a.shape[0], -1), n.fc) }) } dispose(t = !0) { this.faceFeatureExtractor.dispose(t), super.dispose(t) } loadClassifierParams(t) { let { params: n, paramMappings: a } = this.extractClassifierParams(t); this._params = n, this._paramMappings = a } extractClassifierParams(t) { return uD(t, this.getClassifierChannelsIn(), this.getClassifierChannelsOut()) } extractParamsFromWeightMap(t) { let { featureExtractorMap: n, classifierMap: a } = fg(t); return this.faceFeatureExtractor.loadFromWeightMap(n), pD(a) } extractParams(t) { let n = this.getClassifierChannelsIn(), a = this.getClassifierChannelsOut(), r = a * n + a, s = t.slice(0, t.length - r), i = t.slice(t.length - r); return this.faceFeatureExtractor.extractWeights(s), this.extractClassifierParams(i) } }; var Hk = ["neutral", "happy", "sad", "angry", "fearful", "disgusted", "surprised"], Vr = class { constructor(t) { this.neutral = 0; this.happy = 0; this.sad = 0; this.angry = 0; this.fearful = 0; this.disgusted = 0; this.surprised = 0; if (t.length !== 7) throw new Error(`FaceExpressions.constructor - expected probabilities.length to be 7, have: ${t.length}`); Hk.forEach((n, a) => { this[n] = t[a] }) } asSortedArray() { return Hk.map(t => ({ expression: t, probability: this[t] })).sort((t, n) => n.probability - t.probability) } }; var jd = class extends zp { constructor(t = new Lp) { super("FaceExpressionNet", t) } forwardInput(t) { return O(() => ja(this.runNet(t))) } async forward(t) { return this.forwardInput(await vt(t)) } async predictExpressions(t) { let n = await vt(t), a = await this.forwardInput(n), r = await Promise.all(dt(a).map(async i => { let o = i.dataSync(); return i.dispose(), o })); a.dispose(); let s = r.map(i => new Vr(i)); return n.isBatchInput ? s : s[0] } getDefaultModelName() { return "face_expression_model" } getClassifierChannelsIn() { return 256 } getClassifierChannelsOut() { return 7 } }; function qk(e) { return e.expressions instanceof Vr } function gg(e, t) { return { ...e, ...{ expressions: t } } } function age(e, t, n = .1, a) { (Array.isArray(t) ? t : [t]).forEach(s => { let i = s instanceof Vr ? s : qk(s) ? s.expressions : void 0; if (!i) throw new Error("drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof"); let l = i.asSortedArray().filter(d => d.probability > n), u = yr(s) ? s.detection.box.bottomLeft : a || new Ue(0, 0); new dl(l.map(d => `${d.expression} (${rl(d.probability)})`), u).draw(e) }) } function gl(e) { return yr(e) && e.landmarks instanceof sa && e.unshiftedLandmarks instanceof sa && e.alignedRect instanceof Tt } function rge(e) { let t = l => l * 180 / Math.PI, n = (l, u) => Math.sqrt((l.x - u.x) ** 2 + (l.y - u.y) ** 2), a = { roll: void 0, pitch: void 0, yaw: void 0 }, r = (l, u, p) => { let d = Math.floor(l.x - u.x), c = Math.floor(u.x - p.x); return d - c }, s = (l, u) => { let p = Math.hypot(u.x - l.x, u.y - l.y), d = u.y - l.y, c = Math.asin(d / p), h = t(c), m = Math.floor(90 - h), f = u.x - l.x < 0 ? -1 : 1; return m * f }, i = (l, u, p) => { let d = n(l, p), c = new Ue((l.x + p.x) / 2, (l.y + p.y) / 2), h = n(u, c), m = Math.atan(h / d), f = Math.floor(t(m)), g = c.y - u.y < 0 ? -1 : 1; return f * g }; if (!e || !e.positions || e.positions.length !== 68) return a; let o = e.positions; return a.roll = s(o[27], o[66]), a.pitch = i(o[14], o[30], o[2]), a.yaw = r(o[14], o[33], o[2]), a } function Wp(e, t) { let { box: n } = e.detection, a = t.shiftBy(n.x, n.y), r = a.align(), { imageDims: s } = e.detection, i = new Tt(e.detection.score, r.rescale(s.reverse()), s), o = rge(t); return { ...e, ...{ landmarks: a, unshiftedLandmarks: t, alignedRect: i, angle: o } } } var bg = class { constructor(t = {}) { let { drawLines: n = !0, drawPoints: a = !0, lineWidth: r, lineColor: s, pointSize: i, pointColor: o } = t; this.drawLines = n, this.drawPoints = a, this.lineWidth = r || 1, this.pointSize = i || 2, this.lineColor = s || "rgba(0, 255, 255, 1)", this.pointColor = o || "rgba(255, 0, 255, 1)" } }, yg = class { constructor(t, n = {}) { this.faceLandmarks = t, this.options = new bg(n) } draw(t) { let n = Gn(t), { drawLines: a, drawPoints: r, lineWidth: s, lineColor: i, pointSize: o, pointColor: l } = this.options; if (a && this.faceLandmarks instanceof ul && (n.strokeStyle = i, n.lineWidth = s, zr(n, this.faceLandmarks.getJawOutline()), zr(n, this.faceLandmarks.getLeftEyeBrow()), zr(n, this.faceLandmarks.getRightEyeBrow()), zr(n, this.faceLandmarks.getNose()), zr(n, this.faceLandmarks.getLeftEye(), !0), zr(n, this.faceLandmarks.getRightEye(), !0), zr(n, this.faceLandmarks.getMouth(), !0)), r) { n.strokeStyle = l, n.fillStyle = l; let u = p => { n.beginPath(), n.arc(p.x, p.y, o, 0, 2 * Math.PI), n.fill() }; this.faceLandmarks.positions.forEach(u) } } }; function sge(e, t) { (Array.isArray(t) ? t : [t]).forEach(a => { let r = a instanceof sa ? a : gl(a) ? a.landmarks : void 0; if (!r) throw new Error("drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof"); new yg(r).draw(e) }) } var cD = "1.7.13"; function lge(e, t) { let n = Mp(e, t), a = Op(e, t); function r(i, o, l) { let u = a(i, o, `${l}/separable_conv0`), p = a(o, o, `${l}/separable_conv1`), d = n(i, o, 1, `${l}/expansion_conv`); return { separable_conv0: u, separable_conv1: p, expansion_conv: d } } function s(i, o) { let l = a(i, i, `${o}/separable_conv0`), u = a(i, i, `${o}/separable_conv1`), p = a(i, i, `${o}/separable_conv2`); return { separable_conv0: l, separable_conv1: u, separable_conv2: p } } return { extractConvParams: n, extractSeparableConvParams: a, extractReductionBlockParams: r, extractMainBlockParams: s } } function dD(e, t) { let n = [], { extractWeights: a, getRemainingWeights: r } = _n(e), { extractConvParams: s, extractSeparableConvParams: i, extractReductionBlockParams: o, extractMainBlockParams: l } = lge(a, n), u = s(3, 32, 3, "entry_flow/conv_in"), p = o(32, 64, "entry_flow/reduction_block_0"), d = o(64, 128, "entry_flow/reduction_block_1"), c = { conv_in: u, reduction_block_0: p, reduction_block_1: d }, h = {}; br(t, 0, 1).forEach(b => { h[`main_block_${b}`] = l(128, `middle_flow/main_block_${b}`) }); let m = o(128, 256, "exit_flow/reduction_block"), f = i(256, 512, "exit_flow/separable_conv"), g = { reduction_block: m, separable_conv: f }; if (r().length !== 0) throw new Error(`weights remaing after extract: ${r().length}`); return { paramMappings: n, params: { entry_flow: c, middle_flow: h, exit_flow: g } } } function uge(e, t) { let n = ia(e, t), a = hg(n), r = Pp(n); function s(o) { let l = r(`${o}/separable_conv0`), u = r(`${o}/separable_conv1`), p = a(`${o}/expansion_conv`); return { separable_conv0: l, separable_conv1: u, expansion_conv: p } } function i(o) { let l = r(`${o}/separable_conv0`), u = r(`${o}/separable_conv1`), p = r(`${o}/separable_conv2`); return { separable_conv0: l, separable_conv1: u, separable_conv2: p } } return { extractConvParams: a, extractSeparableConvParams: r, extractReductionBlockParams: s, extractMainBlockParams: i } } function hD(e, t) { let n = [], { extractConvParams: a, extractSeparableConvParams: r, extractReductionBlockParams: s, extractMainBlockParams: i } = uge(e, n), o = a("entry_flow/conv_in"), l = s("entry_flow/reduction_block_0"), u = s("entry_flow/reduction_block_1"), p = { conv_in: o, reduction_block_0: l, reduction_block_1: u }, d = {}; br(t, 0, 1).forEach(f => { d[`main_block_${f}`] = i(`middle_flow/main_block_${f}`) }); let c = s("exit_flow/reduction_block"), h = r("exit_flow/separable_conv"), m = { reduction_block: c, separable_conv: h }; return En(e, n), { params: { entry_flow: p, middle_flow: d, exit_flow: m }, paramMappings: n } } function mD(e, t, n) { return X($t(e, t.filters, n, "same"), t.bias) } function Kk(e, t, n = !0) { let a = n ? Ke(e) : e; return a = Hn(a, t.separable_conv0, [1, 1]), a = Hn(Ke(a), t.separable_conv1, [1, 1]), a = Dt(a, [3, 3], [2, 2], "same"), a = X(a, mD(e, t.expansion_conv, [2, 2])), a } function pge(e, t) { let n = Hn(Ke(e), t.separable_conv0, [1, 1]); return n = Hn(Ke(n), t.separable_conv1, [1, 1]), n = Hn(Ke(n), t.separable_conv2, [1, 1]), n = X(n, e), n } var xg = class extends un { constructor(t) { super("TinyXception"), this._numMainBlocks = t } forwardInput(t) { let { params: n } = this; if (!n) throw new Error("TinyXception - load model before inference"); return O(() => { let a = re(t.toBatchTensor(112, !0), "float32"), s = Ya(a, [122.782, 117.001, 104.298]).div(255), i = Ke(mD(s, n.entry_flow.conv_in, [2, 2])); return i = Kk(i, n.entry_flow.reduction_block_0, !1), i = Kk(i, n.entry_flow.reduction_block_1), br(this._numMainBlocks, 0, 1).forEach(o => { i = pge(i, n.middle_flow[`main_block_${o}`]) }), i = Kk(i, n.exit_flow.reduction_block), i = Ke(Hn(i, n.exit_flow.separable_conv, [1, 1])), i }) } async forward(t) { return this.forwardInput(await vt(t)) } getDefaultModelName() { return "tiny_xception_model" } extractParamsFromWeightMap(t) { return hD(t, this._numMainBlocks) } extractParams(t) { return dD(t, this._numMainBlocks) } }; function fD(e) { let t = [], { extractWeights: n, getRemainingWeights: a } = _n(e), r = cg(n, t), s = r(512, 1, "fc/age"), i = r(512, 2, "fc/gender"); if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`); return { paramMappings: t, params: { fc: { age: s, gender: i } } } } function gD(e) { let t = [], n = ia(e, t); function a(s) { let i = n(`${s}/weights`, 2), o = n(`${s}/bias`, 1); return { weights: i, bias: o } } let r = { fc: { age: a("fc/age"), gender: a("fc/gender") } }; return En(e, t), { params: r, paramMappings: t } } var vg = (n => (n.FEMALE = "female", n.MALE = "male", n))(vg || {}); var Kd = class extends un { constructor(t = new xg(2)) { super("AgeGenderNet"), this._faceFeatureExtractor = t } get faceFeatureExtractor() { return this._faceFeatureExtractor } runNet(t) { let { params: n } = this; if (!n) throw new Error(`${this._name} - load model before inference`); return O(() => { let a = t instanceof xr ? this.faceFeatureExtractor.forwardInput(t) : t, r = xa(a, [7, 7], [2, 2], "valid").as2D(a.shape[0], -1), s = qd(r, n.fc.age).as1D(), i = qd(r, n.fc.gender); return { age: s, gender: i } }) } forwardInput(t) { return O(() => { let { age: n, gender: a } = this.runNet(t); return { age: n, gender: ja(a) } }) } async forward(t) { return this.forwardInput(await vt(t)) } async predictAgeAndGender(t) { let n = await vt(t), a = await this.forwardInput(n), r = dt(a.age), s = dt(a.gender), i = r.map((l, u) => ({ ageTensor: l, genderTensor: s[u] })), o = await Promise.all(i.map(async ({ ageTensor: l, genderTensor: u }) => { let p = l.dataSync()[0], d = u.dataSync()[0], c = d > .5, h = c ? "male" : "female", m = c ? d : 1 - d; return l.dispose(), u.dispose(), { age: p, gender: h, genderProbability: m } })); return a.age.dispose(), a.gender.dispose(), n.isBatchInput ? o : o[0] } getDefaultModelName() { return "age_gender_model" } dispose(t = !0) { this.faceFeatureExtractor.dispose(t), super.dispose(t) } loadClassifierParams(t) { let { params: n, paramMappings: a } = this.extractClassifierParams(t); this._params = n, this._paramMappings = a } extractClassifierParams(t) { return fD(t) } extractParamsFromWeightMap(t) { let { featureExtractorMap: n, classifierMap: a } = fg(t); return this.faceFeatureExtractor.loadFromWeightMap(n), gD(a) } extractParams(t) { let a = t.slice(0, t.length - 1539), r = t.slice(t.length - 1539); return this.faceFeatureExtractor.extractWeights(a), this.extractClassifierParams(r) } }; var Bp = class extends zp { postProcess(t, n, a) { let r = a.map(({ width: i, height: o }) => { let l = n / Math.max(o, i); return { width: i * l, height: o * l } }), s = r.length; return O(() => { let i = (d, c) => Ft([yn([68], d, "float32"), yn([68], c, "float32")], 1).as2D(1, 136).as1D(), o = (d, c) => { let { width: h, height: m } = r[d]; return c(h, m) ? Math.abs(h - m) / 2 : 0 }, l = d => o(d, (c, h) => c < h), u = d => o(d, (c, h) => h < c); return t.mul(yn([s, 136], n, "float32")).sub(Ft(Array.from(Array(s), (d, c) => i(l(c), u(c))))).div(Ft(Array.from(Array(s), (d, c) => i(r[c].width, r[c].height)))) }) } forwardInput(t) { return O(() => { let n = this.runNet(t); return this.postProcess(n, t.inputSize, t.inputDimensions.map(([a, r]) => ({ height: a, width: r }))) }) } async forward(t) { return this.forwardInput(await vt(t)) } async detectLandmarks(t) { let n = await vt(t), a = O(() => dt(this.forwardInput(n))), r = await Promise.all(a.map(async (s, i) => { let o = Array.from(s.dataSync()), l = o.filter((p, d) => rg(d)), u = o.filter((p, d) => !rg(d)); return new ul(Array(68).fill(0).map((p, d) => new Ue(l[d], u[d])), { height: n.getInputHeight(i), width: n.getInputWidth(i) }) })); return a.forEach(s => s.dispose()), n.isBatchInput ? r : r[0] } getClassifierChannelsOut() { return 136 } }; var bl = class extends Bp { constructor(t = new Lp) { super("FaceLandmark68Net", t) } getDefaultModelName() { return "face_landmark_68_model" } getClassifierChannelsIn() { return 256 } }; function bD(e) { let t = [], { extractDenseBlock3Params: n } = mg(e, t), a = { dense0: n("dense0", !0), dense1: n("dense1"), dense2: n("dense2") }; return En(e, t), { params: a, paramMappings: t } } function yD(e) { let t = [], { extractWeights: n, getRemainingWeights: a } = _n(e), { extractDenseBlock3Params: r } = dg(n, t), s = r(3, 32, "dense0", !0), i = r(32, 64, "dense1"), o = r(64, 128, "dense2"); if (a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`); return { paramMappings: t, params: { dense0: s, dense1: i, dense2: o } } } var wg = class extends un { constructor() { super("TinyFaceFeatureExtractor") } forwardInput(t) { let { params: n } = this; if (!n) throw new Error("TinyFaceFeatureExtractor - load model before inference"); return O(() => { let a = re(t.toBatchTensor(112, !0), "float32"), s = Ya(a, [122.782, 117.001, 104.298]).div(255), i = pg(s, n.dense0, !0); return i = pg(i, n.dense1), i = pg(i, n.dense2), i = xa(i, [14, 14], [2, 2], "valid"), i }) } async forward(t) { return this.forwardInput(await vt(t)) } getDefaultModelName() { return "face_feature_extractor_tiny_model" } extractParamsFromWeightMap(t) { return bD(t) } extractParams(t) { return yD(t) } }; var Xd = class extends Bp { constructor(t = new wg) { super("FaceLandmark68TinyNet", t) } getDefaultModelName() { return "face_landmark_68_tiny_model" } getClassifierChannelsIn() { return 128 } }; var Xk = class extends bl { }; function xD(e, t) { return X(z(e, t.weights), t.biases) } function Yk(e, t, n, a, r = "same") { let { filters: s, bias: i } = t.conv, o = $t(e, s, n, r); return o = X(o, i), o = xD(o, t.scale), a ? Ke(o) : o } function vD(e, t) { return Yk(e, t, [1, 1], !0) } function Zk(e, t) { return Yk(e, t, [1, 1], !1) } function kg(e, t) { return Yk(e, t, [2, 2], !0, "valid") } function cge(e, t) { function n(o, l, u) { let p = e(o), d = p.length / (l * u * u); if (Sk(d)) throw new Error(`depth has to be an integer: ${d}, weights.length: ${p.length}, numFilters: ${l}, filterSize: ${u}`); return O(() => De(Da(p, [l, d, u, u]), [2, 3, 1, 0])) } function a(o, l, u, p) { let d = n(o, l, u), c = qe(e(l)); return t.push({ paramPath: `${p}/filters` }, { paramPath: `${p}/bias` }), { filters: d, bias: c } } function r(o, l) { let u = qe(e(o)), p = qe(e(o)); return t.push({ paramPath: `${l}/weights` }, { paramPath: `${l}/biases` }), { weights: u, biases: p } } function s(o, l, u, p) { let d = a(o, l, u, `${p}/conv`), c = r(l, `${p}/scale`); return { conv: d, scale: c } } function i(o, l, u, p, d = !1) { let c = s((d ? .5 : 1) * o, l, u, `${p}/conv1`), h = s(o, l, u, `${p}/conv2`); return { conv1: c, conv2: h } } return { extractConvLayerParams: s, extractResidualLayerParams: i } } function wD(e) { let { extractWeights: t, getRemainingWeights: n } = _n(e), a = [], { extractConvLayerParams: r, extractResidualLayerParams: s } = cge(t, a), i = r(4704, 32, 7, "conv32_down"), o = s(9216, 32, 3, "conv32_1"), l = s(9216, 32, 3, "conv32_2"), u = s(9216, 32, 3, "conv32_3"), p = s(36864, 64, 3, "conv64_down", !0), d = s(36864, 64, 3, "conv64_1"), c = s(36864, 64, 3, "conv64_2"), h = s(36864, 64, 3, "conv64_3"), m = s(147456, 128, 3, "conv128_down", !0), f = s(147456, 128, 3, "conv128_1"), g = s(147456, 128, 3, "conv128_2"), b = s(589824, 256, 3, "conv256_down", !0), y = s(589824, 256, 3, "conv256_1"), x = s(589824, 256, 3, "conv256_2"), v = s(589824, 256, 3, "conv256_down_out"), I = O(() => De(Aa(t(256 * 128), [128, 256]), [1, 0])); if (a.push({ paramPath: "fc" }), n().length !== 0) throw new Error(`weights remaing after extract: ${n().length}`); return { params: { conv32_down: i, conv32_1: o, conv32_2: l, conv32_3: u, conv64_down: p, conv64_1: d, conv64_2: c, conv64_3: h, conv128_down: m, conv128_1: f, conv128_2: g, conv256_down: b, conv256_1: y, conv256_2: x, conv256_down_out: v, fc: I }, paramMappings: a } } function dge(e, t) { let n = ia(e, t); function a(i) { let o = n(`${i}/scale/weights`, 1), l = n(`${i}/scale/biases`, 1); return { weights: o, biases: l } } function r(i) { let o = n(`${i}/conv/filters`, 4), l = n(`${i}/conv/bias`, 1), u = a(i); return { conv: { filters: o, bias: l }, scale: u } } function s(i) { return { conv1: r(`${i}/conv1`), conv2: r(`${i}/conv2`) } } return { extractConvLayerParams: r, extractResidualLayerParams: s } } function kD(e) { let t = [], { extractConvLayerParams: n, extractResidualLayerParams: a } = dge(e, t), r = n("conv32_down"), s = a("conv32_1"), i = a("conv32_2"), o = a("conv32_3"), l = a("conv64_down"), u = a("conv64_1"), p = a("conv64_2"), d = a("conv64_3"), c = a("conv128_down"), h = a("conv128_1"), m = a("conv128_2"), f = a("conv256_down"), g = a("conv256_1"), b = a("conv256_2"), y = a("conv256_down_out"), { fc: x } = e; if (t.push({ originalPath: "fc", paramPath: "fc" }), !Ik(x)) throw new Error(`expected weightMap[fc] to be a Tensor2D, instead have ${x}`); let v = { conv32_down: r, conv32_1: s, conv32_2: i, conv32_3: o, conv64_down: l, conv64_1: u, conv64_2: p, conv64_3: d, conv128_down: c, conv128_1: h, conv128_2: m, conv256_down: f, conv256_1: g, conv256_2: b, conv256_down_out: y, fc: x }; return En(e, t), { params: v, paramMappings: t } } function Za(e, t) { let n = vD(e, t.conv1); return n = Zk(n, t.conv2), n = X(n, e), n = Ke(n), n } function Yd(e, t) { let n = kg(e, t.conv1); n = Zk(n, t.conv2); let a = xa(e, 2, 2, "valid"), r = It(a.shape), s = a.shape[3] !== n.shape[3]; if (a.shape[1] !== n.shape[1] || a.shape[2] !== n.shape[2]) { let o = [...n.shape]; o[1] = 1; let l = It(o); n = et([n, l], 1); let u = [...n.shape]; u[2] = 1; let p = It(u); n = et([n, p], 2) } return a = s ? et([a, r], 3) : a, n = X(a, n), n = Ke(n), n } var yl = class extends un { constructor() { super("FaceRecognitionNet") } forwardInput(t) { let { params: n } = this; if (!n) throw new Error("FaceRecognitionNet - load model before inference"); return O(() => { let a = re(t.toBatchTensor(150, !0), "float32"), s = Ya(a, [122.782, 117.001, 104.298]).div(255), i = kg(s, n.conv32_down); i = Dt(i, 3, 2, "valid"), i = Za(i, n.conv32_1), i = Za(i, n.conv32_2), i = Za(i, n.conv32_3), i = Yd(i, n.conv64_down), i = Za(i, n.conv64_1), i = Za(i, n.conv64_2), i = Za(i, n.conv64_3), i = Yd(i, n.conv128_down), i = Za(i, n.conv128_1), i = Za(i, n.conv128_2), i = Yd(i, n.conv256_down), i = Za(i, n.conv256_1), i = Za(i, n.conv256_2), i = Yd(i, n.conv256_down_out); let o = i.mean([1, 2]); return $e(o, n.fc) }) } async forward(t) { return this.forwardInput(await vt(t)) } async computeFaceDescriptor(t) { var s; if ((s = t == null ? void 0 : t.shape) != null && s.some(i => i <= 0)) return new Float32Array(128); let n = await vt(t), a = O(() => dt(this.forwardInput(n))), r = await Promise.all(a.map(i => i.data())); return a.forEach(i => i.dispose()), n.isBatchInput ? r : r[0] } getDefaultModelName() { return "face_recognition_model" } extractParamsFromWeightMap(t) { return kD(t) } extractParams(t) { return wD(t) } }; function hge(e) { let t = new yl; return t.extractWeights(e), t } function Ig(e, t) { return { ...e, ...{ descriptor: t } } } function mge(e) { return typeof e.age == "number" } function Sg(e, t) { return { ...e, ...{ age: t } } } function fge(e) { return (e.gender === "male" || e.gender === "female") && _p(e.genderProbability) } function Ng(e, t, n) { return { ...e, ...{ gender: t, genderProbability: n } } } function gge(e, t) { function n(l, u) { let p = Da(e(9 * l), [3, 3, l, 1]), d = qe(e(l)), c = qe(e(l)), h = qe(e(l)), m = qe(e(l)); return t.push({ paramPath: `${u}/filters` }, { paramPath: `${u}/batch_norm_scale` }, { paramPath: `${u}/batch_norm_offset` }, { paramPath: `${u}/batch_norm_mean` }, { paramPath: `${u}/batch_norm_variance` }), { filters: p, batch_norm_scale: d, batch_norm_offset: c, batch_norm_mean: h, batch_norm_variance: m } } function a(l, u, p, d, c) { let h = Da(e(l * u * p * p), [p, p, l, u]), m = qe(e(u)); return t.push({ paramPath: `${d}/filters` }, { paramPath: `${d}/${c ? "batch_norm_offset" : "bias"}` }), { filters: h, bias: m } } function r(l, u, p, d) { let { filters: c, bias: h } = a(l, u, p, d, !0); return { filters: c, batch_norm_offset: h } } function s(l, u, p) { let d = n(l, `${p}/depthwise_conv`), c = r(l, u, 1, `${p}/pointwise_conv`); return { depthwise_conv: d, pointwise_conv: c } } function i() { let l = r(3, 32, 3, "mobilenetv1/conv_0"), u = s(32, 64, "mobilenetv1/conv_1"), p = s(64, 128, "mobilenetv1/conv_2"), d = s(128, 128, "mobilenetv1/conv_3"), c = s(128, 256, "mobilenetv1/conv_4"), h = s(256, 256, "mobilenetv1/conv_5"), m = s(256, 512, "mobilenetv1/conv_6"), f = s(512, 512, "mobilenetv1/conv_7"), g = s(512, 512, "mobilenetv1/conv_8"), b = s(512, 512, "mobilenetv1/conv_9"), y = s(512, 512, "mobilenetv1/conv_10"), x = s(512, 512, "mobilenetv1/conv_11"), v = s(512, 1024, "mobilenetv1/conv_12"), I = s(1024, 1024, "mobilenetv1/conv_13"); return { conv_0: l, conv_1: u, conv_2: p, conv_3: d, conv_4: c, conv_5: h, conv_6: m, conv_7: f, conv_8: g, conv_9: b, conv_10: y, conv_11: x, conv_12: v, conv_13: I } } function o() { let l = r(1024, 256, 1, "prediction_layer/conv_0"), u = r(256, 512, 3, "prediction_layer/conv_1"), p = r(512, 128, 1, "prediction_layer/conv_2"), d = r(128, 256, 3, "prediction_layer/conv_3"), c = r(256, 128, 1, "prediction_layer/conv_4"), h = r(128, 256, 3, "prediction_layer/conv_5"), m = r(256, 64, 1, "prediction_layer/conv_6"), f = r(64, 128, 3, "prediction_layer/conv_7"), g = a(512, 12, 1, "prediction_layer/box_predictor_0/box_encoding_predictor"), b = a(512, 9, 1, "prediction_layer/box_predictor_0/class_predictor"), y = a(1024, 24, 1, "prediction_layer/box_predictor_1/box_encoding_predictor"), x = a(1024, 18, 1, "prediction_layer/box_predictor_1/class_predictor"), v = a(512, 24, 1, "prediction_layer/box_predictor_2/box_encoding_predictor"), I = a(512, 18, 1, "prediction_layer/box_predictor_2/class_predictor"), N = a(256, 24, 1, "prediction_layer/box_predictor_3/box_encoding_predictor"), C = a(256, 18, 1, "prediction_layer/box_predictor_3/class_predictor"), _ = a(256, 24, 1, "prediction_layer/box_predictor_4/box_encoding_predictor"), F = a(256, 18, 1, "prediction_layer/box_predictor_4/class_predictor"), D = a(128, 24, 1, "prediction_layer/box_predictor_5/box_encoding_predictor"), $ = a(128, 18, 1, "prediction_layer/box_predictor_5/class_predictor"); return { conv_0: l, conv_1: u, conv_2: p, conv_3: d, conv_4: c, conv_5: h, conv_6: m, conv_7: f, box_predictor_0: { box_encoding_predictor: g, class_predictor: b }, box_predictor_1: { box_encoding_predictor: y, class_predictor: x }, box_predictor_2: { box_encoding_predictor: v, class_predictor: I }, box_predictor_3: { box_encoding_predictor: N, class_predictor: C }, box_predictor_4: { box_encoding_predictor: _, class_predictor: F }, box_predictor_5: { box_encoding_predictor: D, class_predictor: $ } } } return { extractMobilenetV1Params: i, extractPredictionLayerParams: o } } function ID(e) { let t = [], { extractWeights: n, getRemainingWeights: a } = _n(e), { extractMobilenetV1Params: r, extractPredictionLayerParams: s } = gge(n, t), i = r(), o = s(), u = { extra_dim: Nd(n(5118 * 4), [1, 5118, 4]) }; if (t.push({ paramPath: "output_layer/extra_dim" }), a().length !== 0) throw new Error(`weights remaing after extract: ${a().length}`); return { params: { mobilenetv1: i, prediction_layer: o, output_layer: u }, paramMappings: t } } function bge(e, t) { let n = ia(e, t); function a(u, p, d) { let c = n(`${u}/Conv2d_${p}_pointwise/weights`, 4, `${d}/filters`), h = n(`${u}/Conv2d_${p}_pointwise/convolution_bn_offset`, 1, `${d}/batch_norm_offset`); return { filters: c, batch_norm_offset: h } } function r(u) { let p = `mobilenetv1/conv_${u}`, d = `MobilenetV1/Conv2d_${u}_depthwise`, c = `${p}/depthwise_conv`, h = `${p}/pointwise_conv`, m = n(`${d}/depthwise_weights`, 4, `${c}/filters`), f = n(`${d}/BatchNorm/gamma`, 1, `${c}/batch_norm_scale`), g = n(`${d}/BatchNorm/beta`, 1, `${c}/batch_norm_offset`), b = n(`${d}/BatchNorm/moving_mean`, 1, `${c}/batch_norm_mean`), y = n(`${d}/BatchNorm/moving_variance`, 1, `${c}/batch_norm_variance`); return { depthwise_conv: { filters: m, batch_norm_scale: f, batch_norm_offset: g, batch_norm_mean: b, batch_norm_variance: y }, pointwise_conv: a("MobilenetV1", u, h) } } function s() { return { conv_0: a("MobilenetV1", 0, "mobilenetv1/conv_0"), conv_1: r(1), conv_2: r(2), conv_3: r(3), conv_4: r(4), conv_5: r(5), conv_6: r(6), conv_7: r(7), conv_8: r(8), conv_9: r(9), conv_10: r(10), conv_11: r(11), conv_12: r(12), conv_13: r(13) } } function i(u, p) { let d = n(`${u}/weights`, 4, `${p}/filters`), c = n(`${u}/biases`, 1, `${p}/bias`); return { filters: d, bias: c } } function o(u) { let p = i(`Prediction/BoxPredictor_${u}/BoxEncodingPredictor`, `prediction_layer/box_predictor_${u}/box_encoding_predictor`), d = i(`Prediction/BoxPredictor_${u}/ClassPredictor`, `prediction_layer/box_predictor_${u}/class_predictor`); return { box_encoding_predictor: p, class_predictor: d } } function l() { return { conv_0: a("Prediction", 0, "prediction_layer/conv_0"), conv_1: a("Prediction", 1, "prediction_layer/conv_1"), conv_2: a("Prediction", 2, "prediction_layer/conv_2"), conv_3: a("Prediction", 3, "prediction_layer/conv_3"), conv_4: a("Prediction", 4, "prediction_layer/conv_4"), conv_5: a("Prediction", 5, "prediction_layer/conv_5"), conv_6: a("Prediction", 6, "prediction_layer/conv_6"), conv_7: a("Prediction", 7, "prediction_layer/conv_7"), box_predictor_0: o(0), box_predictor_1: o(1), box_predictor_2: o(2), box_predictor_3: o(3), box_predictor_4: o(4), box_predictor_5: o(5) } } return { extractMobilenetV1Params: s, extractPredictionLayerParams: l } } function SD(e) { let t = [], { extractMobilenetV1Params: n, extractPredictionLayerParams: a } = bge(e, t), r = e["Output/extra_dim"]; if (t.push({ originalPath: "Output/extra_dim", paramPath: "output_layer/extra_dim" }), !Wr(r)) throw new Error(`expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have ${r}`); let s = { mobilenetv1: n(), prediction_layer: a(), output_layer: { extra_dim: r } }; return En(e, t), { params: s, paramMappings: t } } function Oa(e, t, n) { return O(() => { let a = $t(e, t.filters, n, "same"); return a = X(a, t.batch_norm_offset), an(a, 0, 6) }) } var yge = .0010000000474974513; function xge(e, t, n) { return O(() => { let a = _s(e, t.filters, n, "same"); return a = Es(a, t.batch_norm_mean, t.batch_norm_variance, t.batch_norm_offset, t.batch_norm_scale, yge), an(a, 0, 6) }) } function vge(e) { return [2, 4, 6, 12].some(t => t === e) ? [2, 2] : [1, 1] } function ND(e, t) { return O(() => { let n, a = Oa(e, t.conv_0, [2, 2]); if ([t.conv_1, t.conv_2, t.conv_3, t.conv_4, t.conv_5, t.conv_6, t.conv_7, t.conv_8, t.conv_9, t.conv_10, t.conv_11, t.conv_12, t.conv_13].forEach((s, i) => { let o = i + 1, l = vge(o); a = xge(a, s.depthwise_conv, l), a = Oa(a, s.pointwise_conv, [1, 1]), o === 11 && (n = a) }), n === null) throw new Error("mobileNetV1 - output of conv layer 11 is null"); return { out: a, conv11: n } }) } function wge(e, t, n) { let a = e.arraySync(), r = Math.min(a[t][0], a[t][2]), s = Math.min(a[t][1], a[t][3]), i = Math.max(a[t][0], a[t][2]), o = Math.max(a[t][1], a[t][3]), l = Math.min(a[n][0], a[n][2]), u = Math.min(a[n][1], a[n][3]), p = Math.max(a[n][0], a[n][2]), d = Math.max(a[n][1], a[n][3]), c = (i - r) * (o - s), h = (p - l) * (d - u); if (c <= 0 || h <= 0) return 0; let m = Math.max(r, l), f = Math.max(s, u), g = Math.min(i, p), b = Math.min(o, d), y = Math.max(g - m, 0) * Math.max(b - f, 0); return y / (c + h - y) } function TD(e, t, n, a, r) { let s = e.shape[0], i = Math.min(n, s), o = t.map((p, d) => ({ score: p, boxIndex: d })).filter(p => p.score > r).sort((p, d) => d.score - p.score), l = p => p <= a ? 1 : 0, u = []; return o.forEach(p => { if (u.length >= i) return; let d = p.score; for (let c = u.length - 1; c >= 0; --c) { let h = wge(e, p.boxIndex, u[c]); if (h !== 0 && (p.score *= l(h), p.score <= r)) break } d === p.score && u.push(p.boxIndex) }), u } function kge(e) { let t = dt(De(e, [1, 0])), n = [pe(t[2], t[0]), pe(t[3], t[1])], a = [X(t[0], he(n[0], 2)), X(t[1], he(n[1], 2))]; return { sizes: n, centers: a } } function Ige(e, t) { let { sizes: n, centers: a } = kge(e), r = dt(De(t, [1, 0])), s = he(z(mn(he(r[2], 5)), n[0]), 2), i = X(z(he(r[0], 10), n[0]), a[0]), o = he(z(mn(he(r[3], 5)), n[1]), 2), l = X(z(he(r[1], 10), n[1]), a[1]); return De(Ft([pe(i, s), pe(l, o), X(i, s), X(l, o)]), [1, 0]) } function CD(e, t, n) { return O(() => { let a = e.shape[0], r = Ige(W(Mn(n.extra_dim, [a, 1, 1]), [-1, 4]), W(e, [-1, 4])); r = W(r, [a, r.shape[0] / a, 4]); let s = ma(Ve(t, [0, 0, 1], [-1, -1, -1])), i = Ve(s, [0, 0, 0], [-1, -1, 1]); i = W(i, [a, i.shape[1]]); let o = dt(r), l = dt(i); return { boxes: o, scores: l } }) } function xl(e, t) { return O(() => { let n = e.shape[0], a = W(fl(e, t.box_encoding_predictor), [n, -1, 1, 4]), r = W(fl(e, t.class_predictor), [n, -1, 3]); return { boxPredictionEncoding: a, classPrediction: r } }) } function ED(e, t, n) { return O(() => { let a = Oa(e, n.conv_0, [1, 1]), r = Oa(a, n.conv_1, [2, 2]), s = Oa(r, n.conv_2, [1, 1]), i = Oa(s, n.conv_3, [2, 2]), o = Oa(i, n.conv_4, [1, 1]), l = Oa(o, n.conv_5, [2, 2]), u = Oa(l, n.conv_6, [1, 1]), p = Oa(u, n.conv_7, [2, 2]), d = xl(t, n.box_predictor_0), c = xl(e, n.box_predictor_1), h = xl(r, n.box_predictor_2), m = xl(i, n.box_predictor_3), f = xl(l, n.box_predictor_4), g = xl(p, n.box_predictor_5), b = et([d.boxPredictionEncoding, c.boxPredictionEncoding, h.boxPredictionEncoding, m.boxPredictionEncoding, f.boxPredictionEncoding, g.boxPredictionEncoding], 1), y = et([d.classPrediction, c.classPrediction, h.classPrediction, m.classPrediction, f.classPrediction, g.classPrediction], 1); return { boxPredictions: b, classPredictions: y } }) } var Ia = class { constructor({ minConfidence: t, maxResults: n } = {}) { this._name = "SsdMobilenetv1Options"; if (this._minConfidence = t || .5, this._maxResults = n || 100, typeof this._minConfidence != "number" || this._minConfidence <= 0 || this._minConfidence >= 1) throw new Error(`${this._name} - expected minConfidence to be a number between 0 and 1`); if (typeof this._maxResults != "number") throw new Error(`${this._name} - expected maxResults to be a number`) } get minConfidence() { return this._minConfidence } get maxResults() { return this._maxResults } }; var zs = class extends un { constructor() { super("SsdMobilenetv1") } forwardInput(t) { let { params: n } = this; if (!n) throw new Error("SsdMobilenetv1 - load model before inference"); return O(() => { let a = re(t.toBatchTensor(512, !1), "float32"), r = pe(he(a, 127.5), 1), s = ND(r, n.mobilenetv1), { boxPredictions: i, classPredictions: o } = ED(s.out, s.conv11, n.prediction_layer); return CD(i, o, n.output_layer) }) } async forward(t) { return this.forwardInput(await vt(t)) } async locateFaces(t, n = {}) { let { maxResults: a, minConfidence: r } = new Ia(n), s = await vt(t), { boxes: i, scores: o } = this.forwardInput(s), l = i[0], u = o[0]; for (let x = 1; x < i.length; x++)i[x].dispose(), o[x].dispose(); let p = Array.from(u.dataSync()), c = TD(l, p, a, .5, r), h = s.getReshapedInputDimensions(0), m = s.inputSize, f = m / h.width, g = m / h.height, b = l.arraySync(), y = c.map(x => { let [v, I] = [Math.max(0, b[x][0]), Math.min(1, b[x][2])].map(_ => _ * g), [N, C] = [Math.max(0, b[x][1]), Math.min(1, b[x][3])].map(_ => _ * f); return new Tt(p[x], new ll(N, v, C - N, I - v), { height: s.getInputHeight(0), width: s.getInputWidth(0) }) }); return l.dispose(), u.dispose(), y } getDefaultModelName() { return "ssd_mobilenetv1_model" } extractParamsFromWeightMap(t) { return SD(t) } extractParams(t) { return ID(t) } }; function _D(e) { let t = new zs; return t.extractWeights(e), t } function Sge(e) { return _D(e) } var Jk = class extends zs { }; var AD = .4, FD = [new Ue(.738768, .874946), new Ue(2.42204, 2.65704), new Ue(4.30971, 7.04493), new Ue(10.246, 4.59428), new Ue(12.6868, 11.8741)], $D = [new Ue(1.603231, 2.094468), new Ue(6.041143, 7.080126), new Ue(2.882459, 3.518061), new Ue(4.266906, 5.178857), new Ue(9.041765, 10.66308)], DD = [117.001, 114.697, 97.404], RD = "tiny_yolov2_model", MD = "tiny_yolov2_separable_conv_model"; var Tg = e => typeof e == "number"; function Qk(e) { if (!e) throw new Error(`invalid config: ${e}`); if (typeof e.withSeparableConvs != "boolean") throw new Error(`config.withSeparableConvs has to be a boolean, have: ${e.withSeparableConvs}`); if (!Tg(e.iouThreshold) || e.iouThreshold < 0 || e.iouThreshold > 1) throw new Error(`config.iouThreshold has to be a number between [0, 1], have: ${e.iouThreshold}`); if (!Array.isArray(e.classes) || !e.classes.length || !e.classes.every(t => typeof t == "string")) throw new Error(`config.classes has to be an array class names: string[], have: ${JSON.stringify(e.classes)}`); if (!Array.isArray(e.anchors) || !e.anchors.length || !e.anchors.map(t => t || {}).every(t => Tg(t.x) && Tg(t.y))) throw new Error(`config.anchors has to be an array of { x: number, y: number }, have: ${JSON.stringify(e.anchors)}`); if (e.meanRgb && (!Array.isArray(e.meanRgb) || e.meanRgb.length !== 3 || !e.meanRgb.every(Tg))) throw new Error(`config.meanRgb has to be an array of shape [number, number, number], have: ${JSON.stringify(e.meanRgb)}`) } function Vp(e) { return O(() => { let t = z(e, ve(.10000000149011612)); return X(Ke(pe(e, t)), t) }) } function Ur(e, t) { return O(() => { let n = va(e, [[0, 0], [1, 1], [1, 1], [0, 0]]); return n = $t(n, t.conv.filters, [1, 1], "valid"), n = pe(n, t.bn.sub), n = z(n, t.bn.truediv), n = X(n, t.conv.bias), Vp(n) }) } function Gr(e, t) { return O(() => { let n = va(e, [[0, 0], [1, 1], [1, 1], [0, 0]]); return n = $s(n, t.depthwise_filter, t.pointwise_filter, [1, 1], "valid"), n = X(n, t.bias), Vp(n) }) } function Nge(e, t) { let n = Mp(e, t); function a(i, o) { let l = qe(e(i)), u = qe(e(i)); return t.push({ paramPath: `${o}/sub` }, { paramPath: `${o}/truediv` }), { sub: l, truediv: u } } function r(i, o, l) { let u = n(i, o, 3, `${l}/conv`), p = a(o, `${l}/bn`); return { conv: u, bn: p } } let s = Op(e, t); return { extractConvParams: n, extractConvWithBatchNormParams: r, extractSeparableConvParams: s } } function OD(e, t, n, a) { let { extractWeights: r, getRemainingWeights: s } = _n(e), i = [], { extractConvParams: o, extractConvWithBatchNormParams: l, extractSeparableConvParams: u } = Nge(r, i), p; if (t.withSeparableConvs) { let [d, c, h, m, f, g, b, y, x] = a, v = t.isFirstLayerConv2d ? o(d, c, 3, "conv0") : u(d, c, "conv0"), I = u(c, h, "conv1"), N = u(h, m, "conv2"), C = u(m, f, "conv3"), _ = u(f, g, "conv4"), F = u(g, b, "conv5"), D = y ? u(b, y, "conv6") : void 0, $ = x ? u(y, x, "conv7") : void 0, S = o(x || y || b, 5 * n, 1, "conv8"); p = { conv0: v, conv1: I, conv2: N, conv3: C, conv4: _, conv5: F, conv6: D, conv7: $, conv8: S } } else { let [d, c, h, m, f, g, b, y, x] = a, v = l(d, c, "conv0"), I = l(c, h, "conv1"), N = l(h, m, "conv2"), C = l(m, f, "conv3"), _ = l(f, g, "conv4"), F = l(g, b, "conv5"), D = l(b, y, "conv6"), $ = l(y, x, "conv7"), S = o(x, 5 * n, 1, "conv8"); p = { conv0: v, conv1: I, conv2: N, conv3: C, conv4: _, conv5: F, conv6: D, conv7: $, conv8: S } } if (s().length !== 0) throw new Error(`weights remaing after extract: ${s().length}`); return { params: p, paramMappings: i } } function Tge(e, t) { let n = ia(e, t); function a(o) { let l = n(`${o}/sub`, 1), u = n(`${o}/truediv`, 1); return { sub: l, truediv: u } } function r(o) { let l = n(`${o}/filters`, 4), u = n(`${o}/bias`, 1); return { filters: l, bias: u } } function s(o) { let l = r(`${o}/conv`), u = a(`${o}/bn`); return { conv: l, bn: u } } let i = Pp(n); return { extractConvParams: r, extractConvWithBatchNormParams: s, extractSeparableConvParams: i } } function PD(e, t) { let n = [], { extractConvParams: a, extractConvWithBatchNormParams: r, extractSeparableConvParams: s } = Tge(e, n), i; if (t.withSeparableConvs) { let o = t.filterSizes && t.filterSizes.length || 9; i = { conv0: t.isFirstLayerConv2d ? a("conv0") : s("conv0"), conv1: s("conv1"), conv2: s("conv2"), conv3: s("conv3"), conv4: s("conv4"), conv5: s("conv5"), conv6: o > 7 ? s("conv6") : void 0, conv7: o > 8 ? s("conv7") : void 0, conv8: a("conv8") } } else i = { conv0: r("conv0"), conv1: r("conv1"), conv2: r("conv2"), conv3: r("conv3"), conv4: r("conv4"), conv5: r("conv5"), conv6: r("conv6"), conv7: r("conv7"), conv8: a("conv8") }; return En(e, n), { params: i, paramMappings: n } } var Ja = class { constructor({ inputSize: t, scoreThreshold: n } = {}) { this._name = "TinyYolov2Options"; if (this._inputSize = t || 416, this._scoreThreshold = n || .5, typeof this._inputSize != "number" || this._inputSize % 32 !== 0) throw new Error(`${this._name} - expected inputSize to be a number divisible by 32`); if (typeof this._scoreThreshold != "number" || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) throw new Error(`${this._name} - expected scoreThreshold to be a number between 0 and 1`) } get inputSize() { return this._inputSize } get scoreThreshold() { return this._scoreThreshold } }; var Cg = class Cg extends un { constructor(t) { super("TinyYolov2"), Qk(t), this._config = t } get config() { return this._config } get withClassScores() { return this.config.withClassScores || this.config.classes.length > 1 } get boxEncodingSize() { return 5 + (this.withClassScores ? this.config.classes.length : 0) } runTinyYolov2(t, n) { let a = Ur(t, n.conv0); return a = Dt(a, [2, 2], [2, 2], "same"), a = Ur(a, n.conv1), a = Dt(a, [2, 2], [2, 2], "same"), a = Ur(a, n.conv2), a = Dt(a, [2, 2], [2, 2], "same"), a = Ur(a, n.conv3), a = Dt(a, [2, 2], [2, 2], "same"), a = Ur(a, n.conv4), a = Dt(a, [2, 2], [2, 2], "same"), a = Ur(a, n.conv5), a = Dt(a, [2, 2], [1, 1], "same"), a = Ur(a, n.conv6), a = Ur(a, n.conv7), fl(a, n.conv8, "valid", !1) } runMobilenet(t, n) { let a = this.config.isFirstLayerConv2d ? Vp(fl(t, n.conv0, "valid", !1)) : Gr(t, n.conv0); return a = Dt(a, [2, 2], [2, 2], "same"), a = Gr(a, n.conv1), a = Dt(a, [2, 2], [2, 2], "same"), a = Gr(a, n.conv2), a = Dt(a, [2, 2], [2, 2], "same"), a = Gr(a, n.conv3), a = Dt(a, [2, 2], [2, 2], "same"), a = Gr(a, n.conv4), a = Dt(a, [2, 2], [2, 2], "same"), a = Gr(a, n.conv5), a = Dt(a, [2, 2], [1, 1], "same"), a = n.conv6 ? Gr(a, n.conv6) : a, a = n.conv7 ? Gr(a, n.conv7) : a, fl(a, n.conv8, "valid", !1) } forwardInput(t, n) { let { params: a } = this; if (!a) throw new Error("TinyYolov2 - load model before inference"); return O(() => { let r = re(t.toBatchTensor(n, !1), "float32"); return r = this.config.meanRgb ? Ya(r, this.config.meanRgb) : r, r = r.div(255), this.config.withSeparableConvs ? this.runMobilenet(r, a) : this.runTinyYolov2(r, a) }) } async forward(t, n) { return this.forwardInput(await vt(t), n) } async detect(t, n = {}) { let { inputSize: a, scoreThreshold: r } = new Ja(n), s = await vt(t), i = await this.forwardInput(s, a), o = O(() => dt(i)[0].expandDims()), l = { width: s.getInputWidth(0), height: s.getInputHeight(0) }, u = await this.extractBoxes(o, s.getReshapedInputDimensions(0), r); i.dispose(), o.dispose(); let p = u.map(g => g.box), d = u.map(g => g.score), c = u.map(g => g.classScore), h = u.map(g => this.config.classes[g.label]); return _k(p.map(g => g.rescale(a)), d, this.config.iouThreshold, !0).map(g => new ol(d[g], c[g], h[g], p[g], l)) } getDefaultModelName() { return "" } extractParamsFromWeightMap(t) { return PD(t, this.config) } extractParams(t) { let n = this.config.filterSizes || Cg.DEFAULT_FILTER_SIZES, a = n ? n.length : void 0; if (a !== 7 && a !== 8 && a !== 9) throw new Error(`TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found ${a} filterSizes in config`); return OD(t, this.config, this.boxEncodingSize, n) } async extractBoxes(t, n, a) { let { width: r, height: s } = n, i = Math.max(r, s), o = i / r, l = i / s, u = t.shape[1], p = this.config.anchors.length, [d, c, h] = O(() => { let b = t.reshape([u, u, p, this.boxEncodingSize]), y = b.slice([0, 0, 0, 0], [u, u, p, 4]), x = b.slice([0, 0, 0, 4], [u, u, p, 1]), v = this.withClassScores ? ja(b.slice([0, 0, 0, 5], [u, u, p, this.config.classes.length]), 3) : ve(0); return [y, x, v] }), m = [], f = await c.array(), g = await d.array(); for (let b = 0; b < u; b++)for (let y = 0; y < u; y++)for (let x = 0; x < p; x++) { let v = zd(f[b][y][x][0]); if (!a || v > a) { let I = (y + zd(g[b][y][x][0])) / u * o, N = (b + zd(g[b][y][x][1])) / u * l, C = Math.exp(g[b][y][x][2]) * this.config.anchors[x].x / u * o, _ = Math.exp(g[b][y][x][3]) * this.config.anchors[x].y / u * l, F = I - C / 2, D = N - _ / 2, $ = { row: b, col: y, anchor: x }, { classScore: S, label: M } = this.withClassScores ? await this.extractPredictedClass(h, $) : { classScore: 1, label: 0 }; m.push({ box: new il(F, D, F + C, D + _), score: v, classScore: v * S, label: M, ...$ }) } } return d.dispose(), c.dispose(), h.dispose(), m } async extractPredictedClass(t, n) { let { row: a, col: r, anchor: s } = n, i = await t.array(); return Array(this.config.classes.length).fill(0).map((o, l) => i[a][r][s][l]).map((o, l) => ({ classScore: o, label: l })).reduce((o, l) => o.classScore > l.classScore ? o : l) } }; Cg.DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024]; var Up = Cg; var vl = class extends Up { constructor(t = !0) { let n = { withSeparableConvs: t, iouThreshold: AD, classes: ["face"], ...t ? { anchors: $D, meanRgb: DD } : { anchors: FD, withClassScores: !0 } }; super(n) } get withSeparableConvs() { return this.config.withSeparableConvs } get anchors() { return this.config.anchors } async locateFaces(t, n) { return (await this.detect(t, n)).map(r => new Tt(r.score, r.relativeBox, { width: r.imageWidth, height: r.imageHeight })) } getDefaultModelName() { return this.withSeparableConvs ? MD : RD } extractParamsFromWeightMap(t) { return super.extractParamsFromWeightMap(t) } }; function Cge(e, t = !0) { let n = new vl(t); return n.extractWeights(e), n } var Zd = class extends Ja { constructor() { super(...arguments); this._name = "TinyFaceDetectorOptions" } }; var Sa = class { async then(t) { return t(await this.run()) } async run() { throw new Error("ComposableTask - run is not implemented") } }; async function wl(e, t, n, a, r = ({ alignedRect: s }) => s) { let s = e.map(l => gl(l) ? r(l) : l.detection), i = a || (t instanceof Ce ? await Rp(t, s) : await Dp(t, s)), o = await n(i); return i.forEach(l => l instanceof Ce && l.dispose()), o } async function Gp(e, t, n, a, r) { return wl([e], t, async s => n(s[0]), a, r) } var LD = .4, zD = [new Ue(1.603231, 2.094468), new Ue(6.041143, 7.080126), new Ue(2.882459, 3.518061), new Ue(4.266906, 5.178857), new Ue(9.041765, 10.66308)], WD = [117.001, 114.697, 97.404]; var kl = class extends Up { constructor() { let t = { withSeparableConvs: !0, iouThreshold: LD, classes: ["face"], anchors: zD, meanRgb: WD, isFirstLayerConv2d: !0, filterSizes: [3, 16, 32, 64, 128, 256, 512] }; super(t) } get anchors() { return this.config.anchors } async locateFaces(t, n) { return (await this.detect(t, n)).map(r => new Tt(r.score, r.relativeBox, { width: r.imageWidth, height: r.imageHeight })) } getDefaultModelName() { return "tiny_face_detector_model" } extractParamsFromWeightMap(t) { return super.extractParamsFromWeightMap(t) } }; var nt = { ssdMobilenetv1: new zs, tinyFaceDetector: new kl, tinyYolov2: new vl, faceLandmark68Net: new bl, faceLandmark68TinyNet: new Xd, faceRecognitionNet: new yl, faceExpressionNet: new jd, ageGenderNet: new Kd }, BD = (e, t) => nt.ssdMobilenetv1.locateFaces(e, t), Ege = (e, t) => nt.tinyFaceDetector.locateFaces(e, t), _ge = (e, t) => nt.tinyYolov2.locateFaces(e, t), VD = e => nt.faceLandmark68Net.detectLandmarks(e), Age = e => nt.faceLandmark68TinyNet.detectLandmarks(e), Fge = e => nt.faceRecognitionNet.computeFaceDescriptor(e), $ge = e => nt.faceExpressionNet.predictExpressions(e), Dge = e => nt.ageGenderNet.predictAgeAndGender(e), UD = e => nt.ssdMobilenetv1.load(e), Rge = e => nt.tinyFaceDetector.load(e), Mge = e => nt.tinyYolov2.load(e), Oge = e => nt.faceLandmark68Net.load(e), Pge = e => nt.faceLandmark68TinyNet.load(e), Lge = e => nt.faceRecognitionNet.load(e), zge = e => nt.faceExpressionNet.load(e), Wge = e => nt.ageGenderNet.load(e), Bge = UD, Vge = BD, Uge = VD; var Eg = class extends Sa { constructor(n, a, r) { super(); this.parentTask = n; this.input = a; this.extractedFaces = r } }, Il = class extends Eg { async run() { let t = await this.parentTask, n = await wl(t, this.input, async a => Promise.all(a.map(r => nt.faceExpressionNet.predictExpressions(r))), this.extractedFaces); return t.map((a, r) => gg(a, n[r])) } withAgeAndGender() { return new Nl(this, this.input) } }, Sl = class extends Eg { async run() { let t = await this.parentTask; if (!t) return; let n = await Gp(t, this.input, a => nt.faceExpressionNet.predictExpressions(a), this.extractedFaces); return gg(t, n) } withAgeAndGender() { return new Tl(this, this.input) } }, Ws = class extends Il { withAgeAndGender() { return new Vs(this, this.input) } withFaceDescriptors() { return new Hr(this, this.input) } }, Bs = class extends Sl { withAgeAndGender() { return new Us(this, this.input) } withFaceDescriptor() { return new qr(this, this.input) } }; var _g = class extends Sa { constructor(n, a, r) { super(); this.parentTask = n; this.input = a; this.extractedFaces = r } }, Nl = class extends _g { async run() { let t = await this.parentTask, n = await wl(t, this.input, async a => Promise.all(a.map(r => nt.ageGenderNet.predictAgeAndGender(r))), this.extractedFaces); return t.map((a, r) => { let { age: s, gender: i, genderProbability: o } = n[r]; return Sg(Ng(a, i, o), s) }) } withFaceExpressions() { return new Il(this, this.input) } }, Tl = class extends _g { async run() { let t = await this.parentTask; if (!t) return; let { age: n, gender: a, genderProbability: r } = await Gp(t, this.input, s => nt.ageGenderNet.predictAgeAndGender(s), this.extractedFaces); return Sg(Ng(t, a, r), n) } withFaceExpressions() { return new Sl(this, this.input) } }, Vs = class extends Nl { withFaceExpressions() { return new Ws(this, this.input) } withFaceDescriptors() { return new Hr(this, this.input) } }, Us = class extends Tl { withFaceExpressions() { return new Bs(this, this.input) } withFaceDescriptor() { return new qr(this, this.input) } }; var Jd = class extends Sa { constructor(n, a) { super(); this.parentTask = n; this.input = a } }, Hr = class extends Jd { async run() { let t = await this.parentTask; return (await wl(t, this.input, a => Promise.all(a.map(r => nt.faceRecognitionNet.computeFaceDescriptor(r))), null, a => a.landmarks.align(null, { useDlibAlignment: !0 }))).map((a, r) => Ig(t[r], a)) } withFaceExpressions() { return new Ws(this, this.input) } withAgeAndGender() { return new Vs(this, this.input) } }, qr = class extends Jd { async run() { let t = await this.parentTask; if (!t) return; let n = await Gp(t, this.input, a => nt.faceRecognitionNet.computeFaceDescriptor(a), null, a => a.landmarks.align(null, { useDlibAlignment: !0 })); return Ig(t, n) } withFaceExpressions() { return new Bs(this, this.input) } withAgeAndGender() { return new Us(this, this.input) } }; var Qd = class extends Sa { constructor(n, a, r) { super(); this.parentTask = n; this.input = a; this.useTinyLandmarkNet = r } get landmarkNet() { return this.useTinyLandmarkNet ? nt.faceLandmark68TinyNet : nt.faceLandmark68Net } }, eh = class extends Qd { async run() { let t = await this.parentTask, n = t.map(i => i.detection), a = this.input instanceof Ce ? await Rp(this.input, n) : await Dp(this.input, n), r = await Promise.all(a.map(i => this.landmarkNet.detectLandmarks(i))); return a.forEach(i => i instanceof Ce && i.dispose()), t.filter((i, o) => r[o]).map((i, o) => Wp(i, r[o])) } withFaceExpressions() { return new Ws(this, this.input) } withAgeAndGender() { return new Vs(this, this.input) } withFaceDescriptors() { return new Hr(this, this.input) } }, th = class extends Qd { async run() { let t = await this.parentTask; if (!t) return; let { detection: n } = t, a = this.input instanceof Ce ? await Rp(this.input, [n]) : await Dp(this.input, [n]), r = await this.landmarkNet.detectLandmarks(a[0]); return a.forEach(s => s instanceof Ce && s.dispose()), Wp(t, r) } withFaceExpressions() { return new Bs(this, this.input) } withAgeAndGender() { return new Us(this, this.input) } withFaceDescriptor() { return new qr(this, this.input) } }; var nh = class extends Sa { constructor(n, a = new Ia) { super(); this.input = n; this.options = a } }, Hp = class extends nh { async run() { let { input: t, options: n } = this, a; if (n instanceof Zd) a = nt.tinyFaceDetector.locateFaces(t, n); else if (n instanceof Ia) a = nt.ssdMobilenetv1.locateFaces(t, n); else if (n instanceof Ja) a = nt.tinyYolov2.locateFaces(t, n); else throw new Error("detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | TinyYolov2Options"); return a } runAndExtendWithFaceDetections() { return new Promise((t, n) => { this.run().then(a => t(a.map(r => pl({}, r)))).catch(a => n(a)) }) } withFaceLandmarks(t = !1) { return new eh(this.runAndExtendWithFaceDetections(), this.input, t) } withFaceExpressions() { return new Il(this.runAndExtendWithFaceDetections(), this.input) } withAgeAndGender() { return new Nl(this.runAndExtendWithFaceDetections(), this.input) } }, ah = class extends nh { async run() { let t = await new Hp(this.input, this.options), n = t[0]; return t.forEach(a => { a.score > n.score && (n = a) }), n } runAndExtendWithFaceDetection() { return new Promise(async t => { let n = await this.run(); t(n ? pl({}, n) : void 0) }) } withFaceLandmarks(t = !1) { return new th(this.runAndExtendWithFaceDetection(), this.input, t) } withFaceExpressions() { return new Sl(this.runAndExtendWithFaceDetection(), this.input) } withAgeAndGender() { return new Tl(this.runAndExtendWithFaceDetection(), this.input) } }; function Gge(e, t = new Ia) { return new ah(e, t) } function Ag(e, t = new Ia) { return new Hp(e, t) } async function GD(e, t) { return Ag(e, new Ia(t ? { minConfidence: t } : {})).withFaceLandmarks().withFaceDescriptors() } async function Hge(e, t = {}) { return Ag(e, new Ja(t)).withFaceLandmarks().withFaceDescriptors() } var qge = GD; function eI(e, t) { if (e.length !== t.length) throw new Error("euclideanDistance: arr1.length !== arr2.length"); let n = Array.from(e), a = Array.from(t); return Math.sqrt(n.map((r, s) => r - a[s]).reduce((r, s) => r + s * s, 0)) } var tI = class e { constructor(t, n = .6) { this._distanceThreshold = n; let a = Array.isArray(t) ? t : [t]; if (!a.length) throw new Error("FaceRecognizer.constructor - expected atleast one input"); let r = 1, s = () => `person ${r++}`; this._labeledDescriptors = a.map(i => { if (i instanceof Ls) return i; if (i instanceof Float32Array) return new Ls(s(), [i]); if (i.descriptor && i.descriptor instanceof Float32Array) return new Ls(s(), [i.descriptor]); throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>") }) } get labeledDescriptors() { return this._labeledDescriptors } get distanceThreshold() { return this._distanceThreshold } computeMeanDistance(t, n) { return n.map(a => eI(a, t)).reduce((a, r) => a + r, 0) / (n.length || 1) } matchDescriptor(t) { return this.labeledDescriptors.map(({ descriptors: n, label: a }) => new Ap(a, this.computeMeanDistance(t, n))).reduce((n, a) => n.distance < a.distance ? n : a) } findBestMatch(t) { let n = this.matchDescriptor(t); return n.distance < this._distanceThreshold ? n : new Ap("unknown", n.distance) } toJSON() { return { distanceThreshold: this._distanceThreshold, labeledDescriptors: this._labeledDescriptors.map(t => t.toJSON()) } } static fromJSON(t) { let n = t.labeledDescriptors.map(a => Ls.fromJSON(a)); return new e(n, t.distanceThreshold) } }; function jge(e) { let t = new kl; return t.extractWeights(e), t } function HD(e, t) { let { width: n, height: a } = new Un(t.width, t.height); if (n <= 0 || a <= 0) throw new Error(`resizeResults - invalid dimensions: ${JSON.stringify({ width: n, height: a })}`); if (Array.isArray(e)) return e.map(r => HD(r, { width: n, height: a })); if (gl(e)) { let r = e.detection.forSize(n, a), s = e.unshiftedLandmarks.forSize(r.box.width, r.box.height); return Wp(pl(e, r), s) } return yr(e) ? pl(e, e.detection.forSize(n, a)) : e instanceof sa || e instanceof Tt ? e.forSize(n, a) : e } var Kge = cD; return AR(Xge);
})();